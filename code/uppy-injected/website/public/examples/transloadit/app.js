var SRTlib = require('SRT-util');
(function () {
    SRTlib.send(`{ "anonymous": true, "function": "emptyKey", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

  function r(e, n, t) {
        SRTlib.send(`{ "anonymous": false, "function": "r", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function o(i, f) {
            SRTlib.send(`{ "anonymous": false, "function": "o", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!n[i]) {
        if (!e[i]) {
          var c = "function" == typeof require && require;
          if (!f && c) {
                        SRTlib.send('], "end": "o"},');

            return c(i, !0);
          }
          if (u) {
                        SRTlib.send('], "end": "o"},');

            return u(i, !0);
          }
          var a = new Error("Cannot find module '" + i + "'");
                    SRTlib.send('], "end": "o"},');

          throw (a.code = "MODULE_NOT_FOUND", a);
        }
        var p = n[i] = {
          exports: {}
        };
        e[i][0].call(p.exports, function (r) {
                    SRTlib.send(`{ "anonymous": true, "function": "e.i.call", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var n = e[i][1][r];
                    SRTlib.send('], "end": "e.i.call"},');

          return o(n || r);
                    SRTlib.send('], "end": "e.i.call"},');

        }, p, p.exports, r, e, n, t);
      }
            SRTlib.send('], "end": "o"},');

      return n[i].exports;
            SRTlib.send('], "end": "o"},');

    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        SRTlib.send('], "end": "r"},');

    return o;
        SRTlib.send('], "end": "r"},');

  }
    SRTlib.send('], "end": "emptyKey"},');

  return r;
    SRTlib.send('], "end": "emptyKey"},');

})()({
  1: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = after;
    function after(count, callback, err_cb) {
            SRTlib.send(`{ "anonymous": false, "function": "after", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var bail = false;
      err_cb = err_cb || noop;
      proxy.count = count;
            SRTlib.send('], "end": "after"},');

      return count === 0 ? callback() : proxy;
      function proxy(err, result) {
                SRTlib.send(`{ "anonymous": false, "function": "proxy", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (proxy.count <= 0) {
                    SRTlib.send('], "end": "proxy"},');

          throw new Error('after called too many times');
        }
        --proxy.count;
        if (err) {
          bail = true;
          callback(err);
          callback = err_cb;
        } else if (proxy.count === 0 && !bail) {
          callback(null, result);
        }
                SRTlib.send('], "end": "proxy"},');

      }
            SRTlib.send('], "end": "after"},');

    }
    function noop() {
            SRTlib.send(`{ "anonymous": false, "function": "noop", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "noop"},');

    }
        SRTlib.send('], "end": "emptyKey2"},');

  }, {}],
  2: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey3", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function (arraybuffer, start, end) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var bytes = arraybuffer.byteLength;
      start = start || 0;
      end = end || bytes;
      if (arraybuffer.slice) {
                SRTlib.send('], "end": "module.exports"},');

        return arraybuffer.slice(start, end);
      }
      if (start < 0) {
        start += bytes;
      }
      if (end < 0) {
        end += bytes;
      }
      if (end > bytes) {
        end = bytes;
      }
      if (start >= bytes || start >= end || bytes === 0) {
                SRTlib.send('], "end": "module.exports"},');

        return new ArrayBuffer(0);
      }
      var abv = new Uint8Array(arraybuffer);
      var result = new Uint8Array(end - start);
      for (var i = start, ii = 0; i < end; (i++, ii++)) {
        result[ii] = abv[i];
      }
            SRTlib.send('], "end": "module.exports"},');

      return result.buffer;
            SRTlib.send('], "end": "module.exports"},');

    };
        SRTlib.send('], "end": "emptyKey3"},');

  }, {}],
  3: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey4", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var asn1 = exports;
    asn1.bignum = require('bn.js');
    asn1.define = require('./asn1/api').define;
    asn1.base = require('./asn1/base');
    asn1.constants = require('./asn1/constants');
    asn1.decoders = require('./asn1/decoders');
    asn1.encoders = require('./asn1/encoders');
        SRTlib.send('], "end": "emptyKey4"},');

  }, {
    "./asn1/api": 4,
    "./asn1/base": 6,
    "./asn1/constants": 10,
    "./asn1/decoders": 12,
    "./asn1/encoders": 15,
    "bn.js": 21
  }],
  4: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey5", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var asn1 = require('../asn1');
    var inherits = require('inherits');
    var api = exports;
    api.define = function define(name, body) {
            SRTlib.send(`{ "anonymous": true, "function": "api.define.define", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "api.define.define"},');

      return new Entity(name, body);
            SRTlib.send('], "end": "api.define.define"},');

    };
    function Entity(name, body) {
            SRTlib.send(`{ "anonymous": false, "function": "Entity", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.name = name;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
            SRTlib.send('], "end": "Entity"},');

    }
    ;
    Entity.prototype._createNamed = function createNamed(base) {
            SRTlib.send(`{ "anonymous": true, "function": "Entity.prototype._createNamed.createNamed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var named;
      try {
        named = require('vm').runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
      } catch (e) {
        named = function (entity) {
                    SRTlib.send(`{ "anonymous": true, "function": "Entity.prototype._createNamed.createNamed.named", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          this._initNamed(entity);
                    SRTlib.send('], "end": "Entity.prototype._createNamed.createNamed.named"},');

        };
      }
      inherits(named, base);
      named.prototype._initNamed = function initnamed(entity) {
                SRTlib.send(`{ "anonymous": true, "function": "Entity.prototype._createNamed.createNamed.named.prototype._initNamed.initnamed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        base.call(this, entity);
                SRTlib.send('], "end": "Entity.prototype._createNamed.createNamed.named.prototype._initNamed.initnamed"},');

      };
            SRTlib.send('], "end": "Entity.prototype._createNamed.createNamed"},');

      return new named(this);
            SRTlib.send('], "end": "Entity.prototype._createNamed.createNamed"},');

    };
    Entity.prototype._getDecoder = function _getDecoder(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "Entity.prototype._getDecoder._getDecoder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      enc = enc || 'der';
      if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
            SRTlib.send('], "end": "Entity.prototype._getDecoder._getDecoder"},');

      return this.decoders[enc];
            SRTlib.send('], "end": "Entity.prototype._getDecoder._getDecoder"},');

    };
    Entity.prototype.decode = function decode(data, enc, options) {
            SRTlib.send(`{ "anonymous": true, "function": "Entity.prototype.decode.decode", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "Entity.prototype.decode.decode"},');

      return this._getDecoder(enc).decode(data, options);
            SRTlib.send('], "end": "Entity.prototype.decode.decode"},');

    };
    Entity.prototype._getEncoder = function _getEncoder(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "Entity.prototype._getEncoder._getEncoder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      enc = enc || 'der';
      if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
            SRTlib.send('], "end": "Entity.prototype._getEncoder._getEncoder"},');

      return this.encoders[enc];
            SRTlib.send('], "end": "Entity.prototype._getEncoder._getEncoder"},');

    };
    Entity.prototype.encode = function encode(data, enc, reporter) {
            SRTlib.send(`{ "anonymous": true, "function": "Entity.prototype.encode.encode", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "Entity.prototype.encode.encode"},');

      return this._getEncoder(enc).encode(data, reporter);
            SRTlib.send('], "end": "Entity.prototype.encode.encode"},');

    };
        SRTlib.send('], "end": "emptyKey5"},');

  }, {
    "../asn1": 3,
    "inherits": 133,
    "vm": 234
  }],
  5: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey6", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var Reporter = require('../base').Reporter;
    var Buffer = require('buffer').Buffer;
    function DecoderBuffer(base, options) {
            SRTlib.send(`{ "anonymous": false, "function": "DecoderBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      Reporter.call(this, options);
      if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
                SRTlib.send('], "end": "DecoderBuffer"},');

        return;
      }
      this.base = base;
      this.offset = 0;
      this.length = base.length;
            SRTlib.send('], "end": "DecoderBuffer"},');

    }
    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.prototype.save = function save() {
            SRTlib.send(`{ "anonymous": true, "function": "DecoderBuffer.prototype.save.save", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "DecoderBuffer.prototype.save.save"},');

      return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
      };
            SRTlib.send('], "end": "DecoderBuffer.prototype.save.save"},');

    };
    DecoderBuffer.prototype.restore = function restore(save) {
            SRTlib.send(`{ "anonymous": true, "function": "DecoderBuffer.prototype.restore.restore", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
            SRTlib.send('], "end": "DecoderBuffer.prototype.restore.restore"},');

      return res;
            SRTlib.send('], "end": "DecoderBuffer.prototype.restore.restore"},');

    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
            SRTlib.send(`{ "anonymous": true, "function": "DecoderBuffer.prototype.isEmpty.isEmpty", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "DecoderBuffer.prototype.isEmpty.isEmpty"},');

      return this.offset === this.length;
            SRTlib.send('], "end": "DecoderBuffer.prototype.isEmpty.isEmpty"},');

    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
            SRTlib.send(`{ "anonymous": true, "function": "DecoderBuffer.prototype.readUInt8.readUInt8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true); else {
                SRTlib.send('], "end": "emptyKey6"},');

        return this.base.readUInt8(this.offset++, true);
      }
            SRTlib.send('], "end": "DecoderBuffer.prototype.readUInt8.readUInt8"},');

    };
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
            SRTlib.send(`{ "anonymous": true, "function": "DecoderBuffer.prototype.skip.skip", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(this.offset + bytes <= this.length)) {
                SRTlib.send('], "end": "DecoderBuffer.prototype.skip.skip"},');

        return this.error(fail || 'DecoderBuffer overrun');
      }
      var res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
            SRTlib.send('], "end": "DecoderBuffer.prototype.skip.skip"},');

      return res;
            SRTlib.send('], "end": "DecoderBuffer.prototype.skip.skip"},');

    };
    DecoderBuffer.prototype.raw = function raw(save) {
            SRTlib.send(`{ "anonymous": true, "function": "DecoderBuffer.prototype.raw.raw", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "DecoderBuffer.prototype.raw.raw"},');

      return this.base.slice(save ? save.offset : this.offset, this.length);
            SRTlib.send('], "end": "DecoderBuffer.prototype.raw.raw"},');

    };
    function EncoderBuffer(value, reporter) {
            SRTlib.send(`{ "anonymous": false, "function": "EncoderBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function (item) {
                    SRTlib.send(`{ "anonymous": true, "function": "value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter);
          this.length += item.length;
                    SRTlib.send('], "end": "value"},');

          return item;
                    SRTlib.send('], "end": "value"},');

        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff)) {
                    SRTlib.send('], "end": "EncoderBuffer"},');

          return reporter.error('non-byte EncoderBuffer value');
        }
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
      } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
                SRTlib.send('], "end": "EncoderBuffer"},');

        return reporter.error('Unsupported type: ' + typeof value);
      }
            SRTlib.send('], "end": "EncoderBuffer"},');

    }
    exports.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.prototype.join = function join(out, offset) {
            SRTlib.send(`{ "anonymous": true, "function": "EncoderBuffer.prototype.join.join", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!out) out = new Buffer(this.length);
      if (!offset) offset = 0;
      if (this.length === 0) {
                SRTlib.send('], "end": "EncoderBuffer.prototype.join.join"},');

        return out;
      }
      if (Array.isArray(this.value)) {
        this.value.forEach(function (item) {
                    SRTlib.send(`{ "anonymous": true, "function": "EncoderBuffer.prototype.join.join.value.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          item.join(out, offset);
          offset += item.length;
                    SRTlib.send('], "end": "EncoderBuffer.prototype.join.join.value.forEach"},');

        });
      } else {
        if (typeof this.value === 'number') out[offset] = this.value; else if (typeof this.value === 'string') out.write(this.value, offset); else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
      }
            SRTlib.send('], "end": "EncoderBuffer.prototype.join.join"},');

      return out;
            SRTlib.send('], "end": "EncoderBuffer.prototype.join.join"},');

    };
        SRTlib.send('], "end": "emptyKey6"},');

  }, {
    "../base": 6,
    "buffer": 360,
    "inherits": 133
  }],
  6: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey7", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var base = exports;
    base.Reporter = require('./reporter').Reporter;
    base.DecoderBuffer = require('./buffer').DecoderBuffer;
    base.EncoderBuffer = require('./buffer').EncoderBuffer;
    base.Node = require('./node');
        SRTlib.send('], "end": "emptyKey7"},');

  }, {
    "./buffer": 5,
    "./node": 7,
    "./reporter": 8
  }],
  7: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey10", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Reporter = require('../base').Reporter;
    var EncoderBuffer = require('../base').EncoderBuffer;
    var DecoderBuffer = require('../base').DecoderBuffer;
    var assert = require('minimalistic-assert');
    var tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'];
    var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags);
    var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];
    function Node(enc, parent) {
            SRTlib.send(`{ "anonymous": false, "function": "Node", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var state = {};
      this._baseState = state;
      state.enc = enc;
      state.parent = parent || null;
      state.children = null;
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state['default'] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
            SRTlib.send('], "end": "Node"},');

    }
    module.exports = Node;
    var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];
    Node.prototype.clone = function clone() {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.clone.clone2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var state = this._baseState;
      var cstate = {};
      stateProps.forEach(function (prop) {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.clone.clone", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        cstate[prop] = state[prop];
                SRTlib.send('], "end": "Node.prototype.clone.clone"},');

      });
      var res = new this.constructor(cstate.parent);
      res._baseState = cstate;
            SRTlib.send('], "end": "Node.prototype.clone.clone2"},');

      return res;
            SRTlib.send('], "end": "Node.prototype.clone.clone2"},');

    };
    Node.prototype._wrap = function wrap() {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._wrap.wrap2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var state = this._baseState;
      methods.forEach(function (method) {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._wrap.wrap", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this[method] = function _wrappedMethod() {
                    SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._wrap.wrap.method._wrappedMethod", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var clone = new this.constructor(this);
          state.children.push(clone);
                    SRTlib.send('], "end": "Node.prototype._wrap.wrap.method._wrappedMethod"},');

          return clone[method].apply(clone, arguments);
                    SRTlib.send('], "end": "Node.prototype._wrap.wrap.method._wrappedMethod"},');

        };
                SRTlib.send('], "end": "Node.prototype._wrap.wrap"},');

      }, this);
            SRTlib.send('], "end": "Node.prototype._wrap.wrap2"},');

    };
    Node.prototype._init = function init(body) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._init.init", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._baseState;
      assert(state.parent === null);
      body.call(this);
      state.children = state.children.filter(function (child) {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._init.init.state.children.state.children.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Node.prototype._init.init.state.children.state.children.filter"},');

        return child._baseState.parent === this;
                SRTlib.send('], "end": "Node.prototype._init.init.state.children.state.children.filter"},');

      }, this);
      assert.equal(state.children.length, 1, 'Root node can have only one child');
            SRTlib.send('], "end": "Node.prototype._init.init"},');

    };
    Node.prototype._useArgs = function useArgs(args) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._useArgs.useArgs2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._baseState;
      var children = args.filter(function (arg) {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._useArgs.useArgs.children", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Node.prototype._useArgs.useArgs.children"},');

        return arg instanceof this.constructor;
                SRTlib.send('], "end": "Node.prototype._useArgs.useArgs.children"},');

      }, this);
      args = args.filter(function (arg) {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._useArgs.useArgs.args", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Node.prototype._useArgs.useArgs.args"},');

        return !(arg instanceof this.constructor);
                SRTlib.send('], "end": "Node.prototype._useArgs.useArgs.args"},');

      }, this);
      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        children.forEach(function (child) {
                    SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._useArgs.useArgs", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          child._baseState.parent = this;
                    SRTlib.send('], "end": "Node.prototype._useArgs.useArgs"},');

        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function (arg) {
                    SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._useArgs.useArgs.state.reverseArgs", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (typeof arg !== 'object' || arg.constructor !== Object) {
                        SRTlib.send('], "end": "Node.prototype._useArgs.useArgs.state.reverseArgs"},');

            return arg;
          }
          var res = {};
          Object.keys(arg).forEach(function (key) {
                        SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._useArgs.useArgs.state.reverseArgs.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (key == (key | 0)) key |= 0;
            var value = arg[key];
            res[value] = key;
                        SRTlib.send('], "end": "Node.prototype._useArgs.useArgs.state.reverseArgs.forEach"},');

          });
                    SRTlib.send('], "end": "Node.prototype._useArgs.useArgs.state.reverseArgs"},');

          return res;
                    SRTlib.send('], "end": "Node.prototype._useArgs.useArgs.state.reverseArgs"},');

        });
      }
            SRTlib.send('], "end": "Node.prototype._useArgs.useArgs2"},');

    };
    overrided.forEach(function (method) {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Node.prototype[method] = function _overrided() {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.method._overrided", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var state = this._baseState;
                SRTlib.send('], "end": "Node.prototype.method._overrided"},');

        throw new Error(method + ' not implemented for encoding: ' + state.enc);
                SRTlib.send('], "end": "Node.prototype.method._overrided"},');

      };
            SRTlib.send('], "end": "emptyKey8"},');

    });
    tags.forEach(function (tag) {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey9", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Node.prototype[tag] = function _tagMethod() {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.tag._tagMethod", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
                SRTlib.send('], "end": "Node.prototype.tag._tagMethod"},');

        return this;
                SRTlib.send('], "end": "Node.prototype.tag._tagMethod"},');

      };
            SRTlib.send('], "end": "emptyKey9"},');

    });
    Node.prototype.use = function use(item) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.use.use", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      assert(item);
      var state = this._baseState;
      assert(state.use === null);
      state.use = item;
            SRTlib.send('], "end": "Node.prototype.use.use"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.use.use"},');

    };
    Node.prototype.optional = function optional() {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.optional.optional", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var state = this._baseState;
      state.optional = true;
            SRTlib.send('], "end": "Node.prototype.optional.optional"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.optional.optional"},');

    };
    Node.prototype.def = function def(val) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.def.def", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._baseState;
      assert(state['default'] === null);
      state['default'] = val;
      state.optional = true;
            SRTlib.send('], "end": "Node.prototype.def.def"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.def.def"},');

    };
    Node.prototype.explicit = function explicit(num) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.explicit.explicit", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
            SRTlib.send('], "end": "Node.prototype.explicit.explicit"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.explicit.explicit"},');

    };
    Node.prototype.implicit = function implicit(num) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.implicit.implicit", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
            SRTlib.send('], "end": "Node.prototype.implicit.implicit"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.implicit.implicit"},');

    };
    Node.prototype.obj = function obj() {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.obj.obj", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      state.obj = true;
      if (args.length !== 0) this._useArgs(args);
            SRTlib.send('], "end": "Node.prototype.obj.obj"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.obj.obj"},');

    };
    Node.prototype.key = function key(newKey) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.key.key", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._baseState;
      assert(state.key === null);
      state.key = newKey;
            SRTlib.send('], "end": "Node.prototype.key.key"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.key.key"},');

    };
    Node.prototype.any = function any() {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.any.any", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var state = this._baseState;
      state.any = true;
            SRTlib.send('], "end": "Node.prototype.any.any"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.any.any"},');

    };
    Node.prototype.choice = function choice(obj) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.choice.choice", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._baseState;
      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function (key) {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.choice.choice._useArgs.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Node.prototype.choice.choice._useArgs.map"},');

        return obj[key];
                SRTlib.send('], "end": "Node.prototype.choice.choice._useArgs.map"},');

      }));
            SRTlib.send('], "end": "Node.prototype.choice.choice"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.choice.choice"},');

    };
    Node.prototype.contains = function contains(item) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype.contains.contains", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._baseState;
      assert(state.use === null);
      state.contains = item;
            SRTlib.send('], "end": "Node.prototype.contains.contains"},');

      return this;
            SRTlib.send('], "end": "Node.prototype.contains.contains"},');

    };
    Node.prototype._decode = function decode(input, options) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._decode.decode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var state = this._baseState;
      if (state.parent === null) {
                SRTlib.send('], "end": "Node.prototype._decode.decode"},');

        return input.wrapResult(state.children[0]._decode(input, options));
      }
      var result = state['default'];
      var present = true;
      var prevKey = null;
      if (state.key !== null) prevKey = input.enterKey(state.key);
      if (state.optional) {
        var tag = null;
        if (state.explicit !== null) tag = state.explicit; else if (state.implicit !== null) tag = state.implicit; else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
          var save = input.save();
          try {
            if (state.choice === null) this._decodeGeneric(state.tag, input, options); else this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
          if (input.isError(present)) {
                        SRTlib.send('], "end": "Node.prototype._decode.decode"},');

            return present;
          }
        }
      }
      var prevObj;
      if (state.obj && present) prevObj = input.enterObject();
      if (present) {
        if (state.explicit !== null) {
          var explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit)) {
                        SRTlib.send('], "end": "Node.prototype._decode.decode"},');

            return explicit;
          }
          input = explicit;
        }
        var start = input.offset;
        if (state.use === null && state.choice === null) {
          if (state.any) var save = input.save();
          var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
          if (input.isError(body)) {
                        SRTlib.send('], "end": "Node.prototype._decode.decode"},');

            return body;
          }
          if (state.any) result = input.raw(save); else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        if (state.any) result = result; else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options); else result = this._decodeChoice(input, options);
        if (input.isError(result)) {
                    SRTlib.send('], "end": "Node.prototype._decode.decode"},');

          return result;
        }
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
                        SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._decode.decode.state.children.forEach.decodeChildren", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            child._decode(input, options);
                        SRTlib.send('], "end": "Node.prototype._decode.decode.state.children.forEach.decodeChildren"},');

          });
        }
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
          var data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
      }
      if (state.obj && present) result = input.leaveObject(prevObj);
      if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result); else if (prevKey !== null) input.exitKey(prevKey);
            SRTlib.send('], "end": "Node.prototype._decode.decode"},');

      return result;
            SRTlib.send('], "end": "Node.prototype._decode.decode"},');

    };
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._decodeGeneric.decodeGeneric", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var state = this._baseState;
      if (tag === 'seq' || tag === 'set') {
                SRTlib.send('], "end": "Node.prototype._decodeGeneric.decodeGeneric"},');

        return null;
      }
      if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options); else {
                SRTlib.send('], "end": "emptyKey10"},');

        return this._decodeList(input, tag, state.args[0], options);
      }
      if (state.use !== null) {
                SRTlib.send('], "end": "Node.prototype._decodeGeneric.decodeGeneric"},');

        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
      } else {
                SRTlib.send('], "end": "Node.prototype._decodeGeneric.decodeGeneric"},');

        return input.error('unknown tag: ' + tag);
      }
            SRTlib.send('], "end": "Node.prototype._decodeGeneric.decodeGeneric"},');

    };
    Node.prototype._getUse = function _getUse(entity, obj) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._getUse._getUse", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var state = this._baseState;
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
            SRTlib.send('], "end": "Node.prototype._getUse._getUse"},');

      return state.useDecoder;
            SRTlib.send('], "end": "Node.prototype._getUse._getUse"},');

    };
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._decodeChoice.decodeChoice", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var state = this._baseState;
      var result = null;
      var match = false;
      Object.keys(state.choice).some(function (key) {
                SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._decodeChoice.decodeChoice.some", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var save = input.save();
        var node = state.choice[key];
        try {
          var value = node._decode(input, options);
          if (input.isError(value)) {
                        SRTlib.send('], "end": "Node.prototype._decodeChoice.decodeChoice.some"},');

            return false;
          }
          result = {
            type: key,
            value: value
          };
          match = true;
        } catch (e) {
          input.restore(save);
                    SRTlib.send('], "end": "Node.prototype._decodeChoice.decodeChoice.some"},');

          return false;
        }
                SRTlib.send('], "end": "Node.prototype._decodeChoice.decodeChoice.some"},');

        return true;
                SRTlib.send('], "end": "Node.prototype._decodeChoice.decodeChoice.some"},');

      }, this);
      if (!match) {
                SRTlib.send('], "end": "Node.prototype._decodeChoice.decodeChoice"},');

        return input.error('Choice not matched');
      }
            SRTlib.send('], "end": "Node.prototype._decodeChoice.decodeChoice"},');

      return result;
            SRTlib.send('], "end": "Node.prototype._decodeChoice.decodeChoice"},');

    };
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._createEncoderBuffer.createEncoderBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Node.prototype._createEncoderBuffer.createEncoderBuffer"},');

      return new EncoderBuffer(data, this.reporter);
            SRTlib.send('], "end": "Node.prototype._createEncoderBuffer.createEncoderBuffer"},');

    };
    Node.prototype._encode = function encode(data, reporter, parent) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._encode.encode", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var state = this._baseState;
      if (state['default'] !== null && state['default'] === data) {
                SRTlib.send('], "end": "Node.prototype._encode.encode"},');

        return;
      }
      var result = this._encodeValue(data, reporter, parent);
      if (result === undefined) {
                SRTlib.send('], "end": "Node.prototype._encode.encode"},');

        return;
      }
      if (this._skipDefault(result, reporter, parent)) {
                SRTlib.send('], "end": "Node.prototype._encode.encode"},');

        return;
      }
            SRTlib.send('], "end": "Node.prototype._encode.encode"},');

      return result;
            SRTlib.send('], "end": "Node.prototype._encode.encode"},');

    };
    Node.prototype._encodeValue = function encode(data, reporter, parent) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._encodeValue.encode", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var state = this._baseState;
      if (state.parent === null) {
                SRTlib.send('], "end": "Node.prototype._encodeValue.encode"},');

        return state.children[0]._encode(data, reporter || new Reporter());
      }
      var result = null;
      this.reporter = reporter;
      if (state.optional && data === undefined) {
        if (state['default'] !== null) data = state['default']; else {
                    SRTlib.send('], "end": "Node.prototype._encodeValue.encode"},');

          return;
        }
      }
      var content = null;
      var primitive = false;
      if (state.any) {
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function (child) {
                    SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._encodeValue.encode.content.state.children.map.filter.state.children.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (child._baseState.tag === 'null_') {
                        SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content.state.children.map.filter.state.children.map"},');

            return child._encode(null, reporter, data);
          }
          if (child._baseState.key === null) {
                        SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content.state.children.map.filter.state.children.map"},');

            return reporter.error('Child should have a key');
          }
          var prevKey = reporter.enterKey(child._baseState.key);
          if (typeof data !== 'object') {
                        SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content.state.children.map.filter.state.children.map"},');

            return reporter.error('Child expected, but input is not object');
          }
          var res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);
                    SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content.state.children.map.filter.state.children.map"},');

          return res;
                    SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content.state.children.map.filter.state.children.map"},');

        }, this).filter(function (child) {
                    SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._encodeValue.encode.content.state.children.map.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content.state.children.map.filter"},');

          return child;
                    SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content.state.children.map.filter"},');

        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
          if (!(state.args && state.args.length === 1)) {
                        SRTlib.send('], "end": "Node.prototype._encodeValue.encode"},');

            return reporter.error('Too many args for : ' + state.tag);
          }
          if (!Array.isArray(data)) {
                        SRTlib.send('], "end": "Node.prototype._encodeValue.encode"},');

            return reporter.error('seqof/setof, but data is not Array');
          }
          var child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function (item) {
                        SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._encodeValue.encode.content._createEncoderBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var state = this._baseState;
                        SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content._createEncoderBuffer"},');

            return this._getUse(state.args[0], data)._encode(item, reporter);
                        SRTlib.send('], "end": "Node.prototype._encodeValue.encode.content._createEncoderBuffer"},');

          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }
      var result;
      if (!state.any && state.choice === null) {
        var tag = state.implicit !== null ? state.implicit : state.tag;
        var cls = state.implicit === null ? 'universal' : 'context';
        if (tag === null) {
          if (state.use === null) reporter.error('Tag could be omitted only for .use()');
        } else {
          if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
      if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
            SRTlib.send('], "end": "Node.prototype._encodeValue.encode"},');

      return result;
            SRTlib.send('], "end": "Node.prototype._encodeValue.encode"},');

    };
    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._encodeChoice.encodeChoice", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var state = this._baseState;
      var node = state.choice[data.type];
      if (!node) {
        assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
      }
            SRTlib.send('], "end": "Node.prototype._encodeChoice.encodeChoice"},');

      return node._encode(data.value, reporter);
            SRTlib.send('], "end": "Node.prototype._encodeChoice.encodeChoice"},');

    };
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._encodePrimitive.encodePrimitive", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var state = this._baseState;
      if ((/str$/).test(tag)) return this._encodeStr(data, tag); else {
                SRTlib.send('], "end": "emptyKey10"},');

        return this._encodeStr(data, tag);
      }
            SRTlib.send('], "end": "Node.prototype._encodePrimitive.encodePrimitive"},');

    };
    Node.prototype._isNumstr = function isNumstr(str) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._isNumstr.isNumstr", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Node.prototype._isNumstr.isNumstr"},');

      return (/^[0-9 ]*$/).test(str);
            SRTlib.send('], "end": "Node.prototype._isNumstr.isNumstr"},');

    };
    Node.prototype._isPrintstr = function isPrintstr(str) {
            SRTlib.send(`{ "anonymous": true, "function": "Node.prototype._isPrintstr.isPrintstr", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Node.prototype._isPrintstr.isPrintstr"},');

      return (/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/).test(str);
            SRTlib.send('], "end": "Node.prototype._isPrintstr.isPrintstr"},');

    };
        SRTlib.send('], "end": "emptyKey10"},');

  }, {
    "../base": 6,
    "minimalistic-assert": 144
  }],
  8: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey11", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    function Reporter(options) {
            SRTlib.send(`{ "anonymous": false, "function": "Reporter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._reporterState = {
        obj: null,
        path: [],
        options: options || ({}),
        errors: []
      };
            SRTlib.send('], "end": "Reporter"},');

    }
    exports.Reporter = Reporter;
    Reporter.prototype.isError = function isError(obj) {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.isError.isError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Reporter.prototype.isError.isError"},');

      return obj instanceof ReporterError;
            SRTlib.send('], "end": "Reporter.prototype.isError.isError"},');

    };
    Reporter.prototype.save = function save() {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.save.save", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var state = this._reporterState;
            SRTlib.send('], "end": "Reporter.prototype.save.save"},');

      return {
        obj: state.obj,
        pathLen: state.path.length
      };
            SRTlib.send('], "end": "Reporter.prototype.save.save"},');

    };
    Reporter.prototype.restore = function restore(data) {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.restore.restore", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._reporterState;
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
            SRTlib.send('], "end": "Reporter.prototype.restore.restore"},');

    };
    Reporter.prototype.enterKey = function enterKey(key) {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.enterKey.enterKey", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Reporter.prototype.enterKey.enterKey"},');

      return this._reporterState.path.push(key);
            SRTlib.send('], "end": "Reporter.prototype.enterKey.enterKey"},');

    };
    Reporter.prototype.exitKey = function exitKey(index) {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.exitKey.exitKey", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._reporterState;
      state.path = state.path.slice(0, index - 1);
            SRTlib.send('], "end": "Reporter.prototype.exitKey.exitKey"},');

    };
    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.leaveKey.leaveKey", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var state = this._reporterState;
      this.exitKey(index);
      if (state.obj !== null) state.obj[key] = value;
            SRTlib.send('], "end": "Reporter.prototype.leaveKey.leaveKey"},');

    };
    Reporter.prototype.path = function path() {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.path.path", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Reporter.prototype.path.path"},');

      return this._reporterState.path.join('/');
            SRTlib.send('], "end": "Reporter.prototype.path.path"},');

    };
    Reporter.prototype.enterObject = function enterObject() {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.enterObject.enterObject", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var state = this._reporterState;
      var prev = state.obj;
      state.obj = {};
            SRTlib.send('], "end": "Reporter.prototype.enterObject.enterObject"},');

      return prev;
            SRTlib.send('], "end": "Reporter.prototype.enterObject.enterObject"},');

    };
    Reporter.prototype.leaveObject = function leaveObject(prev) {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.leaveObject.leaveObject", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._reporterState;
      var now = state.obj;
      state.obj = prev;
            SRTlib.send('], "end": "Reporter.prototype.leaveObject.leaveObject"},');

      return now;
            SRTlib.send('], "end": "Reporter.prototype.leaveObject.leaveObject"},');

    };
    Reporter.prototype.error = function error(msg) {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.error.error", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var err;
      var state = this._reporterState;
      var inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function (elem) {
                    SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.error.error.err.state.path.map.join.state.path.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Reporter.prototype.error.error.err.state.path.map.join.state.path.map"},');

          return '[' + JSON.stringify(elem) + ']';
                    SRTlib.send('], "end": "Reporter.prototype.error.error.err.state.path.map.join.state.path.map"},');

        }).join(''), msg.message || msg, msg.stack);
      }
      if (!state.options.partial) {
                SRTlib.send('], "end": "Reporter.prototype.error.error"},');

        throw err;
      }
      if (!inherited) state.errors.push(err);
            SRTlib.send('], "end": "Reporter.prototype.error.error"},');

      return err;
            SRTlib.send('], "end": "Reporter.prototype.error.error"},');

    };
    Reporter.prototype.wrapResult = function wrapResult(result) {
            SRTlib.send(`{ "anonymous": true, "function": "Reporter.prototype.wrapResult.wrapResult", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var state = this._reporterState;
      if (!state.options.partial) {
                SRTlib.send('], "end": "Reporter.prototype.wrapResult.wrapResult"},');

        return result;
      }
            SRTlib.send('], "end": "Reporter.prototype.wrapResult.wrapResult"},');

      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
            SRTlib.send('], "end": "Reporter.prototype.wrapResult.wrapResult"},');

    };
    function ReporterError(path, msg) {
            SRTlib.send(`{ "anonymous": false, "function": "ReporterError", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.path = path;
      this.rethrow(msg);
            SRTlib.send('], "end": "ReporterError"},');

    }
    ;
    inherits(ReporterError, Error);
    ReporterError.prototype.rethrow = function rethrow(msg) {
            SRTlib.send(`{ "anonymous": true, "function": "ReporterError.prototype.rethrow.rethrow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.message = msg + ' at: ' + (this.path || '(shallow)');
      if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
      if (!this.stack) {
        try {
                    SRTlib.send('], "end": "ReporterError.prototype.rethrow.rethrow"},');

          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
            SRTlib.send('], "end": "ReporterError.prototype.rethrow.rethrow"},');

      return this;
            SRTlib.send('], "end": "ReporterError.prototype.rethrow.rethrow"},');

    };
        SRTlib.send('], "end": "emptyKey11"},');

  }, {
    "inherits": 133
  }],
  9: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey12", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var constants = require('../constants');
    exports.tagClass = {
      0: 'universal',
      1: 'application',
      2: 'context',
      3: 'private'
    };
    exports.tagClassByName = constants._reverse(exports.tagClass);
    exports.tag = {
      0x00: 'end',
      0x01: 'bool',
      0x02: 'int',
      0x03: 'bitstr',
      0x04: 'octstr',
      0x05: 'null_',
      0x06: 'objid',
      0x07: 'objDesc',
      0x08: 'external',
      0x09: 'real',
      0x0a: 'enum',
      0x0b: 'embed',
      0x0c: 'utf8str',
      0x0d: 'relativeOid',
      0x10: 'seq',
      0x11: 'set',
      0x12: 'numstr',
      0x13: 'printstr',
      0x14: 't61str',
      0x15: 'videostr',
      0x16: 'ia5str',
      0x17: 'utctime',
      0x18: 'gentime',
      0x19: 'graphstr',
      0x1a: 'iso646str',
      0x1b: 'genstr',
      0x1c: 'unistr',
      0x1d: 'charstr',
      0x1e: 'bmpstr'
    };
    exports.tagByName = constants._reverse(exports.tag);
        SRTlib.send('], "end": "emptyKey12"},');

  }, {
    "../constants": 10
  }],
  10: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey13", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var constants = exports;
    constants._reverse = function reverse(map) {
            SRTlib.send(`{ "anonymous": true, "function": "constants._reverse.reverse", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var res = {};
      Object.keys(map).forEach(function (key) {
                SRTlib.send(`{ "anonymous": true, "function": "constants._reverse.reverse.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if ((key | 0) == key) key = key | 0;
        var value = map[key];
        res[value] = key;
                SRTlib.send('], "end": "constants._reverse.reverse.forEach"},');

      });
            SRTlib.send('], "end": "constants._reverse.reverse"},');

      return res;
            SRTlib.send('], "end": "constants._reverse.reverse"},');

    };
    constants.der = require('./der');
        SRTlib.send('], "end": "emptyKey13"},');

  }, {
    "./der": 9
  }],
  11: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey14", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var asn1 = require('../../asn1');
    var base = asn1.base;
    var bignum = asn1.bignum;
    var der = asn1.constants.der;
    function DERDecoder(entity) {
            SRTlib.send(`{ "anonymous": false, "function": "DERDecoder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
            SRTlib.send('], "end": "DERDecoder"},');

    }
    ;
    module.exports = DERDecoder;
    DERDecoder.prototype.decode = function decode(data, options) {
            SRTlib.send(`{ "anonymous": true, "function": "DERDecoder.prototype.decode.decode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(data instanceof base.DecoderBuffer)) data = new base.DecoderBuffer(data, options);
            SRTlib.send('], "end": "DERDecoder.prototype.decode.decode"},');

      return this.tree._decode(data, options);
            SRTlib.send('], "end": "DERDecoder.prototype.decode.decode"},');

    };
    function DERNode(parent) {
            SRTlib.send(`{ "anonymous": false, "function": "DERNode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      base.Node.call(this, 'der', parent);
            SRTlib.send('], "end": "DERNode"},');

    }
    inherits(DERNode, base.Node);
    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._peekTag.peekTag", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (buffer.isEmpty()) {
                SRTlib.send('], "end": "DERNode.prototype._peekTag.peekTag"},');

        return false;
      }
      var state = buffer.save();
      var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag)) {
                SRTlib.send('], "end": "DERNode.prototype._peekTag.peekTag"},');

        return decodedTag;
      }
      buffer.restore(state);
            SRTlib.send('], "end": "DERNode.prototype._peekTag.peekTag"},');

      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
            SRTlib.send('], "end": "DERNode.prototype._peekTag.peekTag"},');

    };
    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._decodeTag.decodeTag", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
      if (buffer.isError(decodedTag)) {
                SRTlib.send('], "end": "DERNode.prototype._decodeTag.decodeTag"},');

        return decodedTag;
      }
      var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
      if (buffer.isError(len)) {
                SRTlib.send('], "end": "DERNode.prototype._decodeTag.decodeTag"},');

        return len;
      }
      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
                SRTlib.send('], "end": "DERNode.prototype._decodeTag.decodeTag"},');

        return buffer.error('Failed to match tag: "' + tag + '"');
      }
      if (decodedTag.primitive || len !== null) {
                SRTlib.send('], "end": "DERNode.prototype._decodeTag.decodeTag"},');

        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
      }
      var state = buffer.save();
      var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
      if (buffer.isError(res)) {
                SRTlib.send('], "end": "DERNode.prototype._decodeTag.decodeTag"},');

        return res;
      }
      len = buffer.offset - state.offset;
      buffer.restore(state);
            SRTlib.send('], "end": "DERNode.prototype._decodeTag.decodeTag"},');

      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
            SRTlib.send('], "end": "DERNode.prototype._decodeTag.decodeTag"},');

    };
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._skipUntilEnd.skipUntilEnd", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      while (true) {
        var tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) {
                    SRTlib.send('], "end": "DERNode.prototype._skipUntilEnd.skipUntilEnd"},');

          return tag;
        }
        var len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) {
                    SRTlib.send('], "end": "DERNode.prototype._skipUntilEnd.skipUntilEnd"},');

          return len;
        }
        var res;
        if (tag.primitive || len !== null) res = buffer.skip(len); else res = this._skipUntilEnd(buffer, fail);
        if (buffer.isError(res)) {
                    SRTlib.send('], "end": "DERNode.prototype._skipUntilEnd.skipUntilEnd"},');

          return res;
        }
        if (tag.tagStr === 'end') break;
      }
            SRTlib.send('], "end": "DERNode.prototype._skipUntilEnd.skipUntilEnd"},');

    };
    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._decodeList.decodeList", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var result = [];
      while (!buffer.isEmpty()) {
        var possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) {
                    SRTlib.send('], "end": "DERNode.prototype._decodeList.decodeList"},');

          return possibleEnd;
        }
        var res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
      }
            SRTlib.send('], "end": "DERNode.prototype._decodeList.decodeList"},');

      return result;
            SRTlib.send('], "end": "DERNode.prototype._decodeList.decodeList"},');

    };
    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._decodeStr.decodeStr", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (tag === 'bitstr') {
        var unused = buffer.readUInt8();
        if (buffer.isError(unused)) {
                    SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

          return unused;
        }
                SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

        return {
          unused: unused,
          data: buffer.raw()
        };
      } else if (tag === 'bmpstr') {
        var raw = buffer.raw();
        if (raw.length % 2 === 1) {
                    SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

          return buffer.error('Decoding of string type: bmpstr length mismatch');
        }
        var str = '';
        for (var i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
                SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

        return str;
      } else if (tag === 'numstr') {
        var numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) {
                    SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

          return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
        }
                SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

        return numstr;
      } else if (tag === 'octstr') {
                SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

        return buffer.raw();
      } else if (tag === 'objDesc') {
                SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

        return buffer.raw();
      } else if (tag === 'printstr') {
        var printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) {
                    SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

          return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
        }
                SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

        return printstr;
      } else if ((/str$/).test(tag)) {
                SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

        return buffer.raw().toString();
      } else {
                SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

        return buffer.error('Decoding of string type: ' + tag + ' unsupported');
      }
            SRTlib.send('], "end": "DERNode.prototype._decodeStr.decodeStr"},');

    };
    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._decodeObjid.decodeObjid", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var result;
      var identifiers = [];
      var ident = 0;
      while (!buffer.isEmpty()) {
        var subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 0x80) identifiers.push(ident);
      var first = identifiers[0] / 40 | 0;
      var second = identifiers[0] % 40;
      if (relative) result = identifiers; else result = [first, second].concat(identifiers.slice(1));
      if (values) {
        var tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
      }
            SRTlib.send('], "end": "DERNode.prototype._decodeObjid.decodeObjid"},');

      return result;
            SRTlib.send('], "end": "DERNode.prototype._decodeObjid.decodeObjid"},');

    };
    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._decodeTime.decodeTime", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var str = buffer.raw().toString();
      if (tag === 'gentime') {
        var year = str.slice(0, 4) | 0;
        var mon = str.slice(4, 6) | 0;
        var day = str.slice(6, 8) | 0;
        var hour = str.slice(8, 10) | 0;
        var min = str.slice(10, 12) | 0;
        var sec = str.slice(12, 14) | 0;
      } else if (tag === 'utctime') {
        var year = str.slice(0, 2) | 0;
        var mon = str.slice(2, 4) | 0;
        var day = str.slice(4, 6) | 0;
        var hour = str.slice(6, 8) | 0;
        var min = str.slice(8, 10) | 0;
        var sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year; else year = 1900 + year;
      } else {
                SRTlib.send('], "end": "DERNode.prototype._decodeTime.decodeTime"},');

        return buffer.error('Decoding ' + tag + ' time is not supported yet');
      }
            SRTlib.send('], "end": "DERNode.prototype._decodeTime.decodeTime"},');

      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
            SRTlib.send('], "end": "DERNode.prototype._decodeTime.decodeTime"},');

    };
    DERNode.prototype._decodeNull = function decodeNull(buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._decodeNull.decodeNull", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "DERNode.prototype._decodeNull.decodeNull"},');

      return null;
            SRTlib.send('], "end": "DERNode.prototype._decodeNull.decodeNull"},');

    };
    DERNode.prototype._decodeBool = function decodeBool(buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._decodeBool.decodeBool", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var res = buffer.readUInt8();
      if (buffer.isError(res)) return res; else {
                SRTlib.send('], "end": "emptyKey14"},');

        return res;
      }
            SRTlib.send('], "end": "DERNode.prototype._decodeBool.decodeBool"},');

    };
    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._decodeInt.decodeInt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var raw = buffer.raw();
      var res = new bignum(raw);
      if (values) res = values[res.toString(10)] || res;
            SRTlib.send('], "end": "DERNode.prototype._decodeInt.decodeInt"},');

      return res;
            SRTlib.send('], "end": "DERNode.prototype._decodeInt.decodeInt"},');

    };
    DERNode.prototype._use = function use(entity, obj) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._use.use", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof entity === 'function') entity = entity(obj);
            SRTlib.send('], "end": "DERNode.prototype._use.use"},');

      return entity._getDecoder('der').tree;
            SRTlib.send('], "end": "DERNode.prototype._use.use"},');

    };
    function derDecodeTag(buf, fail) {
            SRTlib.send(`{ "anonymous": false, "function": "derDecodeTag", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var tag = buf.readUInt8(fail);
      if (buf.isError(tag)) {
                SRTlib.send('], "end": "derDecodeTag"},');

        return tag;
      }
      var cls = der.tagClass[tag >> 6];
      var primitive = (tag & 0x20) === 0;
      if ((tag & 0x1f) === 0x1f) {
        var oct = tag;
        tag = 0;
        while ((oct & 0x80) === 0x80) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct)) {
                        SRTlib.send('], "end": "derDecodeTag"},');

            return oct;
          }
          tag <<= 7;
          tag |= oct & 0x7f;
        }
      } else {
        tag &= 0x1f;
      }
      var tagStr = der.tag[tag];
            SRTlib.send('], "end": "derDecodeTag"},');

      return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
      };
            SRTlib.send('], "end": "derDecodeTag"},');

    }
    function derDecodeLen(buf, primitive, fail) {
            SRTlib.send(`{ "anonymous": false, "function": "derDecodeLen", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var len = buf.readUInt8(fail);
      if (buf.isError(len)) {
                SRTlib.send('], "end": "derDecodeLen"},');

        return len;
      }
      if (!primitive && len === 0x80) {
                SRTlib.send('], "end": "derDecodeLen"},');

        return null;
      }
      if ((len & 0x80) === 0) {
                SRTlib.send('], "end": "derDecodeLen"},');

        return len;
      }
      var num = len & 0x7f;
      if (num > 4) {
                SRTlib.send('], "end": "derDecodeLen"},');

        return buf.error('length octect is too long');
      }
      len = 0;
      for (var i = 0; i < num; i++) {
        len <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j)) {
                    SRTlib.send('], "end": "derDecodeLen"},');

          return j;
        }
        len |= j;
      }
            SRTlib.send('], "end": "derDecodeLen"},');

      return len;
            SRTlib.send('], "end": "derDecodeLen"},');

    }
        SRTlib.send('], "end": "emptyKey14"},');

  }, {
    "../../asn1": 3,
    "inherits": 133
  }],
  12: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey15", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var decoders = exports;
    decoders.der = require('./der');
    decoders.pem = require('./pem');
        SRTlib.send('], "end": "emptyKey15"},');

  }, {
    "./der": 11,
    "./pem": 13
  }],
  13: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey16", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var Buffer = require('buffer').Buffer;
    var DERDecoder = require('./der');
    function PEMDecoder(entity) {
            SRTlib.send(`{ "anonymous": false, "function": "PEMDecoder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      DERDecoder.call(this, entity);
      this.enc = 'pem';
            SRTlib.send('], "end": "PEMDecoder"},');

    }
    ;
    inherits(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;
    PEMDecoder.prototype.decode = function decode(data, options) {
            SRTlib.send(`{ "anonymous": true, "function": "PEMDecoder.prototype.decode.decode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var lines = data.toString().split(/[\r\n]+/g);
      var label = options.label.toUpperCase();
      var re = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;
      for (var i = 0; i < lines.length; i++) {
        var match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
          if (match[1] !== 'BEGIN') break;
          start = i;
        } else {
          if (match[1] !== 'END') break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1) {
                SRTlib.send('], "end": "PEMDecoder.prototype.decode.decode"},');

        throw new Error('PEM section not found for: ' + label);
      }
      var base64 = lines.slice(start + 1, end).join('');
      base64.replace(/[^a-z0-9\+\/=]+/gi, '');
      var input = new Buffer(base64, 'base64');
            SRTlib.send('], "end": "PEMDecoder.prototype.decode.decode"},');

      return DERDecoder.prototype.decode.call(this, input, options);
            SRTlib.send('], "end": "PEMDecoder.prototype.decode.decode"},');

    };
        SRTlib.send('], "end": "emptyKey16"},');

  }, {
    "./der": 11,
    "buffer": 360,
    "inherits": 133
  }],
  14: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey17", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var Buffer = require('buffer').Buffer;
    var asn1 = require('../../asn1');
    var base = asn1.base;
    var der = asn1.constants.der;
    function DEREncoder(entity) {
            SRTlib.send(`{ "anonymous": false, "function": "DEREncoder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
            SRTlib.send('], "end": "DEREncoder"},');

    }
    ;
    module.exports = DEREncoder;
    DEREncoder.prototype.encode = function encode(data, reporter) {
            SRTlib.send(`{ "anonymous": true, "function": "DEREncoder.prototype.encode.encode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "DEREncoder.prototype.encode.encode"},');

      return this.tree._encode(data, reporter).join();
            SRTlib.send('], "end": "DEREncoder.prototype.encode.encode"},');

    };
    function DERNode(parent) {
            SRTlib.send(`{ "anonymous": false, "function": "DERNode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      base.Node.call(this, 'der', parent);
            SRTlib.send('], "end": "DERNode"},');

    }
    inherits(DERNode, base.Node);
    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._encodeComposite.encodeComposite", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 0x80) {
        var header = new Buffer(2);
        header[0] = encodedTag;
        header[1] = content.length;
                SRTlib.send('], "end": "DERNode.prototype._encodeComposite.encodeComposite"},');

        return this._createEncoderBuffer([header, content]);
      }
      var lenOctets = 1;
      for (var i = content.length; i >= 0x100; i >>= 8) lenOctets++;
      var header = new Buffer(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 0x80 | lenOctets;
      for (var i = 1 + lenOctets, j = content.length; j > 0; (i--, j >>= 8)) header[i] = j & 0xff;
            SRTlib.send('], "end": "DERNode.prototype._encodeComposite.encodeComposite"},');

      return this._createEncoderBuffer([header, content]);
            SRTlib.send('], "end": "DERNode.prototype._encodeComposite.encodeComposite"},');

    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._encodeStr.encodeStr", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (tag === 'bitstr') {
                SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === 'bmpstr') {
        var buf = new Buffer(str.length * 2);
        for (var i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
                SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

        return this._createEncoderBuffer(buf);
      } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) {
                    SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

          return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
        }
                SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

        return this._createEncoderBuffer(str);
      } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) {
                    SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

          return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
        }
                SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

        return this._createEncoderBuffer(str);
      } else if ((/str$/).test(tag)) {
                SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

        return this._createEncoderBuffer(str);
      } else if (tag === 'objDesc') {
                SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

        return this._createEncoderBuffer(str);
      } else {
                SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

        return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
      }
            SRTlib.send('], "end": "DERNode.prototype._encodeStr.encodeStr"},');

    };
    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._encodeObjid.encodeObjid", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof id === 'string') {
        if (!values) {
                    SRTlib.send('], "end": "DERNode.prototype._encodeObjid.encodeObjid"},');

          return this.reporter.error('string objid given, but no values map found');
        }
        if (!values.hasOwnProperty(id)) {
                    SRTlib.send('], "end": "DERNode.prototype._encodeObjid.encodeObjid"},');

          return this.reporter.error('objid not found in values map');
        }
        id = values[id].split(/[\s\.]+/g);
        for (var i = 0; i < id.length; i++) id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (var i = 0; i < id.length; i++) id[i] |= 0;
      }
      if (!Array.isArray(id)) {
                SRTlib.send('], "end": "DERNode.prototype._encodeObjid.encodeObjid"},');

        return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
      }
      if (!relative) {
        if (id[1] >= 40) {
                    SRTlib.send('], "end": "DERNode.prototype._encodeObjid.encodeObjid"},');

          return this.reporter.error('Second objid identifier OOB');
        }
        id.splice(0, 2, id[0] * 40 + id[1]);
      }
      var size = 0;
      for (var i = 0; i < id.length; i++) {
        var ident = id[i];
        for (size++; ident >= 0x80; ident >>= 7) size++;
      }
      var objid = new Buffer(size);
      var offset = objid.length - 1;
      for (var i = id.length - 1; i >= 0; i--) {
        var ident = id[i];
        objid[offset--] = ident & 0x7f;
        while ((ident >>= 7) > 0) objid[offset--] = 0x80 | ident & 0x7f;
      }
            SRTlib.send('], "end": "DERNode.prototype._encodeObjid.encodeObjid"},');

      return this._createEncoderBuffer(objid);
            SRTlib.send('], "end": "DERNode.prototype._encodeObjid.encodeObjid"},');

    };
    function two(num) {
            SRTlib.send(`{ "anonymous": false, "function": "two", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (num < 10) return '0' + num; else {
                SRTlib.send('], "end": "emptyKey17"},');

        return '0' + num;
      }
            SRTlib.send('], "end": "two"},');

    }
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._encodeTime.encodeTime", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var str;
      var date = new Date(time);
      if (tag === 'gentime') {
        str = [two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
      } else if (tag === 'utctime') {
        str = [two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }
            SRTlib.send('], "end": "DERNode.prototype._encodeTime.encodeTime"},');

      return this._encodeStr(str, 'octstr');
            SRTlib.send('], "end": "DERNode.prototype._encodeTime.encodeTime"},');

    };
    DERNode.prototype._encodeNull = function encodeNull() {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._encodeNull.encodeNull", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "DERNode.prototype._encodeNull.encodeNull"},');

      return this._createEncoderBuffer('');
            SRTlib.send('], "end": "DERNode.prototype._encodeNull.encodeNull"},');

    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._encodeInt.encodeInt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof num === 'string') {
        if (!values) {
                    SRTlib.send('], "end": "DERNode.prototype._encodeInt.encodeInt"},');

          return this.reporter.error('String int or enum given, but no values map');
        }
        if (!values.hasOwnProperty(num)) {
                    SRTlib.send('], "end": "DERNode.prototype._encodeInt.encodeInt"},');

          return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        }
        num = values[num];
      }
      if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        var numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) {
          numArray.unshift(0);
        }
        num = new Buffer(numArray);
      }
      if (Buffer.isBuffer(num)) {
        var size = num.length;
        if (num.length === 0) size++;
        var out = new Buffer(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
                SRTlib.send('], "end": "DERNode.prototype._encodeInt.encodeInt"},');

        return this._createEncoderBuffer(out);
      }
      if (num < 0x80) {
                SRTlib.send('], "end": "DERNode.prototype._encodeInt.encodeInt"},');

        return this._createEncoderBuffer(num);
      }
      if (num < 0x100) {
                SRTlib.send('], "end": "DERNode.prototype._encodeInt.encodeInt"},');

        return this._createEncoderBuffer([0, num]);
      }
      var size = 1;
      for (var i = num; i >= 0x100; i >>= 8) size++;
      var out = new Array(size);
      for (var i = out.length - 1; i >= 0; i--) {
        out[i] = num & 0xff;
        num >>= 8;
      }
      if (out[0] & 0x80) {
        out.unshift(0);
      }
            SRTlib.send('], "end": "DERNode.prototype._encodeInt.encodeInt"},');

      return this._createEncoderBuffer(new Buffer(out));
            SRTlib.send('], "end": "DERNode.prototype._encodeInt.encodeInt"},');

    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._encodeBool.encodeBool", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "DERNode.prototype._encodeBool.encodeBool"},');

      return this._createEncoderBuffer(value ? 0xff : 0);
            SRTlib.send('], "end": "DERNode.prototype._encodeBool.encodeBool"},');

    };
    DERNode.prototype._use = function use(entity, obj) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._use.use2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof entity === 'function') entity = entity(obj);
            SRTlib.send('], "end": "DERNode.prototype._use.use2"},');

      return entity._getEncoder('der').tree;
            SRTlib.send('], "end": "DERNode.prototype._use.use2"},');

    };
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
            SRTlib.send(`{ "anonymous": true, "function": "DERNode.prototype._skipDefault.skipDefault", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var state = this._baseState;
      var i;
      if (state['default'] === null) {
                SRTlib.send('], "end": "DERNode.prototype._skipDefault.skipDefault"},');

        return false;
      }
      var data = dataBuffer.join();
      if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
      if (data.length !== state.defaultBuffer.length) {
                SRTlib.send('], "end": "DERNode.prototype._skipDefault.skipDefault"},');

        return false;
      }
      for (i = 0; i < data.length; i++) if (data[i] !== state.defaultBuffer[i]) {
                SRTlib.send('], "end": "DERNode.prototype._skipDefault.skipDefault"},');

        return false;
      }
            SRTlib.send('], "end": "DERNode.prototype._skipDefault.skipDefault"},');

      return true;
            SRTlib.send('], "end": "DERNode.prototype._skipDefault.skipDefault"},');

    };
    function encodeTag(tag, primitive, cls, reporter) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeTag", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var res;
      if (tag === 'seqof') tag = 'seq'; else if (tag === 'setof') tag = 'set';
      if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag]; else if (typeof tag === 'number' && (tag | 0) === tag) res = tag; else {
                SRTlib.send('], "end": "encodeTag"},');

        return reporter.error('Unknown tag: ' + tag);
      }
      if (res >= 0x1f) {
                SRTlib.send('], "end": "encodeTag"},');

        return reporter.error('Multi-octet tag encoding unsupported');
      }
      if (!primitive) res |= 0x20;
      res |= der.tagClassByName[cls || 'universal'] << 6;
            SRTlib.send('], "end": "encodeTag"},');

      return res;
            SRTlib.send('], "end": "encodeTag"},');

    }
        SRTlib.send('], "end": "emptyKey17"},');

  }, {
    "../../asn1": 3,
    "buffer": 360,
    "inherits": 133
  }],
  15: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey18", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var encoders = exports;
    encoders.der = require('./der');
    encoders.pem = require('./pem');
        SRTlib.send('], "end": "emptyKey18"},');

  }, {
    "./der": 14,
    "./pem": 16
  }],
  16: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey19", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var DEREncoder = require('./der');
    function PEMEncoder(entity) {
            SRTlib.send(`{ "anonymous": false, "function": "PEMEncoder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      DEREncoder.call(this, entity);
      this.enc = 'pem';
            SRTlib.send('], "end": "PEMEncoder"},');

    }
    ;
    inherits(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;
    PEMEncoder.prototype.encode = function encode(data, options) {
            SRTlib.send(`{ "anonymous": true, "function": "PEMEncoder.prototype.encode.encode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var buf = DEREncoder.prototype.encode.call(this, data);
      var p = buf.toString('base64');
      var out = ['-----BEGIN ' + options.label + '-----'];
      for (var i = 0; i < p.length; i += 64) out.push(p.slice(i, i + 64));
      out.push('-----END ' + options.label + '-----');
            SRTlib.send('], "end": "PEMEncoder.prototype.encode.encode"},');

      return out.join('\n');
            SRTlib.send('], "end": "PEMEncoder.prototype.encode.encode"},');

    };
        SRTlib.send('], "end": "emptyKey19"},');

  }, {
    "./der": 14,
    "inherits": 133
  }],
  17: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey20", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = Backoff;
    function Backoff(opts) {
            SRTlib.send(`{ "anonymous": false, "function": "Backoff", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      opts = opts || ({});
      this.ms = opts.min || 100;
      this.max = opts.max || 10000;
      this.factor = opts.factor || 2;
      this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
      this.attempts = 0;
            SRTlib.send('], "end": "Backoff"},');

    }
    Backoff.prototype.duration = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Backoff.prototype.duration", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var ms = this.ms * Math.pow(this.factor, this.attempts++);
      if (this.jitter) {
        var rand = Math.random();
        var deviation = Math.floor(rand * this.jitter * ms);
        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
      }
            SRTlib.send('], "end": "Backoff.prototype.duration"},');

      return Math.min(ms, this.max) | 0;
            SRTlib.send('], "end": "Backoff.prototype.duration"},');

    };
    Backoff.prototype.reset = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Backoff.prototype.reset", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.attempts = 0;
            SRTlib.send('], "end": "Backoff.prototype.reset"},');

    };
    Backoff.prototype.setMin = function (min) {
            SRTlib.send(`{ "anonymous": true, "function": "Backoff.prototype.setMin", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.ms = min;
            SRTlib.send('], "end": "Backoff.prototype.setMin"},');

    };
    Backoff.prototype.setMax = function (max) {
            SRTlib.send(`{ "anonymous": true, "function": "Backoff.prototype.setMax", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.max = max;
            SRTlib.send('], "end": "Backoff.prototype.setMax"},');

    };
    Backoff.prototype.setJitter = function (jitter) {
            SRTlib.send(`{ "anonymous": true, "function": "Backoff.prototype.setJitter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.jitter = jitter;
            SRTlib.send('], "end": "Backoff.prototype.setJitter"},');

    };
        SRTlib.send('], "end": "emptyKey20"},');

  }, {}],
  18: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey22", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function () {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey21", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      "use strict";
      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var lookup = new Uint8Array(256);
      for (var i = 0; i < chars.length; i++) {
        lookup[chars.charCodeAt(i)] = i;
      }
      exports.encode = function (arraybuffer) {
                SRTlib.send(`{ "anonymous": true, "function": "exports.encode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = "";
        for (i = 0; i < len; i += 3) {
          base64 += chars[bytes[i] >> 2];
          base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
          base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
          base64 += chars[bytes[i + 2] & 63];
        }
        if (len % 3 === 2) {
          base64 = base64.substring(0, base64.length - 1) + "=";
        } else if (len % 3 === 1) {
          base64 = base64.substring(0, base64.length - 2) + "==";
        }
                SRTlib.send('], "end": "exports.encode"},');

        return base64;
                SRTlib.send('], "end": "exports.encode"},');

      };
      exports.decode = function (base64) {
                SRTlib.send(`{ "anonymous": true, "function": "exports.decode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;
        if (base64[base64.length - 1] === "=") {
          bufferLength--;
          if (base64[base64.length - 2] === "=") {
            bufferLength--;
          }
        }
        var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
        for (i = 0; i < len; i += 4) {
          encoded1 = lookup[base64.charCodeAt(i)];
          encoded2 = lookup[base64.charCodeAt(i + 1)];
          encoded3 = lookup[base64.charCodeAt(i + 2)];
          encoded4 = lookup[base64.charCodeAt(i + 3)];
          bytes[p++] = encoded1 << 2 | encoded2 >> 4;
          bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
          bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
        }
                SRTlib.send('], "end": "exports.decode"},');

        return arraybuffer;
                SRTlib.send('], "end": "exports.decode"},');

      };
            SRTlib.send('], "end": "emptyKey21"},');

    })();
        SRTlib.send('], "end": "emptyKey22"},');

  }, {}],
  19: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey23", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    revLookup[('-').charCodeAt(0)] = 62;
    revLookup[('_').charCodeAt(0)] = 63;
    function getLens(b64) {
            SRTlib.send(`{ "anonymous": false, "function": "getLens", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var len = b64.length;
      if (len % 4 > 0) {
                SRTlib.send('], "end": "getLens"},');

        throw new Error('Invalid string. Length must be a multiple of 4');
      }
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
            SRTlib.send('], "end": "getLens"},');

      return [validLen, placeHoldersLen];
            SRTlib.send('], "end": "getLens"},');

    }
    function byteLength(b64) {
            SRTlib.send(`{ "anonymous": false, "function": "byteLength", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
            SRTlib.send('], "end": "byteLength"},');

      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
            SRTlib.send('], "end": "byteLength"},');

    }
    function _byteLength(b64, validLen, placeHoldersLen) {
            SRTlib.send(`{ "anonymous": false, "function": "_byteLength", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "_byteLength"},');

      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
            SRTlib.send('], "end": "_byteLength"},');

    }
    function toByteArray(b64) {
            SRTlib.send(`{ "anonymous": false, "function": "toByteArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i;
      for (i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }
            SRTlib.send('], "end": "toByteArray"},');

      return arr;
            SRTlib.send('], "end": "toByteArray"},');

    }
    function tripletToBase64(num) {
            SRTlib.send(`{ "anonymous": false, "function": "tripletToBase64", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "tripletToBase64"},');

      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
            SRTlib.send('], "end": "tripletToBase64"},');

    }
    function encodeChunk(uint8, start, end) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeChunk", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }
            SRTlib.send('], "end": "encodeChunk"},');

      return output.join('');
            SRTlib.send('], "end": "encodeChunk"},');

    }
    function fromByteArray(uint8) {
            SRTlib.send(`{ "anonymous": false, "function": "fromByteArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
      }
            SRTlib.send('], "end": "fromByteArray"},');

      return parts.join('');
            SRTlib.send('], "end": "fromByteArray"},');

    }
        SRTlib.send('], "end": "emptyKey23"},');

  }, {}],
  20: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey24", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : false;
    var blobSupported = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "blobSupported", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      try {
        var a = new Blob(['hi']);
                SRTlib.send('], "end": "blobSupported"},');

        return a.size === 2;
      } catch (e) {
                SRTlib.send('], "end": "blobSupported"},');

        return false;
      }
            SRTlib.send('], "end": "blobSupported"},');

    })();
    var blobSupportsArrayBufferView = blobSupported && (function () {
            SRTlib.send(`{ "anonymous": true, "function": "blobSupportsArrayBufferView", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      try {
        var b = new Blob([new Uint8Array([1, 2])]);
                SRTlib.send('], "end": "blobSupportsArrayBufferView"},');

        return b.size === 2;
      } catch (e) {
                SRTlib.send('], "end": "blobSupportsArrayBufferView"},');

        return false;
      }
            SRTlib.send('], "end": "blobSupportsArrayBufferView"},');

    })();
    var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;
    function mapArrayBufferViews(ary) {
            SRTlib.send(`{ "anonymous": false, "function": "mapArrayBufferViews", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "mapArrayBufferViews"},');

      return ary.map(function (chunk) {
                SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (chunk.buffer instanceof ArrayBuffer) {
          var buf = chunk.buffer;
          if (chunk.byteLength !== buf.byteLength) {
            var copy = new Uint8Array(chunk.byteLength);
            copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
            buf = copy.buffer;
          }
                    SRTlib.send('], "end": "ReturnStatement"},');

          return buf;
        }
                SRTlib.send('], "end": "ReturnStatement"},');

        return chunk;
                SRTlib.send('], "end": "ReturnStatement"},');

      });
            SRTlib.send('], "end": "mapArrayBufferViews"},');

    }
    function BlobBuilderConstructor(ary, options) {
            SRTlib.send(`{ "anonymous": false, "function": "BlobBuilderConstructor", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      options = options || ({});
      var bb = new BlobBuilder();
      mapArrayBufferViews(ary).forEach(function (part) {
                SRTlib.send(`{ "anonymous": true, "function": "forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        bb.append(part);
                SRTlib.send('], "end": "forEach"},');

      });
            SRTlib.send('], "end": "BlobBuilderConstructor"},');

      return options.type ? bb.getBlob(options.type) : bb.getBlob();
            SRTlib.send('], "end": "BlobBuilderConstructor"},');

    }
    ;
    function BlobConstructor(ary, options) {
            SRTlib.send(`{ "anonymous": false, "function": "BlobConstructor", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "BlobConstructor"},');

      return new Blob(mapArrayBufferViews(ary), options || ({}));
            SRTlib.send('], "end": "BlobConstructor"},');

    }
    ;
    if (typeof Blob !== 'undefined') {
      BlobBuilderConstructor.prototype = Blob.prototype;
      BlobConstructor.prototype = Blob.prototype;
    }
    module.exports = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (blobSupported) {
                SRTlib.send('], "end": "module.exports2"},');

        return blobSupportsArrayBufferView ? Blob : BlobConstructor;
      } else if (blobBuilderSupported) {
                SRTlib.send('], "end": "module.exports2"},');

        return BlobBuilderConstructor;
      } else {
                SRTlib.send('], "end": "module.exports2"},');

        return undefined;
      }
            SRTlib.send('], "end": "module.exports2"},');

    })();
        SRTlib.send('], "end": "emptyKey24"},');

  }, {}],
  21: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey26", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (module, exports) {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey25", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      'use strict';
      function assert(val, msg) {
                SRTlib.send(`{ "anonymous": false, "function": "assert", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!val) {
                    SRTlib.send('], "end": "assert"},');

          throw new Error(msg || 'Assertion failed');
        }
                SRTlib.send('], "end": "assert"},');

      }
      function inherits(ctor, superCtor) {
                SRTlib.send(`{ "anonymous": false, "function": "inherits", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        ctor.super_ = superCtor;
        var TempCtor = function () {
                    SRTlib.send(`{ "anonymous": false, "function": "TempCtor", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "TempCtor"},');

        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
                SRTlib.send('], "end": "inherits"},');

      }
      function BN(number, base, endian) {
                SRTlib.send(`{ "anonymous": false, "function": "BN", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (BN.isBN(number)) {
                    SRTlib.send('], "end": "BN"},');

          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || 'be');
        }
                SRTlib.send('], "end": "BN"},');

      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer;
      try {
        Buffer = require('buffer').Buffer;
      } catch (e) {}
      BN.isBN = function isBN(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.isBN.isBN", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (num instanceof BN) {
                    SRTlib.send('], "end": "BN.isBN.isBN"},');

          return true;
        }
                SRTlib.send('], "end": "BN.isBN.isBN"},');

        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                SRTlib.send('], "end": "BN.isBN.isBN"},');

      };
      BN.max = function max(left, right) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.max.max", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (left.cmp(right) > 0) {
                    SRTlib.send('], "end": "BN.max.max"},');

          return left;
        }
                SRTlib.send('], "end": "BN.max.max"},');

        return right;
                SRTlib.send('], "end": "BN.max.max"},');

      };
      BN.min = function min(left, right) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.min.min", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (left.cmp(right) < 0) {
                    SRTlib.send('], "end": "BN.min.min"},');

          return left;
        }
                SRTlib.send('], "end": "BN.min.min"},');

        return right;
                SRTlib.send('], "end": "BN.min.min"},');

      };
      BN.prototype._init = function init(number, base, endian) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._init.init", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (typeof number === 'number') {
                    SRTlib.send('], "end": "BN.prototype._init.init"},');

          return this._initNumber(number, base, endian);
        }
        if (typeof number === 'object') {
                    SRTlib.send('], "end": "BN.prototype._init.init"},');

          return this._initArray(number, base, endian);
        }
        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === '-') {
          this.negative = 1;
        }
        this.strip();
        if (endian !== 'le') {
                    SRTlib.send('], "end": "BN.prototype._init.init"},');

          return;
        }
        this._initArray(this.toArray(), base, endian);
                SRTlib.send('], "end": "BN.prototype._init.init"},');

      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._initNumber._initNumber", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000);
          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
          this.length = 3;
        }
        if (endian !== 'le') {
                    SRTlib.send('], "end": "BN.prototype._initNumber._initNumber"},');

          return;
        }
        this._initArray(this.toArray(), base, endian);
                SRTlib.send('], "end": "BN.prototype._initNumber._initNumber"},');

      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._initArray._initArray", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
                    SRTlib.send('], "end": "BN.prototype._initArray._initArray"},');

          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === 'be') {
          for ((i = number.length - 1, j = 0); i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for ((i = 0, j = 0); i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
                SRTlib.send('], "end": "BN.prototype._initArray._initArray"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype._initArray._initArray"},');

      };
      function parseHex(str, start, end) {
                SRTlib.send(`{ "anonymous": false, "function": "parseHex", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 0xa;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 0xa;
          } else {
            r |= c & 0xf;
          }
        }
                SRTlib.send('], "end": "parseHex"},');

        return r;
                SRTlib.send('], "end": "parseHex"},');

      }
      BN.prototype._parseHex = function _parseHex(number, start) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._parseHex._parseHex", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for ((i = number.length - 6, j = 0); i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        }
        this.strip();
                SRTlib.send('], "end": "BN.prototype._parseHex._parseHex"},');

      };
      function parseBase(str, start, end, mul) {
                SRTlib.send(`{ "anonymous": false, "function": "parseBase", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 0xa;
          } else if (c >= 17) {
            r += c - 17 + 0xa;
          } else {
            r += c;
          }
        }
                SRTlib.send('], "end": "parseBase"},');

        return r;
                SRTlib.send('], "end": "parseBase"},');

      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._parseBase._parseBase", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
                SRTlib.send('], "end": "BN.prototype._parseBase._parseBase"},');

      };
      BN.prototype.copy = function copy(dest) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.copy.copy", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
                SRTlib.send('], "end": "BN.prototype.copy.copy"},');

      };
      BN.prototype.clone = function clone() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.clone.clone", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var r = new BN(null);
        this.copy(r);
                SRTlib.send('], "end": "BN.prototype.clone.clone"},');

        return r;
                SRTlib.send('], "end": "BN.prototype.clone.clone"},');

      };
      BN.prototype._expand = function _expand(size) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._expand._expand", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        while (this.length < size) {
          this.words[this.length++] = 0;
        }
                SRTlib.send('], "end": "BN.prototype._expand._expand"},');

        return this;
                SRTlib.send('], "end": "BN.prototype._expand._expand"},');

      };
      BN.prototype.strip = function strip() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.strip.strip", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
                SRTlib.send('], "end": "BN.prototype.strip.strip"},');

        return this._normSign();
                SRTlib.send('], "end": "BN.prototype.strip.strip"},');

      };
      BN.prototype._normSign = function _normSign() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._normSign._normSign", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
                SRTlib.send('], "end": "BN.prototype._normSign._normSign"},');

        return this;
                SRTlib.send('], "end": "BN.prototype._normSign._normSign"},');

      };
      BN.prototype.inspect = function inspect() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.inspect.inspect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.inspect.inspect"},');

        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
                SRTlib.send('], "end": "BN.prototype.inspect.inspect"},');

      };
      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      BN.prototype.toString = function toString(base, padding) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.toString.toString", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 0xffffff).toString(16);
            carry = w >>> 24 - off & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
                    SRTlib.send('], "end": "BN.prototype.toString.toString"},');

          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
                    SRTlib.send('], "end": "BN.prototype.toString.toString"},');

          return out;
        }
        assert(false, 'Base should be between 2 and 36');
                SRTlib.send('], "end": "BN.prototype.toString.toString"},');

      };
      BN.prototype.toNumber = function toNumber() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.toNumber.toNumber", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          ret += 0x10000000000000 + this.words[1] * 0x4000000;
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
                SRTlib.send('], "end": "BN.prototype.toNumber.toNumber"},');

        return this.negative !== 0 ? -ret : ret;
                SRTlib.send('], "end": "BN.prototype.toNumber.toNumber"},');

      };
      BN.prototype.toJSON = function toJSON() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.toJSON.toJSON", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.toJSON.toJSON"},');

        return this.toString(16);
                SRTlib.send('], "end": "BN.prototype.toJSON.toJSON"},');

      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.toBuffer.toBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        assert(typeof Buffer !== 'undefined');
                SRTlib.send('], "end": "BN.prototype.toBuffer.toBuffer"},');

        return this.toArrayLike(Buffer, endian, length);
                SRTlib.send('], "end": "BN.prototype.toBuffer.toBuffer"},');

      };
      BN.prototype.toArray = function toArray(endian, length) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.toArray.toArray", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.toArray.toArray"},');

        return this.toArrayLike(Array, endian, length);
                SRTlib.send('], "end": "BN.prototype.toArray.toArray"},');

      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.toArrayLike.toArrayLike", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
                SRTlib.send('], "end": "BN.prototype.toArrayLike.toArrayLike"},');

        return res;
                SRTlib.send('], "end": "BN.prototype.toArrayLike.toArrayLike"},');

      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
                    SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._countBits._countBits", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "BN.prototype._countBits._countBits"},');

          return 32 - Math.clz32(w);
                    SRTlib.send('], "end": "BN.prototype._countBits._countBits"},');

        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
                    SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._countBits._countBits2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
                    SRTlib.send('], "end": "BN.prototype._countBits._countBits2"},');

          return r + t;
                    SRTlib.send('], "end": "BN.prototype._countBits._countBits2"},');

        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._zeroBits._zeroBits", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (w === 0) {
                    SRTlib.send('], "end": "BN.prototype._zeroBits._zeroBits"},');

          return 26;
        }
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
                SRTlib.send('], "end": "BN.prototype._zeroBits._zeroBits"},');

        return r;
                SRTlib.send('], "end": "BN.prototype._zeroBits._zeroBits"},');

      };
      BN.prototype.bitLength = function bitLength() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.bitLength.bitLength", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
                SRTlib.send('], "end": "BN.prototype.bitLength.bitLength"},');

        return (this.length - 1) * 26 + hi;
                SRTlib.send('], "end": "BN.prototype.bitLength.bitLength"},');

      };
      function toBitArray(num) {
                SRTlib.send(`{ "anonymous": false, "function": "toBitArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
                SRTlib.send('], "end": "toBitArray"},');

        return w;
                SRTlib.send('], "end": "toBitArray"},');

      }
      BN.prototype.zeroBits = function zeroBits() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.zeroBits.zeroBits", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.isZero()) {
                    SRTlib.send('], "end": "BN.prototype.zeroBits.zeroBits"},');

          return 0;
        }
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
                SRTlib.send('], "end": "BN.prototype.zeroBits.zeroBits"},');

        return r;
                SRTlib.send('], "end": "BN.prototype.zeroBits.zeroBits"},');

      };
      BN.prototype.byteLength = function byteLength() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.byteLength.byteLength", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.byteLength.byteLength"},');

        return Math.ceil(this.bitLength() / 8);
                SRTlib.send('], "end": "BN.prototype.byteLength.byteLength"},');

      };
      BN.prototype.toTwos = function toTwos(width) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.toTwos.toTwos", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.negative !== 0) {
                    SRTlib.send('], "end": "BN.prototype.toTwos.toTwos"},');

          return this.abs().inotn(width).iaddn(1);
        }
                SRTlib.send('], "end": "BN.prototype.toTwos.toTwos"},');

        return this.clone();
                SRTlib.send('], "end": "BN.prototype.toTwos.toTwos"},');

      };
      BN.prototype.fromTwos = function fromTwos(width) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.fromTwos.fromTwos", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.testn(width - 1)) {
                    SRTlib.send('], "end": "BN.prototype.fromTwos.fromTwos"},');

          return this.notn(width).iaddn(1).ineg();
        }
                SRTlib.send('], "end": "BN.prototype.fromTwos.fromTwos"},');

        return this.clone();
                SRTlib.send('], "end": "BN.prototype.fromTwos.fromTwos"},');

      };
      BN.prototype.isNeg = function isNeg() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.isNeg.isNeg", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.isNeg.isNeg"},');

        return this.negative !== 0;
                SRTlib.send('], "end": "BN.prototype.isNeg.isNeg"},');

      };
      BN.prototype.neg = function neg() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.neg.neg", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.neg.neg"},');

        return this.clone().ineg();
                SRTlib.send('], "end": "BN.prototype.neg.neg"},');

      };
      BN.prototype.ineg = function ineg() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ineg.ineg", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (!this.isZero()) {
          this.negative ^= 1;
        }
                SRTlib.send('], "end": "BN.prototype.ineg.ineg"},');

        return this;
                SRTlib.send('], "end": "BN.prototype.ineg.ineg"},');

      };
      BN.prototype.iuor = function iuor(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iuor.iuor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
                SRTlib.send('], "end": "BN.prototype.iuor.iuor"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.iuor.iuor"},');

      };
      BN.prototype.ior = function ior(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ior.ior", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert((this.negative | num.negative) === 0);
                SRTlib.send('], "end": "BN.prototype.ior.ior"},');

        return this.iuor(num);
                SRTlib.send('], "end": "BN.prototype.ior.ior"},');

      };
      BN.prototype.or = function or(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.or.or", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length > num.length) {
                    SRTlib.send('], "end": "BN.prototype.or.or"},');

          return this.clone().ior(num);
        }
                SRTlib.send('], "end": "BN.prototype.or.or"},');

        return num.clone().ior(this);
                SRTlib.send('], "end": "BN.prototype.or.or"},');

      };
      BN.prototype.uor = function uor(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.uor.uor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length > num.length) {
                    SRTlib.send('], "end": "BN.prototype.uor.uor"},');

          return this.clone().iuor(num);
        }
                SRTlib.send('], "end": "BN.prototype.uor.uor"},');

        return num.clone().iuor(this);
                SRTlib.send('], "end": "BN.prototype.uor.uor"},');

      };
      BN.prototype.iuand = function iuand(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iuand.iuand", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
                SRTlib.send('], "end": "BN.prototype.iuand.iuand"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.iuand.iuand"},');

      };
      BN.prototype.iand = function iand(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iand.iand", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert((this.negative | num.negative) === 0);
                SRTlib.send('], "end": "BN.prototype.iand.iand"},');

        return this.iuand(num);
                SRTlib.send('], "end": "BN.prototype.iand.iand"},');

      };
      BN.prototype.and = function and(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.and.and", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length > num.length) {
                    SRTlib.send('], "end": "BN.prototype.and.and"},');

          return this.clone().iand(num);
        }
                SRTlib.send('], "end": "BN.prototype.and.and"},');

        return num.clone().iand(this);
                SRTlib.send('], "end": "BN.prototype.and.and"},');

      };
      BN.prototype.uand = function uand(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.uand.uand", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length > num.length) {
                    SRTlib.send('], "end": "BN.prototype.uand.uand"},');

          return this.clone().iuand(num);
        }
                SRTlib.send('], "end": "BN.prototype.uand.uand"},');

        return num.clone().iuand(this);
                SRTlib.send('], "end": "BN.prototype.uand.uand"},');

      };
      BN.prototype.iuxor = function iuxor(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iuxor.iuxor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
                SRTlib.send('], "end": "BN.prototype.iuxor.iuxor"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.iuxor.iuxor"},');

      };
      BN.prototype.ixor = function ixor(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ixor.ixor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert((this.negative | num.negative) === 0);
                SRTlib.send('], "end": "BN.prototype.ixor.ixor"},');

        return this.iuxor(num);
                SRTlib.send('], "end": "BN.prototype.ixor.ixor"},');

      };
      BN.prototype.xor = function xor(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.xor.xor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length > num.length) {
                    SRTlib.send('], "end": "BN.prototype.xor.xor"},');

          return this.clone().ixor(num);
        }
                SRTlib.send('], "end": "BN.prototype.xor.xor"},');

        return num.clone().ixor(this);
                SRTlib.send('], "end": "BN.prototype.xor.xor"},');

      };
      BN.prototype.uxor = function uxor(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.uxor.uxor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length > num.length) {
                    SRTlib.send('], "end": "BN.prototype.uxor.uxor"},');

          return this.clone().iuxor(num);
        }
                SRTlib.send('], "end": "BN.prototype.uxor.uxor"},');

        return num.clone().iuxor(this);
                SRTlib.send('], "end": "BN.prototype.uxor.uxor"},');

      };
      BN.prototype.inotn = function inotn(width) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.inotn.inotn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        }
                SRTlib.send('], "end": "BN.prototype.inotn.inotn"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.inotn.inotn"},');

      };
      BN.prototype.notn = function notn(width) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.notn.notn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.notn.notn"},');

        return this.clone().inotn(width);
                SRTlib.send('], "end": "BN.prototype.notn.notn"},');

      };
      BN.prototype.setn = function setn(bit, val) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.setn.setn", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
                SRTlib.send('], "end": "BN.prototype.setn.setn"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.setn.setn"},');

      };
      BN.prototype.iadd = function iadd(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iadd.iadd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
                    SRTlib.send('], "end": "BN.prototype.iadd.iadd"},');

          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
                    SRTlib.send('], "end": "BN.prototype.iadd.iadd"},');

          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
                SRTlib.send('], "end": "BN.prototype.iadd.iadd"},');

        return this;
                SRTlib.send('], "end": "BN.prototype.iadd.iadd"},');

      };
      BN.prototype.add = function add(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.add.add", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
                    SRTlib.send('], "end": "BN.prototype.add.add"},');

          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
                    SRTlib.send('], "end": "BN.prototype.add.add"},');

          return res;
        }
        if (this.length > num.length) {
                    SRTlib.send('], "end": "BN.prototype.add.add"},');

          return this.clone().iadd(num);
        }
                SRTlib.send('], "end": "BN.prototype.add.add"},');

        return num.clone().iadd(this);
                SRTlib.send('], "end": "BN.prototype.add.add"},');

      };
      BN.prototype.isub = function isub(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.isub.isub", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
                    SRTlib.send('], "end": "BN.prototype.isub.isub"},');

          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
                    SRTlib.send('], "end": "BN.prototype.isub.isub"},');

          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
                    SRTlib.send('], "end": "BN.prototype.isub.isub"},');

          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
                SRTlib.send('], "end": "BN.prototype.isub.isub"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.isub.isub"},');

      };
      BN.prototype.sub = function sub(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.sub.sub", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.sub.sub"},');

        return this.clone().isub(num);
                SRTlib.send('], "end": "BN.prototype.sub.sub"},');

      };
      function smallMulTo(self, num, out) {
                SRTlib.send(`{ "anonymous": false, "function": "smallMulTo", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 0x4000000 | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
                SRTlib.send('], "end": "smallMulTo"},');

        return out.strip();
                SRTlib.send('], "end": "smallMulTo"},');

      }
      var comb10MulTo = function comb10MulTo(self, num, out) {
                SRTlib.send(`{ "anonymous": false, "function": "comb10MulTo", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
                SRTlib.send('], "end": "comb10MulTo"},');

        return out;
                SRTlib.send('], "end": "comb10MulTo"},');

      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self, num, out) {
                SRTlib.send(`{ "anonymous": false, "function": "bigMulTo", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 0x3ffffff;
            ncarry = ncarry + (r / 0x4000000 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 0x3ffffff;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
                SRTlib.send('], "end": "bigMulTo"},');

        return out.strip();
                SRTlib.send('], "end": "bigMulTo"},');

      }
      function jumboMulTo(self, num, out) {
                SRTlib.send(`{ "anonymous": false, "function": "jumboMulTo", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var fftm = new FFTM();
                SRTlib.send('], "end": "jumboMulTo"},');

        return fftm.mulp(self, num, out);
                SRTlib.send('], "end": "jumboMulTo"},');

      }
      BN.prototype.mulTo = function mulTo(num, out) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.mulTo.mulTo", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
                SRTlib.send('], "end": "BN.prototype.mulTo.mulTo"},');

        return res;
                SRTlib.send('], "end": "BN.prototype.mulTo.mulTo"},');

      };
      function FFTM(x, y) {
                SRTlib.send(`{ "anonymous": false, "function": "FFTM", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.x = x;
        this.y = y;
                SRTlib.send('], "end": "FFTM"},');

      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.makeRBT.makeRBT", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
                SRTlib.send('], "end": "FFTM.prototype.makeRBT.makeRBT"},');

        return t;
                SRTlib.send('], "end": "FFTM.prototype.makeRBT.makeRBT"},');

      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.revBin.revBin", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (x === 0 || x === N - 1) {
                    SRTlib.send('], "end": "FFTM.prototype.revBin.revBin"},');

          return x;
        }
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
                SRTlib.send('], "end": "FFTM.prototype.revBin.revBin"},');

        return rb;
                SRTlib.send('], "end": "FFTM.prototype.revBin.revBin"},');

      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.permute.permute", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
                SRTlib.send('], "end": "FFTM.prototype.permute.permute"},');

      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.transform.transform", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
                SRTlib.send('], "end": "FFTM.prototype.transform.transform"},');

      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.guessLen13b.guessLen13b", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
                SRTlib.send('], "end": "FFTM.prototype.guessLen13b.guessLen13b"},');

        return 1 << i + 1 + odd;
                SRTlib.send('], "end": "FFTM.prototype.guessLen13b.guessLen13b"},');

      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.conjugate.conjugate", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (N <= 1) {
                    SRTlib.send('], "end": "FFTM.prototype.conjugate.conjugate"},');

          return;
        }
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
                SRTlib.send('], "end": "FFTM.prototype.conjugate.conjugate"},');

      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.normalize13b.normalize13b", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 0x3ffffff;
          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }
                SRTlib.send('], "end": "FFTM.prototype.normalize13b.normalize13b"},');

        return ws;
                SRTlib.send('], "end": "FFTM.prototype.normalize13b.normalize13b"},');

      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.convert13b.convert13b", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 0x1fff;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
                SRTlib.send('], "end": "FFTM.prototype.convert13b.convert13b"},');

      };
      FFTM.prototype.stub = function stub(N) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.stub.stub", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
                SRTlib.send('], "end": "FFTM.prototype.stub.stub"},');

        return ph;
                SRTlib.send('], "end": "FFTM.prototype.stub.stub"},');

      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
                SRTlib.send(`{ "anonymous": true, "function": "FFTM.prototype.mulp.mulp", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
                SRTlib.send('], "end": "FFTM.prototype.mulp.mulp"},');

        return out.strip();
                SRTlib.send('], "end": "FFTM.prototype.mulp.mulp"},');

      };
      BN.prototype.mul = function mul(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.mul.mul", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var out = new BN(null);
        out.words = new Array(this.length + num.length);
                SRTlib.send('], "end": "BN.prototype.mul.mul"},');

        return this.mulTo(num, out);
                SRTlib.send('], "end": "BN.prototype.mul.mul"},');

      };
      BN.prototype.mulf = function mulf(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.mulf.mulf", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var out = new BN(null);
        out.words = new Array(this.length + num.length);
                SRTlib.send('], "end": "BN.prototype.mulf.mulf"},');

        return jumboMulTo(this, num, out);
                SRTlib.send('], "end": "BN.prototype.mulf.mulf"},');

      };
      BN.prototype.imul = function imul(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.imul.imul", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.imul.imul"},');

        return this.clone().mulTo(num, this);
                SRTlib.send('], "end": "BN.prototype.imul.imul"},');

      };
      BN.prototype.imuln = function imuln(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.imuln.imuln", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(typeof num === 'number');
        assert(num < 0x4000000);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += w / 0x4000000 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
                SRTlib.send('], "end": "BN.prototype.imuln.imuln"},');

        return this;
                SRTlib.send('], "end": "BN.prototype.imuln.imuln"},');

      };
      BN.prototype.muln = function muln(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.muln.muln", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.muln.muln"},');

        return this.clone().imuln(num);
                SRTlib.send('], "end": "BN.prototype.muln.muln"},');

      };
      BN.prototype.sqr = function sqr() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.sqr.sqr", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.sqr.sqr"},');

        return this.mul(this);
                SRTlib.send('], "end": "BN.prototype.sqr.sqr"},');

      };
      BN.prototype.isqr = function isqr() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.isqr.isqr", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.isqr.isqr"},');

        return this.imul(this.clone());
                SRTlib.send('], "end": "BN.prototype.isqr.isqr"},');

      };
      BN.prototype.pow = function pow(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.pow.pow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var w = toBitArray(num);
        if (w.length === 0) {
                    SRTlib.send('], "end": "BN.prototype.pow.pow"},');

          return new BN(1);
        }
        var res = this;
        for (var i = 0; i < w.length; (i++, res = res.sqr())) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; (i++, q = q.sqr())) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
                SRTlib.send('], "end": "BN.prototype.pow.pow"},');

        return res;
                SRTlib.send('], "end": "BN.prototype.pow.pow"},');

      };
      BN.prototype.iushln = function iushln(bits) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iushln.iushln", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
                SRTlib.send('], "end": "BN.prototype.iushln.iushln"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.iushln.iushln"},');

      };
      BN.prototype.ishln = function ishln(bits) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ishln.ishln", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.negative === 0);
                SRTlib.send('], "end": "BN.prototype.ishln.ishln"},');

        return this.iushln(bits);
                SRTlib.send('], "end": "BN.prototype.ishln.ishln"},');

      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iushrn.iushrn", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {} else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
                SRTlib.send('], "end": "BN.prototype.iushrn.iushrn"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.iushrn.iushrn"},');

      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ishrn.ishrn", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        assert(this.negative === 0);
                SRTlib.send('], "end": "BN.prototype.ishrn.ishrn"},');

        return this.iushrn(bits, hint, extended);
                SRTlib.send('], "end": "BN.prototype.ishrn.ishrn"},');

      };
      BN.prototype.shln = function shln(bits) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.shln.shln", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.shln.shln"},');

        return this.clone().ishln(bits);
                SRTlib.send('], "end": "BN.prototype.shln.shln"},');

      };
      BN.prototype.ushln = function ushln(bits) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ushln.ushln", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.ushln.ushln"},');

        return this.clone().iushln(bits);
                SRTlib.send('], "end": "BN.prototype.ushln.ushln"},');

      };
      BN.prototype.shrn = function shrn(bits) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.shrn.shrn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.shrn.shrn"},');

        return this.clone().ishrn(bits);
                SRTlib.send('], "end": "BN.prototype.shrn.shrn"},');

      };
      BN.prototype.ushrn = function ushrn(bits) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ushrn.ushrn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.ushrn.ushrn"},');

        return this.clone().iushrn(bits);
                SRTlib.send('], "end": "BN.prototype.ushrn.ushrn"},');

      };
      BN.prototype.testn = function testn(bit) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.testn.testn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
                    SRTlib.send('], "end": "BN.prototype.testn.testn"},');

          return false;
        }
        var w = this.words[s];
                SRTlib.send('], "end": "BN.prototype.testn.testn"},');

        return !!(w & q);
                SRTlib.send('], "end": "BN.prototype.testn.testn"},');

      };
      BN.prototype.imaskn = function imaskn(bits) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.imaskn.imaskn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) {
                    SRTlib.send('], "end": "BN.prototype.imaskn.imaskn"},');

          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
          this.words[this.length - 1] &= mask;
        }
                SRTlib.send('], "end": "BN.prototype.imaskn.imaskn"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.imaskn.imaskn"},');

      };
      BN.prototype.maskn = function maskn(bits) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.maskn.maskn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.maskn.maskn"},');

        return this.clone().imaskn(bits);
                SRTlib.send('], "end": "BN.prototype.maskn.maskn"},');

      };
      BN.prototype.iaddn = function iaddn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iaddn.iaddn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) {
                    SRTlib.send('], "end": "BN.prototype.iaddn.iaddn"},');

          return this.isubn(-num);
        }
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
                        SRTlib.send('], "end": "BN.prototype.iaddn.iaddn"},');

            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
                    SRTlib.send('], "end": "BN.prototype.iaddn.iaddn"},');

          return this;
        }
                SRTlib.send('], "end": "BN.prototype.iaddn.iaddn"},');

        return this._iaddn(num);
                SRTlib.send('], "end": "BN.prototype.iaddn.iaddn"},');

      };
      BN.prototype._iaddn = function _iaddn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._iaddn._iaddn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
                SRTlib.send('], "end": "BN.prototype._iaddn._iaddn"},');

        return this;
                SRTlib.send('], "end": "BN.prototype._iaddn._iaddn"},');

      };
      BN.prototype.isubn = function isubn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.isubn.isubn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) {
                    SRTlib.send('], "end": "BN.prototype.isubn.isubn"},');

          return this.iaddn(-num);
        }
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
                    SRTlib.send('], "end": "BN.prototype.isubn.isubn"},');

          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }
                SRTlib.send('], "end": "BN.prototype.isubn.isubn"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.isubn.isubn"},');

      };
      BN.prototype.addn = function addn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.addn.addn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.addn.addn"},');

        return this.clone().iaddn(num);
                SRTlib.send('], "end": "BN.prototype.addn.addn"},');

      };
      BN.prototype.subn = function subn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.subn.subn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.subn.subn"},');

        return this.clone().isubn(num);
                SRTlib.send('], "end": "BN.prototype.subn.subn"},');

      };
      BN.prototype.iabs = function iabs() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.iabs.iabs", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.negative = 0;
                SRTlib.send('], "end": "BN.prototype.iabs.iabs"},');

        return this;
                SRTlib.send('], "end": "BN.prototype.iabs.iabs"},');

      };
      BN.prototype.abs = function abs() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.abs.abs", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.abs.abs"},');

        return this.clone().iabs();
                SRTlib.send('], "end": "BN.prototype.abs.abs"},');

      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._ishlnsubmul._ishlnsubmul", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - (right / 0x4000000 | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) {
                    SRTlib.send('], "end": "BN.prototype._ishlnsubmul._ishlnsubmul"},');

          return this.strip();
        }
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
                SRTlib.send('], "end": "BN.prototype._ishlnsubmul._ishlnsubmul"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype._ishlnsubmul._ishlnsubmul"},');

      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._wordDiv._wordDiv", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 0x3ffffff);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }
                SRTlib.send('], "end": "BN.prototype._wordDiv._wordDiv"},');

        return {
          div: q || null,
          mod: a
        };
                SRTlib.send('], "end": "BN.prototype._wordDiv._wordDiv"},');

      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.divmod.divmod", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        assert(!num.isZero());
        if (this.isZero()) {
                    SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== 'mod') {
            div = res.div.neg();
          }
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
                    SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

          return {
            div: div,
            mod: mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== 'mod') {
            div = res.div.neg();
          }
                    SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

          return {
            div: div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
                    SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

          return {
            div: res.div,
            mod: mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
                    SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === 'div') {
                        SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === 'mod') {
                        SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
                    SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
                SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

        return this._wordDiv(num, mode);
                SRTlib.send('], "end": "BN.prototype.divmod.divmod"},');

      };
      BN.prototype.div = function div(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.div.div", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.div.div"},');

        return this.divmod(num, 'div', false).div;
                SRTlib.send('], "end": "BN.prototype.div.div"},');

      };
      BN.prototype.mod = function mod(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.mod.mod", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.mod.mod"},');

        return this.divmod(num, 'mod', false).mod;
                SRTlib.send('], "end": "BN.prototype.mod.mod"},');

      };
      BN.prototype.umod = function umod(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.umod.umod", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.umod.umod"},');

        return this.divmod(num, 'mod', true).mod;
                SRTlib.send('], "end": "BN.prototype.umod.umod"},');

      };
      BN.prototype.divRound = function divRound(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.divRound.divRound", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var dm = this.divmod(num);
        if (dm.mod.isZero()) {
                    SRTlib.send('], "end": "BN.prototype.divRound.divRound"},');

          return dm.div;
        }
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) {
                    SRTlib.send('], "end": "BN.prototype.divRound.divRound"},');

          return dm.div;
        }
                SRTlib.send('], "end": "BN.prototype.divRound.divRound"},');

        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                SRTlib.send('], "end": "BN.prototype.divRound.divRound"},');

      };
      BN.prototype.modn = function modn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.modn.modn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
                SRTlib.send('], "end": "BN.prototype.modn.modn"},');

        return acc;
                SRTlib.send('], "end": "BN.prototype.modn.modn"},');

      };
      BN.prototype.idivn = function idivn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.idivn.idivn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(num <= 0x3ffffff);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
                SRTlib.send('], "end": "BN.prototype.idivn.idivn"},');

        return this.strip();
                SRTlib.send('], "end": "BN.prototype.idivn.idivn"},');

      };
      BN.prototype.divn = function divn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.divn.divn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.divn.divn"},');

        return this.clone().idivn(num);
                SRTlib.send('], "end": "BN.prototype.divn.divn"},');

      };
      BN.prototype.egcd = function egcd(p) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.egcd.egcd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; (++i, im <<= 1)) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; (++j, jm <<= 1)) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
                SRTlib.send('], "end": "BN.prototype.egcd.egcd"},');

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
                SRTlib.send('], "end": "BN.prototype.egcd.egcd"},');

      };
      BN.prototype._invmp = function _invmp(p) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._invmp._invmp", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; (++i, im <<= 1)) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; (++j, jm <<= 1)) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
                SRTlib.send('], "end": "BN.prototype._invmp._invmp"},');

        return res;
                SRTlib.send('], "end": "BN.prototype._invmp._invmp"},');

      };
      BN.prototype.gcd = function gcd(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.gcd.gcd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.isZero()) {
                    SRTlib.send('], "end": "BN.prototype.gcd.gcd"},');

          return num.abs();
        }
        if (num.isZero()) {
                    SRTlib.send('], "end": "BN.prototype.gcd.gcd"},');

          return this.abs();
        }
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
                SRTlib.send('], "end": "BN.prototype.gcd.gcd"},');

        return b.iushln(shift);
                SRTlib.send('], "end": "BN.prototype.gcd.gcd"},');

      };
      BN.prototype.invm = function invm(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.invm.invm", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.invm.invm"},');

        return this.egcd(num).a.umod(num);
                SRTlib.send('], "end": "BN.prototype.invm.invm"},');

      };
      BN.prototype.isEven = function isEven() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.isEven.isEven", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.isEven.isEven"},');

        return (this.words[0] & 1) === 0;
                SRTlib.send('], "end": "BN.prototype.isEven.isEven"},');

      };
      BN.prototype.isOdd = function isOdd() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.isOdd.isOdd", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.isOdd.isOdd"},');

        return (this.words[0] & 1) === 1;
                SRTlib.send('], "end": "BN.prototype.isOdd.isOdd"},');

      };
      BN.prototype.andln = function andln(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.andln.andln", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.andln.andln"},');

        return this.words[0] & num;
                SRTlib.send('], "end": "BN.prototype.andln.andln"},');

      };
      BN.prototype.bincn = function bincn(bit) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.bincn.bincn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
                    SRTlib.send('], "end": "BN.prototype.bincn.bincn"},');

          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
                SRTlib.send('], "end": "BN.prototype.bincn.bincn"},');

        return this;
                SRTlib.send('], "end": "BN.prototype.bincn.bincn"},');

      };
      BN.prototype.isZero = function isZero() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.isZero.isZero", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.isZero.isZero"},');

        return this.length === 1 && this.words[0] === 0;
                SRTlib.send('], "end": "BN.prototype.isZero.isZero"},');

      };
      BN.prototype.cmpn = function cmpn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.cmpn.cmpn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var negative = num < 0;
        if (this.negative !== 0 && !negative) {
                    SRTlib.send('], "end": "BN.prototype.cmpn.cmpn"},');

          return -1;
        }
        if (this.negative === 0 && negative) {
                    SRTlib.send('], "end": "BN.prototype.cmpn.cmpn"},');

          return 1;
        }
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 0x3ffffff, 'Number is too big');
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) {
                    SRTlib.send('], "end": "BN.prototype.cmpn.cmpn"},');

          return -res | 0;
        }
                SRTlib.send('], "end": "BN.prototype.cmpn.cmpn"},');

        return res;
                SRTlib.send('], "end": "BN.prototype.cmpn.cmpn"},');

      };
      BN.prototype.cmp = function cmp(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.cmp.cmp", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.negative !== 0 && num.negative === 0) {
                    SRTlib.send('], "end": "BN.prototype.cmp.cmp"},');

          return -1;
        }
        if (this.negative === 0 && num.negative !== 0) {
                    SRTlib.send('], "end": "BN.prototype.cmp.cmp"},');

          return 1;
        }
        var res = this.ucmp(num);
        if (this.negative !== 0) {
                    SRTlib.send('], "end": "BN.prototype.cmp.cmp"},');

          return -res | 0;
        }
                SRTlib.send('], "end": "BN.prototype.cmp.cmp"},');

        return res;
                SRTlib.send('], "end": "BN.prototype.cmp.cmp"},');

      };
      BN.prototype.ucmp = function ucmp(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ucmp.ucmp", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length > num.length) {
                    SRTlib.send('], "end": "BN.prototype.ucmp.ucmp"},');

          return 1;
        }
        if (this.length < num.length) {
                    SRTlib.send('], "end": "BN.prototype.ucmp.ucmp"},');

          return -1;
        }
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
                SRTlib.send('], "end": "BN.prototype.ucmp.ucmp"},');

        return res;
                SRTlib.send('], "end": "BN.prototype.ucmp.ucmp"},');

      };
      BN.prototype.gtn = function gtn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.gtn.gtn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.gtn.gtn"},');

        return this.cmpn(num) === 1;
                SRTlib.send('], "end": "BN.prototype.gtn.gtn"},');

      };
      BN.prototype.gt = function gt(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.gt.gt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.gt.gt"},');

        return this.cmp(num) === 1;
                SRTlib.send('], "end": "BN.prototype.gt.gt"},');

      };
      BN.prototype.gten = function gten(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.gten.gten", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.gten.gten"},');

        return this.cmpn(num) >= 0;
                SRTlib.send('], "end": "BN.prototype.gten.gten"},');

      };
      BN.prototype.gte = function gte(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.gte.gte", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.gte.gte"},');

        return this.cmp(num) >= 0;
                SRTlib.send('], "end": "BN.prototype.gte.gte"},');

      };
      BN.prototype.ltn = function ltn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.ltn.ltn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.ltn.ltn"},');

        return this.cmpn(num) === -1;
                SRTlib.send('], "end": "BN.prototype.ltn.ltn"},');

      };
      BN.prototype.lt = function lt(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.lt.lt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.lt.lt"},');

        return this.cmp(num) === -1;
                SRTlib.send('], "end": "BN.prototype.lt.lt"},');

      };
      BN.prototype.lten = function lten(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.lten.lten", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.lten.lten"},');

        return this.cmpn(num) <= 0;
                SRTlib.send('], "end": "BN.prototype.lten.lten"},');

      };
      BN.prototype.lte = function lte(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.lte.lte", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.lte.lte"},');

        return this.cmp(num) <= 0;
                SRTlib.send('], "end": "BN.prototype.lte.lte"},');

      };
      BN.prototype.eqn = function eqn(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.eqn.eqn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.eqn.eqn"},');

        return this.cmpn(num) === 0;
                SRTlib.send('], "end": "BN.prototype.eqn.eqn"},');

      };
      BN.prototype.eq = function eq(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.eq.eq", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.prototype.eq.eq"},');

        return this.cmp(num) === 0;
                SRTlib.send('], "end": "BN.prototype.eq.eq"},');

      };
      BN.red = function red(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.red.red", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.red.red"},');

        return new Red(num);
                SRTlib.send('], "end": "BN.red.red"},');

      };
      BN.prototype.toRed = function toRed(ctx) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.toRed.toRed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
                SRTlib.send('], "end": "BN.prototype.toRed.toRed"},');

        return ctx.convertTo(this)._forceRed(ctx);
                SRTlib.send('], "end": "BN.prototype.toRed.toRed"},');

      };
      BN.prototype.fromRed = function fromRed() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.fromRed.fromRed", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        assert(this.red, 'fromRed works only with numbers in reduction context');
                SRTlib.send('], "end": "BN.prototype.fromRed.fromRed"},');

        return this.red.convertFrom(this);
                SRTlib.send('], "end": "BN.prototype.fromRed.fromRed"},');

      };
      BN.prototype._forceRed = function _forceRed(ctx) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype._forceRed._forceRed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.red = ctx;
                SRTlib.send('], "end": "BN.prototype._forceRed._forceRed"},');

        return this;
                SRTlib.send('], "end": "BN.prototype._forceRed._forceRed"},');

      };
      BN.prototype.forceRed = function forceRed(ctx) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.forceRed.forceRed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(!this.red, 'Already a number in reduction context');
                SRTlib.send('], "end": "BN.prototype.forceRed.forceRed"},');

        return this._forceRed(ctx);
                SRTlib.send('], "end": "BN.prototype.forceRed.forceRed"},');

      };
      BN.prototype.redAdd = function redAdd(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redAdd.redAdd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.red, 'redAdd works only with red numbers');
                SRTlib.send('], "end": "BN.prototype.redAdd.redAdd"},');

        return this.red.add(this, num);
                SRTlib.send('], "end": "BN.prototype.redAdd.redAdd"},');

      };
      BN.prototype.redIAdd = function redIAdd(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redIAdd.redIAdd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.red, 'redIAdd works only with red numbers');
                SRTlib.send('], "end": "BN.prototype.redIAdd.redIAdd"},');

        return this.red.iadd(this, num);
                SRTlib.send('], "end": "BN.prototype.redIAdd.redIAdd"},');

      };
      BN.prototype.redSub = function redSub(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redSub.redSub", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.red, 'redSub works only with red numbers');
                SRTlib.send('], "end": "BN.prototype.redSub.redSub"},');

        return this.red.sub(this, num);
                SRTlib.send('], "end": "BN.prototype.redSub.redSub"},');

      };
      BN.prototype.redISub = function redISub(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redISub.redISub", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.red, 'redISub works only with red numbers');
                SRTlib.send('], "end": "BN.prototype.redISub.redISub"},');

        return this.red.isub(this, num);
                SRTlib.send('], "end": "BN.prototype.redISub.redISub"},');

      };
      BN.prototype.redShl = function redShl(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redShl.redShl", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.red, 'redShl works only with red numbers');
                SRTlib.send('], "end": "BN.prototype.redShl.redShl"},');

        return this.red.shl(this, num);
                SRTlib.send('], "end": "BN.prototype.redShl.redShl"},');

      };
      BN.prototype.redMul = function redMul(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redMul.redMul", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
                SRTlib.send('], "end": "BN.prototype.redMul.redMul"},');

        return this.red.mul(this, num);
                SRTlib.send('], "end": "BN.prototype.redMul.redMul"},');

      };
      BN.prototype.redIMul = function redIMul(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redIMul.redIMul", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
                SRTlib.send('], "end": "BN.prototype.redIMul.redIMul"},');

        return this.red.imul(this, num);
                SRTlib.send('], "end": "BN.prototype.redIMul.redIMul"},');

      };
      BN.prototype.redSqr = function redSqr() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redSqr.redSqr", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
                SRTlib.send('], "end": "BN.prototype.redSqr.redSqr"},');

        return this.red.sqr(this);
                SRTlib.send('], "end": "BN.prototype.redSqr.redSqr"},');

      };
      BN.prototype.redISqr = function redISqr() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redISqr.redISqr", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
                SRTlib.send('], "end": "BN.prototype.redISqr.redISqr"},');

        return this.red.isqr(this);
                SRTlib.send('], "end": "BN.prototype.redISqr.redISqr"},');

      };
      BN.prototype.redSqrt = function redSqrt() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redSqrt.redSqrt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
                SRTlib.send('], "end": "BN.prototype.redSqrt.redSqrt"},');

        return this.red.sqrt(this);
                SRTlib.send('], "end": "BN.prototype.redSqrt.redSqrt"},');

      };
      BN.prototype.redInvm = function redInvm() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redInvm.redInvm", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
                SRTlib.send('], "end": "BN.prototype.redInvm.redInvm"},');

        return this.red.invm(this);
                SRTlib.send('], "end": "BN.prototype.redInvm.redInvm"},');

      };
      BN.prototype.redNeg = function redNeg() {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redNeg.redNeg", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
                SRTlib.send('], "end": "BN.prototype.redNeg.redNeg"},');

        return this.red.neg(this);
                SRTlib.send('], "end": "BN.prototype.redNeg.redNeg"},');

      };
      BN.prototype.redPow = function redPow(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.prototype.redPow.redPow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
                SRTlib.send('], "end": "BN.prototype.redPow.redPow"},');

        return this.red.pow(this, num);
                SRTlib.send('], "end": "BN.prototype.redPow.redPow"},');

      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
                SRTlib.send(`{ "anonymous": false, "function": "MPrime", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
                SRTlib.send('], "end": "MPrime"},');

      }
      MPrime.prototype._tmp = function _tmp() {
                SRTlib.send(`{ "anonymous": true, "function": "MPrime.prototype._tmp._tmp", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
                SRTlib.send('], "end": "MPrime.prototype._tmp._tmp"},');

        return tmp;
                SRTlib.send('], "end": "MPrime.prototype._tmp._tmp"},');

      };
      MPrime.prototype.ireduce = function ireduce(num) {
                SRTlib.send(`{ "anonymous": true, "function": "MPrime.prototype.ireduce.ireduce", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
                SRTlib.send('], "end": "MPrime.prototype.ireduce.ireduce"},');

        return r;
                SRTlib.send('], "end": "MPrime.prototype.ireduce.ireduce"},');

      };
      MPrime.prototype.split = function split(input, out) {
                SRTlib.send(`{ "anonymous": true, "function": "MPrime.prototype.split.split", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        input.iushrn(this.n, 0, out);
                SRTlib.send('], "end": "MPrime.prototype.split.split"},');

      };
      MPrime.prototype.imulK = function imulK(num) {
                SRTlib.send(`{ "anonymous": true, "function": "MPrime.prototype.imulK.imulK", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "MPrime.prototype.imulK.imulK"},');

        return num.imul(this.k);
                SRTlib.send('], "end": "MPrime.prototype.imulK.imulK"},');

      };
      function K256() {
                SRTlib.send(`{ "anonymous": false, "function": "K256", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
                SRTlib.send('], "end": "K256"},');

      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
                SRTlib.send(`{ "anonymous": true, "function": "K256.prototype.split.split", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
                    SRTlib.send('], "end": "K256.prototype.split.split"},');

          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
                SRTlib.send('], "end": "K256.prototype.split.split"},');

      };
      K256.prototype.imulK = function imulK(num) {
                SRTlib.send(`{ "anonymous": true, "function": "K256.prototype.imulK.imulK", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
                SRTlib.send('], "end": "K256.prototype.imulK.imulK"},');

        return num;
                SRTlib.send('], "end": "K256.prototype.imulK.imulK"},');

      };
      function P224() {
                SRTlib.send(`{ "anonymous": false, "function": "P224", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
                SRTlib.send('], "end": "P224"},');

      }
      inherits(P224, MPrime);
      function P192() {
                SRTlib.send(`{ "anonymous": false, "function": "P192", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
                SRTlib.send('], "end": "P192"},');

      }
      inherits(P192, MPrime);
      function P25519() {
                SRTlib.send(`{ "anonymous": false, "function": "P25519", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
                SRTlib.send('], "end": "P25519"},');

      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
                SRTlib.send(`{ "anonymous": true, "function": "P25519.prototype.imulK.imulK", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
                SRTlib.send('], "end": "P25519.prototype.imulK.imulK"},');

        return num;
                SRTlib.send('], "end": "P25519.prototype.imulK.imulK"},');

      };
      BN._prime = function prime(name) {
                SRTlib.send(`{ "anonymous": true, "function": "BN._prime.prime", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (primes[name]) {
                    SRTlib.send('], "end": "BN._prime.prime"},');

          return primes[name];
        }
        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
                    SRTlib.send('], "end": "BN._prime.prime"},');

          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;
                SRTlib.send('], "end": "BN._prime.prime"},');

        return prime;
                SRTlib.send('], "end": "BN._prime.prime"},');

      };
      function Red(m) {
                SRTlib.send(`{ "anonymous": false, "function": "Red", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
                SRTlib.send('], "end": "Red"},');

      }
      Red.prototype._verify1 = function _verify1(a) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype._verify1._verify1", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
                SRTlib.send('], "end": "Red.prototype._verify1._verify1"},');

      };
      Red.prototype._verify2 = function _verify2(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype._verify2._verify2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
                SRTlib.send('], "end": "Red.prototype._verify2._verify2"},');

      };
      Red.prototype.imod = function imod(a) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.imod.imod", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.prime) {
                    SRTlib.send('], "end": "Red.prototype.imod.imod"},');

          return this.prime.ireduce(a)._forceRed(this);
        }
                SRTlib.send('], "end": "Red.prototype.imod.imod"},');

        return a.umod(this.m)._forceRed(this);
                SRTlib.send('], "end": "Red.prototype.imod.imod"},');

      };
      Red.prototype.neg = function neg(a) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.neg.neg", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (a.isZero()) {
                    SRTlib.send('], "end": "Red.prototype.neg.neg"},');

          return a.clone();
        }
                SRTlib.send('], "end": "Red.prototype.neg.neg"},');

        return this.m.sub(a)._forceRed(this);
                SRTlib.send('], "end": "Red.prototype.neg.neg"},');

      };
      Red.prototype.add = function add(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.add.add", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
                SRTlib.send('], "end": "Red.prototype.add.add"},');

        return res._forceRed(this);
                SRTlib.send('], "end": "Red.prototype.add.add"},');

      };
      Red.prototype.iadd = function iadd(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.iadd.iadd", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
                SRTlib.send('], "end": "Red.prototype.iadd.iadd"},');

        return res;
                SRTlib.send('], "end": "Red.prototype.iadd.iadd"},');

      };
      Red.prototype.sub = function sub(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.sub.sub", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
                SRTlib.send('], "end": "Red.prototype.sub.sub"},');

        return res._forceRed(this);
                SRTlib.send('], "end": "Red.prototype.sub.sub"},');

      };
      Red.prototype.isub = function isub(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.isub.isub", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
                SRTlib.send('], "end": "Red.prototype.isub.isub"},');

        return res;
                SRTlib.send('], "end": "Red.prototype.isub.isub"},');

      };
      Red.prototype.shl = function shl(a, num) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.shl.shl", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._verify1(a);
                SRTlib.send('], "end": "Red.prototype.shl.shl"},');

        return this.imod(a.ushln(num));
                SRTlib.send('], "end": "Red.prototype.shl.shl"},');

      };
      Red.prototype.imul = function imul(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.imul.imul", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._verify2(a, b);
                SRTlib.send('], "end": "Red.prototype.imul.imul"},');

        return this.imod(a.imul(b));
                SRTlib.send('], "end": "Red.prototype.imul.imul"},');

      };
      Red.prototype.mul = function mul(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.mul.mul", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._verify2(a, b);
                SRTlib.send('], "end": "Red.prototype.mul.mul"},');

        return this.imod(a.mul(b));
                SRTlib.send('], "end": "Red.prototype.mul.mul"},');

      };
      Red.prototype.isqr = function isqr(a) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.isqr.isqr", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Red.prototype.isqr.isqr"},');

        return this.imul(a, a.clone());
                SRTlib.send('], "end": "Red.prototype.isqr.isqr"},');

      };
      Red.prototype.sqr = function sqr(a) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.sqr.sqr", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Red.prototype.sqr.sqr"},');

        return this.mul(a, a);
                SRTlib.send('], "end": "Red.prototype.sqr.sqr"},');

      };
      Red.prototype.sqrt = function sqrt(a) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.sqrt.sqrt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (a.isZero()) {
                    SRTlib.send('], "end": "Red.prototype.sqrt.sqrt"},');

          return a.clone();
        }
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
                    SRTlib.send('], "end": "Red.prototype.sqrt.sqrt"},');

          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
                SRTlib.send('], "end": "Red.prototype.sqrt.sqrt"},');

        return r;
                SRTlib.send('], "end": "Red.prototype.sqrt.sqrt"},');

      };
      Red.prototype.invm = function invm(a) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.invm.invm", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
                    SRTlib.send('], "end": "Red.prototype.invm.invm"},');

          return this.imod(inv).redNeg();
        } else {
                    SRTlib.send('], "end": "Red.prototype.invm.invm"},');

          return this.imod(inv);
        }
                SRTlib.send('], "end": "Red.prototype.invm.invm"},');

      };
      Red.prototype.pow = function pow(a, num) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.pow.pow", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (num.isZero()) {
                    SRTlib.send('], "end": "Red.prototype.pow.pow"},');

          return new BN(1).toRed(this);
        }
        if (num.cmpn(1) === 0) {
                    SRTlib.send('], "end": "Red.prototype.pow.pow"},');

          return a.clone();
        }
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
                SRTlib.send('], "end": "Red.prototype.pow.pow"},');

        return res;
                SRTlib.send('], "end": "Red.prototype.pow.pow"},');

      };
      Red.prototype.convertTo = function convertTo(num) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.convertTo.convertTo", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var r = num.umod(this.m);
                SRTlib.send('], "end": "Red.prototype.convertTo.convertTo"},');

        return r === num ? r.clone() : r;
                SRTlib.send('], "end": "Red.prototype.convertTo.convertTo"},');

      };
      Red.prototype.convertFrom = function convertFrom(num) {
                SRTlib.send(`{ "anonymous": true, "function": "Red.prototype.convertFrom.convertFrom", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var res = num.clone();
        res.red = null;
                SRTlib.send('], "end": "Red.prototype.convertFrom.convertFrom"},');

        return res;
                SRTlib.send('], "end": "Red.prototype.convertFrom.convertFrom"},');

      };
      BN.mont = function mont(num) {
                SRTlib.send(`{ "anonymous": true, "function": "BN.mont.mont", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "BN.mont.mont"},');

        return new Mont(num);
                SRTlib.send('], "end": "BN.mont.mont"},');

      };
      function Mont(m) {
                SRTlib.send(`{ "anonymous": false, "function": "Mont", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
                SRTlib.send('], "end": "Mont"},');

      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
                SRTlib.send(`{ "anonymous": true, "function": "Mont.prototype.convertTo.convertTo", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Mont.prototype.convertTo.convertTo"},');

        return this.imod(num.ushln(this.shift));
                SRTlib.send('], "end": "Mont.prototype.convertTo.convertTo"},');

      };
      Mont.prototype.convertFrom = function convertFrom(num) {
                SRTlib.send(`{ "anonymous": true, "function": "Mont.prototype.convertFrom.convertFrom", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var r = this.imod(num.mul(this.rinv));
        r.red = null;
                SRTlib.send('], "end": "Mont.prototype.convertFrom.convertFrom"},');

        return r;
                SRTlib.send('], "end": "Mont.prototype.convertFrom.convertFrom"},');

      };
      Mont.prototype.imul = function imul(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Mont.prototype.imul.imul", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
                    SRTlib.send('], "end": "Mont.prototype.imul.imul"},');

          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
                SRTlib.send('], "end": "Mont.prototype.imul.imul"},');

        return res._forceRed(this);
                SRTlib.send('], "end": "Mont.prototype.imul.imul"},');

      };
      Mont.prototype.mul = function mul(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "Mont.prototype.mul.mul", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (a.isZero() || b.isZero()) {
                    SRTlib.send('], "end": "Mont.prototype.mul.mul"},');

          return new BN(0)._forceRed(this);
        }
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
                SRTlib.send('], "end": "Mont.prototype.mul.mul"},');

        return res._forceRed(this);
                SRTlib.send('], "end": "Mont.prototype.mul.mul"},');

      };
      Mont.prototype.invm = function invm(a) {
                SRTlib.send(`{ "anonymous": true, "function": "Mont.prototype.invm.invm", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var res = this.imod(a._invmp(this.m).mul(this.r2));
                SRTlib.send('], "end": "Mont.prototype.invm.invm"},');

        return res._forceRed(this);
                SRTlib.send('], "end": "Mont.prototype.invm.invm"},');

      };
            SRTlib.send('], "end": "emptyKey25"},');

    })(typeof module === 'undefined' || module, this);
        SRTlib.send('], "end": "emptyKey26"},');

  }, {
    "buffer": 23
  }],
  22: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey27", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var r;
    module.exports = function rand(len) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.rand", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!r) r = new Rand(null);
            SRTlib.send('], "end": "module.exports.rand"},');

      return r.generate(len);
            SRTlib.send('], "end": "module.exports.rand"},');

    };
    function Rand(rand) {
            SRTlib.send(`{ "anonymous": false, "function": "Rand", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.rand = rand;
            SRTlib.send('], "end": "Rand"},');

    }
    module.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len) {
            SRTlib.send(`{ "anonymous": true, "function": "Rand.prototype.generate.generate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Rand.prototype.generate.generate"},');

      return this._rand(len);
            SRTlib.send('], "end": "Rand.prototype.generate.generate"},');

    };
    Rand.prototype._rand = function _rand(n) {
            SRTlib.send(`{ "anonymous": true, "function": "Rand.prototype._rand._rand", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.rand.getBytes) {
                SRTlib.send('], "end": "Rand.prototype._rand._rand"},');

        return this.rand.getBytes(n);
      }
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();
            SRTlib.send('], "end": "Rand.prototype._rand._rand"},');

      return res;
            SRTlib.send('], "end": "Rand.prototype._rand._rand"},');

    };
    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
                    SRTlib.send(`{ "anonymous": true, "function": "Rand.prototype._rand._rand2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
                    SRTlib.send('], "end": "Rand.prototype._rand._rand2"},');

          return arr;
                    SRTlib.send('], "end": "Rand.prototype._rand._rand2"},');

        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
                    SRTlib.send(`{ "anonymous": true, "function": "Rand.prototype._rand._rand3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
                    SRTlib.send('], "end": "Rand.prototype._rand._rand3"},');

          return arr;
                    SRTlib.send('], "end": "Rand.prototype._rand._rand3"},');

        };
      } else if (typeof window === 'object') {
        Rand.prototype._rand = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Rand.prototype._rand", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Rand.prototype._rand"},');

          throw new Error('Not implemented yet');
                    SRTlib.send('], "end": "Rand.prototype._rand"},');

        };
      }
    } else {
      try {
        var crypto = require('crypto');
        if (typeof crypto.randomBytes !== 'function') {
                    SRTlib.send('], "end": "emptyKey27"},');

          throw new Error('Not supported');
        }
        Rand.prototype._rand = function _rand(n) {
                    SRTlib.send(`{ "anonymous": true, "function": "Rand.prototype._rand._rand4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Rand.prototype._rand._rand4"},');

          return crypto.randomBytes(n);
                    SRTlib.send('], "end": "Rand.prototype._rand._rand4"},');

        };
      } catch (e) {}
    }
        SRTlib.send('], "end": "emptyKey27"},');

  }, {
    "crypto": 23
  }],
  23: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey28", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        SRTlib.send('], "end": "emptyKey28"},');

  }, {}],
  24: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey29", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Buffer = require('safe-buffer').Buffer;
    function asUInt32Array(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "asUInt32Array", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
      var len = buf.length / 4 | 0;
      var out = new Array(len);
      for (var i = 0; i < len; i++) {
        out[i] = buf.readUInt32BE(i * 4);
      }
            SRTlib.send('], "end": "asUInt32Array"},');

      return out;
            SRTlib.send('], "end": "asUInt32Array"},');

    }
    function scrubVec(v) {
            SRTlib.send(`{ "anonymous": false, "function": "scrubVec", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      for (var i = 0; i < v.length; v++) {
        v[i] = 0;
      }
            SRTlib.send('], "end": "scrubVec"},');

    }
    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
            SRTlib.send(`{ "anonymous": false, "function": "cryptBlock", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      var SUB_MIX0 = SUB_MIX[0];
      var SUB_MIX1 = SUB_MIX[1];
      var SUB_MIX2 = SUB_MIX[2];
      var SUB_MIX3 = SUB_MIX[3];
      var s0 = M[0] ^ keySchedule[0];
      var s1 = M[1] ^ keySchedule[1];
      var s2 = M[2] ^ keySchedule[2];
      var s3 = M[3] ^ keySchedule[3];
      var t0, t1, t2, t3;
      var ksRow = 4;
      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }
      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
      t0 = t0 >>> 0;
      t1 = t1 >>> 0;
      t2 = t2 >>> 0;
      t3 = t3 >>> 0;
            SRTlib.send('], "end": "cryptBlock"},');

      return [t0, t1, t2, t3];
            SRTlib.send('], "end": "cryptBlock"},');

    }
    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
    var G = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "G", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var d = new Array(256);
      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1;
        } else {
          d[j] = j << 1 ^ 0x11b;
        }
      }
      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX = [[], [], [], []];
      var INV_SUB_MIX = [[], [], [], []];
      var x = 0;
      var xi = 0;
      for (var i = 0; i < 256; ++i) {
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
            SRTlib.send('], "end": "G"},');

      return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
      };
            SRTlib.send('], "end": "G"},');

    })();
    function AES(key) {
            SRTlib.send(`{ "anonymous": false, "function": "AES", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._key = asUInt32Array(key);
      this._reset();
            SRTlib.send('], "end": "AES"},');

    }
    AES.blockSize = 4 * 4;
    AES.keySize = 256 / 8;
    AES.prototype.blockSize = AES.blockSize;
    AES.prototype.keySize = AES.keySize;
    AES.prototype._reset = function () {
            SRTlib.send(`{ "anonymous": true, "function": "AES.prototype._reset", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var keyWords = this._key;
      var keySize = keyWords.length;
      var nRounds = keySize + 6;
      var ksRows = (nRounds + 1) * 4;
      var keySchedule = [];
      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k];
      }
      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
          t = t << 8 | t >>> 24;
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
          t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) {
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
        }
        keySchedule[k] = keySchedule[k - keySize] ^ t;
      }
      var invKeySchedule = [];
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt;
        } else {
          invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
        }
      }
      this._nRounds = nRounds;
      this._keySchedule = keySchedule;
      this._invKeySchedule = invKeySchedule;
            SRTlib.send('], "end": "AES.prototype._reset"},');

    };
    AES.prototype.encryptBlockRaw = function (M) {
            SRTlib.send(`{ "anonymous": true, "function": "AES.prototype.encryptBlockRaw", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      M = asUInt32Array(M);
            SRTlib.send('], "end": "AES.prototype.encryptBlockRaw"},');

      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
            SRTlib.send('], "end": "AES.prototype.encryptBlockRaw"},');

    };
    AES.prototype.encryptBlock = function (M) {
            SRTlib.send(`{ "anonymous": true, "function": "AES.prototype.encryptBlock", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var out = this.encryptBlockRaw(M);
      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
            SRTlib.send('], "end": "AES.prototype.encryptBlock"},');

      return buf;
            SRTlib.send('], "end": "AES.prototype.encryptBlock"},');

    };
    AES.prototype.decryptBlock = function (M) {
            SRTlib.send(`{ "anonymous": true, "function": "AES.prototype.decryptBlock", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      M = asUInt32Array(M);
      var m1 = M[1];
      M[1] = M[3];
      M[3] = m1;
      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
            SRTlib.send('], "end": "AES.prototype.decryptBlock"},');

      return buf;
            SRTlib.send('], "end": "AES.prototype.decryptBlock"},');

    };
    AES.prototype.scrub = function () {
            SRTlib.send(`{ "anonymous": true, "function": "AES.prototype.scrub", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      scrubVec(this._keySchedule);
      scrubVec(this._invKeySchedule);
      scrubVec(this._key);
            SRTlib.send('], "end": "AES.prototype.scrub"},');

    };
    module.exports.AES = AES;
        SRTlib.send('], "end": "emptyKey29"},');

  }, {
    "safe-buffer": 190
  }],
  25: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey30", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var aes = require('./aes');
    var Buffer = require('safe-buffer').Buffer;
    var Transform = require('cipher-base');
    var inherits = require('inherits');
    var GHASH = require('./ghash');
    var xor = require('buffer-xor');
    var incr32 = require('./incr32');
    function xorTest(a, b) {
            SRTlib.send(`{ "anonymous": false, "function": "xorTest", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var out = 0;
      if (a.length !== b.length) out++;
      var len = Math.min(a.length, b.length);
      for (var i = 0; i < len; ++i) {
        out += a[i] ^ b[i];
      }
            SRTlib.send('], "end": "xorTest"},');

      return out;
            SRTlib.send('], "end": "xorTest"},');

    }
    function calcIv(self, iv, ck) {
            SRTlib.send(`{ "anonymous": false, "function": "calcIv", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (iv.length === 12) {
        self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])]);
                SRTlib.send('], "end": "calcIv"},');

        return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])]);
      }
      var ghash = new GHASH(ck);
      var len = iv.length;
      var toPad = len % 16;
      ghash.update(iv);
      if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
      }
      ghash.update(Buffer.alloc(8, 0));
      var ivBits = len * 8;
      var tail = Buffer.alloc(8);
      tail.writeUIntBE(ivBits, 0, 8);
      ghash.update(tail);
      self._finID = ghash.state;
      var out = Buffer.from(self._finID);
      incr32(out);
            SRTlib.send('], "end": "calcIv"},');

      return out;
            SRTlib.send('], "end": "calcIv"},');

    }
    function StreamCipher(mode, key, iv, decrypt) {
            SRTlib.send(`{ "anonymous": false, "function": "StreamCipher", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      Transform.call(this);
      var h = Buffer.alloc(4, 0);
      this._cipher = new aes.AES(key);
      var ck = this._cipher.encryptBlock(h);
      this._ghash = new GHASH(ck);
      iv = calcIv(this, iv, ck);
      this._prev = Buffer.from(iv);
      this._cache = Buffer.allocUnsafe(0);
      this._secCache = Buffer.allocUnsafe(0);
      this._decrypt = decrypt;
      this._alen = 0;
      this._len = 0;
      this._mode = mode;
      this._authTag = null;
      this._called = false;
            SRTlib.send('], "end": "StreamCipher"},');

    }
    inherits(StreamCipher, Transform);
    StreamCipher.prototype._update = function (chunk) {
            SRTlib.send(`{ "anonymous": true, "function": "StreamCipher.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
          rump = Buffer.alloc(rump, 0);
          this._ghash.update(rump);
        }
      }
      this._called = true;
      var out = this._mode.encrypt(this, chunk);
      if (this._decrypt) {
        this._ghash.update(chunk);
      } else {
        this._ghash.update(out);
      }
      this._len += chunk.length;
            SRTlib.send('], "end": "StreamCipher.prototype._update"},');

      return out;
            SRTlib.send('], "end": "StreamCipher.prototype._update"},');

    };
    StreamCipher.prototype._final = function () {
            SRTlib.send(`{ "anonymous": true, "function": "StreamCipher.prototype._final", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this._decrypt && !this._authTag) {
                SRTlib.send('], "end": "StreamCipher.prototype._final"},');

        throw new Error('Unsupported state or unable to authenticate data');
      }
      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && xorTest(tag, this._authTag)) {
                SRTlib.send('], "end": "StreamCipher.prototype._final"},');

        throw new Error('Unsupported state or unable to authenticate data');
      }
      this._authTag = tag;
      this._cipher.scrub();
            SRTlib.send('], "end": "StreamCipher.prototype._final"},');

    };
    StreamCipher.prototype.getAuthTag = function getAuthTag() {
            SRTlib.send(`{ "anonymous": true, "function": "StreamCipher.prototype.getAuthTag.getAuthTag", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this._decrypt || !Buffer.isBuffer(this._authTag)) {
                SRTlib.send('], "end": "StreamCipher.prototype.getAuthTag.getAuthTag"},');

        throw new Error('Attempting to get auth tag in unsupported state');
      }
            SRTlib.send('], "end": "StreamCipher.prototype.getAuthTag.getAuthTag"},');

      return this._authTag;
            SRTlib.send('], "end": "StreamCipher.prototype.getAuthTag.getAuthTag"},');

    };
    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
            SRTlib.send(`{ "anonymous": true, "function": "StreamCipher.prototype.setAuthTag.setAuthTag", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!this._decrypt) {
                SRTlib.send('], "end": "StreamCipher.prototype.setAuthTag.setAuthTag"},');

        throw new Error('Attempting to set auth tag in unsupported state');
      }
      this._authTag = tag;
            SRTlib.send('], "end": "StreamCipher.prototype.setAuthTag.setAuthTag"},');

    };
    StreamCipher.prototype.setAAD = function setAAD(buf) {
            SRTlib.send(`{ "anonymous": true, "function": "StreamCipher.prototype.setAAD.setAAD", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this._called) {
                SRTlib.send('], "end": "StreamCipher.prototype.setAAD.setAAD"},');

        throw new Error('Attempting to set AAD in unsupported state');
      }
      this._ghash.update(buf);
      this._alen += buf.length;
            SRTlib.send('], "end": "StreamCipher.prototype.setAAD.setAAD"},');

    };
    module.exports = StreamCipher;
        SRTlib.send('], "end": "emptyKey30"},');

  }, {
    "./aes": 24,
    "./ghash": 29,
    "./incr32": 30,
    "buffer-xor": 51,
    "cipher-base": 52,
    "inherits": 133,
    "safe-buffer": 190
  }],
  26: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey31", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var ciphers = require('./encrypter');
    var deciphers = require('./decrypter');
    var modes = require('./modes/list.json');
    function getCiphers() {
            SRTlib.send(`{ "anonymous": false, "function": "getCiphers", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "getCiphers"},');

      return Object.keys(modes);
            SRTlib.send('], "end": "getCiphers"},');

    }
    exports.createCipher = exports.Cipher = ciphers.createCipher;
    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
    exports.createDecipher = exports.Decipher = deciphers.createDecipher;
    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
        SRTlib.send('], "end": "emptyKey31"},');

  }, {
    "./decrypter": 27,
    "./encrypter": 28,
    "./modes/list.json": 38
  }],
  27: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey32", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var AuthCipher = require('./authCipher');
    var Buffer = require('safe-buffer').Buffer;
    var MODES = require('./modes');
    var StreamCipher = require('./streamCipher');
    var Transform = require('cipher-base');
    var aes = require('./aes');
    var ebtk = require('evp_bytestokey');
    var inherits = require('inherits');
    function Decipher(mode, key, iv) {
            SRTlib.send(`{ "anonymous": false, "function": "Decipher", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      Transform.call(this);
      this._cache = new Splitter();
      this._last = void 0;
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._mode = mode;
      this._autopadding = true;
            SRTlib.send('], "end": "Decipher"},');

    }
    inherits(Decipher, Transform);
    Decipher.prototype._update = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Decipher.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get(this._autopadding)) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }
            SRTlib.send('], "end": "Decipher.prototype._update"},');

      return Buffer.concat(out);
            SRTlib.send('], "end": "Decipher.prototype._update"},');

    };
    Decipher.prototype._final = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Decipher.prototype._final", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var chunk = this._cache.flush();
      if (this._autopadding) {
                SRTlib.send('], "end": "Decipher.prototype._final"},');

        return unpad(this._mode.decrypt(this, chunk));
      } else if (chunk) {
                SRTlib.send('], "end": "Decipher.prototype._final"},');

        throw new Error('data not multiple of block length');
      }
            SRTlib.send('], "end": "Decipher.prototype._final"},');

    };
    Decipher.prototype.setAutoPadding = function (setTo) {
            SRTlib.send(`{ "anonymous": true, "function": "Decipher.prototype.setAutoPadding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._autopadding = !!setTo;
            SRTlib.send('], "end": "Decipher.prototype.setAutoPadding"},');

      return this;
            SRTlib.send('], "end": "Decipher.prototype.setAutoPadding"},');

    };
    function Splitter() {
            SRTlib.send(`{ "anonymous": false, "function": "Splitter", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.cache = Buffer.allocUnsafe(0);
            SRTlib.send('], "end": "Splitter"},');

    }
    Splitter.prototype.add = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Splitter.prototype.add", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.cache = Buffer.concat([this.cache, data]);
            SRTlib.send('], "end": "Splitter.prototype.add"},');

    };
    Splitter.prototype.get = function (autoPadding) {
            SRTlib.send(`{ "anonymous": true, "function": "Splitter.prototype.get", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var out;
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
                    SRTlib.send('], "end": "Splitter.prototype.get"},');

          return out;
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
                    SRTlib.send('], "end": "Splitter.prototype.get"},');

          return out;
        }
      }
            SRTlib.send('], "end": "Splitter.prototype.get"},');

      return null;
            SRTlib.send('], "end": "Splitter.prototype.get"},');

    };
    Splitter.prototype.flush = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Splitter.prototype.flush", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.cache.length) {
                SRTlib.send('], "end": "Splitter.prototype.flush"},');

        return this.cache;
      }
            SRTlib.send('], "end": "Splitter.prototype.flush"},');

    };
    function unpad(last) {
            SRTlib.send(`{ "anonymous": false, "function": "unpad", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var padded = last[15];
      if (padded < 1 || padded > 16) {
                SRTlib.send('], "end": "unpad"},');

        throw new Error('unable to decrypt data');
      }
      var i = -1;
      while (++i < padded) {
        if (last[i + (16 - padded)] !== padded) {
                    SRTlib.send('], "end": "unpad"},');

          throw new Error('unable to decrypt data');
        }
      }
      if (padded === 16) {
                SRTlib.send('], "end": "unpad"},');

        return;
      }
            SRTlib.send('], "end": "unpad"},');

      return last.slice(0, 16 - padded);
            SRTlib.send('], "end": "unpad"},');

    }
    function createDecipheriv(suite, password, iv) {
            SRTlib.send(`{ "anonymous": false, "function": "createDecipheriv", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var config = MODES[suite.toLowerCase()];
      if (!config) {
                SRTlib.send('], "end": "createDecipheriv"},');

        throw new TypeError('invalid suite type');
      }
      if (typeof iv === 'string') iv = Buffer.from(iv);
      if (config.mode !== 'GCM' && iv.length !== config.iv) {
                SRTlib.send('], "end": "createDecipheriv"},');

        throw new TypeError('invalid iv length ' + iv.length);
      }
      if (typeof password === 'string') password = Buffer.from(password);
      if (password.length !== config.key / 8) {
                SRTlib.send('], "end": "createDecipheriv"},');

        throw new TypeError('invalid key length ' + password.length);
      }
      if (config.type === 'stream') {
                SRTlib.send('], "end": "createDecipheriv"},');

        return new StreamCipher(config.module, password, iv, true);
      } else if (config.type === 'auth') {
                SRTlib.send('], "end": "createDecipheriv"},');

        return new AuthCipher(config.module, password, iv, true);
      }
            SRTlib.send('], "end": "createDecipheriv"},');

      return new Decipher(config.module, password, iv);
            SRTlib.send('], "end": "createDecipheriv"},');

    }
    function createDecipher(suite, password) {
            SRTlib.send(`{ "anonymous": false, "function": "createDecipher", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var config = MODES[suite.toLowerCase()];
      if (!config) {
                SRTlib.send('], "end": "createDecipher"},');

        throw new TypeError('invalid suite type');
      }
      var keys = ebtk(password, false, config.key, config.iv);
            SRTlib.send('], "end": "createDecipher"},');

      return createDecipheriv(suite, keys.key, keys.iv);
            SRTlib.send('], "end": "createDecipher"},');

    }
    exports.createDecipher = createDecipher;
    exports.createDecipheriv = createDecipheriv;
        SRTlib.send('], "end": "emptyKey32"},');

  }, {
    "./aes": 24,
    "./authCipher": 25,
    "./modes": 37,
    "./streamCipher": 40,
    "cipher-base": 52,
    "evp_bytestokey": 112,
    "inherits": 133,
    "safe-buffer": 190
  }],
  28: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey33", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var MODES = require('./modes');
    var AuthCipher = require('./authCipher');
    var Buffer = require('safe-buffer').Buffer;
    var StreamCipher = require('./streamCipher');
    var Transform = require('cipher-base');
    var aes = require('./aes');
    var ebtk = require('evp_bytestokey');
    var inherits = require('inherits');
    function Cipher(mode, key, iv) {
            SRTlib.send(`{ "anonymous": false, "function": "Cipher", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      Transform.call(this);
      this._cache = new Splitter();
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._mode = mode;
      this._autopadding = true;
            SRTlib.send('], "end": "Cipher"},');

    }
    inherits(Cipher, Transform);
    Cipher.prototype._update = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get()) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }
            SRTlib.send('], "end": "Cipher.prototype._update"},');

      return Buffer.concat(out);
            SRTlib.send('], "end": "Cipher.prototype._update"},');

    };
    var PADDING = Buffer.alloc(16, 0x10);
    Cipher.prototype._final = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._final", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var chunk = this._cache.flush();
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
                SRTlib.send('], "end": "Cipher.prototype._final"},');

        return chunk;
      }
      if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
                SRTlib.send('], "end": "Cipher.prototype._final"},');

        throw new Error('data not multiple of block length');
      }
            SRTlib.send('], "end": "Cipher.prototype._final"},');

    };
    Cipher.prototype.setAutoPadding = function (setTo) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype.setAutoPadding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._autopadding = !!setTo;
            SRTlib.send('], "end": "Cipher.prototype.setAutoPadding"},');

      return this;
            SRTlib.send('], "end": "Cipher.prototype.setAutoPadding"},');

    };
    function Splitter() {
            SRTlib.send(`{ "anonymous": false, "function": "Splitter", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.cache = Buffer.allocUnsafe(0);
            SRTlib.send('], "end": "Splitter"},');

    }
    Splitter.prototype.add = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Splitter.prototype.add2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.cache = Buffer.concat([this.cache, data]);
            SRTlib.send('], "end": "Splitter.prototype.add2"},');

    };
    Splitter.prototype.get = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Splitter.prototype.get2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
                SRTlib.send('], "end": "Splitter.prototype.get2"},');

        return out;
      }
            SRTlib.send('], "end": "Splitter.prototype.get2"},');

      return null;
            SRTlib.send('], "end": "Splitter.prototype.get2"},');

    };
    Splitter.prototype.flush = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Splitter.prototype.flush2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var len = 16 - this.cache.length;
      var padBuff = Buffer.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        padBuff.writeUInt8(len, i);
      }
            SRTlib.send('], "end": "Splitter.prototype.flush2"},');

      return Buffer.concat([this.cache, padBuff]);
            SRTlib.send('], "end": "Splitter.prototype.flush2"},');

    };
    function createCipheriv(suite, password, iv) {
            SRTlib.send(`{ "anonymous": false, "function": "createCipheriv", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var config = MODES[suite.toLowerCase()];
      if (!config) {
                SRTlib.send('], "end": "createCipheriv"},');

        throw new TypeError('invalid suite type');
      }
      if (typeof password === 'string') password = Buffer.from(password);
      if (password.length !== config.key / 8) {
                SRTlib.send('], "end": "createCipheriv"},');

        throw new TypeError('invalid key length ' + password.length);
      }
      if (typeof iv === 'string') iv = Buffer.from(iv);
      if (config.mode !== 'GCM' && iv.length !== config.iv) {
                SRTlib.send('], "end": "createCipheriv"},');

        throw new TypeError('invalid iv length ' + iv.length);
      }
      if (config.type === 'stream') {
                SRTlib.send('], "end": "createCipheriv"},');

        return new StreamCipher(config.module, password, iv);
      } else if (config.type === 'auth') {
                SRTlib.send('], "end": "createCipheriv"},');

        return new AuthCipher(config.module, password, iv);
      }
            SRTlib.send('], "end": "createCipheriv"},');

      return new Cipher(config.module, password, iv);
            SRTlib.send('], "end": "createCipheriv"},');

    }
    function createCipher(suite, password) {
            SRTlib.send(`{ "anonymous": false, "function": "createCipher", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var config = MODES[suite.toLowerCase()];
      if (!config) {
                SRTlib.send('], "end": "createCipher"},');

        throw new TypeError('invalid suite type');
      }
      var keys = ebtk(password, false, config.key, config.iv);
            SRTlib.send('], "end": "createCipher"},');

      return createCipheriv(suite, keys.key, keys.iv);
            SRTlib.send('], "end": "createCipher"},');

    }
    exports.createCipheriv = createCipheriv;
    exports.createCipher = createCipher;
        SRTlib.send('], "end": "emptyKey33"},');

  }, {
    "./aes": 24,
    "./authCipher": 25,
    "./modes": 37,
    "./streamCipher": 40,
    "cipher-base": 52,
    "evp_bytestokey": 112,
    "inherits": 133,
    "safe-buffer": 190
  }],
  29: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey34", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Buffer = require('safe-buffer').Buffer;
    var ZEROES = Buffer.alloc(16, 0);
    function toArray(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "toArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "toArray"},');

      return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
            SRTlib.send('], "end": "toArray"},');

    }
    function fromArray(out) {
            SRTlib.send(`{ "anonymous": false, "function": "fromArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var buf = Buffer.allocUnsafe(16);
      buf.writeUInt32BE(out[0] >>> 0, 0);
      buf.writeUInt32BE(out[1] >>> 0, 4);
      buf.writeUInt32BE(out[2] >>> 0, 8);
      buf.writeUInt32BE(out[3] >>> 0, 12);
            SRTlib.send('], "end": "fromArray"},');

      return buf;
            SRTlib.send('], "end": "fromArray"},');

    }
    function GHASH(key) {
            SRTlib.send(`{ "anonymous": false, "function": "GHASH", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.h = key;
      this.state = Buffer.alloc(16, 0);
      this.cache = Buffer.allocUnsafe(0);
            SRTlib.send('], "end": "GHASH"},');

    }
    GHASH.prototype.ghash = function (block) {
            SRTlib.send(`{ "anonymous": true, "function": "GHASH.prototype.ghash", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var i = -1;
      while (++i < block.length) {
        this.state[i] ^= block[i];
      }
      this._multiply();
            SRTlib.send('], "end": "GHASH.prototype.ghash"},');

    };
    GHASH.prototype._multiply = function () {
            SRTlib.send(`{ "anonymous": true, "function": "GHASH.prototype._multiply", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var Vi = toArray(this.h);
      var Zi = [0, 0, 0, 0];
      var j, xi, lsbVi;
      var i = -1;
      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
          Zi[0] ^= Vi[0];
          Zi[1] ^= Vi[1];
          Zi[2] ^= Vi[2];
          Zi[3] ^= Vi[3];
        }
        lsbVi = (Vi[3] & 1) !== 0;
        for (j = 3; j > 0; j--) {
          Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        }
        Vi[0] = Vi[0] >>> 1;
        if (lsbVi) {
          Vi[0] = Vi[0] ^ 0xe1 << 24;
        }
      }
      this.state = fromArray(Zi);
            SRTlib.send('], "end": "GHASH.prototype._multiply"},');

    };
    GHASH.prototype.update = function (buf) {
            SRTlib.send(`{ "anonymous": true, "function": "GHASH.prototype.update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.cache = Buffer.concat([this.cache, buf]);
      var chunk;
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
            SRTlib.send('], "end": "GHASH.prototype.update"},');

    };
    GHASH.prototype.final = function (abl, bl) {
            SRTlib.send(`{ "anonymous": true, "function": "GHASH.prototype.final", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (this.cache.length) {
        this.ghash(Buffer.concat([this.cache, ZEROES], 16));
      }
      this.ghash(fromArray([0, abl, 0, bl]));
            SRTlib.send('], "end": "GHASH.prototype.final"},');

      return this.state;
            SRTlib.send('], "end": "GHASH.prototype.final"},');

    };
    module.exports = GHASH;
        SRTlib.send('], "end": "emptyKey34"},');

  }, {
    "safe-buffer": 190
  }],
  30: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey35", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function incr32(iv) {
            SRTlib.send(`{ "anonymous": false, "function": "incr32", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var len = iv.length;
      var item;
      while (len--) {
        item = iv.readUInt8(len);
        if (item === 255) {
          iv.writeUInt8(0, len);
        } else {
          item++;
          iv.writeUInt8(item, len);
          break;
        }
      }
            SRTlib.send('], "end": "incr32"},');

    }
    module.exports = incr32;
        SRTlib.send('], "end": "emptyKey35"},');

  }, {}],
  31: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey36", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var xor = require('buffer-xor');
    exports.encrypt = function (self, block) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encrypt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var data = xor(block, self._prev);
      self._prev = self._cipher.encryptBlock(data);
            SRTlib.send('], "end": "exports.encrypt"},');

      return self._prev;
            SRTlib.send('], "end": "exports.encrypt"},');

    };
    exports.decrypt = function (self, block) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.decrypt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var pad = self._prev;
      self._prev = block;
      var out = self._cipher.decryptBlock(block);
            SRTlib.send('], "end": "exports.decrypt"},');

      return xor(out, pad);
            SRTlib.send('], "end": "exports.decrypt"},');

    };
        SRTlib.send('], "end": "emptyKey36"},');

  }, {
    "buffer-xor": 51
  }],
  32: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey37", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Buffer = require('safe-buffer').Buffer;
    var xor = require('buffer-xor');
    function encryptStart(self, data, decrypt) {
            SRTlib.send(`{ "anonymous": false, "function": "encryptStart", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var len = data.length;
      var out = xor(data, self._cache);
      self._cache = self._cache.slice(len);
      self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
            SRTlib.send('], "end": "encryptStart"},');

      return out;
            SRTlib.send('], "end": "encryptStart"},');

    }
    exports.encrypt = function (self, data, decrypt) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encrypt2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var out = Buffer.allocUnsafe(0);
      var len;
      while (data.length) {
        if (self._cache.length === 0) {
          self._cache = self._cipher.encryptBlock(self._prev);
          self._prev = Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
          len = self._cache.length;
          out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
          data = data.slice(len);
        } else {
          out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
          break;
        }
      }
            SRTlib.send('], "end": "exports.encrypt2"},');

      return out;
            SRTlib.send('], "end": "exports.encrypt2"},');

    };
        SRTlib.send('], "end": "emptyKey37"},');

  }, {
    "buffer-xor": 51,
    "safe-buffer": 190
  }],
  33: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey38", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Buffer = require('safe-buffer').Buffer;
    function encryptByte(self, byteParam, decrypt) {
            SRTlib.send(`{ "anonymous": false, "function": "encryptByte", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var pad;
      var i = -1;
      var len = 8;
      var out = 0;
      var bit, value;
      while (++i < len) {
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
      }
            SRTlib.send('], "end": "encryptByte"},');

      return out;
            SRTlib.send('], "end": "encryptByte"},');

    }
    function shiftIn(buffer, value) {
            SRTlib.send(`{ "anonymous": false, "function": "shiftIn", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var len = buffer.length;
      var i = -1;
      var out = Buffer.allocUnsafe(buffer.length);
      buffer = Buffer.concat([buffer, Buffer.from([value])]);
      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
      }
            SRTlib.send('], "end": "shiftIn"},');

      return out;
            SRTlib.send('], "end": "shiftIn"},');

    }
    exports.encrypt = function (self, chunk, decrypt) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encrypt3", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var len = chunk.length;
      var out = Buffer.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt);
      }
            SRTlib.send('], "end": "exports.encrypt3"},');

      return out;
            SRTlib.send('], "end": "exports.encrypt3"},');

    };
        SRTlib.send('], "end": "emptyKey38"},');

  }, {
    "safe-buffer": 190
  }],
  34: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey39", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Buffer = require('safe-buffer').Buffer;
    function encryptByte(self, byteParam, decrypt) {
            SRTlib.send(`{ "anonymous": false, "function": "encryptByte", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var pad = self._cipher.encryptBlock(self._prev);
      var out = pad[0] ^ byteParam;
      self._prev = Buffer.concat([self._prev.slice(1), Buffer.from([decrypt ? byteParam : out])]);
            SRTlib.send('], "end": "encryptByte"},');

      return out;
            SRTlib.send('], "end": "encryptByte"},');

    }
    exports.encrypt = function (self, chunk, decrypt) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encrypt4", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var len = chunk.length;
      var out = Buffer.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt);
      }
            SRTlib.send('], "end": "exports.encrypt4"},');

      return out;
            SRTlib.send('], "end": "exports.encrypt4"},');

    };
        SRTlib.send('], "end": "emptyKey39"},');

  }, {
    "safe-buffer": 190
  }],
  35: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey40", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var xor = require('buffer-xor');
    var Buffer = require('safe-buffer').Buffer;
    var incr32 = require('../incr32');
    function getBlock(self) {
            SRTlib.send(`{ "anonymous": false, "function": "getBlock", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var out = self._cipher.encryptBlockRaw(self._prev);
      incr32(self._prev);
            SRTlib.send('], "end": "getBlock"},');

      return out;
            SRTlib.send('], "end": "getBlock"},');

    }
    var blockSize = 16;
    exports.encrypt = function (self, chunk) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encrypt5", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var chunkNum = Math.ceil(chunk.length / blockSize);
      var start = self._cache.length;
      self._cache = Buffer.concat([self._cache, Buffer.allocUnsafe(chunkNum * blockSize)]);
      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
      }
      var pad = self._cache.slice(0, chunk.length);
      self._cache = self._cache.slice(chunk.length);
            SRTlib.send('], "end": "exports.encrypt5"},');

      return xor(chunk, pad);
            SRTlib.send('], "end": "exports.encrypt5"},');

    };
        SRTlib.send('], "end": "emptyKey40"},');

  }, {
    "../incr32": 30,
    "buffer-xor": 51,
    "safe-buffer": 190
  }],
  36: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey41", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    exports.encrypt = function (self, block) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encrypt6", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "exports.encrypt6"},');

      return self._cipher.encryptBlock(block);
            SRTlib.send('], "end": "exports.encrypt6"},');

    };
    exports.decrypt = function (self, block) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.decrypt2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "exports.decrypt2"},');

      return self._cipher.decryptBlock(block);
            SRTlib.send('], "end": "exports.decrypt2"},');

    };
        SRTlib.send('], "end": "emptyKey41"},');

  }, {}],
  37: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey42", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var modeModules = {
      ECB: require('./ecb'),
      CBC: require('./cbc'),
      CFB: require('./cfb'),
      CFB8: require('./cfb8'),
      CFB1: require('./cfb1'),
      OFB: require('./ofb'),
      CTR: require('./ctr'),
      GCM: require('./ctr')
    };
    var modes = require('./list.json');
    for (var key in modes) {
      modes[key].module = modeModules[modes[key].mode];
    }
    module.exports = modes;
        SRTlib.send('], "end": "emptyKey42"},');

  }, {
    "./cbc": 31,
    "./cfb": 32,
    "./cfb1": 33,
    "./cfb8": 34,
    "./ctr": 35,
    "./ecb": 36,
    "./list.json": 38,
    "./ofb": 39
  }],
  38: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey43", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "aes-128-ecb": {
        "cipher": "AES",
        "key": 128,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-192-ecb": {
        "cipher": "AES",
        "key": 192,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-256-ecb": {
        "cipher": "AES",
        "key": 256,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-128-cbc": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-192-cbc": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-256-cbc": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes128": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes192": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes256": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-128-cfb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-192-cfb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-256-cfb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-128-cfb8": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-192-cfb8": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-256-cfb8": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-128-cfb1": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-192-cfb1": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-256-cfb1": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-128-ofb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-192-ofb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-256-ofb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-128-ctr": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-192-ctr": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-256-ctr": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-128-gcm": {
        "cipher": "AES",
        "key": 128,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-192-gcm": {
        "cipher": "AES",
        "key": 192,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-256-gcm": {
        "cipher": "AES",
        "key": 256,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      }
    };
        SRTlib.send('], "end": "emptyKey43"},');

  }, {}],
  39: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey44", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var xor = require('buffer-xor');
      function getBlock(self) {
                SRTlib.send(`{ "anonymous": false, "function": "getBlock", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        self._prev = self._cipher.encryptBlock(self._prev);
                SRTlib.send('], "end": "getBlock"},');

        return self._prev;
                SRTlib.send('], "end": "getBlock"},');

      }
      exports.encrypt = function (self, chunk) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.encrypt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        while (self._cache.length < chunk.length) {
          self._cache = Buffer.concat([self._cache, getBlock(self)]);
        }
        var pad = self._cache.slice(0, chunk.length);
        self._cache = self._cache.slice(chunk.length);
                SRTlib.send('], "end": "call.exports.encrypt"},');

        return xor(chunk, pad);
                SRTlib.send('], "end": "call.exports.encrypt"},');

      };
            SRTlib.send('], "end": "call"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey44"},');

  }, {
    "buffer": 360,
    "buffer-xor": 51
  }],
  40: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey45", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var aes = require('./aes');
    var Buffer = require('safe-buffer').Buffer;
    var Transform = require('cipher-base');
    var inherits = require('inherits');
    function StreamCipher(mode, key, iv, decrypt) {
            SRTlib.send(`{ "anonymous": false, "function": "StreamCipher", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      Transform.call(this);
      this._cipher = new aes.AES(key);
      this._prev = Buffer.from(iv);
      this._cache = Buffer.allocUnsafe(0);
      this._secCache = Buffer.allocUnsafe(0);
      this._decrypt = decrypt;
      this._mode = mode;
            SRTlib.send('], "end": "StreamCipher"},');

    }
    inherits(StreamCipher, Transform);
    StreamCipher.prototype._update = function (chunk) {
            SRTlib.send(`{ "anonymous": true, "function": "StreamCipher.prototype._update2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "StreamCipher.prototype._update2"},');

      return this._mode.encrypt(this, chunk, this._decrypt);
            SRTlib.send('], "end": "StreamCipher.prototype._update2"},');

    };
    StreamCipher.prototype._final = function () {
            SRTlib.send(`{ "anonymous": true, "function": "StreamCipher.prototype._final2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._cipher.scrub();
            SRTlib.send('], "end": "StreamCipher.prototype._final2"},');

    };
    module.exports = StreamCipher;
        SRTlib.send('], "end": "emptyKey45"},');

  }, {
    "./aes": 24,
    "cipher-base": 52,
    "inherits": 133,
    "safe-buffer": 190
  }],
  41: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey46", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var DES = require('browserify-des');
    var aes = require('browserify-aes/browser');
    var aesModes = require('browserify-aes/modes');
    var desModes = require('browserify-des/modes');
    var ebtk = require('evp_bytestokey');
    function createCipher(suite, password) {
            SRTlib.send(`{ "anonymous": false, "function": "createCipher", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
                SRTlib.send('], "end": "createCipher"},');

        throw new TypeError('invalid suite type');
      }
      var keys = ebtk(password, false, keyLen, ivLen);
            SRTlib.send('], "end": "createCipher"},');

      return createCipheriv(suite, keys.key, keys.iv);
            SRTlib.send('], "end": "createCipher"},');

    }
    function createDecipher(suite, password) {
            SRTlib.send(`{ "anonymous": false, "function": "createDecipher", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
                SRTlib.send('], "end": "createDecipher"},');

        throw new TypeError('invalid suite type');
      }
      var keys = ebtk(password, false, keyLen, ivLen);
            SRTlib.send('], "end": "createDecipher"},');

      return createDecipheriv(suite, keys.key, keys.iv);
            SRTlib.send('], "end": "createDecipher"},');

    }
    function createCipheriv(suite, key, iv) {
            SRTlib.send(`{ "anonymous": false, "function": "createCipheriv", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      suite = suite.toLowerCase();
      if (aesModes[suite]) {
                SRTlib.send('], "end": "createCipheriv"},');

        return aes.createCipheriv(suite, key, iv);
      }
      if (desModes[suite]) {
                SRTlib.send('], "end": "createCipheriv"},');

        return new DES({
          key: key,
          iv: iv,
          mode: suite
        });
      }
            SRTlib.send('], "end": "createCipheriv"},');

      throw new TypeError('invalid suite type');
            SRTlib.send('], "end": "createCipheriv"},');

    }
    function createDecipheriv(suite, key, iv) {
            SRTlib.send(`{ "anonymous": false, "function": "createDecipheriv", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      suite = suite.toLowerCase();
      if (aesModes[suite]) {
                SRTlib.send('], "end": "createDecipheriv"},');

        return aes.createDecipheriv(suite, key, iv);
      }
      if (desModes[suite]) {
                SRTlib.send('], "end": "createDecipheriv"},');

        return new DES({
          key: key,
          iv: iv,
          mode: suite,
          decrypt: true
        });
      }
            SRTlib.send('], "end": "createDecipheriv"},');

      throw new TypeError('invalid suite type');
            SRTlib.send('], "end": "createDecipheriv"},');

    }
    function getCiphers() {
            SRTlib.send(`{ "anonymous": false, "function": "getCiphers", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "getCiphers"},');

      return Object.keys(desModes).concat(aes.getCiphers());
            SRTlib.send('], "end": "getCiphers"},');

    }
    exports.createCipher = exports.Cipher = createCipher;
    exports.createCipheriv = exports.Cipheriv = createCipheriv;
    exports.createDecipher = exports.Decipher = createDecipher;
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
    exports.listCiphers = exports.getCiphers = getCiphers;
        SRTlib.send('], "end": "emptyKey46"},');

  }, {
    "browserify-aes/browser": 26,
    "browserify-aes/modes": 37,
    "browserify-des": 42,
    "browserify-des/modes": 43,
    "evp_bytestokey": 112
  }],
  42: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey47", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var CipherBase = require('cipher-base');
    var des = require('des.js');
    var inherits = require('inherits');
    var Buffer = require('safe-buffer').Buffer;
    var modes = {
      'des-ede3-cbc': des.CBC.instantiate(des.EDE),
      'des-ede3': des.EDE,
      'des-ede-cbc': des.CBC.instantiate(des.EDE),
      'des-ede': des.EDE,
      'des-cbc': des.CBC.instantiate(des.DES),
      'des-ecb': des.DES
    };
    modes.des = modes['des-cbc'];
    modes.des3 = modes['des-ede3-cbc'];
    module.exports = DES;
    inherits(DES, CipherBase);
    function DES(opts) {
            SRTlib.send(`{ "anonymous": false, "function": "DES", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      CipherBase.call(this);
      var modeName = opts.mode.toLowerCase();
      var mode = modes[modeName];
      var type;
      if (opts.decrypt) {
        type = 'decrypt';
      } else {
        type = 'encrypt';
      }
      var key = opts.key;
      if (!Buffer.isBuffer(key)) {
        key = Buffer.from(key);
      }
      if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
        key = Buffer.concat([key, key.slice(0, 8)]);
      }
      var iv = opts.iv;
      if (!Buffer.isBuffer(iv)) {
        iv = Buffer.from(iv);
      }
      this._des = mode.create({
        key: key,
        iv: iv,
        type: type
      });
            SRTlib.send('], "end": "DES"},');

    }
    DES.prototype._update = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "DES.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "DES.prototype._update"},');

      return Buffer.from(this._des.update(data));
            SRTlib.send('], "end": "DES.prototype._update"},');

    };
    DES.prototype._final = function () {
            SRTlib.send(`{ "anonymous": true, "function": "DES.prototype._final", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "DES.prototype._final"},');

      return Buffer.from(this._des.final());
            SRTlib.send('], "end": "DES.prototype._final"},');

    };
        SRTlib.send('], "end": "emptyKey47"},');

  }, {
    "cipher-base": 52,
    "des.js": 68,
    "inherits": 133,
    "safe-buffer": 190
  }],
  43: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey48", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    exports['des-ecb'] = {
      key: 8,
      iv: 0
    };
    exports['des-cbc'] = exports.des = {
      key: 8,
      iv: 8
    };
    exports['des-ede3-cbc'] = exports.des3 = {
      key: 24,
      iv: 8
    };
    exports['des-ede3'] = {
      key: 24,
      iv: 0
    };
    exports['des-ede-cbc'] = {
      key: 16,
      iv: 8
    };
    exports['des-ede'] = {
      key: 16,
      iv: 0
    };
        SRTlib.send('], "end": "emptyKey48"},');

  }, {}],
  44: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey49", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var bn = require('bn.js');
      var randomBytes = require('randombytes');
      module.exports = crt;
      function blind(priv) {
                SRTlib.send(`{ "anonymous": false, "function": "blind", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var r = getr(priv);
        var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
                SRTlib.send('], "end": "blind"},');

        return {
          blinder: blinder,
          unblinder: r.invm(priv.modulus)
        };
                SRTlib.send('], "end": "blind"},');

      }
      function crt(msg, priv) {
                SRTlib.send(`{ "anonymous": false, "function": "crt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var blinds = blind(priv);
        var len = priv.modulus.byteLength();
        var mod = bn.mont(priv.modulus);
        var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
        var c1 = blinded.toRed(bn.mont(priv.prime1));
        var c2 = blinded.toRed(bn.mont(priv.prime2));
        var qinv = priv.coefficient;
        var p = priv.prime1;
        var q = priv.prime2;
        var m1 = c1.redPow(priv.exponent1);
        var m2 = c2.redPow(priv.exponent2);
        m1 = m1.fromRed();
        m2 = m2.fromRed();
        var h = m1.isub(m2).imul(qinv).umod(p);
        h.imul(q);
        m2.iadd(h);
                SRTlib.send('], "end": "crt"},');

        return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
                SRTlib.send('], "end": "crt"},');

      }
      crt.getr = getr;
      function getr(priv) {
                SRTlib.send(`{ "anonymous": false, "function": "getr", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var len = priv.modulus.byteLength();
        var r = new bn(randomBytes(len));
        while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
          r = new bn(randomBytes(len));
        }
                SRTlib.send('], "end": "getr"},');

        return r;
                SRTlib.send('], "end": "getr"},');

      }
            SRTlib.send('], "end": "call2"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey49"},');

  }, {
    "bn.js": 21,
    "buffer": 360,
    "randombytes": 170
  }],
  45: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey50", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = require('./browser/algorithms.json');
        SRTlib.send('], "end": "emptyKey50"},');

  }, {
    "./browser/algorithms.json": 46
  }],
  46: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey51", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "sha224WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        "sign": "ecdsa/rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "sha256WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        "sign": "ecdsa/rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "sha384WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        "sign": "ecdsa/rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "sha512WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        "sign": "ecdsa/rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        "sign": "rsa",
        "hash": "sha1",
        "id": "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        "sign": "ecdsa",
        "hash": "sha1",
        "id": ""
      },
      "sha256": {
        "sign": "ecdsa",
        "hash": "sha256",
        "id": ""
      },
      "sha224": {
        "sign": "ecdsa",
        "hash": "sha224",
        "id": ""
      },
      "sha384": {
        "sign": "ecdsa",
        "hash": "sha384",
        "id": ""
      },
      "sha512": {
        "sign": "ecdsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-SHA1": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-WITH-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-WITH-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-WITH-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-WITH-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-RIPEMD160": {
        "sign": "dsa",
        "hash": "rmd160",
        "id": ""
      },
      "ripemd160WithRSA": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "md5WithRSAEncryption": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      }
    };
        SRTlib.send('], "end": "emptyKey51"},');

  }, {}],
  47: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey52", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    };
        SRTlib.send('], "end": "emptyKey52"},');

  }, {}],
  48: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey53", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var createHash = require('create-hash');
      var stream = require('stream');
      var inherits = require('inherits');
      var sign = require('./sign');
      var verify = require('./verify');
      var algorithms = require('./algorithms.json');
      Object.keys(algorithms).forEach(function (key) {
                SRTlib.send(`{ "anonymous": true, "function": "call.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        algorithms[key].id = new Buffer(algorithms[key].id, 'hex');
        algorithms[key.toLowerCase()] = algorithms[key];
                SRTlib.send('], "end": "call.forEach"},');

      });
      function Sign(algorithm) {
                SRTlib.send(`{ "anonymous": false, "function": "Sign", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        stream.Writable.call(this);
        var data = algorithms[algorithm];
        if (!data) {
                    SRTlib.send('], "end": "Sign"},');

          throw new Error('Unknown message digest');
        }
        this._hashType = data.hash;
        this._hash = createHash(data.hash);
        this._tag = data.id;
        this._signType = data.sign;
                SRTlib.send('], "end": "Sign"},');

      }
      inherits(Sign, stream.Writable);
      Sign.prototype._write = function _write(data, _, done) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Sign.prototype._write._write", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        this._hash.update(data);
        done();
                SRTlib.send('], "end": "call.Sign.prototype._write._write"},');

      };
      Sign.prototype.update = function update(data, enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Sign.prototype.update.update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (typeof data === 'string') data = new Buffer(data, enc);
        this._hash.update(data);
                SRTlib.send('], "end": "call.Sign.prototype.update.update"},');

        return this;
                SRTlib.send('], "end": "call.Sign.prototype.update.update"},');

      };
      Sign.prototype.sign = function signMethod(key, enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Sign.prototype.sign.signMethod", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.end();
        var hash = this._hash.digest();
        var sig = sign(hash, key, this._hashType, this._signType, this._tag);
                SRTlib.send('], "end": "call.Sign.prototype.sign.signMethod"},');

        return enc ? sig.toString(enc) : sig;
                SRTlib.send('], "end": "call.Sign.prototype.sign.signMethod"},');

      };
      function Verify(algorithm) {
                SRTlib.send(`{ "anonymous": false, "function": "Verify", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        stream.Writable.call(this);
        var data = algorithms[algorithm];
        if (!data) {
                    SRTlib.send('], "end": "Verify"},');

          throw new Error('Unknown message digest');
        }
        this._hash = createHash(data.hash);
        this._tag = data.id;
        this._signType = data.sign;
                SRTlib.send('], "end": "Verify"},');

      }
      inherits(Verify, stream.Writable);
      Verify.prototype._write = function _write(data, _, done) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Verify.prototype._write._write", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        this._hash.update(data);
        done();
                SRTlib.send('], "end": "call.Verify.prototype._write._write"},');

      };
      Verify.prototype.update = function update(data, enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Verify.prototype.update.update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (typeof data === 'string') data = new Buffer(data, enc);
        this._hash.update(data);
                SRTlib.send('], "end": "call.Verify.prototype.update.update"},');

        return this;
                SRTlib.send('], "end": "call.Verify.prototype.update.update"},');

      };
      Verify.prototype.verify = function verifyMethod(key, sig, enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Verify.prototype.verify.verifyMethod", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (typeof sig === 'string') sig = new Buffer(sig, enc);
        this.end();
        var hash = this._hash.digest();
                SRTlib.send('], "end": "call.Verify.prototype.verify.verifyMethod"},');

        return verify(sig, hash, key, this._signType, this._tag);
                SRTlib.send('], "end": "call.Verify.prototype.verify.verifyMethod"},');

      };
      function createSign(algorithm) {
                SRTlib.send(`{ "anonymous": false, "function": "createSign", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "createSign"},');

        return new Sign(algorithm);
                SRTlib.send('], "end": "createSign"},');

      }
      function createVerify(algorithm) {
                SRTlib.send(`{ "anonymous": false, "function": "createVerify", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "createVerify"},');

        return new Verify(algorithm);
                SRTlib.send('], "end": "createVerify"},');

      }
      module.exports = {
        Sign: createSign,
        Verify: createVerify,
        createSign: createSign,
        createVerify: createVerify
      };
            SRTlib.send('], "end": "call3"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey53"},');

  }, {
    "./algorithms.json": 46,
    "./sign": 49,
    "./verify": 50,
    "buffer": 360,
    "create-hash": 59,
    "inherits": 133,
    "stream": 216
  }],
  49: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey54", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var createHmac = require('create-hmac');
      var crt = require('browserify-rsa');
      var EC = require('elliptic').ec;
      var BN = require('bn.js');
      var parseKeys = require('parse-asn1');
      var curves = require('./curves.json');
      function sign(hash, key, hashType, signType, tag) {
                SRTlib.send(`{ "anonymous": false, "function": "sign", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        var priv = parseKeys(key);
        if (priv.curve) {
          if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') {
                        SRTlib.send('], "end": "sign"},');

            throw new Error('wrong private key type');
          }
                    SRTlib.send('], "end": "sign"},');

          return ecSign(hash, priv);
        } else if (priv.type === 'dsa') {
          if (signType !== 'dsa') {
                        SRTlib.send('], "end": "sign"},');

            throw new Error('wrong private key type');
          }
                    SRTlib.send('], "end": "sign"},');

          return dsaSign(hash, priv, hashType);
        } else {
          if (signType !== 'rsa' && signType !== 'ecdsa/rsa') {
                        SRTlib.send('], "end": "sign"},');

            throw new Error('wrong private key type');
          }
        }
        hash = Buffer.concat([tag, hash]);
        var len = priv.modulus.byteLength();
        var pad = [0, 1];
        while (hash.length + pad.length + 1 < len) pad.push(0xff);
        pad.push(0x00);
        var i = -1;
        while (++i < hash.length) pad.push(hash[i]);
        var out = crt(pad, priv);
                SRTlib.send('], "end": "sign"},');

        return out;
                SRTlib.send('], "end": "sign"},');

      }
      function ecSign(hash, priv) {
                SRTlib.send(`{ "anonymous": false, "function": "ecSign", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var curveId = curves[priv.curve.join('.')];
        if (!curveId) {
                    SRTlib.send('], "end": "ecSign"},');

          throw new Error('unknown curve ' + priv.curve.join('.'));
        }
        var curve = new EC(curveId);
        var key = curve.keyFromPrivate(priv.privateKey);
        var out = key.sign(hash);
                SRTlib.send('], "end": "ecSign"},');

        return new Buffer(out.toDER());
                SRTlib.send('], "end": "ecSign"},');

      }
      function dsaSign(hash, priv, algo) {
                SRTlib.send(`{ "anonymous": false, "function": "dsaSign", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var x = priv.params.priv_key;
        var p = priv.params.p;
        var q = priv.params.q;
        var g = priv.params.g;
        var r = new BN(0);
        var k;
        var H = bits2int(hash, q).mod(q);
        var s = false;
        var kv = getKey(x, q, hash, algo);
        while (s === false) {
          k = makeKey(q, kv, algo);
          r = makeR(g, k, p, q);
          s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
          if (s.cmpn(0) === 0) {
            s = false;
            r = new BN(0);
          }
        }
                SRTlib.send('], "end": "dsaSign"},');

        return toDER(r, s);
                SRTlib.send('], "end": "dsaSign"},');

      }
      function toDER(r, s) {
                SRTlib.send(`{ "anonymous": false, "function": "toDER", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        r = r.toArray();
        s = s.toArray();
        if (r[0] & 0x80) r = [0].concat(r);
        if (s[0] & 0x80) s = [0].concat(s);
        var total = r.length + s.length + 4;
        var res = [0x30, total, 0x02, r.length];
        res = res.concat(r, [0x02, s.length], s);
                SRTlib.send('], "end": "toDER"},');

        return new Buffer(res);
                SRTlib.send('], "end": "toDER"},');

      }
      function getKey(x, q, hash, algo) {
                SRTlib.send(`{ "anonymous": false, "function": "getKey", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        x = new Buffer(x.toArray());
        if (x.length < q.byteLength()) {
          var zeros = new Buffer(q.byteLength() - x.length);
          zeros.fill(0);
          x = Buffer.concat([zeros, x]);
        }
        var hlen = hash.length;
        var hbits = bits2octets(hash, q);
        var v = new Buffer(hlen);
        v.fill(1);
        var k = new Buffer(hlen);
        k.fill(0);
        k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest();
        v = createHmac(algo, k).update(v).digest();
        k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest();
        v = createHmac(algo, k).update(v).digest();
                SRTlib.send('], "end": "getKey"},');

        return {
          k: k,
          v: v
        };
                SRTlib.send('], "end": "getKey"},');

      }
      function bits2int(obits, q) {
                SRTlib.send(`{ "anonymous": false, "function": "bits2int", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var bits = new BN(obits);
        var shift = (obits.length << 3) - q.bitLength();
        if (shift > 0) bits.ishrn(shift);
                SRTlib.send('], "end": "bits2int"},');

        return bits;
                SRTlib.send('], "end": "bits2int"},');

      }
      function bits2octets(bits, q) {
                SRTlib.send(`{ "anonymous": false, "function": "bits2octets", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        bits = bits2int(bits, q);
        bits = bits.mod(q);
        var out = new Buffer(bits.toArray());
        if (out.length < q.byteLength()) {
          var zeros = new Buffer(q.byteLength() - out.length);
          zeros.fill(0);
          out = Buffer.concat([zeros, out]);
        }
                SRTlib.send('], "end": "bits2octets"},');

        return out;
                SRTlib.send('], "end": "bits2octets"},');

      }
      function makeKey(q, kv, algo) {
                SRTlib.send(`{ "anonymous": false, "function": "makeKey", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var t;
        var k;
        do {
          t = new Buffer(0);
          while (t.length * 8 < q.bitLength()) {
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([t, kv.v]);
          }
          k = bits2int(t, q);
          kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest();
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
        } while (k.cmp(q) !== -1);
                SRTlib.send('], "end": "makeKey"},');

        return k;
                SRTlib.send('], "end": "makeKey"},');

      }
      function makeR(g, k, p, q) {
                SRTlib.send(`{ "anonymous": false, "function": "makeR", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

                SRTlib.send('], "end": "makeR"},');

        return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
                SRTlib.send('], "end": "makeR"},');

      }
      module.exports = sign;
      module.exports.getKey = getKey;
      module.exports.makeKey = makeKey;
            SRTlib.send('], "end": "call4"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey54"},');

  }, {
    "./curves.json": 47,
    "bn.js": 21,
    "browserify-rsa": 44,
    "buffer": 360,
    "create-hmac": 61,
    "elliptic": 78,
    "parse-asn1": 151
  }],
  50: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey55", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var BN = require('bn.js');
      var EC = require('elliptic').ec;
      var parseKeys = require('parse-asn1');
      var curves = require('./curves.json');
      function verify(sig, hash, key, signType, tag) {
                SRTlib.send(`{ "anonymous": false, "function": "verify", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        var pub = parseKeys(key);
        if (pub.type === 'ec') {
          if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') {
                        SRTlib.send('], "end": "verify"},');

            throw new Error('wrong public key type');
          }
                    SRTlib.send('], "end": "verify"},');

          return ecVerify(sig, hash, pub);
        } else if (pub.type === 'dsa') {
          if (signType !== 'dsa') {
                        SRTlib.send('], "end": "verify"},');

            throw new Error('wrong public key type');
          }
                    SRTlib.send('], "end": "verify"},');

          return dsaVerify(sig, hash, pub);
        } else {
          if (signType !== 'rsa' && signType !== 'ecdsa/rsa') {
                        SRTlib.send('], "end": "verify"},');

            throw new Error('wrong public key type');
          }
        }
        hash = Buffer.concat([tag, hash]);
        var len = pub.modulus.byteLength();
        var pad = [1];
        var padNum = 0;
        while (hash.length + pad.length + 2 < len) {
          pad.push(0xff);
          padNum++;
        }
        pad.push(0x00);
        var i = -1;
        while (++i < hash.length) {
          pad.push(hash[i]);
        }
        pad = new Buffer(pad);
        var red = BN.mont(pub.modulus);
        sig = new BN(sig).toRed(red);
        sig = sig.redPow(new BN(pub.publicExponent));
        sig = new Buffer(sig.fromRed().toArray());
        var out = padNum < 8 ? 1 : 0;
        len = Math.min(sig.length, pad.length);
        if (sig.length !== pad.length) out = 1;
        i = -1;
        while (++i < len) out |= sig[i] ^ pad[i];
                SRTlib.send('], "end": "verify"},');

        return out === 0;
                SRTlib.send('], "end": "verify"},');

      }
      function ecVerify(sig, hash, pub) {
                SRTlib.send(`{ "anonymous": false, "function": "ecVerify", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var curveId = curves[pub.data.algorithm.curve.join('.')];
        if (!curveId) {
                    SRTlib.send('], "end": "ecVerify"},');

          throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
        }
        var curve = new EC(curveId);
        var pubkey = pub.data.subjectPrivateKey.data;
                SRTlib.send('], "end": "ecVerify"},');

        return curve.verify(hash, sig, pubkey);
                SRTlib.send('], "end": "ecVerify"},');

      }
      function dsaVerify(sig, hash, pub) {
                SRTlib.send(`{ "anonymous": false, "function": "dsaVerify", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var p = pub.data.p;
        var q = pub.data.q;
        var g = pub.data.g;
        var y = pub.data.pub_key;
        var unpacked = parseKeys.signature.decode(sig, 'der');
        var s = unpacked.s;
        var r = unpacked.r;
        checkValue(s, q);
        checkValue(r, q);
        var montp = BN.mont(p);
        var w = s.invm(q);
        var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
                SRTlib.send('], "end": "dsaVerify"},');

        return v.cmp(r) === 0;
                SRTlib.send('], "end": "dsaVerify"},');

      }
      function checkValue(b, q) {
                SRTlib.send(`{ "anonymous": false, "function": "checkValue", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (b.cmpn(0) <= 0) {
                    SRTlib.send('], "end": "checkValue"},');

          throw new Error('invalid sig');
        }
        if (b.cmp(q) >= q) {
                    SRTlib.send('], "end": "checkValue"},');

          throw new Error('invalid sig');
        }
                SRTlib.send('], "end": "checkValue"},');

      }
      module.exports = verify;
            SRTlib.send('], "end": "call5"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey55"},');

  }, {
    "./curves.json": 47,
    "bn.js": 21,
    "buffer": 360,
    "elliptic": 78,
    "parse-asn1": 151
  }],
  51: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey56", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call6", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      module.exports = function xor(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "call.module.exports.xor", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var length = Math.min(a.length, b.length);
        var buffer = new Buffer(length);
        for (var i = 0; i < length; ++i) {
          buffer[i] = a[i] ^ b[i];
        }
                SRTlib.send('], "end": "call.module.exports.xor"},');

        return buffer;
                SRTlib.send('], "end": "call.module.exports.xor"},');

      };
            SRTlib.send('], "end": "call6"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey56"},');

  }, {
    "buffer": 360
  }],
  52: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey57", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Buffer = require('safe-buffer').Buffer;
    var Transform = require('stream').Transform;
    var StringDecoder = require('string_decoder').StringDecoder;
    var inherits = require('inherits');
    function CipherBase(hashMode) {
            SRTlib.send(`{ "anonymous": false, "function": "CipherBase", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Transform.call(this);
      this.hashMode = typeof hashMode === 'string';
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this.final = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
            SRTlib.send('], "end": "CipherBase"},');

    }
    inherits(CipherBase, Transform);
    CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype.update", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof data === 'string') {
        data = Buffer.from(data, inputEnc);
      }
      var outData = this._update(data);
      if (this.hashMode) {
                SRTlib.send('], "end": "CipherBase.prototype.update"},');

        return this;
      }
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
            SRTlib.send('], "end": "CipherBase.prototype.update"},');

      return outData;
            SRTlib.send('], "end": "CipherBase.prototype.update"},');

    };
    CipherBase.prototype.setAutoPadding = function () {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype.setAutoPadding", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "CipherBase.prototype.setAutoPadding"},');

    };
    CipherBase.prototype.getAuthTag = function () {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype.getAuthTag", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "CipherBase.prototype.getAuthTag"},');

      throw new Error('trying to get auth tag in unsupported state');
            SRTlib.send('], "end": "CipherBase.prototype.getAuthTag"},');

    };
    CipherBase.prototype.setAuthTag = function () {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype.setAuthTag", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "CipherBase.prototype.setAuthTag"},');

      throw new Error('trying to set auth tag in unsupported state');
            SRTlib.send('], "end": "CipherBase.prototype.setAuthTag"},');

    };
    CipherBase.prototype.setAAD = function () {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype.setAAD", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "CipherBase.prototype.setAAD"},');

      throw new Error('trying to set aad in unsupported state');
            SRTlib.send('], "end": "CipherBase.prototype.setAAD"},');

    };
    CipherBase.prototype._transform = function (data, _, next) {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype._transform", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
            SRTlib.send('], "end": "CipherBase.prototype._transform"},');

    };
    CipherBase.prototype._flush = function (done) {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype._flush", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }
      done(err);
            SRTlib.send('], "end": "CipherBase.prototype._flush"},');

    };
    CipherBase.prototype._finalOrDigest = function (outputEnc) {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype._finalOrDigest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var outData = this.__final() || Buffer.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
            SRTlib.send('], "end": "CipherBase.prototype._finalOrDigest"},');

      return outData;
            SRTlib.send('], "end": "CipherBase.prototype._finalOrDigest"},');

    };
    CipherBase.prototype._toString = function (value, enc, fin) {
            SRTlib.send(`{ "anonymous": true, "function": "CipherBase.prototype._toString", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc) {
                SRTlib.send('], "end": "CipherBase.prototype._toString"},');

        throw new Error('can\'t switch encodings');
      }
      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }
            SRTlib.send('], "end": "CipherBase.prototype._toString"},');

      return out;
            SRTlib.send('], "end": "CipherBase.prototype._toString"},');

    };
    module.exports = CipherBase;
        SRTlib.send('], "end": "emptyKey57"},');

  }, {
    "inherits": 133,
    "safe-buffer": 190,
    "stream": 216,
    "string_decoder": 217
  }],
  53: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey59", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function () {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey58", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      'use strict';
      var hasOwn = ({}).hasOwnProperty;
      function classNames() {
                SRTlib.send(`{ "anonymous": false, "function": "classNames", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;
          var argType = typeof arg;
          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg) && arg.length) {
            var inner = classNames.apply(null, arg);
            if (inner) {
              classes.push(inner);
            }
          } else if (argType === 'object') {
            for (var key in arg) {
              if (hasOwn.call(arg, key) && arg[key]) {
                classes.push(key);
              }
            }
          }
        }
                SRTlib.send('], "end": "classNames"},');

        return classes.join(' ');
                SRTlib.send('], "end": "classNames"},');

      }
      if (typeof module !== 'undefined' && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
        define('classnames', [], function () {
                    SRTlib.send(`{ "anonymous": true, "function": "define", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "define"},');

          return classNames;
                    SRTlib.send('], "end": "define"},');

        });
      } else {
        window.classNames = classNames;
      }
            SRTlib.send('], "end": "emptyKey58"},');

    })();
        SRTlib.send('], "end": "emptyKey59"},');

  }, {}],
  54: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey60", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var slice = [].slice;
    module.exports = function (obj, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports3", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if ('string' == typeof fn) fn = obj[fn];
      if ('function' != typeof fn) {
                SRTlib.send('], "end": "module.exports3"},');

        throw new Error('bind() requires a function');
      }
      var args = slice.call(arguments, 2);
            SRTlib.send('], "end": "module.exports3"},');

      return function () {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports.ReturnStatement"},');

        return fn.apply(obj, args.concat(slice.call(arguments)));
                SRTlib.send('], "end": "module.exports.ReturnStatement"},');

      };
            SRTlib.send('], "end": "module.exports3"},');

    };
        SRTlib.send('], "end": "emptyKey60"},');

  }, {}],
  55: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey61", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    if (typeof module !== 'undefined') {
      module.exports = Emitter;
    }
    function Emitter(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "Emitter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (obj) {
                SRTlib.send('], "end": "Emitter"},');

        return mixin(obj);
      }
            SRTlib.send('], "end": "Emitter"},');

    }
    ;
    function mixin(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "mixin", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }
            SRTlib.send('], "end": "mixin"},');

      return obj;
            SRTlib.send('], "end": "mixin"},');

    }
    Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.on.Emitter.prototype.addEventListener", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this._callbacks = this._callbacks || ({});
      (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
            SRTlib.send('], "end": "Emitter.prototype.on.Emitter.prototype.addEventListener"},');

      return this;
            SRTlib.send('], "end": "Emitter.prototype.on.Emitter.prototype.addEventListener"},');

    };
    Emitter.prototype.once = function (event, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.once", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      function on() {
                SRTlib.send(`{ "anonymous": false, "function": "on", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.off(event, on);
        fn.apply(this, arguments);
                SRTlib.send('], "end": "on"},');

      }
      on.fn = fn;
      this.on(event, on);
            SRTlib.send('], "end": "Emitter.prototype.once"},');

      return this;
            SRTlib.send('], "end": "Emitter.prototype.once"},');

    };
    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this._callbacks = this._callbacks || ({});
      if (0 == arguments.length) {
        this._callbacks = {};
                SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener"},');

        return this;
      }
      var callbacks = this._callbacks['$' + event];
      if (!callbacks) {
                SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener"},');

        return this;
      }
      if (1 == arguments.length) {
        delete this._callbacks['$' + event];
                SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener"},');

        return this;
      }
      var cb;
      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        delete this._callbacks['$' + event];
      }
            SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener"},');

      return this;
            SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener"},');

    };
    Emitter.prototype.emit = function (event) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.emit", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._callbacks = this._callbacks || ({});
      var args = new Array(arguments.length - 1), callbacks = this._callbacks['$' + event];
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }
            SRTlib.send('], "end": "Emitter.prototype.emit"},');

      return this;
            SRTlib.send('], "end": "Emitter.prototype.emit"},');

    };
    Emitter.prototype.listeners = function (event) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.listeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._callbacks = this._callbacks || ({});
            SRTlib.send('], "end": "Emitter.prototype.listeners"},');

      return this._callbacks['$' + event] || [];
            SRTlib.send('], "end": "Emitter.prototype.listeners"},');

    };
    Emitter.prototype.hasListeners = function (event) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.hasListeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Emitter.prototype.hasListeners"},');

      return !!this.listeners(event).length;
            SRTlib.send('], "end": "Emitter.prototype.hasListeners"},');

    };
        SRTlib.send('], "end": "emptyKey61"},');

  }, {}],
  56: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey62", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function (a, b) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports4", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var fn = function () {
                SRTlib.send(`{ "anonymous": false, "function": "fn", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "fn"},');

      };
      fn.prototype = b.prototype;
      a.prototype = new fn();
      a.prototype.constructor = a;
            SRTlib.send('], "end": "module.exports4"},');

    };
        SRTlib.send('], "end": "emptyKey62"},');

  }, {}],
  57: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey63", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call7", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      function isArray(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (Array.isArray) {
                    SRTlib.send('], "end": "isArray"},');

          return Array.isArray(arg);
        }
                SRTlib.send('], "end": "isArray"},');

        return objectToString(arg) === '[object Array]';
                SRTlib.send('], "end": "isArray"},');

      }
      exports.isArray = isArray;
      function isBoolean(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isBoolean", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isBoolean"},');

        return typeof arg === 'boolean';
                SRTlib.send('], "end": "isBoolean"},');

      }
      exports.isBoolean = isBoolean;
      function isNull(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isNull", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isNull"},');

        return arg === null;
                SRTlib.send('], "end": "isNull"},');

      }
      exports.isNull = isNull;
      function isNullOrUndefined(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isNullOrUndefined", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isNullOrUndefined"},');

        return arg == null;
                SRTlib.send('], "end": "isNullOrUndefined"},');

      }
      exports.isNullOrUndefined = isNullOrUndefined;
      function isNumber(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isNumber", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isNumber"},');

        return typeof arg === 'number';
                SRTlib.send('], "end": "isNumber"},');

      }
      exports.isNumber = isNumber;
      function isString(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isString", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isString"},');

        return typeof arg === 'string';
                SRTlib.send('], "end": "isString"},');

      }
      exports.isString = isString;
      function isSymbol(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isSymbol", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isSymbol"},');

        return typeof arg === 'symbol';
                SRTlib.send('], "end": "isSymbol"},');

      }
      exports.isSymbol = isSymbol;
      function isUndefined(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isUndefined", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isUndefined"},');

        return arg === void 0;
                SRTlib.send('], "end": "isUndefined"},');

      }
      exports.isUndefined = isUndefined;
      function isRegExp(re) {
                SRTlib.send(`{ "anonymous": false, "function": "isRegExp", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isRegExp"},');

        return objectToString(re) === '[object RegExp]';
                SRTlib.send('], "end": "isRegExp"},');

      }
      exports.isRegExp = isRegExp;
      function isObject(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isObject", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isObject"},');

        return typeof arg === 'object' && arg !== null;
                SRTlib.send('], "end": "isObject"},');

      }
      exports.isObject = isObject;
      function isDate(d) {
                SRTlib.send(`{ "anonymous": false, "function": "isDate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isDate"},');

        return objectToString(d) === '[object Date]';
                SRTlib.send('], "end": "isDate"},');

      }
      exports.isDate = isDate;
      function isError(e) {
                SRTlib.send(`{ "anonymous": false, "function": "isError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isError"},');

        return objectToString(e) === '[object Error]' || e instanceof Error;
                SRTlib.send('], "end": "isError"},');

      }
      exports.isError = isError;
      function isFunction(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isFunction", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isFunction"},');

        return typeof arg === 'function';
                SRTlib.send('], "end": "isFunction"},');

      }
      exports.isFunction = isFunction;
      function isPrimitive(arg) {
                SRTlib.send(`{ "anonymous": false, "function": "isPrimitive", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isPrimitive"},');

        return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
                SRTlib.send('], "end": "isPrimitive"},');

      }
      exports.isPrimitive = isPrimitive;
      exports.isBuffer = Buffer.isBuffer;
      function objectToString(o) {
                SRTlib.send(`{ "anonymous": false, "function": "objectToString", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "objectToString"},');

        return Object.prototype.toString.call(o);
                SRTlib.send('], "end": "objectToString"},');

      }
            SRTlib.send('], "end": "call7"},');

    }).call(this, {
      "isBuffer": require("../../is-buffer/index.js")
    });
        SRTlib.send('], "end": "emptyKey63"},');

  }, {
    "../../is-buffer/index.js": 134
  }],
  58: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey64", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var elliptic = require('elliptic');
      var BN = require('bn.js');
      module.exports = function createECDH(curve) {
                SRTlib.send(`{ "anonymous": true, "function": "call.module.exports.createECDH", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.module.exports.createECDH"},');

        return new ECDH(curve);
                SRTlib.send('], "end": "call.module.exports.createECDH"},');

      };
      var aliases = {
        secp256k1: {
          name: 'secp256k1',
          byteLength: 32
        },
        secp224r1: {
          name: 'p224',
          byteLength: 28
        },
        prime256v1: {
          name: 'p256',
          byteLength: 32
        },
        prime192v1: {
          name: 'p192',
          byteLength: 24
        },
        ed25519: {
          name: 'ed25519',
          byteLength: 32
        },
        secp384r1: {
          name: 'p384',
          byteLength: 48
        },
        secp521r1: {
          name: 'p521',
          byteLength: 66
        }
      };
      aliases.p224 = aliases.secp224r1;
      aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
      aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
      aliases.p384 = aliases.secp384r1;
      aliases.p521 = aliases.secp521r1;
      function ECDH(curve) {
                SRTlib.send(`{ "anonymous": false, "function": "ECDH", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.curveType = aliases[curve];
        if (!this.curveType) {
          this.curveType = {
            name: curve
          };
        }
        this.curve = new elliptic.ec(this.curveType.name);
        this.keys = void 0;
                SRTlib.send('], "end": "ECDH"},');

      }
      ECDH.prototype.generateKeys = function (enc, format) {
                SRTlib.send(`{ "anonymous": true, "function": "call.ECDH.prototype.generateKeys", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.keys = this.curve.genKeyPair();
                SRTlib.send('], "end": "call.ECDH.prototype.generateKeys"},');

        return this.getPublicKey(enc, format);
                SRTlib.send('], "end": "call.ECDH.prototype.generateKeys"},');

      };
      ECDH.prototype.computeSecret = function (other, inenc, enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.ECDH.prototype.computeSecret", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        inenc = inenc || 'utf8';
        if (!Buffer.isBuffer(other)) {
          other = new Buffer(other, inenc);
        }
        var otherPub = this.curve.keyFromPublic(other).getPublic();
        var out = otherPub.mul(this.keys.getPrivate()).getX();
                SRTlib.send('], "end": "call.ECDH.prototype.computeSecret"},');

        return formatReturnValue(out, enc, this.curveType.byteLength);
                SRTlib.send('], "end": "call.ECDH.prototype.computeSecret"},');

      };
      ECDH.prototype.getPublicKey = function (enc, format) {
                SRTlib.send(`{ "anonymous": true, "function": "call.ECDH.prototype.getPublicKey", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var key = this.keys.getPublic(format === 'compressed', true);
        if (format === 'hybrid') {
          if (key[key.length - 1] % 2) {
            key[0] = 7;
          } else {
            key[0] = 6;
          }
        }
                SRTlib.send('], "end": "call.ECDH.prototype.getPublicKey"},');

        return formatReturnValue(key, enc);
                SRTlib.send('], "end": "call.ECDH.prototype.getPublicKey"},');

      };
      ECDH.prototype.getPrivateKey = function (enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.ECDH.prototype.getPrivateKey", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.ECDH.prototype.getPrivateKey"},');

        return formatReturnValue(this.keys.getPrivate(), enc);
                SRTlib.send('], "end": "call.ECDH.prototype.getPrivateKey"},');

      };
      ECDH.prototype.setPublicKey = function (pub, enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.ECDH.prototype.setPublicKey", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        enc = enc || 'utf8';
        if (!Buffer.isBuffer(pub)) {
          pub = new Buffer(pub, enc);
        }
        this.keys._importPublic(pub);
                SRTlib.send('], "end": "call.ECDH.prototype.setPublicKey"},');

        return this;
                SRTlib.send('], "end": "call.ECDH.prototype.setPublicKey"},');

      };
      ECDH.prototype.setPrivateKey = function (priv, enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.ECDH.prototype.setPrivateKey", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        enc = enc || 'utf8';
        if (!Buffer.isBuffer(priv)) {
          priv = new Buffer(priv, enc);
        }
        var _priv = new BN(priv);
        _priv = _priv.toString(16);
        this.keys = this.curve.genKeyPair();
        this.keys._importPrivate(_priv);
                SRTlib.send('], "end": "call.ECDH.prototype.setPrivateKey"},');

        return this;
                SRTlib.send('], "end": "call.ECDH.prototype.setPrivateKey"},');

      };
      function formatReturnValue(bn, enc, len) {
                SRTlib.send(`{ "anonymous": false, "function": "formatReturnValue", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (!Array.isArray(bn)) {
          bn = bn.toArray();
        }
        var buf = new Buffer(bn);
        if (len && buf.length < len) {
          var zeros = new Buffer(len - buf.length);
          zeros.fill(0);
          buf = Buffer.concat([zeros, buf]);
        }
        if (!enc) {
                    SRTlib.send('], "end": "formatReturnValue"},');

          return buf;
        } else {
                    SRTlib.send('], "end": "formatReturnValue"},');

          return buf.toString(enc);
        }
                SRTlib.send('], "end": "formatReturnValue"},');

      }
            SRTlib.send('], "end": "call8"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey64"},');

  }, {
    "bn.js": 21,
    "buffer": 360,
    "elliptic": 78
  }],
  59: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey65", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var inherits = require('inherits');
    var MD5 = require('md5.js');
    var RIPEMD160 = require('ripemd160');
    var sha = require('sha.js');
    var Base = require('cipher-base');
    function Hash(hash) {
            SRTlib.send(`{ "anonymous": false, "function": "Hash", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Base.call(this, 'digest');
      this._hash = hash;
            SRTlib.send('], "end": "Hash"},');

    }
    inherits(Hash, Base);
    Hash.prototype._update = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Hash.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._hash.update(data);
            SRTlib.send('], "end": "Hash.prototype._update"},');

    };
    Hash.prototype._final = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Hash.prototype._final", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Hash.prototype._final"},');

      return this._hash.digest();
            SRTlib.send('], "end": "Hash.prototype._final"},');

    };
    module.exports = function createHash(alg) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.createHash", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      alg = alg.toLowerCase();
      if (alg === 'md5') {
                SRTlib.send('], "end": "module.exports.createHash"},');

        return new MD5();
      }
      if (alg === 'rmd160' || alg === 'ripemd160') {
                SRTlib.send('], "end": "module.exports.createHash"},');

        return new RIPEMD160();
      }
            SRTlib.send('], "end": "module.exports.createHash"},');

      return new Hash(sha(alg));
            SRTlib.send('], "end": "module.exports.createHash"},');

    };
        SRTlib.send('], "end": "emptyKey65"},');

  }, {
    "cipher-base": 52,
    "inherits": 133,
    "md5.js": 140,
    "ripemd160": 189,
    "sha.js": 192
  }],
  60: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey66", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var MD5 = require('md5.js');
    module.exports = function (buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports5"},');

      return new MD5().update(buffer).digest();
            SRTlib.send('], "end": "module.exports5"},');

    };
        SRTlib.send('], "end": "emptyKey66"},');

  }, {
    "md5.js": 140
  }],
  61: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey67", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var inherits = require('inherits');
    var Legacy = require('./legacy');
    var Base = require('cipher-base');
    var Buffer = require('safe-buffer').Buffer;
    var md5 = require('create-hash/md5');
    var RIPEMD160 = require('ripemd160');
    var sha = require('sha.js');
    var ZEROS = Buffer.alloc(128);
    function Hmac(alg, key) {
            SRTlib.send(`{ "anonymous": false, "function": "Hmac", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      Base.call(this, 'digest');
      if (typeof key === 'string') {
        key = Buffer.from(key);
      }
      var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize);
      }
      var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
      var opad = this._opad = Buffer.allocUnsafe(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }
      this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
      this._hash.update(ipad);
            SRTlib.send('], "end": "Hmac"},');

    }
    inherits(Hmac, Base);
    Hmac.prototype._update = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Hmac.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._hash.update(data);
            SRTlib.send('], "end": "Hmac.prototype._update"},');

    };
    Hmac.prototype._final = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Hmac.prototype._final", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var h = this._hash.digest();
      var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
            SRTlib.send('], "end": "Hmac.prototype._final"},');

      return hash.update(this._opad).update(h).digest();
            SRTlib.send('], "end": "Hmac.prototype._final"},');

    };
    module.exports = function createHmac(alg, key) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.createHmac", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      alg = alg.toLowerCase();
      if (alg === 'rmd160' || alg === 'ripemd160') {
                SRTlib.send('], "end": "module.exports.createHmac"},');

        return new Hmac('rmd160', key);
      }
      if (alg === 'md5') {
                SRTlib.send('], "end": "module.exports.createHmac"},');

        return new Legacy(md5, key);
      }
            SRTlib.send('], "end": "module.exports.createHmac"},');

      return new Hmac(alg, key);
            SRTlib.send('], "end": "module.exports.createHmac"},');

    };
        SRTlib.send('], "end": "emptyKey67"},');

  }, {
    "./legacy": 62,
    "cipher-base": 52,
    "create-hash/md5": 60,
    "inherits": 133,
    "ripemd160": 189,
    "safe-buffer": 190,
    "sha.js": 192
  }],
  62: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey68", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var inherits = require('inherits');
    var Buffer = require('safe-buffer').Buffer;
    var Base = require('cipher-base');
    var ZEROS = Buffer.alloc(128);
    var blocksize = 64;
    function Hmac(alg, key) {
            SRTlib.send(`{ "anonymous": false, "function": "Hmac", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      Base.call(this, 'digest');
      if (typeof key === 'string') {
        key = Buffer.from(key);
      }
      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        key = alg(key);
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize);
      }
      var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
      var opad = this._opad = Buffer.allocUnsafe(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }
      this._hash = [ipad];
            SRTlib.send('], "end": "Hmac"},');

    }
    inherits(Hmac, Base);
    Hmac.prototype._update = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Hmac.prototype._update2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._hash.push(data);
            SRTlib.send('], "end": "Hmac.prototype._update2"},');

    };
    Hmac.prototype._final = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Hmac.prototype._final2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var h = this._alg(Buffer.concat(this._hash));
            SRTlib.send('], "end": "Hmac.prototype._final2"},');

      return this._alg(Buffer.concat([this._opad, h]));
            SRTlib.send('], "end": "Hmac.prototype._final2"},');

    };
    module.exports = Hmac;
        SRTlib.send('], "end": "emptyKey68"},');

  }, {
    "cipher-base": 52,
    "inherits": 133,
    "safe-buffer": 190
  }],
  63: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey69", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');
    exports.createHash = exports.Hash = require('create-hash');
    exports.createHmac = exports.Hmac = require('create-hmac');
    var algos = require('browserify-sign/algos');
    var algoKeys = Object.keys(algos);
    var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);
    exports.getHashes = function () {
            SRTlib.send(`{ "anonymous": true, "function": "exports.getHashes", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "exports.getHashes"},');

      return hashes;
            SRTlib.send('], "end": "exports.getHashes"},');

    };
    var p = require('pbkdf2');
    exports.pbkdf2 = p.pbkdf2;
    exports.pbkdf2Sync = p.pbkdf2Sync;
    var aes = require('browserify-cipher');
    exports.Cipher = aes.Cipher;
    exports.createCipher = aes.createCipher;
    exports.Cipheriv = aes.Cipheriv;
    exports.createCipheriv = aes.createCipheriv;
    exports.Decipher = aes.Decipher;
    exports.createDecipher = aes.createDecipher;
    exports.Decipheriv = aes.Decipheriv;
    exports.createDecipheriv = aes.createDecipheriv;
    exports.getCiphers = aes.getCiphers;
    exports.listCiphers = aes.listCiphers;
    var dh = require('diffie-hellman');
    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
    exports.getDiffieHellman = dh.getDiffieHellman;
    exports.createDiffieHellman = dh.createDiffieHellman;
    exports.DiffieHellman = dh.DiffieHellman;
    var sign = require('browserify-sign');
    exports.createSign = sign.createSign;
    exports.Sign = sign.Sign;
    exports.createVerify = sign.createVerify;
    exports.Verify = sign.Verify;
    exports.createECDH = require('create-ecdh');
    var publicEncrypt = require('public-encrypt');
    exports.publicEncrypt = publicEncrypt.publicEncrypt;
    exports.privateEncrypt = publicEncrypt.privateEncrypt;
    exports.publicDecrypt = publicEncrypt.publicDecrypt;
    exports.privateDecrypt = publicEncrypt.privateDecrypt;
    var rf = require('randomfill');
    exports.randomFill = rf.randomFill;
    exports.randomFillSync = rf.randomFillSync;
    exports.createCredentials = function () {
            SRTlib.send(`{ "anonymous": true, "function": "exports.createCredentials", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "exports.createCredentials"},');

      throw new Error(['sorry, createCredentials is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\n'));
            SRTlib.send('], "end": "exports.createCredentials"},');

    };
    exports.constants = {
      'DH_CHECK_P_NOT_SAFE_PRIME': 2,
      'DH_CHECK_P_NOT_PRIME': 1,
      'DH_UNABLE_TO_CHECK_GENERATOR': 4,
      'DH_NOT_SUITABLE_GENERATOR': 8,
      'NPN_ENABLED': 1,
      'ALPN_ENABLED': 1,
      'RSA_PKCS1_PADDING': 1,
      'RSA_SSLV23_PADDING': 2,
      'RSA_NO_PADDING': 3,
      'RSA_PKCS1_OAEP_PADDING': 4,
      'RSA_X931_PADDING': 5,
      'RSA_PKCS1_PSS_PADDING': 6,
      'POINT_CONVERSION_COMPRESSED': 2,
      'POINT_CONVERSION_UNCOMPRESSED': 4,
      'POINT_CONVERSION_HYBRID': 6
    };
        SRTlib.send('], "end": "emptyKey69"},');

  }, {
    "browserify-cipher": 41,
    "browserify-sign": 48,
    "browserify-sign/algos": 45,
    "create-ecdh": 58,
    "create-hash": 59,
    "create-hmac": 61,
    "diffie-hellman": 74,
    "pbkdf2": 154,
    "public-encrypt": 163,
    "randombytes": 170,
    "randomfill": 171
  }],
  64: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey70", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var fingerprint = require('./lib/fingerprint.js');
    var pad = require('./lib/pad.js');
    var getRandomValue = require('./lib/getRandomValue.js');
    var c = 0, blockSize = 4, base = 36, discreteValues = Math.pow(base, blockSize);
    function randomBlock() {
            SRTlib.send(`{ "anonymous": false, "function": "randomBlock", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "randomBlock"},');

      return pad((getRandomValue() * discreteValues << 0).toString(base), blockSize);
            SRTlib.send('], "end": "randomBlock"},');

    }
    function safeCounter() {
            SRTlib.send(`{ "anonymous": false, "function": "safeCounter", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      c = c < discreteValues ? c : 0;
      c++;
            SRTlib.send('], "end": "safeCounter"},');

      return c - 1;
            SRTlib.send('], "end": "safeCounter"},');

    }
    function cuid() {
            SRTlib.send(`{ "anonymous": false, "function": "cuid", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var letter = 'c', timestamp = new Date().getTime().toString(base), counter = pad(safeCounter().toString(base), blockSize), print = fingerprint(), random = randomBlock() + randomBlock();
            SRTlib.send('], "end": "cuid"},');

      return letter + timestamp + counter + print + random;
            SRTlib.send('], "end": "cuid"},');

    }
    cuid.slug = function slug() {
            SRTlib.send(`{ "anonymous": true, "function": "cuid.slug.slug", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var date = new Date().getTime().toString(36), counter = safeCounter().toString(36).slice(-4), print = fingerprint().slice(0, 1) + fingerprint().slice(-1), random = randomBlock().slice(-2);
            SRTlib.send('], "end": "cuid.slug.slug"},');

      return date.slice(-2) + counter + print + random;
            SRTlib.send('], "end": "cuid.slug.slug"},');

    };
    cuid.isCuid = function isCuid(stringToCheck) {
            SRTlib.send(`{ "anonymous": true, "function": "cuid.isCuid.isCuid", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof stringToCheck !== 'string') {
                SRTlib.send('], "end": "cuid.isCuid.isCuid"},');

        return false;
      }
      if (stringToCheck.startsWith('c')) {
                SRTlib.send('], "end": "cuid.isCuid.isCuid"},');

        return true;
      }
            SRTlib.send('], "end": "cuid.isCuid.isCuid"},');

      return false;
            SRTlib.send('], "end": "cuid.isCuid.isCuid"},');

    };
    cuid.isSlug = function isSlug(stringToCheck) {
            SRTlib.send(`{ "anonymous": true, "function": "cuid.isSlug.isSlug", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof stringToCheck !== 'string') {
                SRTlib.send('], "end": "cuid.isSlug.isSlug"},');

        return false;
      }
      var stringLength = stringToCheck.length;
      if (stringLength >= 7 && stringLength <= 10) {
                SRTlib.send('], "end": "cuid.isSlug.isSlug"},');

        return true;
      }
            SRTlib.send('], "end": "cuid.isSlug.isSlug"},');

      return false;
            SRTlib.send('], "end": "cuid.isSlug.isSlug"},');

    };
    cuid.fingerprint = fingerprint;
    module.exports = cuid;
        SRTlib.send('], "end": "emptyKey70"},');

  }, {
    "./lib/fingerprint.js": 65,
    "./lib/getRandomValue.js": 66,
    "./lib/pad.js": 67
  }],
  65: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey71", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var pad = require('./pad.js');
    var env = typeof window === 'object' ? window : self;
    var globalCount = Object.keys(env).length;
    var mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;
    var clientId = pad((mimeTypesLength + navigator.userAgent.length).toString(36) + globalCount.toString(36), 4);
    module.exports = function fingerprint() {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.fingerprint", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "module.exports.fingerprint"},');

      return clientId;
            SRTlib.send('], "end": "module.exports.fingerprint"},');

    };
        SRTlib.send('], "end": "emptyKey71"},');

  }, {
    "./pad.js": 67
  }],
  66: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey72", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var getRandomValue;
    var crypto = typeof window !== 'undefined' && (window.crypto || window.msCrypto) || typeof self !== 'undefined' && self.crypto;
    if (crypto) {
      var lim = Math.pow(2, 32) - 1;
      getRandomValue = function () {
                SRTlib.send(`{ "anonymous": true, "function": "getRandomValue", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "getRandomValue"},');

        return Math.abs(crypto.getRandomValues(new Uint32Array(1))[0] / lim);
                SRTlib.send('], "end": "getRandomValue"},');

      };
    } else {
      getRandomValue = Math.random;
    }
    module.exports = getRandomValue;
        SRTlib.send('], "end": "emptyKey72"},');

  }, {}],
  67: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey73", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function pad(num, size) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.pad", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var s = '000000000' + num;
            SRTlib.send('], "end": "module.exports.pad"},');

      return s.substr(s.length - size);
            SRTlib.send('], "end": "module.exports.pad"},');

    };
        SRTlib.send('], "end": "emptyKey73"},');

  }, {}],
  68: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey74", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    exports.utils = require('./des/utils');
    exports.Cipher = require('./des/cipher');
    exports.DES = require('./des/des');
    exports.CBC = require('./des/cbc');
    exports.EDE = require('./des/ede');
        SRTlib.send('], "end": "emptyKey74"},');

  }, {
    "./des/cbc": 69,
    "./des/cipher": 70,
    "./des/des": 71,
    "./des/ede": 72,
    "./des/utils": 73
  }],
  69: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey75", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    var proto = {};
    function CBCState(iv) {
            SRTlib.send(`{ "anonymous": false, "function": "CBCState", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      assert.equal(iv.length, 8, 'Invalid IV length');
      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++) this.iv[i] = iv[i];
            SRTlib.send('], "end": "CBCState"},');

    }
    function instantiate(Base) {
            SRTlib.send(`{ "anonymous": false, "function": "instantiate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      function CBC(options) {
                SRTlib.send(`{ "anonymous": false, "function": "CBC", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        Base.call(this, options);
        this._cbcInit();
                SRTlib.send('], "end": "CBC"},');

      }
      inherits(CBC, Base);
      var keys = Object.keys(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }
      CBC.create = function create(options) {
                SRTlib.send(`{ "anonymous": true, "function": "CBC.create.create", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "CBC.create.create"},');

        return new CBC(options);
                SRTlib.send('], "end": "CBC.create.create"},');

      };
            SRTlib.send('], "end": "instantiate"},');

      return CBC;
            SRTlib.send('], "end": "instantiate"},');

    }
    exports.instantiate = instantiate;
    proto._cbcInit = function _cbcInit() {
            SRTlib.send(`{ "anonymous": true, "function": "proto._cbcInit._cbcInit", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var state = new CBCState(this.options.iv);
      this._cbcState = state;
            SRTlib.send('], "end": "proto._cbcInit._cbcInit"},');

    };
    proto._update = function _update(inp, inOff, out, outOff) {
            SRTlib.send(`{ "anonymous": true, "function": "proto._update._update", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;
      var iv = state.iv;
      if (this.type === 'encrypt') {
        for (var i = 0; i < this.blockSize; i++) iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for (var i = 0; i < this.blockSize; i++) iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for (var i = 0; i < this.blockSize; i++) out[outOff + i] ^= iv[i];
        for (var i = 0; i < this.blockSize; i++) iv[i] = inp[inOff + i];
      }
            SRTlib.send('], "end": "proto._update._update"},');

    };
        SRTlib.send('], "end": "emptyKey75"},');

  }, {
    "inherits": 133,
    "minimalistic-assert": 144
  }],
  70: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey76", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var assert = require('minimalistic-assert');
    function Cipher(options) {
            SRTlib.send(`{ "anonymous": false, "function": "Cipher", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.options = options;
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
            SRTlib.send('], "end": "Cipher"},');

    }
    module.exports = Cipher;
    Cipher.prototype._init = function _init() {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._init._init", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Cipher.prototype._init._init"},');

    };
    Cipher.prototype.update = function update(data) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype.update.update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (data.length === 0) {
                SRTlib.send('], "end": "Cipher.prototype.update.update"},');

        return [];
      }
      if (this.type === 'decrypt') return this._updateDecrypt(data); else {
                SRTlib.send('], "end": "emptyKey76"},');

        return this._updateDecrypt(data);
      }
            SRTlib.send('], "end": "Cipher.prototype.update.update"},');

    };
    Cipher.prototype._buffer = function _buffer(data, off) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._buffer._buffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++) this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;
            SRTlib.send('], "end": "Cipher.prototype._buffer._buffer"},');

      return min;
            SRTlib.send('], "end": "Cipher.prototype._buffer._buffer"},');

    };
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._flushBuffer._flushBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
            SRTlib.send('], "end": "Cipher.prototype._flushBuffer._flushBuffer"},');

      return this.blockSize;
            SRTlib.send('], "end": "Cipher.prototype._flushBuffer._flushBuffer"},');

    };
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._updateEncrypt._updateEncrypt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var inputOff = 0;
      var outputOff = 0;
      var count = (this.bufferOff + data.length) / this.blockSize | 0;
      var out = new Array(count * this.blockSize);
      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
      }
      var max = data.length - (data.length - inputOff) % this.blockSize;
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
      for (; inputOff < data.length; (inputOff++, this.bufferOff++)) this.buffer[this.bufferOff] = data[inputOff];
            SRTlib.send('], "end": "Cipher.prototype._updateEncrypt._updateEncrypt"},');

      return out;
            SRTlib.send('], "end": "Cipher.prototype._updateEncrypt._updateEncrypt"},');

    };
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._updateDecrypt._updateDecrypt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var inputOff = 0;
      var outputOff = 0;
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
      inputOff += this._buffer(data, inputOff);
            SRTlib.send('], "end": "Cipher.prototype._updateDecrypt._updateDecrypt"},');

      return out;
            SRTlib.send('], "end": "Cipher.prototype._updateDecrypt._updateDecrypt"},');

    };
    Cipher.prototype.final = function final(buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype.final.final", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var first;
      if (buffer) first = this.update(buffer);
      var last;
      if (this.type === 'encrypt') last = this._finalEncrypt(); else last = this._finalDecrypt();
      if (first) return first.concat(last); else {
                SRTlib.send('], "end": "emptyKey76"},');

        return first.concat(last);
      }
            SRTlib.send('], "end": "Cipher.prototype.final.final"},');

    };
    Cipher.prototype._pad = function _pad(buffer, off) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._pad._pad", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (off === 0) {
                SRTlib.send('], "end": "Cipher.prototype._pad._pad"},');

        return false;
      }
      while (off < buffer.length) buffer[off++] = 0;
            SRTlib.send('], "end": "Cipher.prototype._pad._pad"},');

      return true;
            SRTlib.send('], "end": "Cipher.prototype._pad._pad"},');

    };
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._finalEncrypt._finalEncrypt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!this._pad(this.buffer, this.bufferOff)) {
                SRTlib.send('], "end": "Cipher.prototype._finalEncrypt._finalEncrypt"},');

        return [];
      }
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
            SRTlib.send('], "end": "Cipher.prototype._finalEncrypt._finalEncrypt"},');

      return out;
            SRTlib.send('], "end": "Cipher.prototype._finalEncrypt._finalEncrypt"},');

    };
    Cipher.prototype._unpad = function _unpad(buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._unpad._unpad", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Cipher.prototype._unpad._unpad"},');

      return buffer;
            SRTlib.send('], "end": "Cipher.prototype._unpad._unpad"},');

    };
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
            SRTlib.send(`{ "anonymous": true, "function": "Cipher.prototype._finalDecrypt._finalDecrypt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
            SRTlib.send('], "end": "Cipher.prototype._finalDecrypt._finalDecrypt"},');

      return this._unpad(out);
            SRTlib.send('], "end": "Cipher.prototype._finalDecrypt._finalDecrypt"},');

    };
        SRTlib.send('], "end": "emptyKey76"},');

  }, {
    "minimalistic-assert": 144
  }],
  71: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey77", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    var utils = require('./utils');
    var Cipher = require('./cipher');
    function DESState() {
            SRTlib.send(`{ "anonymous": false, "function": "DESState", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.tmp = new Array(2);
      this.keys = null;
            SRTlib.send('], "end": "DESState"},');

    }
    function DES(options) {
            SRTlib.send(`{ "anonymous": false, "function": "DES", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Cipher.call(this, options);
      var state = new DESState();
      this._desState = state;
      this.deriveKeys(state, options.key);
            SRTlib.send('], "end": "DES"},');

    }
    inherits(DES, Cipher);
    module.exports = DES;
    DES.create = function create(options) {
            SRTlib.send(`{ "anonymous": true, "function": "DES.create.create", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "DES.create.create"},');

      return new DES(options);
            SRTlib.send('], "end": "DES.create.create"},');

    };
    var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
    DES.prototype.deriveKeys = function deriveKeys(state, key) {
            SRTlib.send(`{ "anonymous": true, "function": "DES.prototype.deriveKeys.deriveKeys", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      state.keys = new Array(16 * 2);
      assert.equal(key.length, this.blockSize, 'Invalid key length');
      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);
      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
            SRTlib.send('], "end": "DES.prototype.deriveKeys.deriveKeys"},');

    };
    DES.prototype._update = function _update(inp, inOff, out, outOff) {
            SRTlib.send(`{ "anonymous": true, "function": "DES.prototype._update._update", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var state = this._desState;
      var l = utils.readUInt32BE(inp, inOff);
      var r = utils.readUInt32BE(inp, inOff + 4);
      utils.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
      if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0); else this._decrypt(state, l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];
      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r, outOff + 4);
            SRTlib.send('], "end": "DES.prototype._update._update"},');

    };
    DES.prototype._pad = function _pad(buffer, off) {
            SRTlib.send(`{ "anonymous": true, "function": "DES.prototype._pad._pad", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++) buffer[i] = value;
            SRTlib.send('], "end": "DES.prototype._pad._pad"},');

      return true;
            SRTlib.send('], "end": "DES.prototype._pad._pad"},');

    };
    DES.prototype._unpad = function _unpad(buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "DES.prototype._unpad._unpad", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++) assert.equal(buffer[i], pad);
            SRTlib.send('], "end": "DES.prototype._unpad._unpad"},');

      return buffer.slice(0, buffer.length - pad);
            SRTlib.send('], "end": "DES.prototype._unpad._unpad"},');

    };
    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
            SRTlib.send(`{ "anonymous": true, "function": "DES.prototype._encrypt._encrypt", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      var l = lStart;
      var r = rStart;
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
      }
      utils.rip(r, l, out, off);
            SRTlib.send('], "end": "DES.prototype._encrypt._encrypt"},');

    };
    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
            SRTlib.send(`{ "anonymous": true, "function": "DES.prototype._decrypt._decrypt", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      var l = rStart;
      var r = lStart;
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
      }
      utils.rip(l, r, out, off);
            SRTlib.send('], "end": "DES.prototype._decrypt._decrypt"},');

    };
        SRTlib.send('], "end": "emptyKey77"},');

  }, {
    "./cipher": 70,
    "./utils": 73,
    "inherits": 133,
    "minimalistic-assert": 144
  }],
  72: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey78", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    var Cipher = require('./cipher');
    var DES = require('./des');
    function EDEState(type, key) {
            SRTlib.send(`{ "anonymous": false, "function": "EDEState", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      assert.equal(key.length, 24, 'Invalid key length');
      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);
      if (type === 'encrypt') {
        this.ciphers = [DES.create({
          type: 'encrypt',
          key: k1
        }), DES.create({
          type: 'decrypt',
          key: k2
        }), DES.create({
          type: 'encrypt',
          key: k3
        })];
      } else {
        this.ciphers = [DES.create({
          type: 'decrypt',
          key: k3
        }), DES.create({
          type: 'encrypt',
          key: k2
        }), DES.create({
          type: 'decrypt',
          key: k1
        })];
      }
            SRTlib.send('], "end": "EDEState"},');

    }
    function EDE(options) {
            SRTlib.send(`{ "anonymous": false, "function": "EDE", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Cipher.call(this, options);
      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
            SRTlib.send('], "end": "EDE"},');

    }
    inherits(EDE, Cipher);
    module.exports = EDE;
    EDE.create = function create(options) {
            SRTlib.send(`{ "anonymous": true, "function": "EDE.create.create", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EDE.create.create"},');

      return new EDE(options);
            SRTlib.send('], "end": "EDE.create.create"},');

    };
    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
            SRTlib.send(`{ "anonymous": true, "function": "EDE.prototype._update._update", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var state = this._edeState;
      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
            SRTlib.send('], "end": "EDE.prototype._update._update"},');

    };
    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
        SRTlib.send('], "end": "emptyKey78"},');

  }, {
    "./cipher": 70,
    "./des": 71,
    "inherits": 133,
    "minimalistic-assert": 144
  }],
  73: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey79", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    exports.readUInt32BE = function readUInt32BE(bytes, off) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.readUInt32BE.readUInt32BE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
            SRTlib.send('], "end": "exports.readUInt32BE.readUInt32BE"},');

      return res >>> 0;
            SRTlib.send('], "end": "exports.readUInt32BE.readUInt32BE"},');

    };
    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.writeUInt32BE.writeUInt32BE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = value >>> 16 & 0xff;
      bytes[2 + off] = value >>> 8 & 0xff;
      bytes[3 + off] = value & 0xff;
            SRTlib.send('], "end": "exports.writeUInt32BE.writeUInt32BE"},');

    };
    exports.ip = function ip(inL, inR, out, off) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.ip.ip", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var outL = 0;
      var outR = 0;
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
            SRTlib.send('], "end": "exports.ip.ip"},');

    };
    exports.rip = function rip(inL, inR, out, off) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.rip.rip", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var outL = 0;
      var outR = 0;
      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }
      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
            SRTlib.send('], "end": "exports.rip.rip"},');

    };
    exports.pc1 = function pc1(inL, inR, out, off) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.pc1.pc1", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var outL = 0;
      var outR = 0;
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= inR >> j + i & 1;
      }
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= inL >> j + i & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
            SRTlib.send('], "end": "exports.pc1.pc1"},');

    };
    exports.r28shl = function r28shl(num, shift) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.r28shl.r28shl", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "exports.r28shl.r28shl"},');

      return num << shift & 0xfffffff | num >>> 28 - shift;
            SRTlib.send('], "end": "exports.r28shl.r28shl"},');

    };
    var pc2table = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
    exports.pc2 = function pc2(inL, inR, out, off) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.pc2.pc2", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var outL = 0;
      var outR = 0;
      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 0x1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 0x1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
            SRTlib.send('], "end": "exports.pc2.pc2"},');

    };
    exports.expand = function expand(r, out, off) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.expand.expand", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var outL = 0;
      var outR = 0;
      outL = (r & 1) << 5 | r >>> 27;
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= r >>> i & 0x3f;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= r >>> i & 0x3f;
        outR <<= 6;
      }
      outR |= (r & 0x1f) << 1 | r >>> 31;
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
            SRTlib.send('], "end": "exports.expand.expand"},');

    };
    var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
    exports.substitute = function substitute(inL, inR) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.substitute.substitute", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = sTable[4 * 0x40 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
      }
            SRTlib.send('], "end": "exports.substitute.substitute"},');

      return out >>> 0;
            SRTlib.send('], "end": "exports.substitute.substitute"},');

    };
    var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
    exports.permute = function permute(num) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.permute.permute", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= num >>> permuteTable[i] & 0x1;
      }
            SRTlib.send('], "end": "exports.permute.permute"},');

      return out >>> 0;
            SRTlib.send('], "end": "exports.permute.permute"},');

    };
    exports.padSplit = function padSplit(num, size, group) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.padSplit.padSplit", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var str = num.toString(2);
      while (str.length < size) str = '0' + str;
      var out = [];
      for (var i = 0; i < size; i += group) out.push(str.slice(i, i + group));
            SRTlib.send('], "end": "exports.padSplit.padSplit"},');

      return out.join(' ');
            SRTlib.send('], "end": "exports.padSplit.padSplit"},');

    };
        SRTlib.send('], "end": "emptyKey79"},');

  }, {}],
  74: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey80", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call9", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var generatePrime = require('./lib/generatePrime');
      var primes = require('./lib/primes.json');
      var DH = require('./lib/dh');
      function getDiffieHellman(mod) {
                SRTlib.send(`{ "anonymous": false, "function": "getDiffieHellman", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var prime = new Buffer(primes[mod].prime, 'hex');
        var gen = new Buffer(primes[mod].gen, 'hex');
                SRTlib.send('], "end": "getDiffieHellman"},');

        return new DH(prime, gen);
                SRTlib.send('], "end": "getDiffieHellman"},');

      }
      var ENCODINGS = {
        'binary': true,
        'hex': true,
        'base64': true
      };
      function createDiffieHellman(prime, enc, generator, genc) {
                SRTlib.send(`{ "anonymous": false, "function": "createDiffieHellman", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
                    SRTlib.send('], "end": "createDiffieHellman"},');

          return createDiffieHellman(prime, 'binary', enc, generator);
        }
        enc = enc || 'binary';
        genc = genc || 'binary';
        generator = generator || new Buffer([2]);
        if (!Buffer.isBuffer(generator)) {
          generator = new Buffer(generator, genc);
        }
        if (typeof prime === 'number') {
                    SRTlib.send('], "end": "createDiffieHellman"},');

          return new DH(generatePrime(prime, generator), generator, true);
        }
        if (!Buffer.isBuffer(prime)) {
          prime = new Buffer(prime, enc);
        }
                SRTlib.send('], "end": "createDiffieHellman"},');

        return new DH(prime, generator, true);
                SRTlib.send('], "end": "createDiffieHellman"},');

      }
      exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
      exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
            SRTlib.send('], "end": "call9"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey80"},');

  }, {
    "./lib/dh": 75,
    "./lib/generatePrime": 76,
    "./lib/primes.json": 77,
    "buffer": 360
  }],
  75: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey81", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call10", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var BN = require('bn.js');
      var MillerRabin = require('miller-rabin');
      var millerRabin = new MillerRabin();
      var TWENTYFOUR = new BN(24);
      var ELEVEN = new BN(11);
      var TEN = new BN(10);
      var THREE = new BN(3);
      var SEVEN = new BN(7);
      var primes = require('./generatePrime');
      var randomBytes = require('randombytes');
      module.exports = DH;
      function setPublicKey(pub, enc) {
                SRTlib.send(`{ "anonymous": false, "function": "setPublicKey", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        enc = enc || 'utf8';
        if (!Buffer.isBuffer(pub)) {
          pub = new Buffer(pub, enc);
        }
        this._pub = new BN(pub);
                SRTlib.send('], "end": "setPublicKey"},');

        return this;
                SRTlib.send('], "end": "setPublicKey"},');

      }
      function setPrivateKey(priv, enc) {
                SRTlib.send(`{ "anonymous": false, "function": "setPrivateKey", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        enc = enc || 'utf8';
        if (!Buffer.isBuffer(priv)) {
          priv = new Buffer(priv, enc);
        }
        this._priv = new BN(priv);
                SRTlib.send('], "end": "setPrivateKey"},');

        return this;
                SRTlib.send('], "end": "setPrivateKey"},');

      }
      var primeCache = {};
      function checkPrime(prime, generator) {
                SRTlib.send(`{ "anonymous": false, "function": "checkPrime", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var gen = generator.toString('hex');
        var hex = [gen, prime.toString(16)].join('_');
        if ((hex in primeCache)) {
                    SRTlib.send('], "end": "checkPrime"},');

          return primeCache[hex];
        }
        var error = 0;
        if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
          error += 1;
          if (gen === '02' || gen === '05') {
            error += 8;
          } else {
            error += 4;
          }
          primeCache[hex] = error;
                    SRTlib.send('], "end": "checkPrime"},');

          return error;
        }
        if (!millerRabin.test(prime.shrn(1))) {
          error += 2;
        }
        var rem;
        switch (gen) {
          case '02':
            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
              error += 8;
            }
            break;
          case '05':
            rem = prime.mod(TEN);
            if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
              error += 8;
            }
            break;
          default:
            error += 4;
        }
        primeCache[hex] = error;
                SRTlib.send('], "end": "checkPrime"},');

        return error;
                SRTlib.send('], "end": "checkPrime"},');

      }
      function DH(prime, generator, malleable) {
                SRTlib.send(`{ "anonymous": false, "function": "DH", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        this.setGenerator(generator);
        this.__prime = new BN(prime);
        this._prime = BN.mont(this.__prime);
        this._primeLen = prime.length;
        this._pub = undefined;
        this._priv = undefined;
        this._primeCode = undefined;
        if (malleable) {
          this.setPublicKey = setPublicKey;
          this.setPrivateKey = setPrivateKey;
        } else {
          this._primeCode = 8;
        }
                SRTlib.send('], "end": "DH"},');

      }
      Object.defineProperty(DH.prototype, 'verifyError', {
        enumerable: true,
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (typeof this._primeCode !== 'number') {
            this._primeCode = checkPrime(this.__prime, this.__gen);
          }
                    SRTlib.send('], "end": "call.get"},');

          return this._primeCode;
                    SRTlib.send('], "end": "call.get"},');

        }
      });
      DH.prototype.generateKeys = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.DH.prototype.generateKeys", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (!this._priv) {
          this._priv = new BN(randomBytes(this._primeLen));
        }
        this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
                SRTlib.send('], "end": "call.DH.prototype.generateKeys"},');

        return this.getPublicKey();
                SRTlib.send('], "end": "call.DH.prototype.generateKeys"},');

      };
      DH.prototype.computeSecret = function (other) {
                SRTlib.send(`{ "anonymous": true, "function": "call.DH.prototype.computeSecret", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        other = new BN(other);
        other = other.toRed(this._prime);
        var secret = other.redPow(this._priv).fromRed();
        var out = new Buffer(secret.toArray());
        var prime = this.getPrime();
        if (out.length < prime.length) {
          var front = new Buffer(prime.length - out.length);
          front.fill(0);
          out = Buffer.concat([front, out]);
        }
                SRTlib.send('], "end": "call.DH.prototype.computeSecret"},');

        return out;
                SRTlib.send('], "end": "call.DH.prototype.computeSecret"},');

      };
      DH.prototype.getPublicKey = function getPublicKey(enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.DH.prototype.getPublicKey.getPublicKey", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.DH.prototype.getPublicKey.getPublicKey"},');

        return formatReturnValue(this._pub, enc);
                SRTlib.send('], "end": "call.DH.prototype.getPublicKey.getPublicKey"},');

      };
      DH.prototype.getPrivateKey = function getPrivateKey(enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.DH.prototype.getPrivateKey.getPrivateKey", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.DH.prototype.getPrivateKey.getPrivateKey"},');

        return formatReturnValue(this._priv, enc);
                SRTlib.send('], "end": "call.DH.prototype.getPrivateKey.getPrivateKey"},');

      };
      DH.prototype.getPrime = function (enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.DH.prototype.getPrime", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.DH.prototype.getPrime"},');

        return formatReturnValue(this.__prime, enc);
                SRTlib.send('], "end": "call.DH.prototype.getPrime"},');

      };
      DH.prototype.getGenerator = function (enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.DH.prototype.getGenerator", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.DH.prototype.getGenerator"},');

        return formatReturnValue(this._gen, enc);
                SRTlib.send('], "end": "call.DH.prototype.getGenerator"},');

      };
      DH.prototype.setGenerator = function (gen, enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.DH.prototype.setGenerator", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        enc = enc || 'utf8';
        if (!Buffer.isBuffer(gen)) {
          gen = new Buffer(gen, enc);
        }
        this.__gen = gen;
        this._gen = new BN(gen);
                SRTlib.send('], "end": "call.DH.prototype.setGenerator"},');

        return this;
                SRTlib.send('], "end": "call.DH.prototype.setGenerator"},');

      };
      function formatReturnValue(bn, enc) {
                SRTlib.send(`{ "anonymous": false, "function": "formatReturnValue", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var buf = new Buffer(bn.toArray());
        if (!enc) {
                    SRTlib.send('], "end": "formatReturnValue"},');

          return buf;
        } else {
                    SRTlib.send('], "end": "formatReturnValue"},');

          return buf.toString(enc);
        }
                SRTlib.send('], "end": "formatReturnValue"},');

      }
            SRTlib.send('], "end": "call10"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey81"},');

  }, {
    "./generatePrime": 76,
    "bn.js": 21,
    "buffer": 360,
    "miller-rabin": 142,
    "randombytes": 170
  }],
  76: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey82", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var randomBytes = require('randombytes');
    module.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN = require('bn.js');
    var TWENTYFOUR = new BN(24);
    var MillerRabin = require('miller-rabin');
    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    var SIXTEEN = new BN(16);
    var EIGHT = new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    var TWELVE = new BN(12);
    var primes = null;
    function _getPrimes() {
            SRTlib.send(`{ "anonymous": false, "function": "_getPrimes", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (primes !== null) {
                SRTlib.send('], "end": "_getPrimes"},');

        return primes;
      }
      var limit = 0x100000;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++) if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
      }
      primes = res;
            SRTlib.send('], "end": "_getPrimes"},');

      return res;
            SRTlib.send('], "end": "_getPrimes"},');

    }
    function simpleSieve(p) {
            SRTlib.send(`{ "anonymous": false, "function": "simpleSieve", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var primes = _getPrimes();
      for (var i = 0; i < primes.length; i++) if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) {
                    SRTlib.send('], "end": "simpleSieve"},');

          return true;
        } else {
                    SRTlib.send('], "end": "simpleSieve"},');

          return false;
        }
      }
            SRTlib.send('], "end": "simpleSieve"},');

      return true;
            SRTlib.send('], "end": "simpleSieve"},');

    }
    function fermatTest(p) {
            SRTlib.send(`{ "anonymous": false, "function": "fermatTest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var red = BN.mont(p);
            SRTlib.send('], "end": "fermatTest"},');

      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
            SRTlib.send('], "end": "fermatTest"},');

    }
    function findPrime(bits, gen) {
            SRTlib.send(`{ "anonymous": false, "function": "findPrime", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (bits < 16) {
        if (gen === 2 || gen === 5) {
                    SRTlib.send('], "end": "findPrime"},');

          return new BN([0x8c, 0x7b]);
        } else {
                    SRTlib.send('], "end": "findPrime"},');

          return new BN([0x8c, 0x27]);
        }
      }
      gen = new BN(gen);
      var num, n2;
      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
                    SRTlib.send('], "end": "findPrime"},');

          return num;
        }
      }
            SRTlib.send('], "end": "findPrime"},');

    }
        SRTlib.send('], "end": "emptyKey82"},');

  }, {
    "bn.js": 21,
    "miller-rabin": 142,
    "randombytes": 170
  }],
  77: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey83", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    };
        SRTlib.send('], "end": "emptyKey83"},');

  }, {}],
  78: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey84", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var elliptic = exports;
    elliptic.version = require('../package.json').version;
    elliptic.utils = require('./elliptic/utils');
    elliptic.rand = require('brorand');
    elliptic.curve = require('./elliptic/curve');
    elliptic.curves = require('./elliptic/curves');
    elliptic.ec = require('./elliptic/ec');
    elliptic.eddsa = require('./elliptic/eddsa');
        SRTlib.send('], "end": "emptyKey84"},');

  }, {
    "../package.json": 93,
    "./elliptic/curve": 81,
    "./elliptic/curves": 84,
    "./elliptic/ec": 85,
    "./elliptic/eddsa": 88,
    "./elliptic/utils": 92,
    "brorand": 22
  }],
  79: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey85", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var BN = require('bn.js');
    var utils = require('../utils');
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    function BaseCurve(type, conf) {
            SRTlib.send(`{ "anonymous": false, "function": "BaseCurve", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
            SRTlib.send('], "end": "BaseCurve"},');

    }
    module.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
            SRTlib.send(`{ "anonymous": true, "function": "BaseCurve.prototype.point.point", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "BaseCurve.prototype.point.point"},');

      throw new Error('Not implemented');
            SRTlib.send('], "end": "BaseCurve.prototype.point.point"},');

    };
    BaseCurve.prototype.validate = function validate() {
            SRTlib.send(`{ "anonymous": true, "function": "BaseCurve.prototype.validate.validate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "BaseCurve.prototype.validate.validate"},');

      throw new Error('Not implemented');
            SRTlib.send('], "end": "BaseCurve.prototype.validate.validate"},');

    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
            SRTlib.send(`{ "anonymous": true, "function": "BaseCurve.prototype._fixedNafMul._fixedNafMul", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      assert(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      for (var j = 0; j < naf.length; j += doubles.step) {
        var nafW = 0;
        for (var k = j + doubles.step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (var j = 0; j < repr.length; j++) {
          var nafW = repr[j];
          if (nafW === i) b = b.mixedAdd(doubles.points[j]); else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
            SRTlib.send('], "end": "BaseCurve.prototype._fixedNafMul._fixedNafMul"},');

      return a.toP();
            SRTlib.send('], "end": "BaseCurve.prototype._fixedNafMul._fixedNafMul"},');

    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
            SRTlib.send(`{ "anonymous": true, "function": "BaseCurve.prototype._wnafMul._wnafMul", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var k = 0; i >= 0 && naf[i] === 0; i--) k++;
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
          if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]); else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0) acc = acc.add(wnd[z - 1 >> 1]); else acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
            SRTlib.send('], "end": "BaseCurve.prototype._wnafMul._wnafMul"},');

      return p.type === 'affine' ? acc.toP() : acc;
            SRTlib.send('], "end": "BaseCurve.prototype._wnafMul._wnafMul"},');

    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
            SRTlib.send(`{ "anonymous": true, "function": "BaseCurve.prototype._wnafMulAdd._wnafMulAdd", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      for (var i = 0; i < len; i++) {
        var p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (var i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [points[a], null, null, points[b]];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [-3, -1, -5, -7, 0, 7, 5, 1, 3];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (var j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (var i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (var j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0) zero = false;
          }
          if (!zero) break;
          k++;
          i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for (var j = 0; j < len; j++) {
          var z = tmp[j];
          var p;
          if (z === 0) continue; else if (z > 0) p = wnd[j][z - 1 >> 1]; else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === 'affine') acc = acc.mixedAdd(p); else acc = acc.add(p);
        }
      }
      for (var i = 0; i < len; i++) wnd[i] = null;
      if (jacobianResult) return acc; else {
                SRTlib.send('], "end": "emptyKey85"},');

        return acc;
      }
            SRTlib.send('], "end": "BaseCurve.prototype._wnafMulAdd._wnafMulAdd"},');

    };
    function BasePoint(curve, type) {
            SRTlib.send(`{ "anonymous": false, "function": "BasePoint", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.curve = curve;
      this.type = type;
      this.precomputed = null;
            SRTlib.send('], "end": "BasePoint"},');

    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype.eq.eq", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "BasePoint.prototype.eq.eq"},');

      throw new Error('Not implemented');
            SRTlib.send('], "end": "BasePoint.prototype.eq.eq"},');

    };
    BasePoint.prototype.validate = function validate() {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype.validate.validate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "BasePoint.prototype.validate.validate"},');

      return this.curve.validate(this);
            SRTlib.send('], "end": "BasePoint.prototype.validate.validate"},');

    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "BaseCurve.prototype.decodePoint.decodePoint", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0); else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
                SRTlib.send('], "end": "BaseCurve.prototype.decodePoint.decodePoint"},');

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
                SRTlib.send('], "end": "BaseCurve.prototype.decodePoint.decodePoint"},');

        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
            SRTlib.send('], "end": "BaseCurve.prototype.decodePoint.decodePoint"},');

      throw new Error('Unknown point format');
            SRTlib.send('], "end": "BaseCurve.prototype.decodePoint.decodePoint"},');

    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype.encodeCompressed.encodeCompressed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "BasePoint.prototype.encodeCompressed.encodeCompressed"},');

      return this.encode(enc, true);
            SRTlib.send('], "end": "BasePoint.prototype.encodeCompressed.encodeCompressed"},');

    };
    BasePoint.prototype._encode = function _encode(compact) {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype._encode._encode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);
      if (compact) {
                SRTlib.send('], "end": "BasePoint.prototype._encode._encode"},');

        return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
      }
            SRTlib.send('], "end": "BasePoint.prototype._encode._encode"},');

      return [0x04].concat(x, this.getY().toArray('be', len));
            SRTlib.send('], "end": "BasePoint.prototype._encode._encode"},');

    };
    BasePoint.prototype.encode = function encode(enc, compact) {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype.encode.encode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "BasePoint.prototype.encode.encode"},');

      return utils.encode(this._encode(compact), enc);
            SRTlib.send('], "end": "BasePoint.prototype.encode.encode"},');

    };
    BasePoint.prototype.precompute = function precompute(power) {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype.precompute.precompute", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.precomputed) {
                SRTlib.send('], "end": "BasePoint.prototype.precompute.precompute"},');

        return this;
      }
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
            SRTlib.send('], "end": "BasePoint.prototype.precompute.precompute"},');

      return this;
            SRTlib.send('], "end": "BasePoint.prototype.precompute.precompute"},');

    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype._hasDoubles._hasDoubles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!this.precomputed) {
                SRTlib.send('], "end": "BasePoint.prototype._hasDoubles._hasDoubles"},');

        return false;
      }
      var doubles = this.precomputed.doubles;
      if (!doubles) {
                SRTlib.send('], "end": "BasePoint.prototype._hasDoubles._hasDoubles"},');

        return false;
      }
            SRTlib.send('], "end": "BasePoint.prototype._hasDoubles._hasDoubles"},');

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
            SRTlib.send('], "end": "BasePoint.prototype._hasDoubles._hasDoubles"},');

    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype._getDoubles._getDoubles", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (this.precomputed && this.precomputed.doubles) {
                SRTlib.send('], "end": "BasePoint.prototype._getDoubles._getDoubles"},');

        return this.precomputed.doubles;
      }
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++) acc = acc.dbl();
        doubles.push(acc);
      }
            SRTlib.send('], "end": "BasePoint.prototype._getDoubles._getDoubles"},');

      return {
        step: step,
        points: doubles
      };
            SRTlib.send('], "end": "BasePoint.prototype._getDoubles._getDoubles"},');

    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype._getNAFPoints._getNAFPoints", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.precomputed && this.precomputed.naf) {
                SRTlib.send('], "end": "BasePoint.prototype._getNAFPoints._getNAFPoints"},');

        return this.precomputed.naf;
      }
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
            SRTlib.send('], "end": "BasePoint.prototype._getNAFPoints._getNAFPoints"},');

      return {
        wnd: wnd,
        points: res
      };
            SRTlib.send('], "end": "BasePoint.prototype._getNAFPoints._getNAFPoints"},');

    };
    BasePoint.prototype._getBeta = function _getBeta() {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype._getBeta._getBeta", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "BasePoint.prototype._getBeta._getBeta"},');

      return null;
            SRTlib.send('], "end": "BasePoint.prototype._getBeta._getBeta"},');

    };
    BasePoint.prototype.dblp = function dblp(k) {
            SRTlib.send(`{ "anonymous": true, "function": "BasePoint.prototype.dblp.dblp", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var r = this;
      for (var i = 0; i < k; i++) r = r.dbl();
            SRTlib.send('], "end": "BasePoint.prototype.dblp.dblp"},');

      return r;
            SRTlib.send('], "end": "BasePoint.prototype.dblp.dblp"},');

    };
        SRTlib.send('], "end": "emptyKey85"},');

  }, {
    "../utils": 92,
    "bn.js": 21
  }],
  80: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey86", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');
    var assert = utils.assert;
    function EdwardsCurve(conf) {
            SRTlib.send(`{ "anonymous": false, "function": "EdwardsCurve", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, 'edwards', conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
            SRTlib.send('], "end": "EdwardsCurve"},');

    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
            SRTlib.send(`{ "anonymous": true, "function": "EdwardsCurve.prototype._mulA._mulA", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.mOneA) return num.redNeg(); else {
                SRTlib.send('], "end": "emptyKey86"},');

        return num.redNeg();
      }
            SRTlib.send('], "end": "EdwardsCurve.prototype._mulA._mulA"},');

    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
            SRTlib.send(`{ "anonymous": true, "function": "EdwardsCurve.prototype._mulC._mulC", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.oneC) return num; else {
                SRTlib.send('], "end": "emptyKey86"},');

        return num;
      }
            SRTlib.send('], "end": "EdwardsCurve.prototype._mulC._mulC"},');

    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
            SRTlib.send(`{ "anonymous": true, "function": "EdwardsCurve.prototype.jpoint.jpoint", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

            SRTlib.send('], "end": "EdwardsCurve.prototype.jpoint.jpoint"},');

      return this.point(x, y, z, t);
            SRTlib.send('], "end": "EdwardsCurve.prototype.jpoint.jpoint"},');

    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
            SRTlib.send(`{ "anonymous": true, "function": "EdwardsCurve.prototype.pointFromX.pointFromX", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      x = new BN(x, 16);
      if (!x.red) x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) {
                SRTlib.send('], "end": "EdwardsCurve.prototype.pointFromX.pointFromX"},');

        throw new Error('invalid point');
      }
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
            SRTlib.send('], "end": "EdwardsCurve.prototype.pointFromX.pointFromX"},');

      return this.point(x, y);
            SRTlib.send('], "end": "EdwardsCurve.prototype.pointFromX.pointFromX"},');

    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
            SRTlib.send(`{ "anonymous": true, "function": "EdwardsCurve.prototype.pointFromY.pointFromY", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      y = new BN(y, 16);
      if (!y.red) y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point'); else {
                    SRTlib.send('], "end": "emptyKey86"},');

          throw new Error('invalid point');
        }
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) {
                SRTlib.send('], "end": "EdwardsCurve.prototype.pointFromY.pointFromY"},');

        throw new Error('invalid point');
      }
      if (x.fromRed().isOdd() !== odd) x = x.redNeg();
            SRTlib.send('], "end": "EdwardsCurve.prototype.pointFromY.pointFromY"},');

      return this.point(x, y);
            SRTlib.send('], "end": "EdwardsCurve.prototype.pointFromY.pointFromY"},');

    };
    EdwardsCurve.prototype.validate = function validate(point) {
            SRTlib.send(`{ "anonymous": true, "function": "EdwardsCurve.prototype.validate.validate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (point.isInfinity()) {
                SRTlib.send('], "end": "EdwardsCurve.prototype.validate.validate"},');

        return true;
      }
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
            SRTlib.send('], "end": "EdwardsCurve.prototype.validate.validate"},');

      return lhs.cmp(rhs) === 0;
            SRTlib.send('], "end": "EdwardsCurve.prototype.validate.validate"},');

    };
    function Point(curve, x, y, z, t) {
            SRTlib.send(`{ "anonymous": false, "function": "Point", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
      }
            SRTlib.send('], "end": "Point"},');

    }
    inherits(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            SRTlib.send(`{ "anonymous": true, "function": "EdwardsCurve.prototype.pointFromJSON.pointFromJSON", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EdwardsCurve.prototype.pointFromJSON.pointFromJSON"},');

      return Point.fromJSON(this, obj);
            SRTlib.send('], "end": "EdwardsCurve.prototype.pointFromJSON.pointFromJSON"},');

    };
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
            SRTlib.send(`{ "anonymous": true, "function": "EdwardsCurve.prototype.point.point", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

            SRTlib.send('], "end": "EdwardsCurve.prototype.point.point"},');

      return new Point(this, x, y, z, t);
            SRTlib.send('], "end": "EdwardsCurve.prototype.point.point"},');

    };
    Point.fromJSON = function fromJSON(curve, obj) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.fromJSON.fromJSON", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "Point.fromJSON.fromJSON"},');

      return new Point(curve, obj[0], obj[1], obj[2]);
            SRTlib.send('], "end": "Point.fromJSON.fromJSON"},');

    };
    Point.prototype.inspect = function inspect() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.inspect.inspect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "Point.prototype.inspect.inspect"},');

        return '<EC Point Infinity>';
      }
            SRTlib.send('], "end": "Point.prototype.inspect.inspect"},');

      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
            SRTlib.send('], "end": "Point.prototype.inspect.inspect"},');

    };
    Point.prototype.isInfinity = function isInfinity() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.isInfinity.isInfinity", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.isInfinity.isInfinity"},');

      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
            SRTlib.send('], "end": "Point.prototype.isInfinity.isInfinity"},');

    };
    Point.prototype._extDbl = function _extDbl() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype._extDbl._extDbl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
            SRTlib.send('], "end": "Point.prototype._extDbl._extDbl"},');

      return this.curve.point(nx, ny, nz, nt);
            SRTlib.send('], "end": "Point.prototype._extDbl._extDbl"},');

    };
    Point.prototype._projDbl = function _projDbl() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype._projDbl._projDbl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      if (this.curve.twisted) {
        var e = this.curve._mulA(c);
        var f = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e.redSub(d));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          var h = this.z.redSqr();
          var j = f.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f.redMul(e.redSub(d));
          nz = f.redMul(j);
        }
      } else {
        var e = c.redAdd(d);
        var h = this.curve._mulC(this.z).redSqr();
        var j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
            SRTlib.send('], "end": "Point.prototype._projDbl._projDbl"},');

      return this.curve.point(nx, ny, nz);
            SRTlib.send('], "end": "Point.prototype._projDbl._projDbl"},');

    };
    Point.prototype.dbl = function dbl() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.dbl.dbl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "Point.prototype.dbl.dbl"},');

        return this;
      }
      if (this.curve.extended) return this._extDbl(); else {
                SRTlib.send('], "end": "emptyKey86"},');

        return this._extDbl();
      }
            SRTlib.send('], "end": "Point.prototype.dbl.dbl"},');

    };
    Point.prototype._extAdd = function _extAdd(p) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype._extAdd._extAdd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
            SRTlib.send('], "end": "Point.prototype._extAdd._extAdd"},');

      return this.curve.point(nx, ny, nz, nt);
            SRTlib.send('], "end": "Point.prototype._extAdd._extAdd"},');

    };
    Point.prototype._projAdd = function _projAdd(p) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype._projAdd._projAdd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f).redMul(g);
      }
            SRTlib.send('], "end": "Point.prototype._projAdd._projAdd"},');

      return this.curve.point(nx, ny, nz);
            SRTlib.send('], "end": "Point.prototype._projAdd._projAdd"},');

    };
    Point.prototype.add = function add(p) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.add.add", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "Point.prototype.add.add"},');

        return p;
      }
      if (p.isInfinity()) {
                SRTlib.send('], "end": "Point.prototype.add.add"},');

        return this;
      }
      if (this.curve.extended) return this._extAdd(p); else {
                SRTlib.send('], "end": "emptyKey86"},');

        return this._extAdd(p);
      }
            SRTlib.send('], "end": "Point.prototype.add.add"},');

    };
    Point.prototype.mul = function mul(k) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.mul.mul", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k); else {
                SRTlib.send('], "end": "emptyKey86"},');

        return this.curve._fixedNafMul(this, k);
      }
            SRTlib.send('], "end": "Point.prototype.mul.mul"},');

    };
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.mulAdd.mulAdd", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.mulAdd.mulAdd"},');

      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
            SRTlib.send('], "end": "Point.prototype.mulAdd.mulAdd"},');

    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.jmulAdd.jmulAdd", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.jmulAdd.jmulAdd"},');

      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
            SRTlib.send('], "end": "Point.prototype.jmulAdd.jmulAdd"},');

    };
    Point.prototype.normalize = function normalize() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.normalize.normalize", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.zOne) {
                SRTlib.send('], "end": "Point.prototype.normalize.normalize"},');

        return this;
      }
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t) this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
            SRTlib.send('], "end": "Point.prototype.normalize.normalize"},');

      return this;
            SRTlib.send('], "end": "Point.prototype.normalize.normalize"},');

    };
    Point.prototype.neg = function neg() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.neg.neg", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.neg.neg"},');

      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
            SRTlib.send('], "end": "Point.prototype.neg.neg"},');

    };
    Point.prototype.getX = function getX() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.getX.getX", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.normalize();
            SRTlib.send('], "end": "Point.prototype.getX.getX"},');

      return this.x.fromRed();
            SRTlib.send('], "end": "Point.prototype.getX.getX"},');

    };
    Point.prototype.getY = function getY() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.getY.getY", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.normalize();
            SRTlib.send('], "end": "Point.prototype.getY.getY"},');

      return this.y.fromRed();
            SRTlib.send('], "end": "Point.prototype.getY.getY"},');

    };
    Point.prototype.eq = function eq(other) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.eq.eq", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.eq.eq"},');

      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
            SRTlib.send('], "end": "Point.prototype.eq.eq"},');

    };
    Point.prototype.eqXToP = function eqXToP(x) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.eqXToP.eqXToP", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0) {
                SRTlib.send('], "end": "Point.prototype.eqXToP.eqXToP"},');

        return true;
      }
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) {
                    SRTlib.send('], "end": "Point.prototype.eqXToP.eqXToP"},');

          return false;
        }
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) {
                    SRTlib.send('], "end": "Point.prototype.eqXToP.eqXToP"},');

          return true;
        }
      }
            SRTlib.send('], "end": "Point.prototype.eqXToP.eqXToP"},');

    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
        SRTlib.send('], "end": "emptyKey86"},');

  }, {
    "../utils": 92,
    "./base": 79,
    "bn.js": 21,
    "inherits": 133
  }],
  81: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey87", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var curve = exports;
    curve.base = require('./base');
    curve.short = require('./short');
    curve.mont = require('./mont');
    curve.edwards = require('./edwards');
        SRTlib.send('], "end": "emptyKey87"},');

  }, {
    "./base": 79,
    "./edwards": 80,
    "./mont": 82,
    "./short": 83
  }],
  82: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey88", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');
    var utils = require('../utils');
    function MontCurve(conf) {
            SRTlib.send(`{ "anonymous": false, "function": "MontCurve", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Base.call(this, 'mont', conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
            SRTlib.send('], "end": "MontCurve"},');

    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate(point) {
            SRTlib.send(`{ "anonymous": true, "function": "MontCurve.prototype.validate.validate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
            SRTlib.send('], "end": "MontCurve.prototype.validate.validate"},');

      return y.redSqr().cmp(rhs) === 0;
            SRTlib.send('], "end": "MontCurve.prototype.validate.validate"},');

    };
    function Point(curve, x, z) {
            SRTlib.send(`{ "anonymous": false, "function": "Point", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      }
            SRTlib.send('], "end": "Point"},');

    }
    inherits(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "MontCurve.prototype.decodePoint.decodePoint", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "MontCurve.prototype.decodePoint.decodePoint"},');

      return this.point(utils.toArray(bytes, enc), 1);
            SRTlib.send('], "end": "MontCurve.prototype.decodePoint.decodePoint"},');

    };
    MontCurve.prototype.point = function point(x, z) {
            SRTlib.send(`{ "anonymous": true, "function": "MontCurve.prototype.point.point", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "MontCurve.prototype.point.point"},');

      return new Point(this, x, z);
            SRTlib.send('], "end": "MontCurve.prototype.point.point"},');

    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            SRTlib.send(`{ "anonymous": true, "function": "MontCurve.prototype.pointFromJSON.pointFromJSON", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "MontCurve.prototype.pointFromJSON.pointFromJSON"},');

      return Point.fromJSON(this, obj);
            SRTlib.send('], "end": "MontCurve.prototype.pointFromJSON.pointFromJSON"},');

    };
    Point.prototype.precompute = function precompute() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.precompute.precompute", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.precompute.precompute"},');

    };
    Point.prototype._encode = function _encode() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype._encode._encode", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype._encode._encode"},');

      return this.getX().toArray('be', this.curve.p.byteLength());
            SRTlib.send('], "end": "Point.prototype._encode._encode"},');

    };
    Point.fromJSON = function fromJSON(curve, obj) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.fromJSON.fromJSON2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "Point.fromJSON.fromJSON2"},');

      return new Point(curve, obj[0], obj[1] || curve.one);
            SRTlib.send('], "end": "Point.fromJSON.fromJSON2"},');

    };
    Point.prototype.inspect = function inspect() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.inspect.inspect2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "Point.prototype.inspect.inspect2"},');

        return '<EC Point Infinity>';
      }
            SRTlib.send('], "end": "Point.prototype.inspect.inspect2"},');

      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
            SRTlib.send('], "end": "Point.prototype.inspect.inspect2"},');

    };
    Point.prototype.isInfinity = function isInfinity() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.isInfinity.isInfinity2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.isInfinity.isInfinity2"},');

      return this.z.cmpn(0) === 0;
            SRTlib.send('], "end": "Point.prototype.isInfinity.isInfinity2"},');

    };
    Point.prototype.dbl = function dbl() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.dbl.dbl2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
            SRTlib.send('], "end": "Point.prototype.dbl.dbl2"},');

      return this.curve.point(nx, nz);
            SRTlib.send('], "end": "Point.prototype.dbl.dbl2"},');

    };
    Point.prototype.add = function add() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.add.add2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.add.add2"},');

      throw new Error('Not supported on Montgomery curve');
            SRTlib.send('], "end": "Point.prototype.add.add2"},');

    };
    Point.prototype.diffAdd = function diffAdd(p, diff) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.diffAdd.diffAdd", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
            SRTlib.send('], "end": "Point.prototype.diffAdd.diffAdd"},');

      return this.curve.point(nx, nz);
            SRTlib.send('], "end": "Point.prototype.diffAdd.diffAdd"},');

    };
    Point.prototype.mul = function mul(k) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.mul.mul2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
            SRTlib.send('], "end": "Point.prototype.mul.mul2"},');

      return b;
            SRTlib.send('], "end": "Point.prototype.mul.mul2"},');

    };
    Point.prototype.mulAdd = function mulAdd() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.mulAdd.mulAdd2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.mulAdd.mulAdd2"},');

      throw new Error('Not supported on Montgomery curve');
            SRTlib.send('], "end": "Point.prototype.mulAdd.mulAdd2"},');

    };
    Point.prototype.jumlAdd = function jumlAdd() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.jumlAdd.jumlAdd", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.jumlAdd.jumlAdd"},');

      throw new Error('Not supported on Montgomery curve');
            SRTlib.send('], "end": "Point.prototype.jumlAdd.jumlAdd"},');

    };
    Point.prototype.eq = function eq(other) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.eq.eq2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.eq.eq2"},');

      return this.getX().cmp(other.getX()) === 0;
            SRTlib.send('], "end": "Point.prototype.eq.eq2"},');

    };
    Point.prototype.normalize = function normalize() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.normalize.normalize2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
            SRTlib.send('], "end": "Point.prototype.normalize.normalize2"},');

      return this;
            SRTlib.send('], "end": "Point.prototype.normalize.normalize2"},');

    };
    Point.prototype.getX = function getX() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.getX.getX2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.normalize();
            SRTlib.send('], "end": "Point.prototype.getX.getX2"},');

      return this.x.fromRed();
            SRTlib.send('], "end": "Point.prototype.getX.getX2"},');

    };
        SRTlib.send('], "end": "emptyKey88"},');

  }, {
    "../utils": 92,
    "./base": 79,
    "bn.js": 21,
    "inherits": 133
  }],
  83: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey89", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');
    var assert = utils.assert;
    function ShortCurve(conf) {
            SRTlib.send(`{ "anonymous": false, "function": "ShortCurve", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Base.call(this, 'short', conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
            SRTlib.send('], "end": "ShortCurve"},');

    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype._getEndomorphism._getEndomorphism", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) {
                SRTlib.send('], "end": "ShortCurve.prototype._getEndomorphism._getEndomorphism"},');

        return;
      }
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function (vec) {
                    SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype._getEndomorphism._getEndomorphism.basis.conf.basis.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ShortCurve.prototype._getEndomorphism._getEndomorphism.basis.conf.basis.map"},');

          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
                    SRTlib.send('], "end": "ShortCurve.prototype._getEndomorphism._getEndomorphism.basis.conf.basis.map"},');

        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
            SRTlib.send('], "end": "ShortCurve.prototype._getEndomorphism._getEndomorphism"},');

      return {
        beta: beta,
        lambda: lambda,
        basis: basis
      };
            SRTlib.send('], "end": "ShortCurve.prototype._getEndomorphism._getEndomorphism"},');

    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype._getEndoRoots._getEndoRoots", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
            SRTlib.send('], "end": "ShortCurve.prototype._getEndoRoots._getEndoRoots"},');

      return [l1, l2];
            SRTlib.send('], "end": "ShortCurve.prototype._getEndoRoots._getEndoRoots"},');

    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype._getEndoBasis._getEndoBasis", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
            SRTlib.send('], "end": "ShortCurve.prototype._getEndoBasis._getEndoBasis"},');

      return [{
        a: a1,
        b: b1
      }, {
        a: a2,
        b: b2
      }];
            SRTlib.send('], "end": "ShortCurve.prototype._getEndoBasis._getEndoBasis"},');

    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype._endoSplit._endoSplit", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
            SRTlib.send('], "end": "ShortCurve.prototype._endoSplit._endoSplit"},');

      return {
        k1: k1,
        k2: k2
      };
            SRTlib.send('], "end": "ShortCurve.prototype._endoSplit._endoSplit"},');

    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype.pointFromX.pointFromX", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      x = new BN(x, 16);
      if (!x.red) x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) {
                SRTlib.send('], "end": "ShortCurve.prototype.pointFromX.pointFromX"},');

        throw new Error('invalid point');
      }
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
            SRTlib.send('], "end": "ShortCurve.prototype.pointFromX.pointFromX"},');

      return this.point(x, y);
            SRTlib.send('], "end": "ShortCurve.prototype.pointFromX.pointFromX"},');

    };
    ShortCurve.prototype.validate = function validate(point) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype.validate.validate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (point.inf) {
                SRTlib.send('], "end": "ShortCurve.prototype.validate.validate"},');

        return true;
      }
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
            SRTlib.send('], "end": "ShortCurve.prototype.validate.validate"},');

      return y.redSqr().redISub(rhs).cmpn(0) === 0;
            SRTlib.send('], "end": "ShortCurve.prototype.validate.validate"},');

    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype._endoWnafMulAdd._endoWnafMulAdd", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
            SRTlib.send('], "end": "ShortCurve.prototype._endoWnafMulAdd._endoWnafMulAdd"},');

      return res;
            SRTlib.send('], "end": "ShortCurve.prototype._endoWnafMulAdd._endoWnafMulAdd"},');

    };
    function Point(curve, x, y, isRed) {
            SRTlib.send(`{ "anonymous": false, "function": "Point", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      Base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
            SRTlib.send('], "end": "Point"},');

    }
    inherits(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x, y, isRed) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype.point.point", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "ShortCurve.prototype.point.point"},');

      return new Point(this, x, y, isRed);
            SRTlib.send('], "end": "ShortCurve.prototype.point.point"},');

    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype.pointFromJSON.pointFromJSON", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "ShortCurve.prototype.pointFromJSON.pointFromJSON"},');

      return Point.fromJSON(this, obj, red);
            SRTlib.send('], "end": "ShortCurve.prototype.pointFromJSON.pointFromJSON"},');

    };
    Point.prototype._getBeta = function _getBeta() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype._getBeta._getBeta", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!this.curve.endo) {
                SRTlib.send('], "end": "Point.prototype._getBeta._getBeta"},');

        return;
      }
      var pre = this.precomputed;
      if (pre && pre.beta) {
                SRTlib.send('], "end": "Point.prototype._getBeta._getBeta"},');

        return pre.beta;
      }
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function (p) {
                    SRTlib.send(`{ "anonymous": false, "function": "endoMul", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "endoMul"},');

          return curve.point(p.x.redMul(curve.endo.beta), p.y);
                    SRTlib.send('], "end": "endoMul"},');

        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && ({
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          }),
          doubles: pre.doubles && ({
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          })
        };
      }
            SRTlib.send('], "end": "Point.prototype._getBeta._getBeta"},');

      return beta;
            SRTlib.send('], "end": "Point.prototype._getBeta._getBeta"},');

    };
    Point.prototype.toJSON = function toJSON() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.toJSON.toJSON", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!this.precomputed) {
                SRTlib.send('], "end": "Point.prototype.toJSON.toJSON"},');

        return [this.x, this.y];
      }
            SRTlib.send('], "end": "Point.prototype.toJSON.toJSON"},');

      return [this.x, this.y, this.precomputed && ({
        doubles: this.precomputed.doubles && ({
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        }),
        naf: this.precomputed.naf && ({
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        })
      })];
            SRTlib.send('], "end": "Point.prototype.toJSON.toJSON"},');

    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.fromJSON.fromJSON3", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof obj === 'string') obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2]) {
                SRTlib.send('], "end": "Point.fromJSON.fromJSON3"},');

        return res;
      }
      function obj2point(obj) {
                SRTlib.send(`{ "anonymous": false, "function": "obj2point", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "obj2point"},');

        return curve.point(obj[0], obj[1], red);
                SRTlib.send('], "end": "obj2point"},');

      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && ({
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        }),
        naf: pre.naf && ({
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        })
      };
            SRTlib.send('], "end": "Point.fromJSON.fromJSON3"},');

      return res;
            SRTlib.send('], "end": "Point.fromJSON.fromJSON3"},');

    };
    Point.prototype.inspect = function inspect() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.inspect.inspect3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "Point.prototype.inspect.inspect3"},');

        return '<EC Point Infinity>';
      }
            SRTlib.send('], "end": "Point.prototype.inspect.inspect3"},');

      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
            SRTlib.send('], "end": "Point.prototype.inspect.inspect3"},');

    };
    Point.prototype.isInfinity = function isInfinity() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.isInfinity.isInfinity3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.isInfinity.isInfinity3"},');

      return this.inf;
            SRTlib.send('], "end": "Point.prototype.isInfinity.isInfinity3"},');

    };
    Point.prototype.add = function add(p) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.add.add3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.inf) {
                SRTlib.send('], "end": "Point.prototype.add.add3"},');

        return p;
      }
      if (p.inf) {
                SRTlib.send('], "end": "Point.prototype.add.add3"},');

        return this;
      }
      if (this.eq(p)) {
                SRTlib.send('], "end": "Point.prototype.add.add3"},');

        return this.dbl();
      }
      if (this.neg().eq(p)) {
                SRTlib.send('], "end": "Point.prototype.add.add3"},');

        return this.curve.point(null, null);
      }
      if (this.x.cmp(p.x) === 0) {
                SRTlib.send('], "end": "Point.prototype.add.add3"},');

        return this.curve.point(null, null);
      }
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            SRTlib.send('], "end": "Point.prototype.add.add3"},');

      return this.curve.point(nx, ny);
            SRTlib.send('], "end": "Point.prototype.add.add3"},');

    };
    Point.prototype.dbl = function dbl() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.dbl.dbl3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.inf) {
                SRTlib.send('], "end": "Point.prototype.dbl.dbl3"},');

        return this;
      }
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0) {
                SRTlib.send('], "end": "Point.prototype.dbl.dbl3"},');

        return this.curve.point(null, null);
      }
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            SRTlib.send('], "end": "Point.prototype.dbl.dbl3"},');

      return this.curve.point(nx, ny);
            SRTlib.send('], "end": "Point.prototype.dbl.dbl3"},');

    };
    Point.prototype.getX = function getX() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.getX.getX3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.getX.getX3"},');

      return this.x.fromRed();
            SRTlib.send('], "end": "Point.prototype.getX.getX3"},');

    };
    Point.prototype.getY = function getY() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.getY.getY2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.getY.getY2"},');

      return this.y.fromRed();
            SRTlib.send('], "end": "Point.prototype.getY.getY2"},');

    };
    Point.prototype.mul = function mul(k) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.mul.mul3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      k = new BN(k, 16);
      if (this.isInfinity()) return this; else {
                SRTlib.send('], "end": "emptyKey89"},');

        return this;
      }
            SRTlib.send('], "end": "Point.prototype.mul.mul3"},');

    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.mulAdd.mulAdd3", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs); else {
                SRTlib.send('], "end": "emptyKey89"},');

        return this.curve._endoWnafMulAdd(points, coeffs);
      }
            SRTlib.send('], "end": "Point.prototype.mulAdd.mulAdd3"},');

    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.jmulAdd.jmulAdd2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true); else {
                SRTlib.send('], "end": "emptyKey89"},');

        return this.curve._endoWnafMulAdd(points, coeffs, true);
      }
            SRTlib.send('], "end": "Point.prototype.jmulAdd.jmulAdd2"},');

    };
    Point.prototype.eq = function eq(p) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.eq.eq3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Point.prototype.eq.eq3"},');

      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
            SRTlib.send('], "end": "Point.prototype.eq.eq3"},');

    };
    Point.prototype.neg = function neg(_precompute) {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.neg.neg2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.inf) {
                SRTlib.send('], "end": "Point.prototype.neg.neg2"},');

        return this;
      }
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function (p) {
                    SRTlib.send(`{ "anonymous": false, "function": "negate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "negate"},');

          return p.neg();
                    SRTlib.send('], "end": "negate"},');

        };
        res.precomputed = {
          naf: pre.naf && ({
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          }),
          doubles: pre.doubles && ({
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          })
        };
      }
            SRTlib.send('], "end": "Point.prototype.neg.neg2"},');

      return res;
            SRTlib.send('], "end": "Point.prototype.neg.neg2"},');

    };
    Point.prototype.toJ = function toJ() {
            SRTlib.send(`{ "anonymous": true, "function": "Point.prototype.toJ.toJ", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.inf) {
                SRTlib.send('], "end": "Point.prototype.toJ.toJ"},');

        return this.curve.jpoint(null, null, null);
      }
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
            SRTlib.send('], "end": "Point.prototype.toJ.toJ"},');

      return res;
            SRTlib.send('], "end": "Point.prototype.toJ.toJ"},');

    };
    function JPoint(curve, x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "JPoint", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      Base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
            SRTlib.send('], "end": "JPoint"},');

    }
    inherits(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
            SRTlib.send(`{ "anonymous": true, "function": "ShortCurve.prototype.jpoint.jpoint", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "ShortCurve.prototype.jpoint.jpoint"},');

      return new JPoint(this, x, y, z);
            SRTlib.send('], "end": "ShortCurve.prototype.jpoint.jpoint"},');

    };
    JPoint.prototype.toP = function toP() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.toP.toP", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "JPoint.prototype.toP.toP"},');

        return this.curve.point(null, null);
      }
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
            SRTlib.send('], "end": "JPoint.prototype.toP.toP"},');

      return this.curve.point(ax, ay);
            SRTlib.send('], "end": "JPoint.prototype.toP.toP"},');

    };
    JPoint.prototype.neg = function neg() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.neg.neg", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "JPoint.prototype.neg.neg"},');

      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
            SRTlib.send('], "end": "JPoint.prototype.neg.neg"},');

    };
    JPoint.prototype.add = function add(p) {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.add.add", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "JPoint.prototype.add.add"},');

        return p;
      }
      if (p.isInfinity()) {
                SRTlib.send('], "end": "JPoint.prototype.add.add"},');

        return this;
      }
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null); else {
                    SRTlib.send('], "end": "emptyKey89"},');

          return this.curve.jpoint(null, null, null);
        }
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
            SRTlib.send('], "end": "JPoint.prototype.add.add"},');

      return this.curve.jpoint(nx, ny, nz);
            SRTlib.send('], "end": "JPoint.prototype.add.add"},');

    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.mixedAdd.mixedAdd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "JPoint.prototype.mixedAdd.mixedAdd"},');

        return p.toJ();
      }
      if (p.isInfinity()) {
                SRTlib.send('], "end": "JPoint.prototype.mixedAdd.mixedAdd"},');

        return this;
      }
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null); else {
                    SRTlib.send('], "end": "emptyKey89"},');

          return this.curve.jpoint(null, null, null);
        }
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
            SRTlib.send('], "end": "JPoint.prototype.mixedAdd.mixedAdd"},');

      return this.curve.jpoint(nx, ny, nz);
            SRTlib.send('], "end": "JPoint.prototype.mixedAdd.mixedAdd"},');

    };
    JPoint.prototype.dblp = function dblp(pow) {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.dblp.dblp", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (pow === 0) {
                SRTlib.send('], "end": "JPoint.prototype.dblp.dblp"},');

        return this;
      }
      if (this.isInfinity()) {
                SRTlib.send('], "end": "JPoint.prototype.dblp.dblp"},');

        return this;
      }
      if (!pow) {
                SRTlib.send('], "end": "JPoint.prototype.dblp.dblp"},');

        return this.dbl();
      }
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (var i = 0; i < pow; i++) r = r.dbl();
                SRTlib.send('], "end": "JPoint.prototype.dblp.dblp"},');

        return r;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (var i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
            SRTlib.send('], "end": "JPoint.prototype.dblp.dblp"},');

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
            SRTlib.send('], "end": "JPoint.prototype.dblp.dblp"},');

    };
    JPoint.prototype.dbl = function dbl() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.dbl.dbl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "JPoint.prototype.dbl.dbl"},');

        return this;
      }
      if (this.curve.zeroA) return this._zeroDbl(); else {
                SRTlib.send('], "end": "emptyKey89"},');

        return this._zeroDbl();
      }
            SRTlib.send('], "end": "JPoint.prototype.dbl.dbl"},');

    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype._zeroDbl._zeroDbl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
            SRTlib.send('], "end": "JPoint.prototype._zeroDbl._zeroDbl"},');

      return this.curve.jpoint(nx, ny, nz);
            SRTlib.send('], "end": "JPoint.prototype._zeroDbl._zeroDbl"},');

    };
    JPoint.prototype._threeDbl = function _threeDbl() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype._threeDbl._threeDbl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
            SRTlib.send('], "end": "JPoint.prototype._threeDbl._threeDbl"},');

      return this.curve.jpoint(nx, ny, nz);
            SRTlib.send('], "end": "JPoint.prototype._threeDbl._threeDbl"},');

    };
    JPoint.prototype._dbl = function _dbl() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype._dbl._dbl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
            SRTlib.send('], "end": "JPoint.prototype._dbl._dbl"},');

      return this.curve.jpoint(nx, ny, nz);
            SRTlib.send('], "end": "JPoint.prototype._dbl._dbl"},');

    };
    JPoint.prototype.trpl = function trpl() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.trpl.trpl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!this.curve.zeroA) {
                SRTlib.send('], "end": "JPoint.prototype.trpl.trpl"},');

        return this.dbl().add(this);
      }
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
            SRTlib.send('], "end": "JPoint.prototype.trpl.trpl"},');

      return this.curve.jpoint(nx, ny, nz);
            SRTlib.send('], "end": "JPoint.prototype.trpl.trpl"},');

    };
    JPoint.prototype.mul = function mul(k, kbase) {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.mul.mul", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      k = new BN(k, kbase);
            SRTlib.send('], "end": "JPoint.prototype.mul.mul"},');

      return this.curve._wnafMul(this, k);
            SRTlib.send('], "end": "JPoint.prototype.mul.mul"},');

    };
    JPoint.prototype.eq = function eq(p) {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.eq.eq", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (p.type === 'affine') {
                SRTlib.send('], "end": "JPoint.prototype.eq.eq"},');

        return this.eq(p.toJ());
      }
      if (this === p) {
                SRTlib.send('], "end": "JPoint.prototype.eq.eq"},');

        return true;
      }
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) {
                SRTlib.send('], "end": "JPoint.prototype.eq.eq"},');

        return false;
      }
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
            SRTlib.send('], "end": "JPoint.prototype.eq.eq"},');

      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
            SRTlib.send('], "end": "JPoint.prototype.eq.eq"},');

    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.eqXToP.eqXToP", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0) {
                SRTlib.send('], "end": "JPoint.prototype.eqXToP.eqXToP"},');

        return true;
      }
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) {
                    SRTlib.send('], "end": "JPoint.prototype.eqXToP.eqXToP"},');

          return false;
        }
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) {
                    SRTlib.send('], "end": "JPoint.prototype.eqXToP.eqXToP"},');

          return true;
        }
      }
            SRTlib.send('], "end": "JPoint.prototype.eqXToP.eqXToP"},');

    };
    JPoint.prototype.inspect = function inspect() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.inspect.inspect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.isInfinity()) {
                SRTlib.send('], "end": "JPoint.prototype.inspect.inspect"},');

        return '<EC JPoint Infinity>';
      }
            SRTlib.send('], "end": "JPoint.prototype.inspect.inspect"},');

      return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
            SRTlib.send('], "end": "JPoint.prototype.inspect.inspect"},');

    };
    JPoint.prototype.isInfinity = function isInfinity() {
            SRTlib.send(`{ "anonymous": true, "function": "JPoint.prototype.isInfinity.isInfinity", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "JPoint.prototype.isInfinity.isInfinity"},');

      return this.z.cmpn(0) === 0;
            SRTlib.send('], "end": "JPoint.prototype.isInfinity.isInfinity"},');

    };
        SRTlib.send('], "end": "emptyKey89"},');

  }, {
    "../utils": 92,
    "./base": 79,
    "bn.js": 21,
    "inherits": 133
  }],
  84: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey90", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var curves = exports;
    var hash = require('hash.js');
    var curve = require('./curve');
    var utils = require('./utils');
    var assert = utils.assert;
    function PresetCurve(options) {
            SRTlib.send(`{ "anonymous": false, "function": "PresetCurve", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (options.type === 'short') this.curve = new curve.short(options); else if (options.type === 'edwards') this.curve = new curve.edwards(options); else this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
            SRTlib.send('], "end": "PresetCurve"},');

    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
            SRTlib.send(`{ "anonymous": false, "function": "defineCurve", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve
          });
                    SRTlib.send('], "end": "get"},');

          return curve;
                    SRTlib.send('], "end": "get"},');

        }
      });
            SRTlib.send('], "end": "defineCurve"},');

    }
    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash.sha256,
      gRed: false,
      g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
    });
    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash.sha256,
      gRed: false,
      g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
    });
    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash.sha256,
      gRed: false,
      g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
    });
    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash.sha384,
      gRed: false,
      g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
    });
    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash.sha512,
      gRed: false,
      g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
    });
    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: ['9']
    });
    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', '6666666666666666666666666666666666666666666666666666666666666658']
    });
    var pre;
    try {
      pre = require('./precomputed/secp256k1');
    } catch (e) {
      pre = undefined;
    }
    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash.sha256,
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [{
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3'
      }, {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15'
      }],
      gRed: false,
      g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
    });
        SRTlib.send('], "end": "emptyKey90"},');

  }, {
    "./curve": 81,
    "./precomputed/secp256k1": 91,
    "./utils": 92,
    "hash.js": 118
  }],
  85: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey91", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var BN = require('bn.js');
    var HmacDRBG = require('hmac-drbg');
    var utils = require('../utils');
    var curves = require('../curves');
    var rand = require('brorand');
    var assert = utils.assert;
    var KeyPair = require('./key');
    var Signature = require('./signature');
    function EC(options) {
            SRTlib.send(`{ "anonymous": false, "function": "EC", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!(this instanceof EC)) {
                SRTlib.send('], "end": "EC"},');

        return new EC(options);
      }
      if (typeof options === 'string') {
        assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve) options = {
        curve: options
      };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
            SRTlib.send('], "end": "EC"},');

    }
    module.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype.keyPair.keyPair", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EC.prototype.keyPair.keyPair"},');

      return new KeyPair(this, options);
            SRTlib.send('], "end": "EC.prototype.keyPair.keyPair"},');

    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype.keyFromPrivate.keyFromPrivate", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "EC.prototype.keyFromPrivate.keyFromPrivate"},');

      return KeyPair.fromPrivate(this, priv, enc);
            SRTlib.send('], "end": "EC.prototype.keyFromPrivate.keyFromPrivate"},');

    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype.keyFromPublic.keyFromPublic", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "EC.prototype.keyFromPublic.keyFromPublic"},');

      return KeyPair.fromPublic(this, pub, enc);
            SRTlib.send('], "end": "EC.prototype.keyFromPublic.keyFromPublic"},');

    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype.genKeyPair.genKeyPair", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!options) options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      do {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
                SRTlib.send('], "end": "EC.prototype.genKeyPair.genKeyPair"},');

        return this.keyFromPrivate(priv);
      } while (true);
            SRTlib.send('], "end": "EC.prototype.genKeyPair.genKeyPair"},');

    };
    EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype._truncateToN.truncateToN", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0) msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n); else {
                SRTlib.send('], "end": "emptyKey91"},');

        return msg.sub(this.n);
      }
            SRTlib.send('], "end": "EC.prototype._truncateToN.truncateToN"},');

    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype.sign.sign", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options) options = {};
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);
      var nonce = msg.toArray('be', bytes);
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; true; iter++) {
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
                SRTlib.send('], "end": "EC.prototype.sign.sign"},');

        return new Signature({
          r: r,
          s: s,
          recoveryParam: recoveryParam
        });
      }
            SRTlib.send('], "end": "EC.prototype.sign.sign"},');

    };
    EC.prototype.verify = function verify(msg, signature, key, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype.verify.verify", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, 'hex');
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) {
                SRTlib.send('], "end": "EC.prototype.verify.verify"},');

        return false;
      }
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) {
                SRTlib.send('], "end": "EC.prototype.verify.verify"},');

        return false;
      }
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      if (!this.curve._maxwellTrick) {
        var p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) {
                    SRTlib.send('], "end": "EC.prototype.verify.verify"},');

          return false;
        }
                SRTlib.send('], "end": "EC.prototype.verify.verify"},');

        return p.getX().umod(this.n).cmp(r) === 0;
      }
      var p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity()) {
                SRTlib.send('], "end": "EC.prototype.verify.verify"},');

        return false;
      }
            SRTlib.send('], "end": "EC.prototype.verify.verify"},');

      return p.eqXToP(r);
            SRTlib.send('], "end": "EC.prototype.verify.verify"},');

    };
    EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype.recoverPubKey", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      assert((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature(signature, enc);
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) {
                SRTlib.send('], "end": "EC.prototype.recoverPubKey"},');

        throw new Error('Unable to find sencond key candinate');
      }
      if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd); else r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
            SRTlib.send('], "end": "EC.prototype.recoverPubKey"},');

      return this.g.mulAdd(s1, r, s2);
            SRTlib.send('], "end": "EC.prototype.recoverPubKey"},');

    };
    EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "EC.prototype.getKeyRecoveryParam", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null) {
                SRTlib.send('], "end": "EC.prototype.getKeyRecoveryParam"},');

        return signature.recoveryParam;
      }
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }
        if (Qprime.eq(Q)) {
                    SRTlib.send('], "end": "EC.prototype.getKeyRecoveryParam"},');

          return i;
        }
      }
            SRTlib.send('], "end": "EC.prototype.getKeyRecoveryParam"},');

      throw new Error('Unable to find valid recovery factor');
            SRTlib.send('], "end": "EC.prototype.getKeyRecoveryParam"},');

    };
        SRTlib.send('], "end": "emptyKey91"},');

  }, {
    "../curves": 84,
    "../utils": 92,
    "./key": 86,
    "./signature": 87,
    "bn.js": 21,
    "brorand": 22,
    "hmac-drbg": 130
  }],
  86: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey92", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var BN = require('bn.js');
    var utils = require('../utils');
    var assert = utils.assert;
    function KeyPair(ec, options) {
            SRTlib.send(`{ "anonymous": false, "function": "KeyPair", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.ec = ec;
      this.priv = null;
      this.pub = null;
      if (options.priv) this._importPrivate(options.priv, options.privEnc);
      if (options.pub) this._importPublic(options.pub, options.pubEnc);
            SRTlib.send('], "end": "KeyPair"},');

    }
    module.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.fromPublic.fromPublic", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (pub instanceof KeyPair) {
                SRTlib.send('], "end": "KeyPair.fromPublic.fromPublic"},');

        return pub;
      }
            SRTlib.send('], "end": "KeyPair.fromPublic.fromPublic"},');

      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
      });
            SRTlib.send('], "end": "KeyPair.fromPublic.fromPublic"},');

    };
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.fromPrivate.fromPrivate", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (priv instanceof KeyPair) {
                SRTlib.send('], "end": "KeyPair.fromPrivate.fromPrivate"},');

        return priv;
      }
            SRTlib.send('], "end": "KeyPair.fromPrivate.fromPrivate"},');

      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
      });
            SRTlib.send('], "end": "KeyPair.fromPrivate.fromPrivate"},');

    };
    KeyPair.prototype.validate = function validate() {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.validate.validate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var pub = this.getPublic();
      if (pub.isInfinity()) {
                SRTlib.send('], "end": "KeyPair.prototype.validate.validate"},');

        return {
          result: false,
          reason: 'Invalid public key'
        };
      }
      if (!pub.validate()) {
                SRTlib.send('], "end": "KeyPair.prototype.validate.validate"},');

        return {
          result: false,
          reason: 'Public key is not a point'
        };
      }
      if (!pub.mul(this.ec.curve.n).isInfinity()) {
                SRTlib.send('], "end": "KeyPair.prototype.validate.validate"},');

        return {
          result: false,
          reason: 'Public key * N != O'
        };
      }
            SRTlib.send('], "end": "KeyPair.prototype.validate.validate"},');

      return {
        result: true,
        reason: null
      };
            SRTlib.send('], "end": "KeyPair.prototype.validate.validate"},');

    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.getPublic.getPublic", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }
      if (!this.pub) this.pub = this.ec.g.mul(this.priv);
      if (!enc) {
                SRTlib.send('], "end": "KeyPair.prototype.getPublic.getPublic"},');

        return this.pub;
      }
            SRTlib.send('], "end": "KeyPair.prototype.getPublic.getPublic"},');

      return this.pub.encode(enc, compact);
            SRTlib.send('], "end": "KeyPair.prototype.getPublic.getPublic"},');

    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.getPrivate.getPrivate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (enc === 'hex') return this.priv.toString(16, 2); else {
                SRTlib.send('], "end": "emptyKey92"},');

        return this.priv.toString(16, 2);
      }
            SRTlib.send('], "end": "KeyPair.prototype.getPrivate.getPrivate"},');

    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype._importPrivate._importPrivate", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.priv = new BN(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
            SRTlib.send('], "end": "KeyPair.prototype._importPrivate._importPrivate"},');

    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype._importPublic._importPublic", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (key.x || key.y) {
        if (this.ec.curve.type === 'mont') {
          assert(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
          assert(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
                SRTlib.send('], "end": "KeyPair.prototype._importPublic._importPublic"},');

        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
            SRTlib.send('], "end": "KeyPair.prototype._importPublic._importPublic"},');

    };
    KeyPair.prototype.derive = function derive(pub) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.derive.derive", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "KeyPair.prototype.derive.derive"},');

      return pub.mul(this.priv).getX();
            SRTlib.send('], "end": "KeyPair.prototype.derive.derive"},');

    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.sign.sign", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "KeyPair.prototype.sign.sign"},');

      return this.ec.sign(msg, this, enc, options);
            SRTlib.send('], "end": "KeyPair.prototype.sign.sign"},');

    };
    KeyPair.prototype.verify = function verify(msg, signature) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.verify.verify", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "KeyPair.prototype.verify.verify"},');

      return this.ec.verify(msg, signature, this);
            SRTlib.send('], "end": "KeyPair.prototype.verify.verify"},');

    };
    KeyPair.prototype.inspect = function inspect() {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.inspect.inspect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "KeyPair.prototype.inspect.inspect"},');

      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
            SRTlib.send('], "end": "KeyPair.prototype.inspect.inspect"},');

    };
        SRTlib.send('], "end": "emptyKey92"},');

  }, {
    "../utils": 92,
    "bn.js": 21
  }],
  87: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey93", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var BN = require('bn.js');
    var utils = require('../utils');
    var assert = utils.assert;
    function Signature(options, enc) {
            SRTlib.send(`{ "anonymous": false, "function": "Signature", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (options instanceof Signature) {
                SRTlib.send('], "end": "Signature"},');

        return options;
      }
      if (this._importDER(options, enc)) {
                SRTlib.send('], "end": "Signature"},');

        return;
      }
      assert(options.r && options.s, 'Signature without r or s');
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === undefined) this.recoveryParam = null; else this.recoveryParam = options.recoveryParam;
            SRTlib.send('], "end": "Signature"},');

    }
    module.exports = Signature;
    function Position() {
            SRTlib.send(`{ "anonymous": false, "function": "Position", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.place = 0;
            SRTlib.send('], "end": "Position"},');

    }
    function getLength(buf, p) {
            SRTlib.send(`{ "anonymous": false, "function": "getLength", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
                SRTlib.send('], "end": "getLength"},');

        return initial;
      }
      var octetLen = initial & 0xf;
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; (i++, off++)) {
        val <<= 8;
        val |= buf[off];
      }
      p.place = off;
            SRTlib.send('], "end": "getLength"},');

      return val;
            SRTlib.send('], "end": "getLength"},');

    }
    function rmPadding(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "rmPadding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
                SRTlib.send('], "end": "rmPadding"},');

        return buf;
      }
            SRTlib.send('], "end": "rmPadding"},');

      return buf.slice(i);
            SRTlib.send('], "end": "rmPadding"},');

    }
    Signature.prototype._importDER = function _importDER(data, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "Signature.prototype._importDER._importDER", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
                SRTlib.send('], "end": "Signature.prototype._importDER._importDER"},');

        return false;
      }
      var len = getLength(data, p);
      if (len + p.place !== data.length) {
                SRTlib.send('], "end": "Signature.prototype._importDER._importDER"},');

        return false;
      }
      if (data[p.place++] !== 0x02) {
                SRTlib.send('], "end": "Signature.prototype._importDER._importDER"},');

        return false;
      }
      var rlen = getLength(data, p);
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
                SRTlib.send('], "end": "Signature.prototype._importDER._importDER"},');

        return false;
      }
      var slen = getLength(data, p);
      if (data.length !== slen + p.place) {
                SRTlib.send('], "end": "Signature.prototype._importDER._importDER"},');

        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0 && r[1] & 0x80) {
        r = r.slice(1);
      }
      if (s[0] === 0 && s[1] & 0x80) {
        s = s.slice(1);
      }
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
            SRTlib.send('], "end": "Signature.prototype._importDER._importDER"},');

      return true;
            SRTlib.send('], "end": "Signature.prototype._importDER._importDER"},');

    };
    function constructLength(arr, len) {
            SRTlib.send(`{ "anonymous": false, "function": "constructLength", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (len < 0x80) {
        arr.push(len);
                SRTlib.send('], "end": "constructLength"},');

        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 0xff);
      }
      arr.push(len);
            SRTlib.send('], "end": "constructLength"},');

    }
    Signature.prototype.toDER = function toDER(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "Signature.prototype.toDER.toDER", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var r = this.r.toArray();
      var s = this.s.toArray();
      if (r[0] & 0x80) r = [0].concat(r);
      if (s[0] & 0x80) s = [0].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [0x02];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [0x30];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
            SRTlib.send('], "end": "Signature.prototype.toDER.toDER"},');

      return utils.encode(res, enc);
            SRTlib.send('], "end": "Signature.prototype.toDER.toDER"},');

    };
        SRTlib.send('], "end": "emptyKey93"},');

  }, {
    "../utils": 92,
    "bn.js": 21
  }],
  88: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey94", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var hash = require('hash.js');
    var curves = require('../curves');
    var utils = require('../utils');
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require('./key');
    var Signature = require('./signature');
    function EDDSA(curve) {
            SRTlib.send(`{ "anonymous": false, "function": "EDDSA", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      assert(curve === 'ed25519', 'only tested with ed25519 so far');
      if (!(this instanceof EDDSA)) {
                SRTlib.send('], "end": "EDDSA"},');

        return new EDDSA(curve);
      }
      var curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
            SRTlib.send('], "end": "EDDSA"},');

    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.sign.sign", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
            SRTlib.send('], "end": "EDDSA.prototype.sign.sign"},');

      return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
      });
            SRTlib.send('], "end": "EDDSA.prototype.sign.sign"},');

    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.verify.verify", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
            SRTlib.send('], "end": "EDDSA.prototype.verify.verify"},');

      return RplusAh.eq(SG);
            SRTlib.send('], "end": "EDDSA.prototype.verify.verify"},');

    };
    EDDSA.prototype.hashInt = function hashInt() {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.hashInt.hashInt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);
            SRTlib.send('], "end": "EDDSA.prototype.hashInt.hashInt"},');

      return utils.intFromLE(hash.digest()).umod(this.curve.n);
            SRTlib.send('], "end": "EDDSA.prototype.hashInt.hashInt"},');

    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.keyFromPublic.keyFromPublic", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EDDSA.prototype.keyFromPublic.keyFromPublic"},');

      return KeyPair.fromPublic(this, pub);
            SRTlib.send('], "end": "EDDSA.prototype.keyFromPublic.keyFromPublic"},');

    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.keyFromSecret.keyFromSecret", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EDDSA.prototype.keyFromSecret.keyFromSecret"},');

      return KeyPair.fromSecret(this, secret);
            SRTlib.send('], "end": "EDDSA.prototype.keyFromSecret.keyFromSecret"},');

    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.makeSignature.makeSignature", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (sig instanceof Signature) {
                SRTlib.send('], "end": "EDDSA.prototype.makeSignature.makeSignature"},');

        return sig;
      }
            SRTlib.send('], "end": "EDDSA.prototype.makeSignature.makeSignature"},');

      return new Signature(this, sig);
            SRTlib.send('], "end": "EDDSA.prototype.makeSignature.makeSignature"},');

    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.encodePoint.encodePoint", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
            SRTlib.send('], "end": "EDDSA.prototype.encodePoint.encodePoint"},');

      return enc;
            SRTlib.send('], "end": "EDDSA.prototype.encodePoint.encodePoint"},');

    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.decodePoint.decodePoint", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
      var y = utils.intFromLE(normed);
            SRTlib.send('], "end": "EDDSA.prototype.decodePoint.decodePoint"},');

      return this.curve.pointFromY(y, xIsOdd);
            SRTlib.send('], "end": "EDDSA.prototype.decodePoint.decodePoint"},');

    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.encodeInt.encodeInt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EDDSA.prototype.encodeInt.encodeInt"},');

      return num.toArray('le', this.encodingLength);
            SRTlib.send('], "end": "EDDSA.prototype.encodeInt.encodeInt"},');

    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.decodeInt.decodeInt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EDDSA.prototype.decodeInt.decodeInt"},');

      return utils.intFromLE(bytes);
            SRTlib.send('], "end": "EDDSA.prototype.decodeInt.decodeInt"},');

    };
    EDDSA.prototype.isPoint = function isPoint(val) {
            SRTlib.send(`{ "anonymous": true, "function": "EDDSA.prototype.isPoint.isPoint", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EDDSA.prototype.isPoint.isPoint"},');

      return val instanceof this.pointClass;
            SRTlib.send('], "end": "EDDSA.prototype.isPoint.isPoint"},');

    };
        SRTlib.send('], "end": "emptyKey94"},');

  }, {
    "../curves": 84,
    "../utils": 92,
    "./key": 89,
    "./signature": 90,
    "hash.js": 118
  }],
  89: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey95", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair(eddsa, params) {
            SRTlib.send(`{ "anonymous": false, "function": "KeyPair", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub)) this._pub = params.pub; else this._pubBytes = parseBytes(params.pub);
            SRTlib.send('], "end": "KeyPair"},');

    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.fromPublic.fromPublic2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (pub instanceof KeyPair) {
                SRTlib.send('], "end": "KeyPair.fromPublic.fromPublic2"},');

        return pub;
      }
            SRTlib.send('], "end": "KeyPair.fromPublic.fromPublic2"},');

      return new KeyPair(eddsa, {
        pub: pub
      });
            SRTlib.send('], "end": "KeyPair.fromPublic.fromPublic2"},');

    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.fromSecret.fromSecret", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (secret instanceof KeyPair) {
                SRTlib.send('], "end": "KeyPair.fromSecret.fromSecret"},');

        return secret;
      }
            SRTlib.send('], "end": "KeyPair.fromSecret.fromSecret"},');

      return new KeyPair(eddsa, {
        secret: secret
      });
            SRTlib.send('], "end": "KeyPair.fromSecret.fromSecret"},');

    };
    KeyPair.prototype.secret = function secret() {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.secret.secret", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "KeyPair.prototype.secret.secret"},');

      return this._secret;
            SRTlib.send('], "end": "KeyPair.prototype.secret.secret"},');

    };
    cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.pubBytes", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "cachedProperty.pubBytes"},');

      return this.eddsa.encodePoint(this.pub());
            SRTlib.send('], "end": "cachedProperty.pubBytes"},');

    });
    cachedProperty(KeyPair, 'pub', function pub() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.pub", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this._pubBytes) {
                SRTlib.send('], "end": "cachedProperty.pub"},');

        return this.eddsa.decodePoint(this._pubBytes);
      }
            SRTlib.send('], "end": "cachedProperty.pub"},');

      return this.eddsa.g.mul(this.priv());
            SRTlib.send('], "end": "cachedProperty.pub"},');

    });
    cachedProperty(KeyPair, 'privBytes', function privBytes() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.privBytes", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
            SRTlib.send('], "end": "cachedProperty.privBytes"},');

      return a;
            SRTlib.send('], "end": "cachedProperty.privBytes"},');

    });
    cachedProperty(KeyPair, 'priv', function priv() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.priv", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "cachedProperty.priv"},');

      return this.eddsa.decodeInt(this.privBytes());
            SRTlib.send('], "end": "cachedProperty.priv"},');

    });
    cachedProperty(KeyPair, 'hash', function hash() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.hash", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "cachedProperty.hash"},');

      return this.eddsa.hash().update(this.secret()).digest();
            SRTlib.send('], "end": "cachedProperty.hash"},');

    });
    cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.messagePrefix", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "cachedProperty.messagePrefix"},');

      return this.hash().slice(this.eddsa.encodingLength);
            SRTlib.send('], "end": "cachedProperty.messagePrefix"},');

    });
    KeyPair.prototype.sign = function sign(message) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.sign.sign2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      assert(this._secret, 'KeyPair can only verify');
            SRTlib.send('], "end": "KeyPair.prototype.sign.sign2"},');

      return this.eddsa.sign(message, this);
            SRTlib.send('], "end": "KeyPair.prototype.sign.sign2"},');

    };
    KeyPair.prototype.verify = function verify(message, sig) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.verify.verify2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "KeyPair.prototype.verify.verify2"},');

      return this.eddsa.verify(message, sig, this);
            SRTlib.send('], "end": "KeyPair.prototype.verify.verify2"},');

    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.getSecret.getSecret", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      assert(this._secret, 'KeyPair is public only');
            SRTlib.send('], "end": "KeyPair.prototype.getSecret.getSecret"},');

      return utils.encode(this.secret(), enc);
            SRTlib.send('], "end": "KeyPair.prototype.getSecret.getSecret"},');

    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "KeyPair.prototype.getPublic.getPublic2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "KeyPair.prototype.getPublic.getPublic2"},');

      return utils.encode(this.pubBytes(), enc);
            SRTlib.send('], "end": "KeyPair.prototype.getPublic.getPublic2"},');

    };
    module.exports = KeyPair;
        SRTlib.send('], "end": "emptyKey95"},');

  }, {
    "../utils": 92
  }],
  90: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey96", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var BN = require('bn.js');
    var utils = require('../utils');
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature(eddsa, sig) {
            SRTlib.send(`{ "anonymous": false, "function": "Signature", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.eddsa = eddsa;
      if (typeof sig !== 'object') sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert(sig.R && sig.S, 'Signature without R or S');
      if (eddsa.isPoint(sig.R)) this._R = sig.R;
      if (sig.S instanceof BN) this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
            SRTlib.send('], "end": "Signature"},');

    }
    cachedProperty(Signature, 'S', function S() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.S", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "cachedProperty.S"},');

      return this.eddsa.decodeInt(this.Sencoded());
            SRTlib.send('], "end": "cachedProperty.S"},');

    });
    cachedProperty(Signature, 'R', function R() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.R", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "cachedProperty.R"},');

      return this.eddsa.decodePoint(this.Rencoded());
            SRTlib.send('], "end": "cachedProperty.R"},');

    });
    cachedProperty(Signature, 'Rencoded', function Rencoded() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.Rencoded", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "cachedProperty.Rencoded"},');

      return this.eddsa.encodePoint(this.R());
            SRTlib.send('], "end": "cachedProperty.Rencoded"},');

    });
    cachedProperty(Signature, 'Sencoded', function Sencoded() {
            SRTlib.send(`{ "anonymous": true, "function": "cachedProperty.Sencoded", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "cachedProperty.Sencoded"},');

      return this.eddsa.encodeInt(this.S());
            SRTlib.send('], "end": "cachedProperty.Sencoded"},');

    });
    Signature.prototype.toBytes = function toBytes() {
            SRTlib.send(`{ "anonymous": true, "function": "Signature.prototype.toBytes.toBytes", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Signature.prototype.toBytes.toBytes"},');

      return this.Rencoded().concat(this.Sencoded());
            SRTlib.send('], "end": "Signature.prototype.toBytes.toBytes"},');

    };
    Signature.prototype.toHex = function toHex() {
            SRTlib.send(`{ "anonymous": true, "function": "Signature.prototype.toHex.toHex", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Signature.prototype.toHex.toHex"},');

      return utils.encode(this.toBytes(), 'hex').toUpperCase();
            SRTlib.send('], "end": "Signature.prototype.toHex.toHex"},');

    };
    module.exports = Signature;
        SRTlib.send('], "end": "emptyKey96"},');

  }, {
    "../utils": 92,
    "bn.js": 21
  }],
  91: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey97", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      doubles: {
        step: 4,
        points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
      },
      naf: {
        wnd: 7,
        points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
      }
    };
        SRTlib.send('], "end": "emptyKey97"},');

  }, {}],
  92: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey98", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = exports;
    var BN = require('bn.js');
    var minAssert = require('minimalistic-assert');
    var minUtils = require('minimalistic-crypto-utils');
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF(num, w, bits) {
            SRTlib.send(`{ "anonymous": false, "function": "getNAF", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod; else z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
            SRTlib.send('], "end": "getNAF"},');

      return naf;
            SRTlib.send('], "end": "getNAF"},');

    }
    utils.getNAF = getNAF;
    function getJSF(k1, k2) {
            SRTlib.send(`{ "anonymous": false, "function": "getJSF", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var jsf = [[], []];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          var m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14; else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          var m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24; else u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
            SRTlib.send('], "end": "getJSF"},');

      return jsf;
            SRTlib.send('], "end": "getJSF"},');

    }
    utils.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
            SRTlib.send(`{ "anonymous": false, "function": "cachedProperty", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
                SRTlib.send(`{ "anonymous": true, "function": "obj.prototype.name.cachedProperty", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "obj.prototype.name.cachedProperty"},');

        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
                SRTlib.send('], "end": "obj.prototype.name.cachedProperty"},');

      };
            SRTlib.send('], "end": "cachedProperty"},');

    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
            SRTlib.send(`{ "anonymous": false, "function": "parseBytes", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "parseBytes"},');

      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
            SRTlib.send('], "end": "parseBytes"},');

    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
            SRTlib.send(`{ "anonymous": false, "function": "intFromLE", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "intFromLE"},');

      return new BN(bytes, 'hex', 'le');
            SRTlib.send('], "end": "intFromLE"},');

    }
    utils.intFromLE = intFromLE;
        SRTlib.send('], "end": "emptyKey98"},');

  }, {
    "bn.js": 21,
    "minimalistic-assert": 144,
    "minimalistic-crypto-utils": 145
  }],
  93: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey99", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "_args": [["elliptic@6.5.2", "/windir/c/Users/presi/Documents/workspace/cs449-projects/uppy"]],
      "_from": "elliptic@6.5.2",
      "_id": "elliptic@6.5.2",
      "_inBundle": false,
      "_integrity": "sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==",
      "_location": "/elliptic",
      "_phantomChildren": {},
      "_requested": {
        "type": "version",
        "registry": true,
        "raw": "elliptic@6.5.2",
        "name": "elliptic",
        "escapedName": "elliptic",
        "rawSpec": "6.5.2",
        "saveSpec": null,
        "fetchSpec": "6.5.2"
      },
      "_requiredBy": ["/browserify-sign", "/create-ecdh"],
      "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.2.tgz",
      "_spec": "6.5.2",
      "_where": "/windir/c/Users/presi/Documents/workspace/cs449-projects/uppy",
      "author": {
        "name": "Fedor Indutny",
        "email": "fedor@indutny.com"
      },
      "bugs": {
        "url": "https://github.com/indutny/elliptic/issues"
      },
      "dependencies": {
        "bn.js": "^4.4.0",
        "brorand": "^1.0.1",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.0",
        "inherits": "^2.0.1",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.0"
      },
      "description": "EC cryptography",
      "devDependencies": {
        "brfs": "^1.4.3",
        "coveralls": "^3.0.8",
        "grunt": "^1.0.4",
        "grunt-browserify": "^5.0.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-connect": "^1.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^1.0.1",
        "grunt-mocha-istanbul": "^3.0.1",
        "grunt-saucelabs": "^9.0.1",
        "istanbul": "^0.4.2",
        "jscs": "^3.0.7",
        "jshint": "^2.10.3",
        "mocha": "^6.2.2"
      },
      "files": ["lib"],
      "homepage": "https://github.com/indutny/elliptic",
      "keywords": ["EC", "Elliptic", "curve", "Cryptography"],
      "license": "MIT",
      "main": "lib/elliptic.js",
      "name": "elliptic",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/indutny/elliptic.git"
      },
      "scripts": {
        "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
        "lint": "npm run jscs && npm run jshint",
        "test": "npm run lint && npm run unit",
        "unit": "istanbul test _mocha --reporter=spec test/index.js",
        "version": "grunt dist && git add dist/"
      },
      "version": "6.5.2"
    };
        SRTlib.send('], "end": "emptyKey99"},');

  }, {}],
  94: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey100", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = require('./socket');
    module.exports.parser = require('engine.io-parser');
        SRTlib.send('], "end": "emptyKey100"},');

  }, {
    "./socket": 95,
    "engine.io-parser": 107
  }],
  95: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey102", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var transports = require('./transports/index');
    var Emitter = require('component-emitter');
    var debug = require('debug')('engine.io-client:socket');
    var index = require('indexof');
    var parser = require('engine.io-parser');
    var parseuri = require('parseuri');
    var parseqs = require('parseqs');
    module.exports = Socket;
    function Socket(uri, opts) {
            SRTlib.send(`{ "anonymous": false, "function": "Socket", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(this instanceof Socket)) {
                SRTlib.send('], "end": "Socket"},');

        return new Socket(uri, opts);
      }
      opts = opts || ({});
      if (uri && 'object' === typeof uri) {
        opts = uri;
        uri = null;
      }
      if (uri) {
        uri = parseuri(uri);
        opts.hostname = uri.host;
        opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
        opts.port = uri.port;
        if (uri.query) opts.query = uri.query;
      } else if (opts.host) {
        opts.hostname = parseuri(opts.host).host;
      }
      this.secure = null != opts.secure ? opts.secure : typeof location !== 'undefined' && 'https:' === location.protocol;
      if (opts.hostname && !opts.port) {
        opts.port = this.secure ? '443' : '80';
      }
      this.agent = opts.agent || false;
      this.hostname = opts.hostname || (typeof location !== 'undefined' ? location.hostname : 'localhost');
      this.port = opts.port || (typeof location !== 'undefined' && location.port ? location.port : this.secure ? 443 : 80);
      this.query = opts.query || ({});
      if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
      this.upgrade = false !== opts.upgrade;
      this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
      this.forceJSONP = !!opts.forceJSONP;
      this.jsonp = false !== opts.jsonp;
      this.forceBase64 = !!opts.forceBase64;
      this.enablesXDR = !!opts.enablesXDR;
      this.timestampParam = opts.timestampParam || 't';
      this.timestampRequests = opts.timestampRequests;
      this.transports = opts.transports || ['polling', 'websocket'];
      this.transportOptions = opts.transportOptions || ({});
      this.readyState = '';
      this.writeBuffer = [];
      this.prevBufferLen = 0;
      this.policyPort = opts.policyPort || 843;
      this.rememberUpgrade = opts.rememberUpgrade || false;
      this.binaryType = null;
      this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
      this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || ({}) : false;
      if (true === this.perMessageDeflate) this.perMessageDeflate = {};
      if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
        this.perMessageDeflate.threshold = 1024;
      }
      this.pfx = opts.pfx || null;
      this.key = opts.key || null;
      this.passphrase = opts.passphrase || null;
      this.cert = opts.cert || null;
      this.ca = opts.ca || null;
      this.ciphers = opts.ciphers || null;
      this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
      this.forceNode = !!opts.forceNode;
      this.isReactNative = typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative';
      if (typeof self === 'undefined' || this.isReactNative) {
        if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
          this.extraHeaders = opts.extraHeaders;
        }
        if (opts.localAddress) {
          this.localAddress = opts.localAddress;
        }
      }
      this.id = null;
      this.upgrades = null;
      this.pingInterval = null;
      this.pingTimeout = null;
      this.pingIntervalTimer = null;
      this.pingTimeoutTimer = null;
      this.open();
            SRTlib.send('], "end": "Socket"},');

    }
    Socket.priorWebsocketSuccess = false;
    Emitter(Socket.prototype);
    Socket.protocol = parser.protocol;
    Socket.Socket = Socket;
    Socket.Transport = require('./transport');
    Socket.transports = require('./transports/index');
    Socket.parser = require('engine.io-parser');
    Socket.prototype.createTransport = function (name) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.createTransport", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      debug('creating transport "%s"', name);
      var query = clone(this.query);
      query.EIO = parser.protocol;
      query.transport = name;
      var options = this.transportOptions[name] || ({});
      if (this.id) query.sid = this.id;
      var transport = new transports[name]({
        query: query,
        socket: this,
        agent: options.agent || this.agent,
        hostname: options.hostname || this.hostname,
        port: options.port || this.port,
        secure: options.secure || this.secure,
        path: options.path || this.path,
        forceJSONP: options.forceJSONP || this.forceJSONP,
        jsonp: options.jsonp || this.jsonp,
        forceBase64: options.forceBase64 || this.forceBase64,
        enablesXDR: options.enablesXDR || this.enablesXDR,
        timestampRequests: options.timestampRequests || this.timestampRequests,
        timestampParam: options.timestampParam || this.timestampParam,
        policyPort: options.policyPort || this.policyPort,
        pfx: options.pfx || this.pfx,
        key: options.key || this.key,
        passphrase: options.passphrase || this.passphrase,
        cert: options.cert || this.cert,
        ca: options.ca || this.ca,
        ciphers: options.ciphers || this.ciphers,
        rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
        perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
        extraHeaders: options.extraHeaders || this.extraHeaders,
        forceNode: options.forceNode || this.forceNode,
        localAddress: options.localAddress || this.localAddress,
        requestTimeout: options.requestTimeout || this.requestTimeout,
        protocols: options.protocols || void 0,
        isReactNative: this.isReactNative
      });
            SRTlib.send('], "end": "Socket.prototype.createTransport"},');

      return transport;
            SRTlib.send('], "end": "Socket.prototype.createTransport"},');

    };
    function clone(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "clone", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var o = {};
      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          o[i] = obj[i];
        }
      }
            SRTlib.send('], "end": "clone"},');

      return o;
            SRTlib.send('], "end": "clone"},');

    }
    Socket.prototype.open = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.open", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var transport;
      if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
        transport = 'websocket';
      } else if (0 === this.transports.length) {
        var self = this;
        setTimeout(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.open.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          self.emit('error', 'No transports available');
                    SRTlib.send('], "end": "Socket.prototype.open.setTimeout"},');

        }, 0);
                SRTlib.send('], "end": "Socket.prototype.open"},');

        return;
      } else {
        transport = this.transports[0];
      }
      this.readyState = 'opening';
      try {
        transport = this.createTransport(transport);
      } catch (e) {
        this.transports.shift();
        this.open();
                SRTlib.send('], "end": "Socket.prototype.open"},');

        return;
      }
      transport.open();
      this.setTransport(transport);
            SRTlib.send('], "end": "Socket.prototype.open"},');

    };
    Socket.prototype.setTransport = function (transport) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.setTransport", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      debug('setting transport %s', transport.name);
      var self = this;
      if (this.transport) {
        debug('clearing existing transport %s', this.transport.name);
        this.transport.removeAllListeners();
      }
      this.transport = transport;
      transport.on('drain', function () {
                SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.setTransport.on.on.on.on.on.on", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        self.onDrain();
                SRTlib.send('], "end": "Socket.prototype.setTransport.on.on.on.on.on.on"},');

      }).on('packet', function (packet) {
                SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.setTransport.on.on.on.on.on.on2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        self.onPacket(packet);
                SRTlib.send('], "end": "Socket.prototype.setTransport.on.on.on.on.on.on2"},');

      }).on('error', function (e) {
                SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.setTransport.on.on.on.on.on", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        self.onError(e);
                SRTlib.send('], "end": "Socket.prototype.setTransport.on.on.on.on.on"},');

      }).on('close', function () {
                SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.setTransport.on.on.on", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        self.onClose('transport close');
                SRTlib.send('], "end": "Socket.prototype.setTransport.on.on.on"},');

      });
            SRTlib.send('], "end": "Socket.prototype.setTransport"},');

    };
    Socket.prototype.probe = function (name) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.probe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      debug('probing transport "%s"', name);
      var transport = this.createTransport(name, {
        probe: 1
      });
      var failed = false;
      var self = this;
      Socket.priorWebsocketSuccess = false;
      function onTransportOpen() {
                SRTlib.send(`{ "anonymous": false, "function": "onTransportOpen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (self.onlyBinaryUpgrades) {
          var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
          failed = failed || upgradeLosesBinary;
        }
        if (failed) {
                    SRTlib.send('], "end": "onTransportOpen"},');

          return;
        }
        debug('probe transport "%s" opened', name);
        transport.send([{
          type: 'ping',
          data: 'probe'
        }]);
        transport.once('packet', function (msg) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey101", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (failed) {
                        SRTlib.send('], "end": "emptyKey101"},');

            return;
          }
          if ('pong' === msg.type && 'probe' === msg.data) {
            debug('probe transport "%s" pong', name);
            self.upgrading = true;
            self.emit('upgrading', transport);
            if (!transport) {
                            SRTlib.send('], "end": "emptyKey101"},');

              return;
            }
            Socket.priorWebsocketSuccess = 'websocket' === transport.name;
            debug('pausing current transport "%s"', self.transport.name);
            self.transport.pause(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "self.transport.pause", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              if (failed) {
                                SRTlib.send('], "end": "self.transport.pause"},');

                return;
              }
              if ('closed' === self.readyState) {
                                SRTlib.send('], "end": "self.transport.pause"},');

                return;
              }
              debug('changing transport and sending upgrade packet');
              cleanup();
              self.setTransport(transport);
              transport.send([{
                type: 'upgrade'
              }]);
              self.emit('upgrade', transport);
              transport = null;
              self.upgrading = false;
              self.flush();
                            SRTlib.send('], "end": "self.transport.pause"},');

            });
          } else {
            debug('probe transport "%s" failed', name);
            var err = new Error('probe error');
            err.transport = transport.name;
            self.emit('upgradeError', err);
          }
                    SRTlib.send('], "end": "emptyKey101"},');

        });
                SRTlib.send('], "end": "onTransportOpen"},');

      }
      function freezeTransport() {
                SRTlib.send(`{ "anonymous": false, "function": "freezeTransport", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (failed) {
                    SRTlib.send('], "end": "freezeTransport"},');

          return;
        }
        failed = true;
        cleanup();
        transport.close();
        transport = null;
                SRTlib.send('], "end": "freezeTransport"},');

      }
      function onerror(err) {
                SRTlib.send(`{ "anonymous": false, "function": "onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var error = new Error('probe error: ' + err);
        error.transport = transport.name;
        freezeTransport();
        debug('probe transport "%s" failed because of error: %s', name, err);
        self.emit('upgradeError', error);
                SRTlib.send('], "end": "onerror"},');

      }
      function onTransportClose() {
                SRTlib.send(`{ "anonymous": false, "function": "onTransportClose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        onerror('transport closed');
                SRTlib.send('], "end": "onTransportClose"},');

      }
      function onclose() {
                SRTlib.send(`{ "anonymous": false, "function": "onclose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        onerror('socket closed');
                SRTlib.send('], "end": "onclose"},');

      }
      function onupgrade(to) {
                SRTlib.send(`{ "anonymous": false, "function": "onupgrade", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (transport && to.name !== transport.name) {
          debug('"%s" works - aborting "%s"', to.name, transport.name);
          freezeTransport();
        }
                SRTlib.send('], "end": "onupgrade"},');

      }
      function cleanup() {
                SRTlib.send(`{ "anonymous": false, "function": "cleanup", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        transport.removeListener('open', onTransportOpen);
        transport.removeListener('error', onerror);
        transport.removeListener('close', onTransportClose);
        self.removeListener('close', onclose);
        self.removeListener('upgrading', onupgrade);
                SRTlib.send('], "end": "cleanup"},');

      }
      transport.once('open', onTransportOpen);
      transport.once('error', onerror);
      transport.once('close', onTransportClose);
      this.once('close', onclose);
      this.once('upgrading', onupgrade);
      transport.open();
            SRTlib.send('], "end": "Socket.prototype.probe"},');

    };
    Socket.prototype.onOpen = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onOpen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      debug('socket open');
      this.readyState = 'open';
      Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
      this.emit('open');
      this.flush();
      if ('open' === this.readyState && this.upgrade && this.transport.pause) {
        debug('starting upgrade probes');
        for (var i = 0, l = this.upgrades.length; i < l; i++) {
          this.probe(this.upgrades[i]);
        }
      }
            SRTlib.send('], "end": "Socket.prototype.onOpen"},');

    };
    Socket.prototype.onPacket = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onPacket", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
        debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
        this.emit('packet', packet);
        this.emit('heartbeat');
        switch (packet.type) {
          case 'open':
            this.onHandshake(JSON.parse(packet.data));
            break;
          case 'pong':
            this.setPing();
            this.emit('pong');
            break;
          case 'error':
            var err = new Error('server error');
            err.code = packet.data;
            this.onError(err);
            break;
          case 'message':
            this.emit('data', packet.data);
            this.emit('message', packet.data);
            break;
        }
      } else {
        debug('packet received with socket readyState "%s"', this.readyState);
      }
            SRTlib.send('], "end": "Socket.prototype.onPacket"},');

    };
    Socket.prototype.onHandshake = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onHandshake", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.emit('handshake', data);
      this.id = data.sid;
      this.transport.query.sid = data.sid;
      this.upgrades = this.filterUpgrades(data.upgrades);
      this.pingInterval = data.pingInterval;
      this.pingTimeout = data.pingTimeout;
      this.onOpen();
      if ('closed' === this.readyState) {
                SRTlib.send('], "end": "Socket.prototype.onHandshake"},');

        return;
      }
      this.setPing();
      this.removeListener('heartbeat', this.onHeartbeat);
      this.on('heartbeat', this.onHeartbeat);
            SRTlib.send('], "end": "Socket.prototype.onHandshake"},');

    };
    Socket.prototype.onHeartbeat = function (timeout) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onHeartbeat", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      clearTimeout(this.pingTimeoutTimer);
      var self = this;
      self.pingTimeoutTimer = setTimeout(function () {
                SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onHeartbeat.self.pingTimeoutTimer.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if ('closed' === self.readyState) {
                    SRTlib.send('], "end": "Socket.prototype.onHeartbeat.self.pingTimeoutTimer.setTimeout"},');

          return;
        }
        self.onClose('ping timeout');
                SRTlib.send('], "end": "Socket.prototype.onHeartbeat.self.pingTimeoutTimer.setTimeout"},');

      }, timeout || self.pingInterval + self.pingTimeout);
            SRTlib.send('], "end": "Socket.prototype.onHeartbeat"},');

    };
    Socket.prototype.setPing = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.setPing", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var self = this;
      clearTimeout(self.pingIntervalTimer);
      self.pingIntervalTimer = setTimeout(function () {
                SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.setPing.self.pingIntervalTimer.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
        self.ping();
        self.onHeartbeat(self.pingTimeout);
                SRTlib.send('], "end": "Socket.prototype.setPing.self.pingIntervalTimer.setTimeout"},');

      }, self.pingInterval);
            SRTlib.send('], "end": "Socket.prototype.setPing"},');

    };
    Socket.prototype.ping = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.ping", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var self = this;
      this.sendPacket('ping', function () {
                SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.ping.sendPacket", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        self.emit('ping');
                SRTlib.send('], "end": "Socket.prototype.ping.sendPacket"},');

      });
            SRTlib.send('], "end": "Socket.prototype.ping"},');

    };
    Socket.prototype.onDrain = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onDrain", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.writeBuffer.splice(0, this.prevBufferLen);
      this.prevBufferLen = 0;
      if (0 === this.writeBuffer.length) {
        this.emit('drain');
      } else {
        this.flush();
      }
            SRTlib.send('], "end": "Socket.prototype.onDrain"},');

    };
    Socket.prototype.flush = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.flush", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
        debug('flushing %d packets in socket', this.writeBuffer.length);
        this.transport.send(this.writeBuffer);
        this.prevBufferLen = this.writeBuffer.length;
        this.emit('flush');
      }
            SRTlib.send('], "end": "Socket.prototype.flush"},');

    };
    Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.write.Socket.prototype.send", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      this.sendPacket('message', msg, options, fn);
            SRTlib.send('], "end": "Socket.prototype.write.Socket.prototype.send"},');

      return this;
            SRTlib.send('], "end": "Socket.prototype.write.Socket.prototype.send"},');

    };
    Socket.prototype.sendPacket = function (type, data, options, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.sendPacket", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if ('function' === typeof data) {
        fn = data;
        data = undefined;
      }
      if ('function' === typeof options) {
        fn = options;
        options = null;
      }
      if ('closing' === this.readyState || 'closed' === this.readyState) {
                SRTlib.send('], "end": "Socket.prototype.sendPacket"},');

        return;
      }
      options = options || ({});
      options.compress = false !== options.compress;
      var packet = {
        type: type,
        data: data,
        options: options
      };
      this.emit('packetCreate', packet);
      this.writeBuffer.push(packet);
      if (fn) this.once('flush', fn);
      this.flush();
            SRTlib.send('], "end": "Socket.prototype.sendPacket"},');

    };
    Socket.prototype.close = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if ('opening' === this.readyState || 'open' === this.readyState) {
        this.readyState = 'closing';
        var self = this;
        if (this.writeBuffer.length) {
          this.once('drain', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.close.once", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
                        SRTlib.send('], "end": "Socket.prototype.close.once"},');

          });
        } else if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      }
      function close() {
                SRTlib.send(`{ "anonymous": false, "function": "close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        self.onClose('forced close');
        debug('socket closing - telling transport to close');
        self.transport.close();
                SRTlib.send('], "end": "close"},');

      }
      function cleanupAndClose() {
                SRTlib.send(`{ "anonymous": false, "function": "cleanupAndClose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        self.removeListener('upgrade', cleanupAndClose);
        self.removeListener('upgradeError', cleanupAndClose);
        close();
                SRTlib.send('], "end": "cleanupAndClose"},');

      }
      function waitForUpgrade() {
                SRTlib.send(`{ "anonymous": false, "function": "waitForUpgrade", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        self.once('upgrade', cleanupAndClose);
        self.once('upgradeError', cleanupAndClose);
                SRTlib.send('], "end": "waitForUpgrade"},');

      }
            SRTlib.send('], "end": "Socket.prototype.close"},');

      return this;
            SRTlib.send('], "end": "Socket.prototype.close"},');

    };
    Socket.prototype.onError = function (err) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      debug('socket error %j', err);
      Socket.priorWebsocketSuccess = false;
      this.emit('error', err);
      this.onClose('transport error', err);
            SRTlib.send('], "end": "Socket.prototype.onError"},');

    };
    Socket.prototype.onClose = function (reason, desc) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onClose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
        debug('socket close with reason: "%s"', reason);
        var self = this;
        clearTimeout(this.pingIntervalTimer);
        clearTimeout(this.pingTimeoutTimer);
        this.transport.removeAllListeners('close');
        this.transport.close();
        this.transport.removeAllListeners();
        this.readyState = 'closed';
        this.id = null;
        this.emit('close', reason, desc);
        self.writeBuffer = [];
        self.prevBufferLen = 0;
      }
            SRTlib.send('], "end": "Socket.prototype.onClose"},');

    };
    Socket.prototype.filterUpgrades = function (upgrades) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.filterUpgrades", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var filteredUpgrades = [];
      for (var i = 0, j = upgrades.length; i < j; i++) {
        if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
      }
            SRTlib.send('], "end": "Socket.prototype.filterUpgrades"},');

      return filteredUpgrades;
            SRTlib.send('], "end": "Socket.prototype.filterUpgrades"},');

    };
        SRTlib.send('], "end": "emptyKey102"},');

  }, {
    "./transport": 96,
    "./transports/index": 97,
    "component-emitter": 103,
    "debug": 104,
    "engine.io-parser": 107,
    "indexof": 132,
    "parseqs": 152,
    "parseuri": 153
  }],
  96: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey103", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var parser = require('engine.io-parser');
    var Emitter = require('component-emitter');
    module.exports = Transport;
    function Transport(opts) {
            SRTlib.send(`{ "anonymous": false, "function": "Transport", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.path = opts.path;
      this.hostname = opts.hostname;
      this.port = opts.port;
      this.secure = opts.secure;
      this.query = opts.query;
      this.timestampParam = opts.timestampParam;
      this.timestampRequests = opts.timestampRequests;
      this.readyState = '';
      this.agent = opts.agent || false;
      this.socket = opts.socket;
      this.enablesXDR = opts.enablesXDR;
      this.pfx = opts.pfx;
      this.key = opts.key;
      this.passphrase = opts.passphrase;
      this.cert = opts.cert;
      this.ca = opts.ca;
      this.ciphers = opts.ciphers;
      this.rejectUnauthorized = opts.rejectUnauthorized;
      this.forceNode = opts.forceNode;
      this.isReactNative = opts.isReactNative;
      this.extraHeaders = opts.extraHeaders;
      this.localAddress = opts.localAddress;
            SRTlib.send('], "end": "Transport"},');

    }
    Emitter(Transport.prototype);
    Transport.prototype.onError = function (msg, desc) {
            SRTlib.send(`{ "anonymous": true, "function": "Transport.prototype.onError", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var err = new Error(msg);
      err.type = 'TransportError';
      err.description = desc;
      this.emit('error', err);
            SRTlib.send('], "end": "Transport.prototype.onError"},');

      return this;
            SRTlib.send('], "end": "Transport.prototype.onError"},');

    };
    Transport.prototype.open = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Transport.prototype.open", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if ('closed' === this.readyState || '' === this.readyState) {
        this.readyState = 'opening';
        this.doOpen();
      }
            SRTlib.send('], "end": "Transport.prototype.open"},');

      return this;
            SRTlib.send('], "end": "Transport.prototype.open"},');

    };
    Transport.prototype.close = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Transport.prototype.close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if ('opening' === this.readyState || 'open' === this.readyState) {
        this.doClose();
        this.onClose();
      }
            SRTlib.send('], "end": "Transport.prototype.close"},');

      return this;
            SRTlib.send('], "end": "Transport.prototype.close"},');

    };
    Transport.prototype.send = function (packets) {
            SRTlib.send(`{ "anonymous": true, "function": "Transport.prototype.send", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if ('open' === this.readyState) {
        this.write(packets);
      } else {
                SRTlib.send('], "end": "Transport.prototype.send"},');

        throw new Error('Transport not open');
      }
            SRTlib.send('], "end": "Transport.prototype.send"},');

    };
    Transport.prototype.onOpen = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Transport.prototype.onOpen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.readyState = 'open';
      this.writable = true;
      this.emit('open');
            SRTlib.send('], "end": "Transport.prototype.onOpen"},');

    };
    Transport.prototype.onData = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Transport.prototype.onData", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var packet = parser.decodePacket(data, this.socket.binaryType);
      this.onPacket(packet);
            SRTlib.send('], "end": "Transport.prototype.onData"},');

    };
    Transport.prototype.onPacket = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "Transport.prototype.onPacket", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.emit('packet', packet);
            SRTlib.send('], "end": "Transport.prototype.onPacket"},');

    };
    Transport.prototype.onClose = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Transport.prototype.onClose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.readyState = 'closed';
      this.emit('close');
            SRTlib.send('], "end": "Transport.prototype.onClose"},');

    };
        SRTlib.send('], "end": "emptyKey103"},');

  }, {
    "component-emitter": 103,
    "engine.io-parser": 107
  }],
  97: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey104", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var XMLHttpRequest = require('xmlhttprequest-ssl');
    var XHR = require('./polling-xhr');
    var JSONP = require('./polling-jsonp');
    var websocket = require('./websocket');
    exports.polling = polling;
    exports.websocket = websocket;
    function polling(opts) {
            SRTlib.send(`{ "anonymous": false, "function": "polling", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var xhr;
      var xd = false;
      var xs = false;
      var jsonp = false !== opts.jsonp;
      if (typeof location !== 'undefined') {
        var isSSL = 'https:' === location.protocol;
        var port = location.port;
        if (!port) {
          port = isSSL ? 443 : 80;
        }
        xd = opts.hostname !== location.hostname || port !== opts.port;
        xs = opts.secure !== isSSL;
      }
      opts.xdomain = xd;
      opts.xscheme = xs;
      xhr = new XMLHttpRequest(opts);
      if (('open' in xhr) && !opts.forceJSONP) {
                SRTlib.send('], "end": "polling"},');

        return new XHR(opts);
      } else {
        if (!jsonp) {
                    SRTlib.send('], "end": "polling"},');

          throw new Error('JSONP disabled');
        }
                SRTlib.send('], "end": "polling"},');

        return new JSONP(opts);
      }
            SRTlib.send('], "end": "polling"},');

    }
        SRTlib.send('], "end": "emptyKey104"},');

  }, {
    "./polling-jsonp": 98,
    "./polling-xhr": 99,
    "./websocket": 101,
    "xmlhttprequest-ssl": 102
  }],
  98: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey106", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global) {
            SRTlib.send(`{ "anonymous": true, "function": "call11", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var Polling = require('./polling');
      var inherit = require('component-inherit');
      module.exports = JSONPPolling;
      var rNewline = /\n/g;
      var rEscapedNewline = /\\n/g;
      var callbacks;
      function empty() {
                SRTlib.send(`{ "anonymous": false, "function": "empty", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "empty"},');

      }
      function glob() {
                SRTlib.send(`{ "anonymous": false, "function": "glob", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "glob"},');

        return typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};
                SRTlib.send('], "end": "glob"},');

      }
      function JSONPPolling(opts) {
                SRTlib.send(`{ "anonymous": false, "function": "JSONPPolling", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        Polling.call(this, opts);
        this.query = this.query || ({});
        if (!callbacks) {
          var global = glob();
          callbacks = global.___eio = global.___eio || [];
        }
        this.index = callbacks.length;
        var self = this;
        callbacks.push(function (msg) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey105", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          self.onData(msg);
                    SRTlib.send('], "end": "emptyKey105"},');

        });
        this.query.j = this.index;
        if (typeof addEventListener === 'function') {
          addEventListener('beforeunload', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "addEventListener", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (self.script) self.script.onerror = empty;
                        SRTlib.send('], "end": "addEventListener"},');

          }, false);
        }
                SRTlib.send('], "end": "JSONPPolling"},');

      }
      inherit(JSONPPolling, Polling);
      JSONPPolling.prototype.supportsBinary = false;
      JSONPPolling.prototype.doClose = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.JSONPPolling.prototype.doClose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.script) {
          this.script.parentNode.removeChild(this.script);
          this.script = null;
        }
        if (this.form) {
          this.form.parentNode.removeChild(this.form);
          this.form = null;
          this.iframe = null;
        }
        Polling.prototype.doClose.call(this);
                SRTlib.send('], "end": "call.JSONPPolling.prototype.doClose"},');

      };
      JSONPPolling.prototype.doPoll = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.JSONPPolling.prototype.doPoll", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var self = this;
        var script = document.createElement('script');
        if (this.script) {
          this.script.parentNode.removeChild(this.script);
          this.script = null;
        }
        script.async = true;
        script.src = this.uri();
        script.onerror = function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.JSONPPolling.prototype.doPoll.script.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          self.onError('jsonp poll error', e);
                    SRTlib.send('], "end": "call.JSONPPolling.prototype.doPoll.script.onerror"},');

        };
        var insertAt = document.getElementsByTagName('script')[0];
        if (insertAt) {
          insertAt.parentNode.insertBefore(script, insertAt);
        } else {
          (document.head || document.body).appendChild(script);
        }
        this.script = script;
        var isUAgecko = 'undefined' !== typeof navigator && (/gecko/i).test(navigator.userAgent);
        if (isUAgecko) {
          setTimeout(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.JSONPPolling.prototype.doPoll.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var iframe = document.createElement('iframe');
            document.body.appendChild(iframe);
            document.body.removeChild(iframe);
                        SRTlib.send('], "end": "call.JSONPPolling.prototype.doPoll.setTimeout"},');

          }, 100);
        }
                SRTlib.send('], "end": "call.JSONPPolling.prototype.doPoll"},');

      };
      JSONPPolling.prototype.doWrite = function (data, fn) {
                SRTlib.send(`{ "anonymous": true, "function": "call.JSONPPolling.prototype.doWrite", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var self = this;
        if (!this.form) {
          var form = document.createElement('form');
          var area = document.createElement('textarea');
          var id = this.iframeId = 'eio_iframe_' + this.index;
          var iframe;
          form.className = 'socketio';
          form.style.position = 'absolute';
          form.style.top = '-1000px';
          form.style.left = '-1000px';
          form.target = id;
          form.method = 'POST';
          form.setAttribute('accept-charset', 'utf-8');
          area.name = 'd';
          form.appendChild(area);
          document.body.appendChild(form);
          this.form = form;
          this.area = area;
        }
        this.form.action = this.uri();
        function complete() {
                    SRTlib.send(`{ "anonymous": false, "function": "complete", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          initIframe();
          fn();
                    SRTlib.send('], "end": "complete"},');

        }
        function initIframe() {
                    SRTlib.send(`{ "anonymous": false, "function": "initIframe", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (self.iframe) {
            try {
              self.form.removeChild(self.iframe);
            } catch (e) {
              self.onError('jsonp polling iframe removal error', e);
            }
          }
          try {
            var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
            iframe = document.createElement(html);
          } catch (e) {
            iframe = document.createElement('iframe');
            iframe.name = self.iframeId;
            iframe.src = 'javascript:0';
          }
          iframe.id = self.iframeId;
          self.form.appendChild(iframe);
          self.iframe = iframe;
                    SRTlib.send('], "end": "initIframe"},');

        }
        initIframe();
        data = data.replace(rEscapedNewline, '\\\n');
        this.area.value = data.replace(rNewline, '\\n');
        try {
          this.form.submit();
        } catch (e) {}
        if (this.iframe.attachEvent) {
          this.iframe.onreadystatechange = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.JSONPPolling.prototype.doWrite.iframe.onreadystatechange", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (self.iframe.readyState === 'complete') {
              complete();
            }
                        SRTlib.send('], "end": "call.JSONPPolling.prototype.doWrite.iframe.onreadystatechange"},');

          };
        } else {
          this.iframe.onload = complete;
        }
                SRTlib.send('], "end": "call.JSONPPolling.prototype.doWrite"},');

      };
            SRTlib.send('], "end": "call11"},');

    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey106"},');

  }, {
    "./polling": 100,
    "component-inherit": 56
  }],
  99: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey107", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var XMLHttpRequest = require('xmlhttprequest-ssl');
    var Polling = require('./polling');
    var Emitter = require('component-emitter');
    var inherit = require('component-inherit');
    var debug = require('debug')('engine.io-client:polling-xhr');
    module.exports = XHR;
    module.exports.Request = Request;
    function empty() {
            SRTlib.send(`{ "anonymous": false, "function": "empty", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "empty"},');

    }
    function XHR(opts) {
            SRTlib.send(`{ "anonymous": false, "function": "XHR", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Polling.call(this, opts);
      this.requestTimeout = opts.requestTimeout;
      this.extraHeaders = opts.extraHeaders;
      if (typeof location !== 'undefined') {
        var isSSL = 'https:' === location.protocol;
        var port = location.port;
        if (!port) {
          port = isSSL ? 443 : 80;
        }
        this.xd = typeof location !== 'undefined' && opts.hostname !== location.hostname || port !== opts.port;
        this.xs = opts.secure !== isSSL;
      }
            SRTlib.send('], "end": "XHR"},');

    }
    inherit(XHR, Polling);
    XHR.prototype.supportsBinary = true;
    XHR.prototype.request = function (opts) {
            SRTlib.send(`{ "anonymous": true, "function": "XHR.prototype.request", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      opts = opts || ({});
      opts.uri = this.uri();
      opts.xd = this.xd;
      opts.xs = this.xs;
      opts.agent = this.agent || false;
      opts.supportsBinary = this.supportsBinary;
      opts.enablesXDR = this.enablesXDR;
      opts.pfx = this.pfx;
      opts.key = this.key;
      opts.passphrase = this.passphrase;
      opts.cert = this.cert;
      opts.ca = this.ca;
      opts.ciphers = this.ciphers;
      opts.rejectUnauthorized = this.rejectUnauthorized;
      opts.requestTimeout = this.requestTimeout;
      opts.extraHeaders = this.extraHeaders;
            SRTlib.send('], "end": "XHR.prototype.request"},');

      return new Request(opts);
            SRTlib.send('], "end": "XHR.prototype.request"},');

    };
    XHR.prototype.doWrite = function (data, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "XHR.prototype.doWrite2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var isBinary = typeof data !== 'string' && data !== undefined;
      var req = this.request({
        method: 'POST',
        data: data,
        isBinary: isBinary
      });
      var self = this;
      req.on('success', fn);
      req.on('error', function (err) {
                SRTlib.send(`{ "anonymous": true, "function": "XHR.prototype.doWrite", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        self.onError('xhr post error', err);
                SRTlib.send('], "end": "XHR.prototype.doWrite"},');

      });
      this.sendXhr = req;
            SRTlib.send('], "end": "XHR.prototype.doWrite2"},');

    };
    XHR.prototype.doPoll = function () {
            SRTlib.send(`{ "anonymous": true, "function": "XHR.prototype.doPoll3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      debug('xhr poll');
      var req = this.request();
      var self = this;
      req.on('data', function (data) {
                SRTlib.send(`{ "anonymous": true, "function": "XHR.prototype.doPoll", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        self.onData(data);
                SRTlib.send('], "end": "XHR.prototype.doPoll"},');

      });
      req.on('error', function (err) {
                SRTlib.send(`{ "anonymous": true, "function": "XHR.prototype.doPoll2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        self.onError('xhr poll error', err);
                SRTlib.send('], "end": "XHR.prototype.doPoll2"},');

      });
      this.pollXhr = req;
            SRTlib.send('], "end": "XHR.prototype.doPoll3"},');

    };
    function Request(opts) {
            SRTlib.send(`{ "anonymous": false, "function": "Request", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.method = opts.method || 'GET';
      this.uri = opts.uri;
      this.xd = !!opts.xd;
      this.xs = !!opts.xs;
      this.async = false !== opts.async;
      this.data = undefined !== opts.data ? opts.data : null;
      this.agent = opts.agent;
      this.isBinary = opts.isBinary;
      this.supportsBinary = opts.supportsBinary;
      this.enablesXDR = opts.enablesXDR;
      this.requestTimeout = opts.requestTimeout;
      this.pfx = opts.pfx;
      this.key = opts.key;
      this.passphrase = opts.passphrase;
      this.cert = opts.cert;
      this.ca = opts.ca;
      this.ciphers = opts.ciphers;
      this.rejectUnauthorized = opts.rejectUnauthorized;
      this.extraHeaders = opts.extraHeaders;
      this.create();
            SRTlib.send('], "end": "Request"},');

    }
    Emitter(Request.prototype);
    Request.prototype.create = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.create", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var opts = {
        agent: this.agent,
        xdomain: this.xd,
        xscheme: this.xs,
        enablesXDR: this.enablesXDR
      };
      opts.pfx = this.pfx;
      opts.key = this.key;
      opts.passphrase = this.passphrase;
      opts.cert = this.cert;
      opts.ca = this.ca;
      opts.ciphers = this.ciphers;
      opts.rejectUnauthorized = this.rejectUnauthorized;
      var xhr = this.xhr = new XMLHttpRequest(opts);
      var self = this;
      try {
        debug('xhr open %s: %s', this.method, this.uri);
        xhr.open(this.method, this.uri, this.async);
        try {
          if (this.extraHeaders) {
            xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
            for (var i in this.extraHeaders) {
              if (this.extraHeaders.hasOwnProperty(i)) {
                xhr.setRequestHeader(i, this.extraHeaders[i]);
              }
            }
          }
        } catch (e) {}
        if ('POST' === this.method) {
          try {
            if (this.isBinary) {
              xhr.setRequestHeader('Content-type', 'application/octet-stream');
            } else {
              xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
            }
          } catch (e) {}
        }
        try {
          xhr.setRequestHeader('Accept', '*/*');
        } catch (e) {}
        if (('withCredentials' in xhr)) {
          xhr.withCredentials = true;
        }
        if (this.requestTimeout) {
          xhr.timeout = this.requestTimeout;
        }
        if (this.hasXDR()) {
          xhr.onload = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.create.xhr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            self.onLoad();
                        SRTlib.send('], "end": "Request.prototype.create.xhr.onload"},');

          };
          xhr.onerror = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.create.xhr.onerror", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            self.onError(xhr.responseText);
                        SRTlib.send('], "end": "Request.prototype.create.xhr.onerror"},');

          };
        } else {
          xhr.onreadystatechange = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.create.xhr.onreadystatechange", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (xhr.readyState === 2) {
              try {
                var contentType = xhr.getResponseHeader('Content-Type');
                if (self.supportsBinary && contentType === 'application/octet-stream') {
                  xhr.responseType = 'arraybuffer';
                }
              } catch (e) {}
            }
            if (4 !== xhr.readyState) {
                            SRTlib.send('], "end": "Request.prototype.create.xhr.onreadystatechange"},');

              return;
            }
            if (200 === xhr.status || 1223 === xhr.status) {
              self.onLoad();
            } else {
              setTimeout(function () {
                                SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.create.xhr.onreadystatechange.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                self.onError(xhr.status);
                                SRTlib.send('], "end": "Request.prototype.create.xhr.onreadystatechange.setTimeout"},');

              }, 0);
            }
                        SRTlib.send('], "end": "Request.prototype.create.xhr.onreadystatechange"},');

          };
        }
        debug('xhr data %s', this.data);
        xhr.send(this.data);
      } catch (e) {
        setTimeout(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.create.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          self.onError(e);
                    SRTlib.send('], "end": "Request.prototype.create.setTimeout"},');

        }, 0);
                SRTlib.send('], "end": "Request.prototype.create"},');

        return;
      }
      if (typeof document !== 'undefined') {
        this.index = Request.requestsCount++;
        Request.requests[this.index] = this;
      }
            SRTlib.send('], "end": "Request.prototype.create"},');

    };
    Request.prototype.onSuccess = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.onSuccess", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.emit('success');
      this.cleanup();
            SRTlib.send('], "end": "Request.prototype.onSuccess"},');

    };
    Request.prototype.onData = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.onData", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.emit('data', data);
      this.onSuccess();
            SRTlib.send('], "end": "Request.prototype.onData"},');

    };
    Request.prototype.onError = function (err) {
            SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.onError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.emit('error', err);
      this.cleanup(true);
            SRTlib.send('], "end": "Request.prototype.onError"},');

    };
    Request.prototype.cleanup = function (fromError) {
            SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.cleanup", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if ('undefined' === typeof this.xhr || null === this.xhr) {
                SRTlib.send('], "end": "Request.prototype.cleanup"},');

        return;
      }
      if (this.hasXDR()) {
        this.xhr.onload = this.xhr.onerror = empty;
      } else {
        this.xhr.onreadystatechange = empty;
      }
      if (fromError) {
        try {
          this.xhr.abort();
        } catch (e) {}
      }
      if (typeof document !== 'undefined') {
        delete Request.requests[this.index];
      }
      this.xhr = null;
            SRTlib.send('], "end": "Request.prototype.cleanup"},');

    };
    Request.prototype.onLoad = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.onLoad", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var data;
      try {
        var contentType;
        try {
          contentType = this.xhr.getResponseHeader('Content-Type');
        } catch (e) {}
        if (contentType === 'application/octet-stream') {
          data = this.xhr.response || this.xhr.responseText;
        } else {
          data = this.xhr.responseText;
        }
      } catch (e) {
        this.onError(e);
      }
      if (null != data) {
        this.onData(data);
      }
            SRTlib.send('], "end": "Request.prototype.onLoad"},');

    };
    Request.prototype.hasXDR = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.hasXDR", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Request.prototype.hasXDR"},');

      return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
            SRTlib.send('], "end": "Request.prototype.hasXDR"},');

    };
    Request.prototype.abort = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.abort", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.cleanup();
            SRTlib.send('], "end": "Request.prototype.abort"},');

    };
    Request.requestsCount = 0;
    Request.requests = {};
    if (typeof document !== 'undefined') {
      if (typeof attachEvent === 'function') {
        attachEvent('onunload', unloadHandler);
      } else if (typeof addEventListener === 'function') {
        var terminationEvent = ('onpagehide' in self) ? 'pagehide' : 'unload';
        addEventListener(terminationEvent, unloadHandler, false);
      }
    }
    function unloadHandler() {
            SRTlib.send(`{ "anonymous": false, "function": "unloadHandler", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      for (var i in Request.requests) {
        if (Request.requests.hasOwnProperty(i)) {
          Request.requests[i].abort();
        }
      }
            SRTlib.send('], "end": "unloadHandler"},');

    }
        SRTlib.send('], "end": "emptyKey107"},');

  }, {
    "./polling": 100,
    "component-emitter": 103,
    "component-inherit": 56,
    "debug": 104,
    "xmlhttprequest-ssl": 102
  }],
  100: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey108", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Transport = require('../transport');
    var parseqs = require('parseqs');
    var parser = require('engine.io-parser');
    var inherit = require('component-inherit');
    var yeast = require('yeast');
    var debug = require('debug')('engine.io-client:polling');
    module.exports = Polling;
    var hasXHR2 = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "hasXHR2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var XMLHttpRequest = require('xmlhttprequest-ssl');
      var xhr = new XMLHttpRequest({
        xdomain: false
      });
            SRTlib.send('], "end": "hasXHR2"},');

      return null != xhr.responseType;
            SRTlib.send('], "end": "hasXHR2"},');

    })();
    function Polling(opts) {
            SRTlib.send(`{ "anonymous": false, "function": "Polling", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var forceBase64 = opts && opts.forceBase64;
      if (!hasXHR2 || forceBase64) {
        this.supportsBinary = false;
      }
      Transport.call(this, opts);
            SRTlib.send('], "end": "Polling"},');

    }
    inherit(Polling, Transport);
    Polling.prototype.name = 'polling';
    Polling.prototype.doOpen = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.doOpen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.poll();
            SRTlib.send('], "end": "Polling.prototype.doOpen"},');

    };
    Polling.prototype.pause = function (onPause) {
            SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.pause", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var self = this;
      this.readyState = 'pausing';
      function pause() {
                SRTlib.send(`{ "anonymous": false, "function": "pause", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        debug('paused');
        self.readyState = 'paused';
        onPause();
                SRTlib.send('], "end": "pause"},');

      }
      if (this.polling || !this.writable) {
        var total = 0;
        if (this.polling) {
          debug('we are currently polling - waiting to pause');
          total++;
          this.once('pollComplete', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.pause.once", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            debug('pre-pause polling complete');
            --total || pause();
                        SRTlib.send('], "end": "Polling.prototype.pause.once"},');

          });
        }
        if (!this.writable) {
          debug('we are currently writing - waiting to pause');
          total++;
          this.once('drain', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.pause.once2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            debug('pre-pause writing complete');
            --total || pause();
                        SRTlib.send('], "end": "Polling.prototype.pause.once2"},');

          });
        }
      } else {
        pause();
      }
            SRTlib.send('], "end": "Polling.prototype.pause"},');

    };
    Polling.prototype.poll = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.poll", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      debug('polling');
      this.polling = true;
      this.doPoll();
      this.emit('poll');
            SRTlib.send('], "end": "Polling.prototype.poll"},');

    };
    Polling.prototype.onData = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.onData", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var self = this;
      debug('polling got data %s', data);
      var callback = function (packet, index, total) {
                SRTlib.send(`{ "anonymous": false, "function": "callback", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if ('opening' === self.readyState) {
          self.onOpen();
        }
        if ('close' === packet.type) {
          self.onClose();
                    SRTlib.send('], "end": "callback"},');

          return false;
        }
        self.onPacket(packet);
                SRTlib.send('], "end": "callback"},');

      };
      parser.decodePayload(data, this.socket.binaryType, callback);
      if ('closed' !== this.readyState) {
        this.polling = false;
        this.emit('pollComplete');
        if ('open' === this.readyState) {
          this.poll();
        } else {
          debug('ignoring poll - transport state "%s"', this.readyState);
        }
      }
            SRTlib.send('], "end": "Polling.prototype.onData"},');

    };
    Polling.prototype.doClose = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.doClose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var self = this;
      function close() {
                SRTlib.send(`{ "anonymous": false, "function": "close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        debug('writing close packet');
        self.write([{
          type: 'close'
        }]);
                SRTlib.send('], "end": "close"},');

      }
      if ('open' === this.readyState) {
        debug('transport open - closing');
        close();
      } else {
        debug('transport not open - deferring close');
        this.once('open', close);
      }
            SRTlib.send('], "end": "Polling.prototype.doClose"},');

    };
    Polling.prototype.write = function (packets) {
            SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.write2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var self = this;
      this.writable = false;
      var callbackfn = function () {
                SRTlib.send(`{ "anonymous": false, "function": "callbackfn", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        self.writable = true;
        self.emit('drain');
                SRTlib.send('], "end": "callbackfn"},');

      };
      parser.encodePayload(packets, this.supportsBinary, function (data) {
                SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.write", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        self.doWrite(data, callbackfn);
                SRTlib.send('], "end": "Polling.prototype.write"},');

      });
            SRTlib.send('], "end": "Polling.prototype.write2"},');

    };
    Polling.prototype.uri = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Polling.prototype.uri", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var query = this.query || ({});
      var schema = this.secure ? 'https' : 'http';
      var port = '';
      if (false !== this.timestampRequests) {
        query[this.timestampParam] = yeast();
      }
      if (!this.supportsBinary && !query.sid) {
        query.b64 = 1;
      }
      query = parseqs.encode(query);
      if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
        port = ':' + this.port;
      }
      if (query.length) {
        query = '?' + query;
      }
      var ipv6 = this.hostname.indexOf(':') !== -1;
            SRTlib.send('], "end": "Polling.prototype.uri"},');

      return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
            SRTlib.send('], "end": "Polling.prototype.uri"},');

    };
        SRTlib.send('], "end": "emptyKey108"},');

  }, {
    "../transport": 96,
    "component-inherit": 56,
    "debug": 104,
    "engine.io-parser": 107,
    "parseqs": 152,
    "xmlhttprequest-ssl": 102,
    "yeast": 237
  }],
  101: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey109", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call12", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var Transport = require('../transport');
      var parser = require('engine.io-parser');
      var parseqs = require('parseqs');
      var inherit = require('component-inherit');
      var yeast = require('yeast');
      var debug = require('debug')('engine.io-client:websocket');
      var BrowserWebSocket, NodeWebSocket;
      if (typeof WebSocket !== 'undefined') {
        BrowserWebSocket = WebSocket;
      } else if (typeof self !== 'undefined') {
        BrowserWebSocket = self.WebSocket || self.MozWebSocket;
      } else {
        try {
          NodeWebSocket = require('ws');
        } catch (e) {}
      }
      var WebSocketImpl = BrowserWebSocket || NodeWebSocket;
      module.exports = WS;
      function WS(opts) {
                SRTlib.send(`{ "anonymous": false, "function": "WS", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var forceBase64 = opts && opts.forceBase64;
        if (forceBase64) {
          this.supportsBinary = false;
        }
        this.perMessageDeflate = opts.perMessageDeflate;
        this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
        this.protocols = opts.protocols;
        if (!this.usingBrowserWebSocket) {
          WebSocketImpl = NodeWebSocket;
        }
        Transport.call(this, opts);
                SRTlib.send('], "end": "WS"},');

      }
      inherit(WS, Transport);
      WS.prototype.name = 'websocket';
      WS.prototype.supportsBinary = true;
      WS.prototype.doOpen = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.doOpen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (!this.check()) {
                    SRTlib.send('], "end": "call.WS.prototype.doOpen"},');

          return;
        }
        var uri = this.uri();
        var protocols = this.protocols;
        var opts = {
          agent: this.agent,
          perMessageDeflate: this.perMessageDeflate
        };
        opts.pfx = this.pfx;
        opts.key = this.key;
        opts.passphrase = this.passphrase;
        opts.cert = this.cert;
        opts.ca = this.ca;
        opts.ciphers = this.ciphers;
        opts.rejectUnauthorized = this.rejectUnauthorized;
        if (this.extraHeaders) {
          opts.headers = this.extraHeaders;
        }
        if (this.localAddress) {
          opts.localAddress = this.localAddress;
        }
        try {
          this.ws = this.usingBrowserWebSocket && !this.isReactNative ? protocols ? new WebSocketImpl(uri, protocols) : new WebSocketImpl(uri) : new WebSocketImpl(uri, protocols, opts);
        } catch (err) {
                    SRTlib.send('], "end": "call.WS.prototype.doOpen"},');

          return this.emit('error', err);
        }
        if (this.ws.binaryType === undefined) {
          this.supportsBinary = false;
        }
        if (this.ws.supports && this.ws.supports.binary) {
          this.supportsBinary = true;
          this.ws.binaryType = 'nodebuffer';
        } else {
          this.ws.binaryType = 'arraybuffer';
        }
        this.addEventListeners();
                SRTlib.send('], "end": "call.WS.prototype.doOpen"},');

      };
      WS.prototype.addEventListeners = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.addEventListeners", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var self = this;
        this.ws.onopen = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.addEventListeners.ws.onopen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          self.onOpen();
                    SRTlib.send('], "end": "call.WS.prototype.addEventListeners.ws.onopen"},');

        };
        this.ws.onclose = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.addEventListeners.ws.onclose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          self.onClose();
                    SRTlib.send('], "end": "call.WS.prototype.addEventListeners.ws.onclose"},');

        };
        this.ws.onmessage = function (ev) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.addEventListeners.ws.onmessage", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          self.onData(ev.data);
                    SRTlib.send('], "end": "call.WS.prototype.addEventListeners.ws.onmessage"},');

        };
        this.ws.onerror = function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.addEventListeners.ws.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          self.onError('websocket error', e);
                    SRTlib.send('], "end": "call.WS.prototype.addEventListeners.ws.onerror"},');

        };
                SRTlib.send('], "end": "call.WS.prototype.addEventListeners"},');

      };
      WS.prototype.write = function (packets) {
                SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.write3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var self = this;
        this.writable = false;
        var total = packets.length;
        for (var i = 0, l = total; i < l; i++) {
          (function (packet) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.write2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            parser.encodePacket(packet, self.supportsBinary, function (data) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.write", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (!self.usingBrowserWebSocket) {
                var opts = {};
                if (packet.options) {
                  opts.compress = packet.options.compress;
                }
                if (self.perMessageDeflate) {
                  var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
                  if (len < self.perMessageDeflate.threshold) {
                    opts.compress = false;
                  }
                }
              }
              try {
                if (self.usingBrowserWebSocket) {
                  self.ws.send(data);
                } else {
                  self.ws.send(data, opts);
                }
              } catch (e) {
                debug('websocket closed before onclose event');
              }
              --total || done();
                            SRTlib.send('], "end": "call.WS.prototype.write"},');

            });
                        SRTlib.send('], "end": "call.WS.prototype.write2"},');

          })(packets[i]);
        }
        function done() {
                    SRTlib.send(`{ "anonymous": false, "function": "done", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          self.emit('flush');
          setTimeout(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            self.writable = true;
            self.emit('drain');
                        SRTlib.send('], "end": "setTimeout"},');

          }, 0);
                    SRTlib.send('], "end": "done"},');

        }
                SRTlib.send('], "end": "call.WS.prototype.write3"},');

      };
      WS.prototype.onClose = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.onClose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        Transport.prototype.onClose.call(this);
                SRTlib.send('], "end": "call.WS.prototype.onClose"},');

      };
      WS.prototype.doClose = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.doClose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (typeof this.ws !== 'undefined') {
          this.ws.close();
        }
                SRTlib.send('], "end": "call.WS.prototype.doClose"},');

      };
      WS.prototype.uri = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.uri", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var query = this.query || ({});
        var schema = this.secure ? 'wss' : 'ws';
        var port = '';
        if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
          port = ':' + this.port;
        }
        if (this.timestampRequests) {
          query[this.timestampParam] = yeast();
        }
        if (!this.supportsBinary) {
          query.b64 = 1;
        }
        query = parseqs.encode(query);
        if (query.length) {
          query = '?' + query;
        }
        var ipv6 = this.hostname.indexOf(':') !== -1;
                SRTlib.send('], "end": "call.WS.prototype.uri"},');

        return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
                SRTlib.send('], "end": "call.WS.prototype.uri"},');

      };
      WS.prototype.check = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.WS.prototype.check", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "call.WS.prototype.check"},');

        return !!WebSocketImpl && !(('__initialize' in WebSocketImpl) && this.name === WS.prototype.name);
                SRTlib.send('], "end": "call.WS.prototype.check"},');

      };
            SRTlib.send('], "end": "call12"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey109"},');

  }, {
    "../transport": 96,
    "buffer": 360,
    "component-inherit": 56,
    "debug": 104,
    "engine.io-parser": 107,
    "parseqs": 152,
    "ws": 23,
    "yeast": 237
  }],
  102: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey110", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var hasCORS = require('has-cors');
    module.exports = function (opts) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports6", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var xdomain = opts.xdomain;
      var xscheme = opts.xscheme;
      var enablesXDR = opts.enablesXDR;
      try {
        if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
                    SRTlib.send('], "end": "module.exports6"},');

          return new XMLHttpRequest();
        }
      } catch (e) {}
      try {
        if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
                    SRTlib.send('], "end": "module.exports6"},');

          return new XDomainRequest();
        }
      } catch (e) {}
      if (!xdomain) {
        try {
                    SRTlib.send('], "end": "module.exports6"},');

          return new self[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
        } catch (e) {}
      }
            SRTlib.send('], "end": "module.exports6"},');

    };
        SRTlib.send('], "end": "emptyKey110"},');

  }, {
    "has-cors": 116
  }],
  103: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey111", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    if (typeof module !== 'undefined') {
      module.exports = Emitter;
    }
    function Emitter(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "Emitter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (obj) {
                SRTlib.send('], "end": "Emitter"},');

        return mixin(obj);
      }
            SRTlib.send('], "end": "Emitter"},');

    }
    ;
    function mixin(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "mixin", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }
            SRTlib.send('], "end": "mixin"},');

      return obj;
            SRTlib.send('], "end": "mixin"},');

    }
    Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.on.Emitter.prototype.addEventListener2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this._callbacks = this._callbacks || ({});
      (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
            SRTlib.send('], "end": "Emitter.prototype.on.Emitter.prototype.addEventListener2"},');

      return this;
            SRTlib.send('], "end": "Emitter.prototype.on.Emitter.prototype.addEventListener2"},');

    };
    Emitter.prototype.once = function (event, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.once2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      function on() {
                SRTlib.send(`{ "anonymous": false, "function": "on", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.off(event, on);
        fn.apply(this, arguments);
                SRTlib.send('], "end": "on"},');

      }
      on.fn = fn;
      this.on(event, on);
            SRTlib.send('], "end": "Emitter.prototype.once2"},');

      return this;
            SRTlib.send('], "end": "Emitter.prototype.once2"},');

    };
    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this._callbacks = this._callbacks || ({});
      if (0 == arguments.length) {
        this._callbacks = {};
                SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener2"},');

        return this;
      }
      var callbacks = this._callbacks['$' + event];
      if (!callbacks) {
                SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener2"},');

        return this;
      }
      if (1 == arguments.length) {
        delete this._callbacks['$' + event];
                SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener2"},');

        return this;
      }
      var cb;
      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
            SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener2"},');

      return this;
            SRTlib.send('], "end": "Emitter.prototype.off.Emitter.prototype.removeListener.Emitter.prototype.removeAllListeners.Emitter.prototype.removeEventListener2"},');

    };
    Emitter.prototype.emit = function (event) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.emit2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._callbacks = this._callbacks || ({});
      var args = [].slice.call(arguments, 1), callbacks = this._callbacks['$' + event];
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }
            SRTlib.send('], "end": "Emitter.prototype.emit2"},');

      return this;
            SRTlib.send('], "end": "Emitter.prototype.emit2"},');

    };
    Emitter.prototype.listeners = function (event) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.listeners2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this._callbacks = this._callbacks || ({});
            SRTlib.send('], "end": "Emitter.prototype.listeners2"},');

      return this._callbacks['$' + event] || [];
            SRTlib.send('], "end": "Emitter.prototype.listeners2"},');

    };
    Emitter.prototype.hasListeners = function (event) {
            SRTlib.send(`{ "anonymous": true, "function": "Emitter.prototype.hasListeners2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Emitter.prototype.hasListeners2"},');

      return !!this.listeners(event).length;
            SRTlib.send('], "end": "Emitter.prototype.hasListeners2"},');

    };
        SRTlib.send('], "end": "emptyKey111"},');

  }, {}],
  104: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey112", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process) {
            SRTlib.send(`{ "anonymous": true, "function": "call13", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      exports = module.exports = require('./debug');
      exports.log = log;
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
      exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
      function useColors() {
                SRTlib.send(`{ "anonymous": false, "function": "useColors", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
                    SRTlib.send('], "end": "useColors"},');

          return true;
        }
        if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
                    SRTlib.send('], "end": "useColors"},');

          return false;
        }
                SRTlib.send('], "end": "useColors"},');

        return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
                SRTlib.send('], "end": "useColors"},');

      }
      exports.formatters.j = function (v) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.formatters.j", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        try {
                    SRTlib.send('], "end": "call.exports.formatters.j"},');

          return JSON.stringify(v);
        } catch (err) {
                    SRTlib.send('], "end": "call.exports.formatters.j"},');

          return '[UnexpectedJSONParseError]: ' + err.message;
        }
                SRTlib.send('], "end": "call.exports.formatters.j"},');

      };
      function formatArgs(args) {
                SRTlib.send(`{ "anonymous": false, "function": "formatArgs", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var useColors = this.useColors;
        args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
        if (!useColors) {
                    SRTlib.send('], "end": "formatArgs"},');

          return;
        }
        var c = 'color: ' + this.color;
        args.splice(1, 0, c, 'color: inherit');
        var index = 0;
        var lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, function (match) {
                    SRTlib.send(`{ "anonymous": true, "function": "args.replace", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if ('%%' === match) {
                        SRTlib.send('], "end": "args.replace"},');

            return;
          }
          index++;
          if ('%c' === match) {
            lastC = index;
          }
                    SRTlib.send('], "end": "args.replace"},');

        });
        args.splice(lastC, 0, c);
                SRTlib.send('], "end": "formatArgs"},');

      }
      function log() {
                SRTlib.send(`{ "anonymous": false, "function": "log", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "log"},');

        return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
                SRTlib.send('], "end": "log"},');

      }
      function save(namespaces) {
                SRTlib.send(`{ "anonymous": false, "function": "save", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        try {
          if (null == namespaces) {
            exports.storage.removeItem('debug');
          } else {
            exports.storage.debug = namespaces;
          }
        } catch (e) {}
                SRTlib.send('], "end": "save"},');

      }
      function load() {
                SRTlib.send(`{ "anonymous": false, "function": "load", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var r;
        try {
          r = exports.storage.debug;
        } catch (e) {}
        if (!r && typeof process !== 'undefined' && ('env' in process)) {
          r = process.env.DEBUG;
        }
                SRTlib.send('], "end": "load"},');

        return r;
                SRTlib.send('], "end": "load"},');

      }
      exports.enable(load());
      function localstorage() {
                SRTlib.send(`{ "anonymous": false, "function": "localstorage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        try {
                    SRTlib.send('], "end": "localstorage"},');

          return window.localStorage;
        } catch (e) {}
                SRTlib.send('], "end": "localstorage"},');

      }
            SRTlib.send('], "end": "call13"},');

    }).call(this, require('_process'));
        SRTlib.send('], "end": "emptyKey112"},');

  }, {
    "./debug": 105,
    "_process": 162
  }],
  105: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey113", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = require('ms');
    exports.instances = [];
    exports.names = [];
    exports.skips = [];
    exports.formatters = {};
    function selectColor(namespace) {
            SRTlib.send(`{ "anonymous": false, "function": "selectColor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var hash = 0, i;
      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
            SRTlib.send('], "end": "selectColor"},');

      return exports.colors[Math.abs(hash) % exports.colors.length];
            SRTlib.send('], "end": "selectColor"},');

    }
    function createDebug(namespace) {
            SRTlib.send(`{ "anonymous": false, "function": "createDebug", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var prevTime;
      function debug() {
                SRTlib.send(`{ "anonymous": false, "function": "debug", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (!debug.enabled) {
                    SRTlib.send('], "end": "debug"},');

          return;
        }
        var self = debug;
        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        args[0] = exports.coerce(args[0]);
        if ('string' !== typeof args[0]) {
          args.unshift('%O');
        }
        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
                    SRTlib.send(`{ "anonymous": true, "function": "args.args.replace", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (match === '%%') {
                        SRTlib.send('], "end": "args.args.replace"},');

            return match;
          }
          index++;
          var formatter = exports.formatters[format];
          if ('function' === typeof formatter) {
            var val = args[index];
            match = formatter.call(self, val);
            args.splice(index, 1);
            index--;
          }
                    SRTlib.send('], "end": "args.args.replace"},');

          return match;
                    SRTlib.send('], "end": "args.args.replace"},');

        });
        exports.formatArgs.call(self, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self, args);
                SRTlib.send('], "end": "debug"},');

      }
      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace);
      debug.destroy = destroy;
      if ('function' === typeof exports.init) {
        exports.init(debug);
      }
      exports.instances.push(debug);
            SRTlib.send('], "end": "createDebug"},');

      return debug;
            SRTlib.send('], "end": "createDebug"},');

    }
    function destroy() {
            SRTlib.send(`{ "anonymous": false, "function": "destroy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var index = exports.instances.indexOf(this);
      if (index !== -1) {
        exports.instances.splice(index, 1);
                SRTlib.send('], "end": "destroy"},');

        return true;
      } else {
                SRTlib.send('], "end": "destroy"},');

        return false;
      }
            SRTlib.send('], "end": "destroy"},');

    }
    function enable(namespaces) {
            SRTlib.send(`{ "anonymous": false, "function": "enable", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var i;
      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;
      for (i = 0; i < len; i++) {
        if (!split[i]) continue;
        namespaces = split[i].replace(/\*/g, '.*?');
        if (namespaces[0] === '-') {
          exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
        } else {
          exports.names.push(new RegExp('^' + namespaces + '$'));
        }
      }
      for (i = 0; i < exports.instances.length; i++) {
        var instance = exports.instances[i];
        instance.enabled = exports.enabled(instance.namespace);
      }
            SRTlib.send('], "end": "enable"},');

    }
    function disable() {
            SRTlib.send(`{ "anonymous": false, "function": "disable", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      exports.enable('');
            SRTlib.send('], "end": "disable"},');

    }
    function enabled(name) {
            SRTlib.send(`{ "anonymous": false, "function": "enabled", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (name[name.length - 1] === '*') {
                SRTlib.send('], "end": "enabled"},');

        return true;
      }
      var i, len;
      for ((i = 0, len = exports.skips.length); i < len; i++) {
        if (exports.skips[i].test(name)) {
                    SRTlib.send('], "end": "enabled"},');

          return false;
        }
      }
      for ((i = 0, len = exports.names.length); i < len; i++) {
        if (exports.names[i].test(name)) {
                    SRTlib.send('], "end": "enabled"},');

          return true;
        }
      }
            SRTlib.send('], "end": "enabled"},');

      return false;
            SRTlib.send('], "end": "enabled"},');

    }
    function coerce(val) {
            SRTlib.send(`{ "anonymous": false, "function": "coerce", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (val instanceof Error) {
                SRTlib.send('], "end": "coerce"},');

        return val.stack || val.message;
      }
            SRTlib.send('], "end": "coerce"},');

      return val;
            SRTlib.send('], "end": "coerce"},');

    }
        SRTlib.send('], "end": "emptyKey113"},');

  }, {
    "ms": 106
  }],
  106: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey114", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;
    module.exports = function (val, options) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      options = options || ({});
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
                SRTlib.send('], "end": "module.exports7"},');

        return parse(val);
      } else if (type === 'number' && isNaN(val) === false) {
                SRTlib.send('], "end": "module.exports7"},');

        return options.long ? fmtLong(val) : fmtShort(val);
      }
            SRTlib.send('], "end": "module.exports7"},');

      throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
            SRTlib.send('], "end": "module.exports7"},');

    };
    function parse(str) {
            SRTlib.send(`{ "anonymous": false, "function": "parse", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      str = String(str);
      if (str.length > 100) {
                SRTlib.send('], "end": "parse"},');

        return;
      }
      var match = (/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i).exec(str);
      if (!match) {
                SRTlib.send('], "end": "parse"},');

        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
                    SRTlib.send('], "end": "emptyKey114"},');

                    SRTlib.send('], "end": "parse"},');

          return n * y;
        case 'days':
        case 'day':
        case 'd':
                    SRTlib.send('], "end": "emptyKey114"},');

                    SRTlib.send('], "end": "parse"},');

          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
                    SRTlib.send('], "end": "emptyKey114"},');

                    SRTlib.send('], "end": "parse"},');

          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
                    SRTlib.send('], "end": "emptyKey114"},');

                    SRTlib.send('], "end": "parse"},');

          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
                    SRTlib.send('], "end": "emptyKey114"},');

                    SRTlib.send('], "end": "parse"},');

          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
                    SRTlib.send('], "end": "emptyKey114"},');

                    SRTlib.send('], "end": "parse"},');

          return n;
        default:
                    SRTlib.send('], "end": "emptyKey114"},');

                    SRTlib.send('], "end": "parse"},');

          return undefined;
      }
            SRTlib.send('], "end": "parse"},');

    }
    function fmtShort(ms) {
            SRTlib.send(`{ "anonymous": false, "function": "fmtShort", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (ms >= d) {
                SRTlib.send('], "end": "fmtShort"},');

        return Math.round(ms / d) + 'd';
      }
      if (ms >= h) {
                SRTlib.send('], "end": "fmtShort"},');

        return Math.round(ms / h) + 'h';
      }
      if (ms >= m) {
                SRTlib.send('], "end": "fmtShort"},');

        return Math.round(ms / m) + 'm';
      }
      if (ms >= s) {
                SRTlib.send('], "end": "fmtShort"},');

        return Math.round(ms / s) + 's';
      }
            SRTlib.send('], "end": "fmtShort"},');

      return ms + 'ms';
            SRTlib.send('], "end": "fmtShort"},');

    }
    function fmtLong(ms) {
            SRTlib.send(`{ "anonymous": false, "function": "fmtLong", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "fmtLong"},');

      return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
            SRTlib.send('], "end": "fmtLong"},');

    }
    function plural(ms, n, name) {
            SRTlib.send(`{ "anonymous": false, "function": "plural", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (ms < n) {
                SRTlib.send('], "end": "plural"},');

        return;
      }
      if (ms < n * 1.5) {
                SRTlib.send('], "end": "plural"},');

        return Math.floor(ms / n) + ' ' + name;
      }
            SRTlib.send('], "end": "plural"},');

      return Math.ceil(ms / n) + ' ' + name + 's';
            SRTlib.send('], "end": "plural"},');

    }
        SRTlib.send('], "end": "emptyKey114"},');

  }, {}],
  107: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey118", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var keys = require('./keys');
    var hasBinary = require('has-binary2');
    var sliceBuffer = require('arraybuffer.slice');
    var after = require('after');
    var utf8 = require('./utf8');
    var base64encoder;
    if (typeof ArrayBuffer !== 'undefined') {
      base64encoder = require('base64-arraybuffer');
    }
    var isAndroid = typeof navigator !== 'undefined' && (/Android/i).test(navigator.userAgent);
    var isPhantomJS = typeof navigator !== 'undefined' && (/PhantomJS/i).test(navigator.userAgent);
    var dontSendBlobs = isAndroid || isPhantomJS;
    exports.protocol = 3;
    var packets = exports.packets = {
      open: 0,
      close: 1,
      ping: 2,
      pong: 3,
      message: 4,
      upgrade: 5,
      noop: 6
    };
    var packetslist = keys(packets);
    var err = {
      type: 'error',
      data: 'parser error'
    };
    var Blob = require('blob');
    exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encodePacket", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (typeof supportsBinary === 'function') {
        callback = supportsBinary;
        supportsBinary = false;
      }
      if (typeof utf8encode === 'function') {
        callback = utf8encode;
        utf8encode = null;
      }
      var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;
      if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
                SRTlib.send('], "end": "exports.encodePacket"},');

        return encodeArrayBuffer(packet, supportsBinary, callback);
      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
                SRTlib.send('], "end": "exports.encodePacket"},');

        return encodeBlob(packet, supportsBinary, callback);
      }
      if (data && data.base64) {
                SRTlib.send('], "end": "exports.encodePacket"},');

        return encodeBase64Object(packet, callback);
      }
      var encoded = packets[packet.type];
      if (undefined !== packet.data) {
        encoded += utf8encode ? utf8.encode(String(packet.data), {
          strict: false
        }) : String(packet.data);
      }
            SRTlib.send('], "end": "exports.encodePacket"},');

      return callback('' + encoded);
            SRTlib.send('], "end": "exports.encodePacket"},');

    };
    function encodeBase64Object(packet, callback) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeBase64Object", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var message = 'b' + exports.packets[packet.type] + packet.data.data;
            SRTlib.send('], "end": "encodeBase64Object"},');

      return callback(message);
            SRTlib.send('], "end": "encodeBase64Object"},');

    }
    function encodeArrayBuffer(packet, supportsBinary, callback) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeArrayBuffer", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (!supportsBinary) {
                SRTlib.send('], "end": "encodeArrayBuffer"},');

        return exports.encodeBase64Packet(packet, callback);
      }
      var data = packet.data;
      var contentArray = new Uint8Array(data);
      var resultBuffer = new Uint8Array(1 + data.byteLength);
      resultBuffer[0] = packets[packet.type];
      for (var i = 0; i < contentArray.length; i++) {
        resultBuffer[i + 1] = contentArray[i];
      }
            SRTlib.send('], "end": "encodeArrayBuffer"},');

      return callback(resultBuffer.buffer);
            SRTlib.send('], "end": "encodeArrayBuffer"},');

    }
    function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeBlobAsArrayBuffer", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (!supportsBinary) {
                SRTlib.send('], "end": "encodeBlobAsArrayBuffer"},');

        return exports.encodeBase64Packet(packet, callback);
      }
      var fr = new FileReader();
      fr.onload = function () {
                SRTlib.send(`{ "anonymous": true, "function": "fr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        exports.encodePacket({
          type: packet.type,
          data: fr.result
        }, supportsBinary, true, callback);
                SRTlib.send('], "end": "fr.onload"},');

      };
            SRTlib.send('], "end": "encodeBlobAsArrayBuffer"},');

      return fr.readAsArrayBuffer(packet.data);
            SRTlib.send('], "end": "encodeBlobAsArrayBuffer"},');

    }
    function encodeBlob(packet, supportsBinary, callback) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeBlob", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (!supportsBinary) {
                SRTlib.send('], "end": "encodeBlob"},');

        return exports.encodeBase64Packet(packet, callback);
      }
      if (dontSendBlobs) {
                SRTlib.send('], "end": "encodeBlob"},');

        return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
      }
      var length = new Uint8Array(1);
      length[0] = packets[packet.type];
      var blob = new Blob([length.buffer, packet.data]);
            SRTlib.send('], "end": "encodeBlob"},');

      return callback(blob);
            SRTlib.send('], "end": "encodeBlob"},');

    }
    exports.encodeBase64Packet = function (packet, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encodeBase64Packet", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var message = 'b' + exports.packets[packet.type];
      if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
        var fr = new FileReader();
        fr.onload = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "exports.encodeBase64Packet.fr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var b64 = fr.result.split(',')[1];
          callback(message + b64);
                    SRTlib.send('], "end": "exports.encodeBase64Packet.fr.onload"},');

        };
                SRTlib.send('], "end": "exports.encodeBase64Packet"},');

        return fr.readAsDataURL(packet.data);
      }
      var b64data;
      try {
        b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
      } catch (e) {
        var typed = new Uint8Array(packet.data);
        var basic = new Array(typed.length);
        for (var i = 0; i < typed.length; i++) {
          basic[i] = typed[i];
        }
        b64data = String.fromCharCode.apply(null, basic);
      }
      message += btoa(b64data);
            SRTlib.send('], "end": "exports.encodeBase64Packet"},');

      return callback(message);
            SRTlib.send('], "end": "exports.encodeBase64Packet"},');

    };
    exports.decodePacket = function (data, binaryType, utf8decode) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.decodePacket", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (data === undefined) {
                SRTlib.send('], "end": "exports.decodePacket"},');

        return err;
      }
      if (typeof data === 'string') {
        if (data.charAt(0) === 'b') {
                    SRTlib.send('], "end": "exports.decodePacket"},');

          return exports.decodeBase64Packet(data.substr(1), binaryType);
        }
        if (utf8decode) {
          data = tryDecode(data);
          if (data === false) {
                        SRTlib.send('], "end": "exports.decodePacket"},');

            return err;
          }
        }
        var type = data.charAt(0);
        if (Number(type) != type || !packetslist[type]) {
                    SRTlib.send('], "end": "exports.decodePacket"},');

          return err;
        }
        if (data.length > 1) {
                    SRTlib.send('], "end": "exports.decodePacket"},');

          return {
            type: packetslist[type],
            data: data.substring(1)
          };
        } else {
                    SRTlib.send('], "end": "exports.decodePacket"},');

          return {
            type: packetslist[type]
          };
        }
      }
      var asArray = new Uint8Array(data);
      var type = asArray[0];
      var rest = sliceBuffer(data, 1);
      if (Blob && binaryType === 'blob') {
        rest = new Blob([rest]);
      }
            SRTlib.send('], "end": "exports.decodePacket"},');

      return {
        type: packetslist[type],
        data: rest
      };
            SRTlib.send('], "end": "exports.decodePacket"},');

    };
    function tryDecode(data) {
            SRTlib.send(`{ "anonymous": false, "function": "tryDecode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      try {
        data = utf8.decode(data, {
          strict: false
        });
      } catch (e) {
                SRTlib.send('], "end": "tryDecode"},');

        return false;
      }
            SRTlib.send('], "end": "tryDecode"},');

      return data;
            SRTlib.send('], "end": "tryDecode"},');

    }
    exports.decodeBase64Packet = function (msg, binaryType) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.decodeBase64Packet", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var type = packetslist[msg.charAt(0)];
      if (!base64encoder) {
                SRTlib.send('], "end": "exports.decodeBase64Packet"},');

        return {
          type: type,
          data: {
            base64: true,
            data: msg.substr(1)
          }
        };
      }
      var data = base64encoder.decode(msg.substr(1));
      if (binaryType === 'blob' && Blob) {
        data = new Blob([data]);
      }
            SRTlib.send('], "end": "exports.decodeBase64Packet"},');

      return {
        type: type,
        data: data
      };
            SRTlib.send('], "end": "exports.decodeBase64Packet"},');

    };
    exports.encodePayload = function (packets, supportsBinary, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encodePayload", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof supportsBinary === 'function') {
        callback = supportsBinary;
        supportsBinary = null;
      }
      var isBinary = hasBinary(packets);
      if (supportsBinary && isBinary) {
        if (Blob && !dontSendBlobs) {
                    SRTlib.send('], "end": "exports.encodePayload"},');

          return exports.encodePayloadAsBlob(packets, callback);
        }
                SRTlib.send('], "end": "exports.encodePayload"},');

        return exports.encodePayloadAsArrayBuffer(packets, callback);
      }
      if (!packets.length) {
                SRTlib.send('], "end": "exports.encodePayload"},');

        return callback('0:');
      }
      function setLengthHeader(message) {
                SRTlib.send(`{ "anonymous": false, "function": "setLengthHeader", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "setLengthHeader"},');

        return message.length + ':' + message;
                SRTlib.send('], "end": "setLengthHeader"},');

      }
      function encodeOne(packet, doneCallback) {
                SRTlib.send(`{ "anonymous": false, "function": "encodeOne", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey115", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          doneCallback(null, setLengthHeader(message));
                    SRTlib.send('], "end": "emptyKey115"},');

        });
                SRTlib.send('], "end": "encodeOne"},');

      }
      map(packets, encodeOne, function (err, results) {
                SRTlib.send(`{ "anonymous": true, "function": "exports.encodePayload.map", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "exports.encodePayload.map"},');

        return callback(results.join(''));
                SRTlib.send('], "end": "exports.encodePayload.map"},');

      });
            SRTlib.send('], "end": "exports.encodePayload"},');

    };
    function map(ary, each, done) {
            SRTlib.send(`{ "anonymous": false, "function": "map", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var result = new Array(ary.length);
      var next = after(ary.length, done);
      var eachWithIndex = function (i, el, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "eachWithIndex", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        each(el, function (error, msg) {
                    SRTlib.send(`{ "anonymous": true, "function": "eachWithIndex.each", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          result[i] = msg;
          cb(error, result);
                    SRTlib.send('], "end": "eachWithIndex.each"},');

        });
                SRTlib.send('], "end": "eachWithIndex"},');

      };
      for (var i = 0; i < ary.length; i++) {
        eachWithIndex(i, ary[i], next);
      }
            SRTlib.send('], "end": "map"},');

    }
    exports.decodePayload = function (data, binaryType, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.decodePayload", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof data !== 'string') {
                SRTlib.send('], "end": "exports.decodePayload"},');

        return exports.decodePayloadAsBinary(data, binaryType, callback);
      }
      if (typeof binaryType === 'function') {
        callback = binaryType;
        binaryType = null;
      }
      var packet;
      if (data === '') {
                SRTlib.send('], "end": "exports.decodePayload"},');

        return callback(err, 0, 1);
      }
      var length = '', n, msg;
      for (var i = 0, l = data.length; i < l; i++) {
        var chr = data.charAt(i);
        if (chr !== ':') {
          length += chr;
          continue;
        }
        if (length === '' || length != (n = Number(length))) {
                    SRTlib.send('], "end": "exports.decodePayload"},');

          return callback(err, 0, 1);
        }
        msg = data.substr(i + 1, n);
        if (length != msg.length) {
                    SRTlib.send('], "end": "exports.decodePayload"},');

          return callback(err, 0, 1);
        }
        if (msg.length) {
          packet = exports.decodePacket(msg, binaryType, false);
          if (err.type === packet.type && err.data === packet.data) {
                        SRTlib.send('], "end": "exports.decodePayload"},');

            return callback(err, 0, 1);
          }
          var ret = callback(packet, i + n, l);
          if (false === ret) {
                        SRTlib.send('], "end": "exports.decodePayload"},');

            return;
          }
        }
        i += n;
        length = '';
      }
      if (length !== '') {
                SRTlib.send('], "end": "exports.decodePayload"},');

        return callback(err, 0, 1);
      }
            SRTlib.send('], "end": "exports.decodePayload"},');

    };
    exports.encodePayloadAsArrayBuffer = function (packets, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encodePayloadAsArrayBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!packets.length) {
                SRTlib.send('], "end": "exports.encodePayloadAsArrayBuffer"},');

        return callback(new ArrayBuffer(0));
      }
      function encodeOne(packet, doneCallback) {
                SRTlib.send(`{ "anonymous": false, "function": "encodeOne", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        exports.encodePacket(packet, true, true, function (data) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey116", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "emptyKey116"},');

          return doneCallback(null, data);
                    SRTlib.send('], "end": "emptyKey116"},');

        });
                SRTlib.send('], "end": "encodeOne"},');

      }
      map(packets, encodeOne, function (err, encodedPackets) {
                SRTlib.send(`{ "anonymous": true, "function": "exports.encodePayloadAsArrayBuffer.map2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var totalLength = encodedPackets.reduce(function (acc, p) {
                    SRTlib.send(`{ "anonymous": true, "function": "exports.encodePayloadAsArrayBuffer.map.totalLength", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var len;
          if (typeof p === 'string') {
            len = p.length;
          } else {
            len = p.byteLength;
          }
                    SRTlib.send('], "end": "exports.encodePayloadAsArrayBuffer.map.totalLength"},');

          return acc + len.toString().length + len + 2;
                    SRTlib.send('], "end": "exports.encodePayloadAsArrayBuffer.map.totalLength"},');

        }, 0);
        var resultArray = new Uint8Array(totalLength);
        var bufferIndex = 0;
        encodedPackets.forEach(function (p) {
                    SRTlib.send(`{ "anonymous": true, "function": "exports.encodePayloadAsArrayBuffer.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var isString = typeof p === 'string';
          var ab = p;
          if (isString) {
            var view = new Uint8Array(p.length);
            for (var i = 0; i < p.length; i++) {
              view[i] = p.charCodeAt(i);
            }
            ab = view.buffer;
          }
          if (isString) {
            resultArray[bufferIndex++] = 0;
          } else {
            resultArray[bufferIndex++] = 1;
          }
          var lenStr = ab.byteLength.toString();
          for (var i = 0; i < lenStr.length; i++) {
            resultArray[bufferIndex++] = parseInt(lenStr[i]);
          }
          resultArray[bufferIndex++] = 255;
          var view = new Uint8Array(ab);
          for (var i = 0; i < view.length; i++) {
            resultArray[bufferIndex++] = view[i];
          }
                    SRTlib.send('], "end": "exports.encodePayloadAsArrayBuffer.map"},');

        });
                SRTlib.send('], "end": "exports.encodePayloadAsArrayBuffer.map2"},');

        return callback(resultArray.buffer);
                SRTlib.send('], "end": "exports.encodePayloadAsArrayBuffer.map2"},');

      });
            SRTlib.send('], "end": "exports.encodePayloadAsArrayBuffer"},');

    };
    exports.encodePayloadAsBlob = function (packets, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encodePayloadAsBlob", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      function encodeOne(packet, doneCallback) {
                SRTlib.send(`{ "anonymous": false, "function": "encodeOne", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        exports.encodePacket(packet, true, true, function (encoded) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey117", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var binaryIdentifier = new Uint8Array(1);
          binaryIdentifier[0] = 1;
          if (typeof encoded === 'string') {
            var view = new Uint8Array(encoded.length);
            for (var i = 0; i < encoded.length; i++) {
              view[i] = encoded.charCodeAt(i);
            }
            encoded = view.buffer;
            binaryIdentifier[0] = 0;
          }
          var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;
          var lenStr = len.toString();
          var lengthAry = new Uint8Array(lenStr.length + 1);
          for (var i = 0; i < lenStr.length; i++) {
            lengthAry[i] = parseInt(lenStr[i]);
          }
          lengthAry[lenStr.length] = 255;
          if (Blob) {
            var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
            doneCallback(null, blob);
          }
                    SRTlib.send('], "end": "emptyKey117"},');

        });
                SRTlib.send('], "end": "encodeOne"},');

      }
      map(packets, encodeOne, function (err, results) {
                SRTlib.send(`{ "anonymous": true, "function": "exports.encodePayloadAsBlob.map", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "exports.encodePayloadAsBlob.map"},');

        return callback(new Blob(results));
                SRTlib.send('], "end": "exports.encodePayloadAsBlob.map"},');

      });
            SRTlib.send('], "end": "exports.encodePayloadAsBlob"},');

    };
    exports.decodePayloadAsBinary = function (data, binaryType, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.decodePayloadAsBinary2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof binaryType === 'function') {
        callback = binaryType;
        binaryType = null;
      }
      var bufferTail = data;
      var buffers = [];
      while (bufferTail.byteLength > 0) {
        var tailArray = new Uint8Array(bufferTail);
        var isString = tailArray[0] === 0;
        var msgLength = '';
        for (var i = 1; ; i++) {
          if (tailArray[i] === 255) break;
          if (msgLength.length > 310) {
                        SRTlib.send('], "end": "exports.decodePayloadAsBinary2"},');

            return callback(err, 0, 1);
          }
          msgLength += tailArray[i];
        }
        bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
        msgLength = parseInt(msgLength);
        var msg = sliceBuffer(bufferTail, 0, msgLength);
        if (isString) {
          try {
            msg = String.fromCharCode.apply(null, new Uint8Array(msg));
          } catch (e) {
            var typed = new Uint8Array(msg);
            msg = '';
            for (var i = 0; i < typed.length; i++) {
              msg += String.fromCharCode(typed[i]);
            }
          }
        }
        buffers.push(msg);
        bufferTail = sliceBuffer(bufferTail, msgLength);
      }
      var total = buffers.length;
      buffers.forEach(function (buffer, i) {
                SRTlib.send(`{ "anonymous": true, "function": "exports.decodePayloadAsBinary", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        callback(exports.decodePacket(buffer, binaryType, true), i, total);
                SRTlib.send('], "end": "exports.decodePayloadAsBinary"},');

      });
            SRTlib.send('], "end": "exports.decodePayloadAsBinary2"},');

    };
        SRTlib.send('], "end": "emptyKey118"},');

  }, {
    "./keys": 108,
    "./utf8": 109,
    "after": 1,
    "arraybuffer.slice": 2,
    "base64-arraybuffer": 18,
    "blob": 20,
    "has-binary2": 114
  }],
  108: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey119", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = Object.keys || (function keys(obj) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.keys", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var arr = [];
      var has = Object.prototype.hasOwnProperty;
      for (var i in obj) {
        if (has.call(obj, i)) {
          arr.push(i);
        }
      }
            SRTlib.send('], "end": "module.exports.keys"},');

      return arr;
            SRTlib.send('], "end": "module.exports.keys"},');

    });
        SRTlib.send('], "end": "emptyKey119"},');

  }, {}],
  109: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey120", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var stringFromCharCode = String.fromCharCode;
    function ucs2decode(string) {
            SRTlib.send(`{ "anonymous": false, "function": "ucs2decode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var output = [];
      var counter = 0;
      var length = string.length;
      var value;
      var extra;
      while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          extra = string.charCodeAt(counter++);
          if ((extra & 0xFC00) == 0xDC00) {
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
            SRTlib.send('], "end": "ucs2decode"},');

      return output;
            SRTlib.send('], "end": "ucs2decode"},');

    }
    function ucs2encode(array) {
            SRTlib.send(`{ "anonymous": false, "function": "ucs2encode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var length = array.length;
      var index = -1;
      var value;
      var output = '';
      while (++index < length) {
        value = array[index];
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += stringFromCharCode(value);
      }
            SRTlib.send('], "end": "ucs2encode"},');

      return output;
            SRTlib.send('], "end": "ucs2encode"},');

    }
    function checkScalarValue(codePoint, strict) {
            SRTlib.send(`{ "anonymous": false, "function": "checkScalarValue", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
        if (strict) {
                    SRTlib.send('], "end": "checkScalarValue"},');

          throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
        }
                SRTlib.send('], "end": "checkScalarValue"},');

        return false;
      }
            SRTlib.send('], "end": "checkScalarValue"},');

      return true;
            SRTlib.send('], "end": "checkScalarValue"},');

    }
    function createByte(codePoint, shift) {
            SRTlib.send(`{ "anonymous": false, "function": "createByte", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "createByte"},');

      return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
            SRTlib.send('], "end": "createByte"},');

    }
    function encodeCodePoint(codePoint, strict) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeCodePoint", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if ((codePoint & 0xFFFFFF80) == 0) {
                SRTlib.send('], "end": "encodeCodePoint"},');

        return stringFromCharCode(codePoint);
      }
      var symbol = '';
      if ((codePoint & 0xFFFFF800) == 0) {
        symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
      } else if ((codePoint & 0xFFFF0000) == 0) {
        if (!checkScalarValue(codePoint, strict)) {
          codePoint = 0xFFFD;
        }
        symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
        symbol += createByte(codePoint, 6);
      } else if ((codePoint & 0xFFE00000) == 0) {
        symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
        symbol += createByte(codePoint, 12);
        symbol += createByte(codePoint, 6);
      }
      symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
            SRTlib.send('], "end": "encodeCodePoint"},');

      return symbol;
            SRTlib.send('], "end": "encodeCodePoint"},');

    }
    function utf8encode(string, opts) {
            SRTlib.send(`{ "anonymous": false, "function": "utf8encode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      opts = opts || ({});
      var strict = false !== opts.strict;
      var codePoints = ucs2decode(string);
      var length = codePoints.length;
      var index = -1;
      var codePoint;
      var byteString = '';
      while (++index < length) {
        codePoint = codePoints[index];
        byteString += encodeCodePoint(codePoint, strict);
      }
            SRTlib.send('], "end": "utf8encode"},');

      return byteString;
            SRTlib.send('], "end": "utf8encode"},');

    }
    function readContinuationByte() {
            SRTlib.send(`{ "anonymous": false, "function": "readContinuationByte", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (byteIndex >= byteCount) {
                SRTlib.send('], "end": "readContinuationByte"},');

        throw Error('Invalid byte index');
      }
      var continuationByte = byteArray[byteIndex] & 0xFF;
      byteIndex++;
      if ((continuationByte & 0xC0) == 0x80) {
                SRTlib.send('], "end": "readContinuationByte"},');

        return continuationByte & 0x3F;
      }
            SRTlib.send('], "end": "readContinuationByte"},');

      throw Error('Invalid continuation byte');
            SRTlib.send('], "end": "readContinuationByte"},');

    }
    function decodeSymbol(strict) {
            SRTlib.send(`{ "anonymous": false, "function": "decodeSymbol", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var byte1;
      var byte2;
      var byte3;
      var byte4;
      var codePoint;
      if (byteIndex > byteCount) {
                SRTlib.send('], "end": "decodeSymbol"},');

        throw Error('Invalid byte index');
      }
      if (byteIndex == byteCount) {
                SRTlib.send('], "end": "decodeSymbol"},');

        return false;
      }
      byte1 = byteArray[byteIndex] & 0xFF;
      byteIndex++;
      if ((byte1 & 0x80) == 0) {
                SRTlib.send('], "end": "decodeSymbol"},');

        return byte1;
      }
      if ((byte1 & 0xE0) == 0xC0) {
        byte2 = readContinuationByte();
        codePoint = (byte1 & 0x1F) << 6 | byte2;
        if (codePoint >= 0x80) {
                    SRTlib.send('], "end": "decodeSymbol"},');

          return codePoint;
        } else {
                    SRTlib.send('], "end": "decodeSymbol"},');

          throw Error('Invalid continuation byte');
        }
      }
      if ((byte1 & 0xF0) == 0xE0) {
        byte2 = readContinuationByte();
        byte3 = readContinuationByte();
        codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;
        if (codePoint >= 0x0800) {
                    SRTlib.send('], "end": "decodeSymbol"},');

          return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
        } else {
                    SRTlib.send('], "end": "decodeSymbol"},');

          throw Error('Invalid continuation byte');
        }
      }
      if ((byte1 & 0xF8) == 0xF0) {
        byte2 = readContinuationByte();
        byte3 = readContinuationByte();
        byte4 = readContinuationByte();
        codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;
        if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
                    SRTlib.send('], "end": "decodeSymbol"},');

          return codePoint;
        }
      }
            SRTlib.send('], "end": "decodeSymbol"},');

      throw Error('Invalid UTF-8 detected');
            SRTlib.send('], "end": "decodeSymbol"},');

    }
    var byteArray;
    var byteCount;
    var byteIndex;
    function utf8decode(byteString, opts) {
            SRTlib.send(`{ "anonymous": false, "function": "utf8decode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      opts = opts || ({});
      var strict = false !== opts.strict;
      byteArray = ucs2decode(byteString);
      byteCount = byteArray.length;
      byteIndex = 0;
      var codePoints = [];
      var tmp;
      while ((tmp = decodeSymbol(strict)) !== false) {
        codePoints.push(tmp);
      }
            SRTlib.send('], "end": "utf8decode"},');

      return ucs2encode(codePoints);
            SRTlib.send('], "end": "utf8decode"},');

    }
    module.exports = {
      version: '2.1.2',
      encode: utf8encode,
      decode: utf8decode
    };
        SRTlib.send('], "end": "emptyKey120"},');

  }, {}],
  110: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey121", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    module.exports = require('./').polyfill();
        SRTlib.send('], "end": "emptyKey121"},');

  }, {
    "./": 111
  }],
  111: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey122", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process, global) {
            SRTlib.send(`{ "anonymous": true, "function": "call16", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      (function (global, factory) {
                SRTlib.send(`{ "anonymous": true, "function": "call14", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.ES6Promise = factory();
                SRTlib.send('], "end": "call14"},');

      })(this, function () {
                SRTlib.send(`{ "anonymous": true, "function": "call15", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        'use strict';
        function objectOrFunction(x) {
                    SRTlib.send(`{ "anonymous": false, "function": "objectOrFunction", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var type = typeof x;
                    SRTlib.send('], "end": "objectOrFunction"},');

          return x !== null && (type === 'object' || type === 'function');
                    SRTlib.send('], "end": "objectOrFunction"},');

        }
        function isFunction(x) {
                    SRTlib.send(`{ "anonymous": false, "function": "isFunction", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "isFunction"},');

          return typeof x === 'function';
                    SRTlib.send('], "end": "isFunction"},');

        }
        var _isArray = void 0;
        if (Array.isArray) {
          _isArray = Array.isArray;
        } else {
          _isArray = function (x) {
                        SRTlib.send(`{ "anonymous": true, "function": "call._isArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call._isArray"},');

            return Object.prototype.toString.call(x) === '[object Array]';
                        SRTlib.send('], "end": "call._isArray"},');

          };
        }
        var isArray = _isArray;
        var len = 0;
        var vertxNext = void 0;
        var customSchedulerFn = void 0;
        var asap = function asap(callback, arg) {
                    SRTlib.send(`{ "anonymous": false, "function": "asap", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          queue[len] = callback;
          queue[len + 1] = arg;
          len += 2;
          if (len === 2) {
            if (customSchedulerFn) {
              customSchedulerFn(flush);
            } else {
              scheduleFlush();
            }
          }
                    SRTlib.send('], "end": "asap"},');

        };
        function setScheduler(scheduleFn) {
                    SRTlib.send(`{ "anonymous": false, "function": "setScheduler", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          customSchedulerFn = scheduleFn;
                    SRTlib.send('], "end": "setScheduler"},');

        }
        function setAsap(asapFn) {
                    SRTlib.send(`{ "anonymous": false, "function": "setAsap", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          asap = asapFn;
                    SRTlib.send('], "end": "setAsap"},');

        }
        var browserWindow = typeof window !== 'undefined' ? window : undefined;
        var browserGlobal = browserWindow || ({});
        var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
        var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
        var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
        function useNextTick() {
                    SRTlib.send(`{ "anonymous": false, "function": "useNextTick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "useNextTick"},');

          return function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "ReturnStatement2"},');

            return process.nextTick(flush);
                        SRTlib.send('], "end": "ReturnStatement2"},');

          };
                    SRTlib.send('], "end": "useNextTick"},');

        }
        function useVertxTimer() {
                    SRTlib.send(`{ "anonymous": false, "function": "useVertxTimer", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (typeof vertxNext !== 'undefined') {
                        SRTlib.send('], "end": "useVertxTimer"},');

            return function () {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              vertxNext(flush);
                            SRTlib.send('], "end": "ReturnStatement3"},');

            };
          }
                    SRTlib.send('], "end": "useVertxTimer"},');

          return useSetTimeout();
                    SRTlib.send('], "end": "useVertxTimer"},');

        }
        function useMutationObserver() {
                    SRTlib.send(`{ "anonymous": false, "function": "useMutationObserver", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var iterations = 0;
          var observer = new BrowserMutationObserver(flush);
          var node = document.createTextNode('');
          observer.observe(node, {
            characterData: true
          });
                    SRTlib.send('], "end": "useMutationObserver"},');

          return function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            node.data = iterations = ++iterations % 2;
                        SRTlib.send('], "end": "ReturnStatement4"},');

          };
                    SRTlib.send('], "end": "useMutationObserver"},');

        }
        function useMessageChannel() {
                    SRTlib.send(`{ "anonymous": false, "function": "useMessageChannel", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var channel = new MessageChannel();
          channel.port1.onmessage = flush;
                    SRTlib.send('], "end": "useMessageChannel"},');

          return function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "ReturnStatement5"},');

            return channel.port2.postMessage(0);
                        SRTlib.send('], "end": "ReturnStatement5"},');

          };
                    SRTlib.send('], "end": "useMessageChannel"},');

        }
        function useSetTimeout() {
                    SRTlib.send(`{ "anonymous": false, "function": "useSetTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var globalSetTimeout = setTimeout;
                    SRTlib.send('], "end": "useSetTimeout"},');

          return function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "ReturnStatement6"},');

            return globalSetTimeout(flush, 1);
                        SRTlib.send('], "end": "ReturnStatement6"},');

          };
                    SRTlib.send('], "end": "useSetTimeout"},');

        }
        var queue = new Array(1000);
        function flush() {
                    SRTlib.send(`{ "anonymous": false, "function": "flush", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          for (var i = 0; i < len; i += 2) {
            var callback = queue[i];
            var arg = queue[i + 1];
            callback(arg);
            queue[i] = undefined;
            queue[i + 1] = undefined;
          }
          len = 0;
                    SRTlib.send('], "end": "flush"},');

        }
        function attemptVertx() {
                    SRTlib.send(`{ "anonymous": false, "function": "attemptVertx", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          try {
            var vertx = Function('return this')().require('vertx');
            vertxNext = vertx.runOnLoop || vertx.runOnContext;
                        SRTlib.send('], "end": "attemptVertx"},');

            return useVertxTimer();
          } catch (e) {
                        SRTlib.send('], "end": "attemptVertx"},');

            return useSetTimeout();
          }
                    SRTlib.send('], "end": "attemptVertx"},');

        }
        var scheduleFlush = void 0;
        if (isNode) {
          scheduleFlush = useNextTick();
        } else if (BrowserMutationObserver) {
          scheduleFlush = useMutationObserver();
        } else if (isWorker) {
          scheduleFlush = useMessageChannel();
        } else if (browserWindow === undefined && typeof require === 'function') {
          scheduleFlush = attemptVertx();
        } else {
          scheduleFlush = useSetTimeout();
        }
        function then(onFulfillment, onRejection) {
                    SRTlib.send(`{ "anonymous": false, "function": "then", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var parent = this;
          var child = new this.constructor(noop);
          if (child[PROMISE_ID] === undefined) {
            makePromise(child);
          }
          var _state = parent._state;
          if (_state) {
            var callback = arguments[_state - 1];
            asap(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "asap", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "asap"},');

              return invokeCallback(_state, child, callback, parent._result);
                            SRTlib.send('], "end": "asap"},');

            });
          } else {
            subscribe(parent, child, onFulfillment, onRejection);
          }
                    SRTlib.send('], "end": "then"},');

          return child;
                    SRTlib.send('], "end": "then"},');

        }
        function resolve$1(object) {
                    SRTlib.send(`{ "anonymous": false, "function": "resolve$1", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var Constructor = this;
          if (object && typeof object === 'object' && object.constructor === Constructor) {
                        SRTlib.send('], "end": "resolve$1"},');

            return object;
          }
          var promise = new Constructor(noop);
          resolve(promise, object);
                    SRTlib.send('], "end": "resolve$1"},');

          return promise;
                    SRTlib.send('], "end": "resolve$1"},');

        }
        var PROMISE_ID = Math.random().toString(36).substring(2);
        function noop() {
                    SRTlib.send(`{ "anonymous": false, "function": "noop", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "noop"},');

        }
        var PENDING = void 0;
        var FULFILLED = 1;
        var REJECTED = 2;
        function selfFulfillment() {
                    SRTlib.send(`{ "anonymous": false, "function": "selfFulfillment", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "selfFulfillment"},');

          return new TypeError("You cannot resolve a promise with itself");
                    SRTlib.send('], "end": "selfFulfillment"},');

        }
        function cannotReturnOwn() {
                    SRTlib.send(`{ "anonymous": false, "function": "cannotReturnOwn", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "cannotReturnOwn"},');

          return new TypeError('A promises callback cannot return that same promise.');
                    SRTlib.send('], "end": "cannotReturnOwn"},');

        }
        function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
                    SRTlib.send(`{ "anonymous": false, "function": "tryThen", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

          try {
            then$$1.call(value, fulfillmentHandler, rejectionHandler);
          } catch (e) {
                        SRTlib.send('], "end": "tryThen"},');

            return e;
          }
                    SRTlib.send('], "end": "tryThen"},');

        }
        function handleForeignThenable(promise, thenable, then$$1) {
                    SRTlib.send(`{ "anonymous": false, "function": "handleForeignThenable", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          asap(function (promise) {
                        SRTlib.send(`{ "anonymous": true, "function": "asap2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var sealed = false;
            var error = tryThen(then$$1, thenable, function (value) {
                            SRTlib.send(`{ "anonymous": true, "function": "asap.error.tryThen", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (sealed) {
                                SRTlib.send('], "end": "asap.error.tryThen"},');

                return;
              }
              sealed = true;
              if (thenable !== value) {
                resolve(promise, value);
              } else {
                fulfill(promise, value);
              }
                            SRTlib.send('], "end": "asap.error.tryThen"},');

            }, function (reason) {
                            SRTlib.send(`{ "anonymous": true, "function": "asap.error.tryThen2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (sealed) {
                                SRTlib.send('], "end": "asap.error.tryThen2"},');

                return;
              }
              sealed = true;
              reject(promise, reason);
                            SRTlib.send('], "end": "asap.error.tryThen2"},');

            }, 'Settle: ' + (promise._label || ' unknown promise'));
            if (!sealed && error) {
              sealed = true;
              reject(promise, error);
            }
                        SRTlib.send('], "end": "asap2"},');

          }, promise);
                    SRTlib.send('], "end": "handleForeignThenable"},');

        }
        function handleOwnThenable(promise, thenable) {
                    SRTlib.send(`{ "anonymous": false, "function": "handleOwnThenable", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (thenable._state === FULFILLED) {
            fulfill(promise, thenable._result);
          } else if (thenable._state === REJECTED) {
            reject(promise, thenable._result);
          } else {
            subscribe(thenable, undefined, function (value) {
                            SRTlib.send(`{ "anonymous": true, "function": "subscribe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "subscribe"},');

              return resolve(promise, value);
                            SRTlib.send('], "end": "subscribe"},');

            }, function (reason) {
                            SRTlib.send(`{ "anonymous": true, "function": "subscribe2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "subscribe2"},');

              return reject(promise, reason);
                            SRTlib.send('], "end": "subscribe2"},');

            });
          }
                    SRTlib.send('], "end": "handleOwnThenable"},');

        }
        function handleMaybeThenable(promise, maybeThenable, then$$1) {
                    SRTlib.send(`{ "anonymous": false, "function": "handleMaybeThenable", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
            handleOwnThenable(promise, maybeThenable);
          } else {
            if (then$$1 === undefined) {
              fulfill(promise, maybeThenable);
            } else if (isFunction(then$$1)) {
              handleForeignThenable(promise, maybeThenable, then$$1);
            } else {
              fulfill(promise, maybeThenable);
            }
          }
                    SRTlib.send('], "end": "handleMaybeThenable"},');

        }
        function resolve(promise, value) {
                    SRTlib.send(`{ "anonymous": false, "function": "resolve", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (promise === value) {
            reject(promise, selfFulfillment());
          } else if (objectOrFunction(value)) {
            var then$$1 = void 0;
            try {
              then$$1 = value.then;
            } catch (error) {
              reject(promise, error);
                            SRTlib.send('], "end": "resolve"},');

              return;
            }
            handleMaybeThenable(promise, value, then$$1);
          } else {
            fulfill(promise, value);
          }
                    SRTlib.send('], "end": "resolve"},');

        }
        function publishRejection(promise) {
                    SRTlib.send(`{ "anonymous": false, "function": "publishRejection", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (promise._onerror) {
            promise._onerror(promise._result);
          }
          publish(promise);
                    SRTlib.send('], "end": "publishRejection"},');

        }
        function fulfill(promise, value) {
                    SRTlib.send(`{ "anonymous": false, "function": "fulfill", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (promise._state !== PENDING) {
                        SRTlib.send('], "end": "fulfill"},');

            return;
          }
          promise._result = value;
          promise._state = FULFILLED;
          if (promise._subscribers.length !== 0) {
            asap(publish, promise);
          }
                    SRTlib.send('], "end": "fulfill"},');

        }
        function reject(promise, reason) {
                    SRTlib.send(`{ "anonymous": false, "function": "reject", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (promise._state !== PENDING) {
                        SRTlib.send('], "end": "reject"},');

            return;
          }
          promise._state = REJECTED;
          promise._result = reason;
          asap(publishRejection, promise);
                    SRTlib.send('], "end": "reject"},');

        }
        function subscribe(parent, child, onFulfillment, onRejection) {
                    SRTlib.send(`{ "anonymous": false, "function": "subscribe", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

          var _subscribers = parent._subscribers;
          var length = _subscribers.length;
          parent._onerror = null;
          _subscribers[length] = child;
          _subscribers[length + FULFILLED] = onFulfillment;
          _subscribers[length + REJECTED] = onRejection;
          if (length === 0 && parent._state) {
            asap(publish, parent);
          }
                    SRTlib.send('], "end": "subscribe"},');

        }
        function publish(promise) {
                    SRTlib.send(`{ "anonymous": false, "function": "publish", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var subscribers = promise._subscribers;
          var settled = promise._state;
          if (subscribers.length === 0) {
                        SRTlib.send('], "end": "publish"},');

            return;
          }
          var child = void 0, callback = void 0, detail = promise._result;
          for (var i = 0; i < subscribers.length; i += 3) {
            child = subscribers[i];
            callback = subscribers[i + settled];
            if (child) {
              invokeCallback(settled, child, callback, detail);
            } else {
              callback(detail);
            }
          }
          promise._subscribers.length = 0;
                    SRTlib.send('], "end": "publish"},');

        }
        function invokeCallback(settled, promise, callback, detail) {
                    SRTlib.send(`{ "anonymous": false, "function": "invokeCallback", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

          var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;
          if (hasCallback) {
            try {
              value = callback(detail);
            } catch (e) {
              succeeded = false;
              error = e;
            }
            if (promise === value) {
              reject(promise, cannotReturnOwn());
                            SRTlib.send('], "end": "invokeCallback"},');

              return;
            }
          } else {
            value = detail;
          }
          if (promise._state !== PENDING) {} else if (hasCallback && succeeded) {
            resolve(promise, value);
          } else if (succeeded === false) {
            reject(promise, error);
          } else if (settled === FULFILLED) {
            fulfill(promise, value);
          } else if (settled === REJECTED) {
            reject(promise, value);
          }
                    SRTlib.send('], "end": "invokeCallback"},');

        }
        function initializePromise(promise, resolver) {
                    SRTlib.send(`{ "anonymous": false, "function": "initializePromise", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          try {
            resolver(function resolvePromise(value) {
                            SRTlib.send(`{ "anonymous": true, "function": "resolver.resolvePromise", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              resolve(promise, value);
                            SRTlib.send('], "end": "resolver.resolvePromise"},');

            }, function rejectPromise(reason) {
                            SRTlib.send(`{ "anonymous": true, "function": "resolver.rejectPromise", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              reject(promise, reason);
                            SRTlib.send('], "end": "resolver.rejectPromise"},');

            });
          } catch (e) {
            reject(promise, e);
          }
                    SRTlib.send('], "end": "initializePromise"},');

        }
        var id = 0;
        function nextId() {
                    SRTlib.send(`{ "anonymous": false, "function": "nextId", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "nextId"},');

          return id++;
                    SRTlib.send('], "end": "nextId"},');

        }
        function makePromise(promise) {
                    SRTlib.send(`{ "anonymous": false, "function": "makePromise", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          promise[PROMISE_ID] = id++;
          promise._state = undefined;
          promise._result = undefined;
          promise._subscribers = [];
                    SRTlib.send('], "end": "makePromise"},');

        }
        function validationError() {
                    SRTlib.send(`{ "anonymous": false, "function": "validationError", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "validationError"},');

          return new Error('Array Methods must be provided an Array');
                    SRTlib.send('], "end": "validationError"},');

        }
        var Enumerator = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Enumerator", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function Enumerator(Constructor, input) {
                        SRTlib.send(`{ "anonymous": false, "function": "Enumerator", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            this._instanceConstructor = Constructor;
            this.promise = new Constructor(noop);
            if (!this.promise[PROMISE_ID]) {
              makePromise(this.promise);
            }
            if (isArray(input)) {
              this.length = input.length;
              this._remaining = input.length;
              this._result = new Array(this.length);
              if (this.length === 0) {
                fulfill(this.promise, this._result);
              } else {
                this.length = this.length || 0;
                this._enumerate(input);
                if (this._remaining === 0) {
                  fulfill(this.promise, this._result);
                }
              }
            } else {
              reject(this.promise, validationError());
            }
                        SRTlib.send('], "end": "Enumerator"},');

          }
          Enumerator.prototype._enumerate = function _enumerate(input) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Enumerator.Enumerator.prototype._enumerate._enumerate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            for (var i = 0; this._state === PENDING && i < input.length; i++) {
              this._eachEntry(input[i], i);
            }
                        SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._enumerate._enumerate"},');

          };
          Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Enumerator.Enumerator.prototype._eachEntry._eachEntry", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var c = this._instanceConstructor;
            var resolve$$1 = c.resolve;
            if (resolve$$1 === resolve$1) {
              var _then = void 0;
              var error = void 0;
              var didError = false;
              try {
                _then = entry.then;
              } catch (e) {
                didError = true;
                error = e;
              }
              if (_then === then && entry._state !== PENDING) {
                this._settledAt(entry._state, i, entry._result);
              } else if (typeof _then !== 'function') {
                this._remaining--;
                this._result[i] = entry;
              } else if (c === Promise$1) {
                var promise = new c(noop);
                if (didError) {
                  reject(promise, error);
                } else {
                  handleMaybeThenable(promise, entry, _then);
                }
                this._willSettleAt(promise, i);
              } else {
                this._willSettleAt(new c(function (resolve$$1) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.Enumerator.Enumerator.prototype._eachEntry._eachEntry._willSettleAt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                    SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._eachEntry._eachEntry._willSettleAt"},');

                  return resolve$$1(entry);
                                    SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._eachEntry._eachEntry._willSettleAt"},');

                }), i);
              }
            } else {
              this._willSettleAt(resolve$$1(entry), i);
            }
                        SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._eachEntry._eachEntry"},');

          };
          Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Enumerator.Enumerator.prototype._settledAt._settledAt", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            var promise = this.promise;
            if (promise._state === PENDING) {
              this._remaining--;
              if (state === REJECTED) {
                reject(promise, value);
              } else {
                this._result[i] = value;
              }
            }
            if (this._remaining === 0) {
              fulfill(promise, this._result);
            }
                        SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._settledAt._settledAt"},');

          };
          Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Enumerator.Enumerator.prototype._willSettleAt._willSettleAt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var enumerator = this;
            subscribe(promise, undefined, function (value) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Enumerator.Enumerator.prototype._willSettleAt._willSettleAt.subscribe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._willSettleAt._willSettleAt.subscribe"},');

              return enumerator._settledAt(FULFILLED, i, value);
                            SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._willSettleAt._willSettleAt.subscribe"},');

            }, function (reason) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Enumerator.Enumerator.prototype._willSettleAt._willSettleAt.subscribe2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._willSettleAt._willSettleAt.subscribe2"},');

              return enumerator._settledAt(REJECTED, i, reason);
                            SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._willSettleAt._willSettleAt.subscribe2"},');

            });
                        SRTlib.send('], "end": "call.Enumerator.Enumerator.prototype._willSettleAt._willSettleAt"},');

          };
                    SRTlib.send('], "end": "call.Enumerator"},');

          return Enumerator;
                    SRTlib.send('], "end": "call.Enumerator"},');

        })();
        function all(entries) {
                    SRTlib.send(`{ "anonymous": false, "function": "all", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "all"},');

          return new Enumerator(this, entries).promise;
                    SRTlib.send('], "end": "all"},');

        }
        function race(entries) {
                    SRTlib.send(`{ "anonymous": false, "function": "race", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var Constructor = this;
          if (!isArray(entries)) {
                        SRTlib.send('], "end": "race"},');

            return new Constructor(function (_, reject) {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "ReturnStatement7"},');

              return reject(new TypeError('You must pass an array to race.'));
                            SRTlib.send('], "end": "ReturnStatement7"},');

            });
          } else {
                        SRTlib.send('], "end": "race"},');

            return new Constructor(function (resolve, reject) {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement8", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var length = entries.length;
              for (var i = 0; i < length; i++) {
                Constructor.resolve(entries[i]).then(resolve, reject);
              }
                            SRTlib.send('], "end": "ReturnStatement8"},');

            });
          }
                    SRTlib.send('], "end": "race"},');

        }
        function reject$1(reason) {
                    SRTlib.send(`{ "anonymous": false, "function": "reject$1", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var Constructor = this;
          var promise = new Constructor(noop);
          reject(promise, reason);
                    SRTlib.send('], "end": "reject$1"},');

          return promise;
                    SRTlib.send('], "end": "reject$1"},');

        }
        function needsResolver() {
                    SRTlib.send(`{ "anonymous": false, "function": "needsResolver", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "needsResolver"},');

          throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
                    SRTlib.send('], "end": "needsResolver"},');

        }
        function needsNew() {
                    SRTlib.send(`{ "anonymous": false, "function": "needsNew", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "needsNew"},');

          throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                    SRTlib.send('], "end": "needsNew"},');

        }
        var Promise$1 = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Promise$1", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function Promise(resolver) {
                        SRTlib.send(`{ "anonymous": false, "function": "Promise", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            this[PROMISE_ID] = nextId();
            this._result = this._state = undefined;
            this._subscribers = [];
            if (noop !== resolver) {
              typeof resolver !== 'function' && needsResolver();
              this instanceof Promise ? initializePromise(this, resolver) : needsNew();
            }
                        SRTlib.send('], "end": "Promise"},');

          }
          Promise.prototype.catch = function _catch(onRejection) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Promise$1.Promise.prototype.catch._catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call.Promise$1.Promise.prototype.catch._catch"},');

            return this.then(null, onRejection);
                        SRTlib.send('], "end": "call.Promise$1.Promise.prototype.catch._catch"},');

          };
          Promise.prototype.finally = function _finally(callback) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Promise$1.Promise.prototype.finally._finally", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var promise = this;
            var constructor = promise.constructor;
            if (isFunction(callback)) {
                            SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally"},');

              return promise.then(function (value) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement"},');

                return constructor.resolve(callback()).then(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement.ReturnStatement.then"},');

                  return value;
                                    SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement.ReturnStatement.then"},');

                });
                                SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement"},');

              }, function (reason) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement2"},');

                return constructor.resolve(callback()).then(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement.ReturnStatement.then2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement.ReturnStatement.then2"},');

                  throw reason;
                                    SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement.ReturnStatement.then2"},');

                });
                                SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally.ReturnStatement2"},');

              });
            }
                        SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally"},');

            return promise.then(callback, callback);
                        SRTlib.send('], "end": "call.Promise$1.Promise.prototype.finally._finally"},');

          };
                    SRTlib.send('], "end": "call.Promise$1"},');

          return Promise;
                    SRTlib.send('], "end": "call.Promise$1"},');

        })();
        Promise$1.prototype.then = then;
        Promise$1.all = all;
        Promise$1.race = race;
        Promise$1.resolve = resolve$1;
        Promise$1.reject = reject$1;
        Promise$1._setScheduler = setScheduler;
        Promise$1._setAsap = setAsap;
        Promise$1._asap = asap;
        function polyfill() {
                    SRTlib.send(`{ "anonymous": false, "function": "polyfill", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var local = void 0;
          if (typeof global !== 'undefined') {
            local = global;
          } else if (typeof self !== 'undefined') {
            local = self;
          } else {
            try {
              local = Function('return this')();
            } catch (e) {
                            SRTlib.send('], "end": "polyfill"},');

              throw new Error('polyfill failed because global object is unavailable in this environment');
            }
          }
          var P = local.Promise;
          if (P) {
            var promiseToString = null;
            try {
              promiseToString = Object.prototype.toString.call(P.resolve());
            } catch (e) {}
            if (promiseToString === '[object Promise]' && !P.cast) {
                            SRTlib.send('], "end": "polyfill"},');

              return;
            }
          }
          local.Promise = Promise$1;
                    SRTlib.send('], "end": "polyfill"},');

        }
        Promise$1.polyfill = polyfill;
        Promise$1.Promise = Promise$1;
                SRTlib.send('], "end": "call15"},');

        return Promise$1;
                SRTlib.send('], "end": "call15"},');

      });
            SRTlib.send('], "end": "call16"},');

    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey122"},');

  }, {
    "_process": 162
  }],
  112: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey123", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Buffer = require('safe-buffer').Buffer;
    var MD5 = require('md5.js');
    function EVP_BytesToKey(password, salt, keyBits, ivLen) {
            SRTlib.send(`{ "anonymous": false, "function": "EVP_BytesToKey", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');
      if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
        if (salt.length !== 8) {
                    SRTlib.send('], "end": "EVP_BytesToKey"},');

          throw new RangeError('salt should be Buffer with 8 byte length');
        }
      }
      var keyLen = keyBits / 8;
      var key = Buffer.alloc(keyLen);
      var iv = Buffer.alloc(ivLen || 0);
      var tmp = Buffer.alloc(0);
      while (keyLen > 0 || ivLen > 0) {
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
          var keyStart = key.length - keyLen;
          used = Math.min(keyLen, tmp.length);
          tmp.copy(key, keyStart, 0, used);
          keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen;
          var length = Math.min(ivLen, tmp.length - used);
          tmp.copy(iv, ivStart, used, used + length);
          ivLen -= length;
        }
      }
      tmp.fill(0);
            SRTlib.send('], "end": "EVP_BytesToKey"},');

      return {
        key: key,
        iv: iv
      };
            SRTlib.send('], "end": "EVP_BytesToKey"},');

    }
    module.exports = EVP_BytesToKey;
        SRTlib.send('], "end": "emptyKey123"},');

  }, {
    "md5.js": 140,
    "safe-buffer": 190
  }],
  113: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey124", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray(arr) {
            SRTlib.send(`{ "anonymous": false, "function": "isArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof Array.isArray === 'function') {
                SRTlib.send('], "end": "isArray"},');

        return Array.isArray(arr);
      }
            SRTlib.send('], "end": "isArray"},');

      return toStr.call(arr) === '[object Array]';
            SRTlib.send('], "end": "isArray"},');

    };
    var isPlainObject = function isPlainObject(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "isPlainObject", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!obj || toStr.call(obj) !== '[object Object]') {
                SRTlib.send('], "end": "isPlainObject"},');

        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, 'constructor');
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
                SRTlib.send('], "end": "isPlainObject"},');

        return false;
      }
      var key;
      for (key in obj) {}
            SRTlib.send('], "end": "isPlainObject"},');

      return typeof key === 'undefined' || hasOwn.call(obj, key);
            SRTlib.send('], "end": "isPlainObject"},');

    };
    var setProperty = function setProperty(target, options) {
            SRTlib.send(`{ "anonymous": false, "function": "setProperty", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (defineProperty && options.name === '__proto__') {
        defineProperty(target, options.name, {
          enumerable: true,
          configurable: true,
          value: options.newValue,
          writable: true
        });
      } else {
        target[options.name] = options.newValue;
      }
            SRTlib.send('], "end": "setProperty"},');

    };
    var getProperty = function getProperty(obj, name) {
            SRTlib.send(`{ "anonymous": false, "function": "getProperty", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (name === '__proto__') {
        if (!hasOwn.call(obj, name)) {
                    SRTlib.send('], "end": "getProperty"},');

          return void 0;
        } else if (gOPD) {
                    SRTlib.send('], "end": "getProperty"},');

          return gOPD(obj, name).value;
        }
      }
            SRTlib.send('], "end": "getProperty"},');

      return obj[name];
            SRTlib.send('], "end": "getProperty"},');

    };
    module.exports = function extend() {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.extend", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var options, name, src, copy, copyIsArray, clone;
      var target = arguments[0];
      var i = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || ({});
        i = 2;
      }
      if (target == null || typeof target !== 'object' && typeof target !== 'function') {
        target = {};
      }
      for (; i < length; ++i) {
        options = arguments[i];
        if (options != null) {
          for (name in options) {
            src = getProperty(target, name);
            copy = getProperty(options, name);
            if (target !== copy) {
              if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : [];
                } else {
                  clone = src && isPlainObject(src) ? src : {};
                }
                setProperty(target, {
                  name: name,
                  newValue: extend(deep, clone, copy)
                });
              } else if (typeof copy !== 'undefined') {
                setProperty(target, {
                  name: name,
                  newValue: copy
                });
              }
            }
          }
        }
      }
            SRTlib.send('], "end": "module.exports.extend"},');

      return target;
            SRTlib.send('], "end": "module.exports.extend"},');

    };
        SRTlib.send('], "end": "emptyKey124"},');

  }, {}],
  114: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey125", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call17", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var isArray = require('isarray');
      var toString = Object.prototype.toString;
      var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
      var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
      module.exports = hasBinary;
      function hasBinary(obj) {
                SRTlib.send(`{ "anonymous": false, "function": "hasBinary", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!obj || typeof obj !== 'object') {
                    SRTlib.send('], "end": "hasBinary"},');

          return false;
        }
        if (isArray(obj)) {
          for (var i = 0, l = obj.length; i < l; i++) {
            if (hasBinary(obj[i])) {
                            SRTlib.send('], "end": "hasBinary"},');

              return true;
            }
          }
                    SRTlib.send('], "end": "hasBinary"},');

          return false;
        }
        if (typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj) || typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
                    SRTlib.send('], "end": "hasBinary"},');

          return true;
        }
        if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
                    SRTlib.send('], "end": "hasBinary"},');

          return hasBinary(obj.toJSON(), true);
        }
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
                        SRTlib.send('], "end": "hasBinary"},');

            return true;
          }
        }
                SRTlib.send('], "end": "hasBinary"},');

        return false;
                SRTlib.send('], "end": "hasBinary"},');

      }
            SRTlib.send('], "end": "call17"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey125"},');

  }, {
    "buffer": 360,
    "isarray": 115
  }],
  115: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey126", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var toString = ({}).toString;
    module.exports = Array.isArray || (function (arr) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports8"},');

      return toString.call(arr) == '[object Array]';
            SRTlib.send('], "end": "module.exports8"},');

    });
        SRTlib.send('], "end": "emptyKey126"},');

  }, {}],
  116: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey127", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    try {
      module.exports = typeof XMLHttpRequest !== 'undefined' && ('withCredentials' in new XMLHttpRequest());
    } catch (err) {
      module.exports = false;
    }
        SRTlib.send('], "end": "emptyKey127"},');

  }, {}],
  117: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey128", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var Buffer = require('safe-buffer').Buffer;
    var Transform = require('stream').Transform;
    var inherits = require('inherits');
    function throwIfNotStringOrBuffer(val, prefix) {
            SRTlib.send(`{ "anonymous": false, "function": "throwIfNotStringOrBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!Buffer.isBuffer(val) && typeof val !== 'string') {
                SRTlib.send('], "end": "throwIfNotStringOrBuffer"},');

        throw new TypeError(prefix + ' must be a string or a buffer');
      }
            SRTlib.send('], "end": "throwIfNotStringOrBuffer"},');

    }
    function HashBase(blockSize) {
            SRTlib.send(`{ "anonymous": false, "function": "HashBase", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      Transform.call(this);
      this._block = Buffer.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
            SRTlib.send('], "end": "HashBase"},');

    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function (chunk, encoding, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "HashBase.prototype._transform", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
            SRTlib.send('], "end": "HashBase.prototype._transform"},');

    };
    HashBase.prototype._flush = function (callback) {
            SRTlib.send(`{ "anonymous": true, "function": "HashBase.prototype._flush", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
            SRTlib.send('], "end": "HashBase.prototype._flush"},');

    };
    HashBase.prototype.update = function (data, encoding) {
            SRTlib.send(`{ "anonymous": true, "function": "HashBase.prototype.update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      throwIfNotStringOrBuffer(data, 'Data');
      if (this._finalized) {
                SRTlib.send('], "end": "HashBase.prototype.update"},');

        throw new Error('Digest already called');
      }
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
      }
            SRTlib.send('], "end": "HashBase.prototype.update"},');

      return this;
            SRTlib.send('], "end": "HashBase.prototype.update"},');

    };
    HashBase.prototype._update = function () {
            SRTlib.send(`{ "anonymous": true, "function": "HashBase.prototype._update", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "HashBase.prototype._update"},');

      throw new Error('_update is not implemented');
            SRTlib.send('], "end": "HashBase.prototype._update"},');

    };
    HashBase.prototype.digest = function (encoding) {
            SRTlib.send(`{ "anonymous": true, "function": "HashBase.prototype.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this._finalized) {
                SRTlib.send('], "end": "HashBase.prototype.digest"},');

        throw new Error('Digest already called');
      }
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== undefined) digest = digest.toString(encoding);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i) this._length[i] = 0;
            SRTlib.send('], "end": "HashBase.prototype.digest"},');

      return digest;
            SRTlib.send('], "end": "HashBase.prototype.digest"},');

    };
    HashBase.prototype._digest = function () {
            SRTlib.send(`{ "anonymous": true, "function": "HashBase.prototype._digest", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "HashBase.prototype._digest"},');

      throw new Error('_digest is not implemented');
            SRTlib.send('], "end": "HashBase.prototype._digest"},');

    };
    module.exports = HashBase;
        SRTlib.send('], "end": "emptyKey128"},');

  }, {
    "inherits": 133,
    "safe-buffer": 190,
    "stream": 216
  }],
  118: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey129", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var hash = exports;
    hash.utils = require('./hash/utils');
    hash.common = require('./hash/common');
    hash.sha = require('./hash/sha');
    hash.ripemd = require('./hash/ripemd');
    hash.hmac = require('./hash/hmac');
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
        SRTlib.send('], "end": "emptyKey129"},');

  }, {
    "./hash/common": 119,
    "./hash/hmac": 120,
    "./hash/ripemd": 121,
    "./hash/sha": 122,
    "./hash/utils": 129
  }],
  119: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey130", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('./utils');
    var assert = require('minimalistic-assert');
    function BlockHash() {
            SRTlib.send(`{ "anonymous": false, "function": "BlockHash", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
            SRTlib.send('], "end": "BlockHash"},');

    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "BlockHash.prototype.update.update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      msg = utils.toArray(msg, enc);
      if (!this.pending) this.pending = msg; else this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);
      }
            SRTlib.send('], "end": "BlockHash.prototype.update.update"},');

      return this;
            SRTlib.send('], "end": "BlockHash.prototype.update.update"},');

    };
    BlockHash.prototype.digest = function digest(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "BlockHash.prototype.digest.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.update(this._pad());
      assert(this.pending === null);
            SRTlib.send('], "end": "BlockHash.prototype.digest.digest"},');

      return this._digest(enc);
            SRTlib.send('], "end": "BlockHash.prototype.digest.digest"},');

    };
    BlockHash.prototype._pad = function pad() {
            SRTlib.send(`{ "anonymous": true, "function": "BlockHash.prototype._pad.pad", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++) res[i] = 0;
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++) res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++) res[i++] = 0;
      }
            SRTlib.send('], "end": "BlockHash.prototype._pad.pad"},');

      return res;
            SRTlib.send('], "end": "BlockHash.prototype._pad.pad"},');

    };
        SRTlib.send('], "end": "emptyKey130"},');

  }, {
    "./utils": 129,
    "minimalistic-assert": 144
  }],
  120: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey131", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('./utils');
    var assert = require('minimalistic-assert');
    function Hmac(hash, key, enc) {
            SRTlib.send(`{ "anonymous": false, "function": "Hmac", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (!(this instanceof Hmac)) {
                SRTlib.send('], "end": "Hmac"},');

        return new Hmac(hash, key, enc);
      }
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
            SRTlib.send('], "end": "Hmac"},');

    }
    module.exports = Hmac;
    Hmac.prototype._init = function init(key) {
            SRTlib.send(`{ "anonymous": true, "function": "Hmac.prototype._init.init", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i = key.length; i < this.blockSize; i++) key.push(0);
      for (i = 0; i < key.length; i++) key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);
      for (i = 0; i < key.length; i++) key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
            SRTlib.send('], "end": "Hmac.prototype._init.init"},');

    };
    Hmac.prototype.update = function update(msg, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "Hmac.prototype.update.update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.inner.update(msg, enc);
            SRTlib.send('], "end": "Hmac.prototype.update.update"},');

      return this;
            SRTlib.send('], "end": "Hmac.prototype.update.update"},');

    };
    Hmac.prototype.digest = function digest(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "Hmac.prototype.digest.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.outer.update(this.inner.digest());
            SRTlib.send('], "end": "Hmac.prototype.digest.digest"},');

      return this.outer.digest(enc);
            SRTlib.send('], "end": "Hmac.prototype.digest.digest"},');

    };
        SRTlib.send('], "end": "emptyKey131"},');

  }, {
    "./utils": 129,
    "minimalistic-assert": 144
  }],
  121: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey132", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('./utils');
    var common = require('./common');
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
            SRTlib.send(`{ "anonymous": false, "function": "RIPEMD160", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!(this instanceof RIPEMD160)) {
                SRTlib.send('], "end": "RIPEMD160"},');

        return new RIPEMD160();
      }
      BlockHash.call(this);
      this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
      this.endian = 'little';
            SRTlib.send('], "end": "RIPEMD160"},');

    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
            SRTlib.send(`{ "anonymous": true, "function": "RIPEMD160.prototype._update.update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
            SRTlib.send('], "end": "RIPEMD160.prototype._update.update"},');

    };
    RIPEMD160.prototype._digest = function digest(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "RIPEMD160.prototype._digest.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (enc === 'hex') return utils.toHex32(this.h, 'little'); else {
                SRTlib.send('], "end": "emptyKey132"},');

        return utils.toHex32(this.h, 'little');
      }
            SRTlib.send('], "end": "RIPEMD160.prototype._digest.digest"},');

    };
    function f(j, x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "f", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (j <= 15) return x ^ y ^ z; else {
                SRTlib.send('], "end": "emptyKey132"},');

        return x ^ y ^ z;
      }
            SRTlib.send('], "end": "f"},');

    }
    function K(j) {
            SRTlib.send(`{ "anonymous": false, "function": "K", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (j <= 15) return 0x00000000; else {
                SRTlib.send('], "end": "emptyKey132"},');

        return 0x00000000;
      }
            SRTlib.send('], "end": "K"},');

    }
    function Kh(j) {
            SRTlib.send(`{ "anonymous": false, "function": "Kh", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (j <= 15) return 0x50a28be6; else {
                SRTlib.send('], "end": "emptyKey132"},');

        return 0x50a28be6;
      }
            SRTlib.send('], "end": "Kh"},');

    }
    var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
    var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
    var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
    var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
        SRTlib.send('], "end": "emptyKey132"},');

  }, {
    "./common": 119,
    "./utils": 129
  }],
  122: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey133", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    exports.sha1 = require('./sha/1');
    exports.sha224 = require('./sha/224');
    exports.sha256 = require('./sha/256');
    exports.sha384 = require('./sha/384');
    exports.sha512 = require('./sha/512');
        SRTlib.send('], "end": "emptyKey133"},');

  }, {
    "./sha/1": 123,
    "./sha/224": 124,
    "./sha/256": 125,
    "./sha/384": 126,
    "./sha/512": 127
  }],
  123: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey134", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var common = require('../common');
    var shaCommon = require('./common');
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];
    function SHA1() {
            SRTlib.send(`{ "anonymous": false, "function": "SHA1", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!(this instanceof SHA1)) {
                SRTlib.send('], "end": "SHA1"},');

        return new SHA1();
      }
      BlockHash.call(this);
      this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
      this.W = new Array(80);
            SRTlib.send('], "end": "SHA1"},');

    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA1.prototype._update._update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var W = this.W;
      for (var i = 0; i < 16; i++) W[i] = msg[start + i];
      for (; i < W.length; i++) W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
            SRTlib.send('], "end": "SHA1.prototype._update._update"},');

    };
    SHA1.prototype._digest = function digest(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA1.prototype._digest.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (enc === 'hex') return utils.toHex32(this.h, 'big'); else {
                SRTlib.send('], "end": "emptyKey134"},');

        return utils.toHex32(this.h, 'big');
      }
            SRTlib.send('], "end": "SHA1.prototype._digest.digest"},');

    };
        SRTlib.send('], "end": "emptyKey134"},');

  }, {
    "../common": 119,
    "../utils": 129,
    "./common": 128
  }],
  124: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey135", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var SHA256 = require('./256');
    function SHA224() {
            SRTlib.send(`{ "anonymous": false, "function": "SHA224", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!(this instanceof SHA224)) {
                SRTlib.send('], "end": "SHA224"},');

        return new SHA224();
      }
      SHA256.call(this);
      this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
            SRTlib.send('], "end": "SHA224"},');

    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA224.prototype._digest.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big'); else {
                SRTlib.send('], "end": "emptyKey135"},');

        return utils.toHex32(this.h.slice(0, 7), 'big');
      }
            SRTlib.send('], "end": "SHA224.prototype._digest.digest"},');

    };
        SRTlib.send('], "end": "emptyKey135"},');

  }, {
    "../utils": 129,
    "./256": 125
  }],
  125: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey136", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var common = require('../common');
    var shaCommon = require('./common');
    var assert = require('minimalistic-assert');
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
    function SHA256() {
            SRTlib.send(`{ "anonymous": false, "function": "SHA256", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!(this instanceof SHA256)) {
                SRTlib.send('], "end": "SHA256"},');

        return new SHA256();
      }
      BlockHash.call(this);
      this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
      this.k = sha256_K;
      this.W = new Array(64);
            SRTlib.send('], "end": "SHA256"},');

    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA256.prototype._update._update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var W = this.W;
      for (var i = 0; i < 16; i++) W[i] = msg[start + i];
      for (; i < W.length; i++) W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
            SRTlib.send('], "end": "SHA256.prototype._update._update"},');

    };
    SHA256.prototype._digest = function digest(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA256.prototype._digest.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (enc === 'hex') return utils.toHex32(this.h, 'big'); else {
                SRTlib.send('], "end": "emptyKey136"},');

        return utils.toHex32(this.h, 'big');
      }
            SRTlib.send('], "end": "SHA256.prototype._digest.digest"},');

    };
        SRTlib.send('], "end": "emptyKey136"},');

  }, {
    "../common": 119,
    "../utils": 129,
    "./common": 128,
    "minimalistic-assert": 144
  }],
  126: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey137", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var SHA512 = require('./512');
    function SHA384() {
            SRTlib.send(`{ "anonymous": false, "function": "SHA384", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!(this instanceof SHA384)) {
                SRTlib.send('], "end": "SHA384"},');

        return new SHA384();
      }
      SHA512.call(this);
      this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
            SRTlib.send('], "end": "SHA384"},');

    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA384.prototype._digest.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big'); else {
                SRTlib.send('], "end": "emptyKey137"},');

        return utils.toHex32(this.h.slice(0, 12), 'big');
      }
            SRTlib.send('], "end": "SHA384.prototype._digest.digest"},');

    };
        SRTlib.send('], "end": "emptyKey137"},');

  }, {
    "../utils": 129,
    "./512": 127
  }],
  127: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey138", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var common = require('../common');
    var assert = require('minimalistic-assert');
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
    function SHA512() {
            SRTlib.send(`{ "anonymous": false, "function": "SHA512", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!(this instanceof SHA512)) {
                SRTlib.send('], "end": "SHA512"},');

        return new SHA512();
      }
      BlockHash.call(this);
      this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
      this.k = sha512_K;
      this.W = new Array(160);
            SRTlib.send('], "end": "SHA512"},');

    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA512.prototype._prepareBlock._prepareBlock", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var W = this.W;
      for (var i = 0; i < 32; i++) W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
            SRTlib.send('], "end": "SHA512.prototype._prepareBlock._prepareBlock"},');

    };
    SHA512.prototype._update = function _update(msg, start) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA512.prototype._update._update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
            SRTlib.send('], "end": "SHA512.prototype._update._update"},');

    };
    SHA512.prototype._digest = function digest(enc) {
            SRTlib.send(`{ "anonymous": true, "function": "SHA512.prototype._digest.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (enc === 'hex') return utils.toHex32(this.h, 'big'); else {
                SRTlib.send('], "end": "emptyKey138"},');

        return utils.toHex32(this.h, 'big');
      }
            SRTlib.send('], "end": "SHA512.prototype._digest.digest"},');

    };
    function ch64_hi(xh, xl, yh, yl, zh) {
            SRTlib.send(`{ "anonymous": false, "function": "ch64_hi", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      var r = xh & yh ^ ~xh & zh;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "ch64_hi"},');

      return r;
            SRTlib.send('], "end": "ch64_hi"},');

    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
            SRTlib.send(`{ "anonymous": false, "function": "ch64_lo", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

      var r = xl & yl ^ ~xl & zl;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "ch64_lo"},');

      return r;
            SRTlib.send('], "end": "ch64_lo"},');

    }
    function maj64_hi(xh, xl, yh, yl, zh) {
            SRTlib.send(`{ "anonymous": false, "function": "maj64_hi", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "maj64_hi"},');

      return r;
            SRTlib.send('], "end": "maj64_hi"},');

    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
            SRTlib.send(`{ "anonymous": false, "function": "maj64_lo", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "maj64_lo"},');

      return r;
            SRTlib.send('], "end": "maj64_lo"},');

    }
    function s0_512_hi(xh, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "s0_512_hi", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "s0_512_hi"},');

      return r;
            SRTlib.send('], "end": "s0_512_hi"},');

    }
    function s0_512_lo(xh, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "s0_512_lo", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "s0_512_lo"},');

      return r;
            SRTlib.send('], "end": "s0_512_lo"},');

    }
    function s1_512_hi(xh, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "s1_512_hi", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "s1_512_hi"},');

      return r;
            SRTlib.send('], "end": "s1_512_hi"},');

    }
    function s1_512_lo(xh, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "s1_512_lo", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "s1_512_lo"},');

      return r;
            SRTlib.send('], "end": "s1_512_lo"},');

    }
    function g0_512_hi(xh, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "g0_512_hi", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "g0_512_hi"},');

      return r;
            SRTlib.send('], "end": "g0_512_hi"},');

    }
    function g0_512_lo(xh, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "g0_512_lo", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "g0_512_lo"},');

      return r;
            SRTlib.send('], "end": "g0_512_lo"},');

    }
    function g1_512_hi(xh, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "g1_512_hi", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "g1_512_hi"},');

      return r;
            SRTlib.send('], "end": "g1_512_hi"},');

    }
    function g1_512_lo(xh, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "g1_512_lo", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 0x100000000;
            SRTlib.send('], "end": "g1_512_lo"},');

      return r;
            SRTlib.send('], "end": "g1_512_lo"},');

    }
        SRTlib.send('], "end": "emptyKey138"},');

  }, {
    "../common": 119,
    "../utils": 129,
    "minimalistic-assert": 144
  }],
  128: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey139", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = require('../utils');
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "ft_1", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (s === 0) {
                SRTlib.send('], "end": "ft_1"},');

        return ch32(x, y, z);
      }
      if (s === 1 || s === 3) {
                SRTlib.send('], "end": "ft_1"},');

        return p32(x, y, z);
      }
      if (s === 2) {
                SRTlib.send('], "end": "ft_1"},');

        return maj32(x, y, z);
      }
            SRTlib.send('], "end": "ft_1"},');

    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "ch32", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "ch32"},');

      return x & y ^ ~x & z;
            SRTlib.send('], "end": "ch32"},');

    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "maj32", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "maj32"},');

      return x & y ^ x & z ^ y & z;
            SRTlib.send('], "end": "maj32"},');

    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "p32", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "p32"},');

      return x ^ y ^ z;
            SRTlib.send('], "end": "p32"},');

    }
    exports.p32 = p32;
    function s0_256(x) {
            SRTlib.send(`{ "anonymous": false, "function": "s0_256", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "s0_256"},');

      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
            SRTlib.send('], "end": "s0_256"},');

    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
            SRTlib.send(`{ "anonymous": false, "function": "s1_256", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "s1_256"},');

      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
            SRTlib.send('], "end": "s1_256"},');

    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
            SRTlib.send(`{ "anonymous": false, "function": "g0_256", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "g0_256"},');

      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
            SRTlib.send('], "end": "g0_256"},');

    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
            SRTlib.send(`{ "anonymous": false, "function": "g1_256", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "g1_256"},');

      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
            SRTlib.send('], "end": "g1_256"},');

    }
    exports.g1_256 = g1_256;
        SRTlib.send('], "end": "emptyKey139"},');

  }, {
    "../utils": 129
  }],
  129: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey140", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var assert = require('minimalistic-assert');
    var inherits = require('inherits');
    exports.inherits = inherits;
    function isSurrogatePair(msg, i) {
            SRTlib.send(`{ "anonymous": false, "function": "isSurrogatePair", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
                SRTlib.send('], "end": "isSurrogatePair"},');

        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
                SRTlib.send('], "end": "isSurrogatePair"},');

        return false;
      }
            SRTlib.send('], "end": "isSurrogatePair"},');

      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
            SRTlib.send('], "end": "isSurrogatePair"},');

    }
    function toArray(msg, enc) {
            SRTlib.send(`{ "anonymous": false, "function": "toArray", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (Array.isArray(msg)) {
                SRTlib.send('], "end": "toArray"},');

        return msg.slice();
      }
      if (!msg) {
                SRTlib.send('], "end": "toArray"},');

        return [];
      }
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0) msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
      }
            SRTlib.send('], "end": "toArray"},');

      return res;
            SRTlib.send('], "end": "toArray"},');

    }
    exports.toArray = toArray;
    function toHex(msg) {
            SRTlib.send(`{ "anonymous": false, "function": "toHex", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var res = '';
      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
            SRTlib.send('], "end": "toHex"},');

      return res;
            SRTlib.send('], "end": "toHex"},');

    }
    exports.toHex = toHex;
    function htonl(w) {
            SRTlib.send(`{ "anonymous": false, "function": "htonl", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
            SRTlib.send('], "end": "htonl"},');

      return res >>> 0;
            SRTlib.send('], "end": "htonl"},');

    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
            SRTlib.send(`{ "anonymous": false, "function": "toHex32", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little') w = htonl(w);
        res += zero8(w.toString(16));
      }
            SRTlib.send('], "end": "toHex32"},');

      return res;
            SRTlib.send('], "end": "toHex32"},');

    }
    exports.toHex32 = toHex32;
    function zero2(word) {
            SRTlib.send(`{ "anonymous": false, "function": "zero2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (word.length === 1) return '0' + word; else {
                SRTlib.send('], "end": "emptyKey140"},');

        return '0' + word;
      }
            SRTlib.send('], "end": "zero2"},');

    }
    exports.zero2 = zero2;
    function zero8(word) {
            SRTlib.send(`{ "anonymous": false, "function": "zero8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (word.length === 7) return '0' + word; else {
                SRTlib.send('], "end": "emptyKey140"},');

        return '0' + word;
      }
            SRTlib.send('], "end": "zero8"},');

    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
            SRTlib.send(`{ "anonymous": false, "function": "join32", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; (i++, k += 4)) {
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3]; else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
            SRTlib.send('], "end": "join32"},');

      return res;
            SRTlib.send('], "end": "join32"},');

    }
    exports.join32 = join32;
    function split32(msg, endian) {
            SRTlib.send(`{ "anonymous": false, "function": "split32", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; (i++, k += 4)) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 0xff;
          res[k + 2] = m >>> 8 & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 0xff;
          res[k + 1] = m >>> 8 & 0xff;
          res[k] = m & 0xff;
        }
      }
            SRTlib.send('], "end": "split32"},');

      return res;
            SRTlib.send('], "end": "split32"},');

    }
    exports.split32 = split32;
    function rotr32(w, b) {
            SRTlib.send(`{ "anonymous": false, "function": "rotr32", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "rotr32"},');

      return w >>> b | w << 32 - b;
            SRTlib.send('], "end": "rotr32"},');

    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
            SRTlib.send(`{ "anonymous": false, "function": "rotl32", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "rotl32"},');

      return w << b | w >>> 32 - b;
            SRTlib.send('], "end": "rotl32"},');

    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
            SRTlib.send(`{ "anonymous": false, "function": "sum32", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "sum32"},');

      return a + b >>> 0;
            SRTlib.send('], "end": "sum32"},');

    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
            SRTlib.send(`{ "anonymous": false, "function": "sum32_3", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "sum32_3"},');

      return a + b + c >>> 0;
            SRTlib.send('], "end": "sum32_3"},');

    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
            SRTlib.send(`{ "anonymous": false, "function": "sum32_4", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

            SRTlib.send('], "end": "sum32_4"},');

      return a + b + c + d >>> 0;
            SRTlib.send('], "end": "sum32_4"},');

    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
            SRTlib.send(`{ "anonymous": false, "function": "sum32_5", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

            SRTlib.send('], "end": "sum32_5"},');

      return a + b + c + d + e >>> 0;
            SRTlib.send('], "end": "sum32_5"},');

    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
            SRTlib.send(`{ "anonymous": false, "function": "sum64", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
            SRTlib.send('], "end": "sum64"},');

    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
            SRTlib.send(`{ "anonymous": false, "function": "sum64_hi", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
            SRTlib.send('], "end": "sum64_hi"},');

      return hi >>> 0;
            SRTlib.send('], "end": "sum64_hi"},');

    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
            SRTlib.send(`{ "anonymous": false, "function": "sum64_lo", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var lo = al + bl;
            SRTlib.send('], "end": "sum64_lo"},');

      return lo >>> 0;
            SRTlib.send('], "end": "sum64_lo"},');

    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
            SRTlib.send(`{ "anonymous": false, "function": "sum64_4_hi", "fileName": "${__filename}", "paramsNumber": 8, "calls" : [`);

      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
            SRTlib.send('], "end": "sum64_4_hi"},');

      return hi >>> 0;
            SRTlib.send('], "end": "sum64_4_hi"},');

    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
            SRTlib.send(`{ "anonymous": false, "function": "sum64_4_lo", "fileName": "${__filename}", "paramsNumber": 8, "calls" : [`);

      var lo = al + bl + cl + dl;
            SRTlib.send('], "end": "sum64_4_lo"},');

      return lo >>> 0;
            SRTlib.send('], "end": "sum64_4_lo"},');

    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            SRTlib.send(`{ "anonymous": false, "function": "sum64_5_hi", "fileName": "${__filename}", "paramsNumber": 10, "calls" : [`);

      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
            SRTlib.send('], "end": "sum64_5_hi"},');

      return hi >>> 0;
            SRTlib.send('], "end": "sum64_5_hi"},');

    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            SRTlib.send(`{ "anonymous": false, "function": "sum64_5_lo", "fileName": "${__filename}", "paramsNumber": 10, "calls" : [`);

      var lo = al + bl + cl + dl + el;
            SRTlib.send('], "end": "sum64_5_lo"},');

      return lo >>> 0;
            SRTlib.send('], "end": "sum64_5_lo"},');

    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
            SRTlib.send(`{ "anonymous": false, "function": "rotr64_hi", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var r = al << 32 - num | ah >>> num;
            SRTlib.send('], "end": "rotr64_hi"},');

      return r >>> 0;
            SRTlib.send('], "end": "rotr64_hi"},');

    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
            SRTlib.send(`{ "anonymous": false, "function": "rotr64_lo", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var r = ah << 32 - num | al >>> num;
            SRTlib.send('], "end": "rotr64_lo"},');

      return r >>> 0;
            SRTlib.send('], "end": "rotr64_lo"},');

    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
            SRTlib.send(`{ "anonymous": false, "function": "shr64_hi", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "shr64_hi"},');

      return ah >>> num;
            SRTlib.send('], "end": "shr64_hi"},');

    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
            SRTlib.send(`{ "anonymous": false, "function": "shr64_lo", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var r = ah << 32 - num | al >>> num;
            SRTlib.send('], "end": "shr64_lo"},');

      return r >>> 0;
            SRTlib.send('], "end": "shr64_lo"},');

    }
    exports.shr64_lo = shr64_lo;
        SRTlib.send('], "end": "emptyKey140"},');

  }, {
    "inherits": 133,
    "minimalistic-assert": 144
  }],
  130: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey141", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var hash = require('hash.js');
    var utils = require('minimalistic-crypto-utils');
    var assert = require('minimalistic-assert');
    function HmacDRBG(options) {
            SRTlib.send(`{ "anonymous": false, "function": "HmacDRBG", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!(this instanceof HmacDRBG)) {
                SRTlib.send('], "end": "HmacDRBG"},');

        return new HmacDRBG(options);
      }
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils.toArray(options.pers, options.persEnc || 'hex');
      assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
            SRTlib.send('], "end": "HmacDRBG"},');

    }
    module.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
            SRTlib.send(`{ "anonymous": true, "function": "HmacDRBG.prototype._init.init", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;
            SRTlib.send('], "end": "HmacDRBG.prototype._init.init"},');

    };
    HmacDRBG.prototype._hmac = function hmac() {
            SRTlib.send(`{ "anonymous": true, "function": "HmacDRBG.prototype._hmac.hmac", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "HmacDRBG.prototype._hmac.hmac"},');

      return new hash.hmac(this.hash, this.K);
            SRTlib.send('], "end": "HmacDRBG.prototype._hmac.hmac"},');

    };
    HmacDRBG.prototype._update = function update(seed) {
            SRTlib.send(`{ "anonymous": true, "function": "HmacDRBG.prototype._update.update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var kmac = this._hmac().update(this.V).update([0x00]);
      if (seed) kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed) {
                SRTlib.send('], "end": "HmacDRBG.prototype._update.update"},');

        return;
      }
      this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
            SRTlib.send('], "end": "HmacDRBG.prototype._update.update"},');

    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
            SRTlib.send(`{ "anonymous": true, "function": "HmacDRBG.prototype.reseed.reseed", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._update(entropy.concat(add || []));
      this._reseed = 1;
            SRTlib.send('], "end": "HmacDRBG.prototype.reseed.reseed"},');

    };
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
            SRTlib.send(`{ "anonymous": true, "function": "HmacDRBG.prototype.generate.generate", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (this._reseed > this.reseedInterval) {
                SRTlib.send('], "end": "HmacDRBG.prototype.generate.generate"},');

        throw new Error('Reseed is required');
      }
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
            SRTlib.send('], "end": "HmacDRBG.prototype.generate.generate"},');

      return utils.encode(res, enc);
            SRTlib.send('], "end": "HmacDRBG.prototype.generate.generate"},');

    };
        SRTlib.send('], "end": "emptyKey141"},');

  }, {
    "hash.js": 118,
    "minimalistic-assert": 144,
    "minimalistic-crypto-utils": 145
  }],
  131: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey142", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.read", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; (e = e * 256 + buffer[offset + i], i += d, nBits -= 8)) {}
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; (m = m * 256 + buffer[offset + i], i += d, nBits -= 8)) {}
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
                SRTlib.send('], "end": "exports.read"},');

        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
            SRTlib.send('], "end": "exports.read"},');

      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
            SRTlib.send('], "end": "exports.read"},');

    };
    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.write", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; (buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8)) {}
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; (buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8)) {}
      buffer[offset + i - d] |= s * 128;
            SRTlib.send('], "end": "exports.write"},');

    };
        SRTlib.send('], "end": "emptyKey142"},');

  }, {}],
  132: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey143", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var indexOf = [].indexOf;
    module.exports = function (arr, obj) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports9", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (indexOf) {
                SRTlib.send('], "end": "module.exports9"},');

        return arr.indexOf(obj);
      }
      for (var i = 0; i < arr.length; ++i) {
        if (arr[i] === obj) {
                    SRTlib.send('], "end": "module.exports9"},');

          return i;
        }
      }
            SRTlib.send('], "end": "module.exports9"},');

      return -1;
            SRTlib.send('], "end": "module.exports9"},');

    };
        SRTlib.send('], "end": "emptyKey143"},');

  }, {}],
  133: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey144", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    if (typeof Object.create === 'function') {
      module.exports = function inherits(ctor, superCtor) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.inherits", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
                SRTlib.send('], "end": "module.exports.inherits"},');

      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.inherits2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        ctor.super_ = superCtor;
        var TempCtor = function () {
                    SRTlib.send(`{ "anonymous": false, "function": "TempCtor", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "TempCtor"},');

        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
                SRTlib.send('], "end": "module.exports.inherits2"},');

      };
    }
        SRTlib.send('], "end": "emptyKey144"},');

  }, {}],
  134: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey145", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function (obj) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports10", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports10"},');

      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
            SRTlib.send('], "end": "module.exports10"},');

    };
    function isBuffer(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "isBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "isBuffer"},');

      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
            SRTlib.send('], "end": "isBuffer"},');

    }
    function isSlowBuffer(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "isSlowBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "isSlowBuffer"},');

      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
            SRTlib.send('], "end": "isSlowBuffer"},');

    }
        SRTlib.send('], "end": "emptyKey145"},');

  }, {}],
  135: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey146", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function isShallowEqual(a, b) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.isShallowEqual", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (a === b) {
                SRTlib.send('], "end": "module.exports.isShallowEqual"},');

        return true;
      }
      for (var i in a) if (!((i in b))) {
                SRTlib.send('], "end": "module.exports.isShallowEqual"},');

        return false;
      }
      for (var i in b) if (a[i] !== b[i]) {
                SRTlib.send('], "end": "module.exports.isShallowEqual"},');

        return false;
      }
            SRTlib.send('], "end": "module.exports.isShallowEqual"},');

      return true;
            SRTlib.send('], "end": "module.exports.isShallowEqual"},');

    };
        SRTlib.send('], "end": "emptyKey146"},');

  }, {}],
  136: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey147", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global) {
            SRTlib.send(`{ "anonymous": true, "function": "call20", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      ;
      (function (global, factory) {
                SRTlib.send(`{ "anonymous": true, "function": "call18", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(global) : typeof define === 'function' && define.amd ? define(factory) : factory(global);
                SRTlib.send('], "end": "call18"},');

      })(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this, function (global) {
                SRTlib.send(`{ "anonymous": true, "function": "call19", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        'use strict';
        global = global || ({});
        var _Base64 = global.Base64;
        var version = "2.5.2";
        var buffer;
        if (typeof module !== 'undefined' && module.exports) {
          try {
            buffer = eval("require('buffer').Buffer");
          } catch (err) {
            buffer = undefined;
          }
        }
        var b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        var b64tab = (function (bin) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.b64tab", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = {};
          for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
                    SRTlib.send('], "end": "call.b64tab"},');

          return t;
                    SRTlib.send('], "end": "call.b64tab"},');

        })(b64chars);
        var fromCharCode = String.fromCharCode;
        var cb_utob = function (c) {
                    SRTlib.send(`{ "anonymous": false, "function": "cb_utob", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (c.length < 2) {
            var cc = c.charCodeAt(0);
                        SRTlib.send('], "end": "cb_utob"},');

            return cc < 0x80 ? c : cc < 0x800 ? fromCharCode(0xc0 | cc >>> 6) + fromCharCode(0x80 | cc & 0x3f) : fromCharCode(0xe0 | cc >>> 12 & 0x0f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);
          } else {
            var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
                        SRTlib.send('], "end": "cb_utob"},');

            return fromCharCode(0xf0 | cc >>> 18 & 0x07) + fromCharCode(0x80 | cc >>> 12 & 0x3f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);
          }
                    SRTlib.send('], "end": "cb_utob"},');

        };
        var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
        var utob = function (u) {
                    SRTlib.send(`{ "anonymous": false, "function": "utob", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "utob"},');

          return u.replace(re_utob, cb_utob);
                    SRTlib.send('], "end": "utob"},');

        };
        var cb_encode = function (ccc) {
                    SRTlib.send(`{ "anonymous": false, "function": "cb_encode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var padlen = [0, 2, 1][ccc.length % 3], ord = ccc.charCodeAt(0) << 16 | (ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8 | (ccc.length > 2 ? ccc.charCodeAt(2) : 0), chars = [b64chars.charAt(ord >>> 18), b64chars.charAt(ord >>> 12 & 63), padlen >= 2 ? '=' : b64chars.charAt(ord >>> 6 & 63), padlen >= 1 ? '=' : b64chars.charAt(ord & 63)];
                    SRTlib.send('], "end": "cb_encode"},');

          return chars.join('');
                    SRTlib.send('], "end": "cb_encode"},');

        };
        var btoa = global.btoa ? function (b) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.btoa", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call.btoa"},');

          return global.btoa(b);
                    SRTlib.send('], "end": "call.btoa"},');

        } : function (b) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.btoa2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call.btoa2"},');

          return b.replace(/[\s\S]{1,3}/g, cb_encode);
                    SRTlib.send('], "end": "call.btoa2"},');

        };
        var _encode = function (u) {
                    SRTlib.send(`{ "anonymous": false, "function": "_encode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var isUint8Array = Object.prototype.toString.call(u) === '[object Uint8Array]';
                    SRTlib.send('], "end": "_encode"},');

          return isUint8Array ? u.toString('base64') : btoa(utob(String(u)));
                    SRTlib.send('], "end": "_encode"},');

        };
        var encode = function (u, urisafe) {
                    SRTlib.send(`{ "anonymous": false, "function": "encode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                    SRTlib.send('], "end": "encode"},');

          return !urisafe ? _encode(u) : _encode(String(u)).replace(/[+\/]/g, function (m0) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.encode.ReturnStatement.replace.replace.replace", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call.encode.ReturnStatement.replace.replace.replace"},');

            return m0 == '+' ? '-' : '_';
                        SRTlib.send('], "end": "call.encode.ReturnStatement.replace.replace.replace"},');

          }).replace(/=/g, '');
                    SRTlib.send('], "end": "encode"},');

        };
        var encodeURI = function (u) {
                    SRTlib.send(`{ "anonymous": false, "function": "encodeURI", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "encodeURI"},');

          return encode(u, true);
                    SRTlib.send('], "end": "encodeURI"},');

        };
        var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
        var cb_btou = function (cccc) {
                    SRTlib.send(`{ "anonymous": false, "function": "cb_btou", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          switch (cccc.length) {
            case 4:
                            SRTlib.send('], "end": "emptyKey147"},');

                            SRTlib.send('], "end": "call20"},');

                            SRTlib.send('], "end": "call19"},');

                            SRTlib.send('], "end": "cb_btou"},');

              var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3), offset = cp - 0x10000;
              return fromCharCode((offset >>> 10) + 0xD800) + fromCharCode((offset & 0x3FF) + 0xDC00);
            case 3:
                            SRTlib.send('], "end": "emptyKey147"},');

                            SRTlib.send('], "end": "call20"},');

                            SRTlib.send('], "end": "call19"},');

                            SRTlib.send('], "end": "cb_btou"},');

              return fromCharCode((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));
            default:
                            SRTlib.send('], "end": "emptyKey147"},');

                            SRTlib.send('], "end": "call20"},');

                            SRTlib.send('], "end": "call19"},');

                            SRTlib.send('], "end": "cb_btou"},');

              return fromCharCode((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));
          }
                    SRTlib.send('], "end": "cb_btou"},');

        };
        var btou = function (b) {
                    SRTlib.send(`{ "anonymous": false, "function": "btou", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "btou"},');

          return b.replace(re_btou, cb_btou);
                    SRTlib.send('], "end": "btou"},');

        };
        var cb_decode = function (cccc) {
                    SRTlib.send(`{ "anonymous": false, "function": "cb_decode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var len = cccc.length, padlen = len % 4, n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) | (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) | (len > 3 ? b64tab[cccc.charAt(3)] : 0), chars = [fromCharCode(n >>> 16), fromCharCode(n >>> 8 & 0xff), fromCharCode(n & 0xff)];
          chars.length -= [0, 0, 2, 1][padlen];
                    SRTlib.send('], "end": "cb_decode"},');

          return chars.join('');
                    SRTlib.send('], "end": "cb_decode"},');

        };
        var _atob = global.atob ? function (a) {
                    SRTlib.send(`{ "anonymous": true, "function": "call._atob", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call._atob"},');

          return global.atob(a);
                    SRTlib.send('], "end": "call._atob"},');

        } : function (a) {
                    SRTlib.send(`{ "anonymous": true, "function": "call._atob2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call._atob2"},');

          return a.replace(/\S{1,4}/g, cb_decode);
                    SRTlib.send('], "end": "call._atob2"},');

        };
        var atob = function (a) {
                    SRTlib.send(`{ "anonymous": false, "function": "atob", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "atob"},');

          return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g, ''));
                    SRTlib.send('], "end": "atob"},');

        };
        var _decode = buffer ? buffer.from && Uint8Array && buffer.from !== Uint8Array.from ? function (a) {
                    SRTlib.send(`{ "anonymous": true, "function": "call._decode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call._decode"},');

          return (a.constructor === buffer.constructor ? a : buffer.from(a, 'base64')).toString();
                    SRTlib.send('], "end": "call._decode"},');

        } : function (a) {
                    SRTlib.send(`{ "anonymous": true, "function": "call._decode2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call._decode2"},');

          return (a.constructor === buffer.constructor ? a : new buffer(a, 'base64')).toString();
                    SRTlib.send('], "end": "call._decode2"},');

        } : function (a) {
                    SRTlib.send(`{ "anonymous": true, "function": "call._decode3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call._decode3"},');

          return btou(_atob(a));
                    SRTlib.send('], "end": "call._decode3"},');

        };
        var decode = function (a) {
                    SRTlib.send(`{ "anonymous": false, "function": "decode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "decode"},');

          return _decode(String(a).replace(/[-_]/g, function (m0) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.decode.ReturnStatement._decode.replace.replace.replace", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call.decode.ReturnStatement._decode.replace.replace.replace"},');

            return m0 == '-' ? '+' : '/';
                        SRTlib.send('], "end": "call.decode.ReturnStatement._decode.replace.replace.replace"},');

          }).replace(/[^A-Za-z0-9\+\/]/g, ''));
                    SRTlib.send('], "end": "decode"},');

        };
        var noConflict = function () {
                    SRTlib.send(`{ "anonymous": false, "function": "noConflict", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var Base64 = global.Base64;
          global.Base64 = _Base64;
                    SRTlib.send('], "end": "noConflict"},');

          return Base64;
                    SRTlib.send('], "end": "noConflict"},');

        };
        global.Base64 = {
          VERSION: version,
          atob: atob,
          btoa: btoa,
          fromBase64: decode,
          toBase64: encode,
          utob: utob,
          encode: encode,
          encodeURI: encodeURI,
          btou: btou,
          decode: decode,
          noConflict: noConflict,
          __buffer__: buffer
        };
        if (typeof Object.defineProperty === 'function') {
          var noEnum = function (v) {
                        SRTlib.send(`{ "anonymous": false, "function": "noEnum", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "noEnum"},');

            return {
              value: v,
              enumerable: false,
              writable: true,
              configurable: true
            };
                        SRTlib.send('], "end": "noEnum"},');

          };
          global.Base64.extendString = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.global.Base64.extendString", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            Object.defineProperty(String.prototype, 'fromBase64', noEnum(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.global.Base64.extendString.noEnum", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.global.Base64.extendString.noEnum"},');

              return decode(this);
                            SRTlib.send('], "end": "call.global.Base64.extendString.noEnum"},');

            }));
            Object.defineProperty(String.prototype, 'toBase64', noEnum(function (urisafe) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.global.Base64.extendString.noEnum2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.global.Base64.extendString.noEnum2"},');

              return encode(this, urisafe);
                            SRTlib.send('], "end": "call.global.Base64.extendString.noEnum2"},');

            }));
            Object.defineProperty(String.prototype, 'toBase64URI', noEnum(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.global.Base64.extendString.noEnum3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.global.Base64.extendString.noEnum3"},');

              return encode(this, true);
                            SRTlib.send('], "end": "call.global.Base64.extendString.noEnum3"},');

            }));
                        SRTlib.send('], "end": "call.global.Base64.extendString"},');

          };
        }
        if (global['Meteor']) {
          Base64 = global.Base64;
        }
        if (typeof module !== 'undefined' && module.exports) {
          module.exports.Base64 = global.Base64;
        } else if (typeof define === 'function' && define.amd) {
          define([], function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.define", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call.define"},');

            return global.Base64;
                        SRTlib.send('], "end": "call.define"},');

          });
        }
                SRTlib.send('], "end": "call19"},');

        return {
          Base64: global.Base64
        };
                SRTlib.send('], "end": "call19"},');

      });
            SRTlib.send('], "end": "call20"},');

    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey147"},');

  }, {}],
  137: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey148", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global) {
            SRTlib.send(`{ "anonymous": true, "function": "call21", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var FUNC_ERROR_TEXT = 'Expected a function';
      var NAN = 0 / 0;
      var symbolTag = '[object Symbol]';
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function('return this')();
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var nativeMax = Math.max, nativeMin = Math.min;
      var now = function () {
                SRTlib.send(`{ "anonymous": false, "function": "now", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "now"},');

        return root.Date.now();
                SRTlib.send('], "end": "now"},');

      };
      function debounce(func, wait, options) {
                SRTlib.send(`{ "anonymous": false, "function": "debounce", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != 'function') {
                    SRTlib.send('], "end": "debounce"},');

          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = ('maxWait' in options);
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = ('trailing' in options) ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "invokeFunc", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
                    SRTlib.send('], "end": "invokeFunc"},');

          return result;
                    SRTlib.send('], "end": "invokeFunc"},');

        }
        function leadingEdge(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "leadingEdge", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
                    SRTlib.send('], "end": "leadingEdge"},');

          return leading ? invokeFunc(time) : result;
                    SRTlib.send('], "end": "leadingEdge"},');

        }
        function remainingWait(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "remainingWait", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
                    SRTlib.send('], "end": "remainingWait"},');

          return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
                    SRTlib.send('], "end": "remainingWait"},');

        }
        function shouldInvoke(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "shouldInvoke", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                    SRTlib.send('], "end": "shouldInvoke"},');

          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
                    SRTlib.send('], "end": "shouldInvoke"},');

        }
        function timerExpired() {
                    SRTlib.send(`{ "anonymous": false, "function": "timerExpired", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var time = now();
          if (shouldInvoke(time)) {
                        SRTlib.send('], "end": "timerExpired"},');

            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
                    SRTlib.send('], "end": "timerExpired"},');

        }
        function trailingEdge(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "trailingEdge", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          timerId = undefined;
          if (trailing && lastArgs) {
                        SRTlib.send('], "end": "trailingEdge"},');

            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined;
                    SRTlib.send('], "end": "trailingEdge"},');

          return result;
                    SRTlib.send('], "end": "trailingEdge"},');

        }
        function cancel() {
                    SRTlib.send(`{ "anonymous": false, "function": "cancel", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (timerId !== undefined) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
                    SRTlib.send('], "end": "cancel"},');

        }
        function flush() {
                    SRTlib.send(`{ "anonymous": false, "function": "flush", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "flush"},');

          return timerId === undefined ? result : trailingEdge(now());
                    SRTlib.send('], "end": "flush"},');

        }
        function debounced() {
                    SRTlib.send(`{ "anonymous": false, "function": "debounced", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined) {
                            SRTlib.send('], "end": "debounced"},');

              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
                            SRTlib.send('], "end": "debounced"},');

              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }
                    SRTlib.send('], "end": "debounced"},');

          return result;
                    SRTlib.send('], "end": "debounced"},');

        }
        debounced.cancel = cancel;
        debounced.flush = flush;
                SRTlib.send('], "end": "debounce"},');

        return debounced;
                SRTlib.send('], "end": "debounce"},');

      }
      function isObject(value) {
                SRTlib.send(`{ "anonymous": false, "function": "isObject", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var type = typeof value;
                SRTlib.send('], "end": "isObject"},');

        return !!value && (type == 'object' || type == 'function');
                SRTlib.send('], "end": "isObject"},');

      }
      function isObjectLike(value) {
                SRTlib.send(`{ "anonymous": false, "function": "isObjectLike", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isObjectLike"},');

        return !!value && typeof value == 'object';
                SRTlib.send('], "end": "isObjectLike"},');

      }
      function isSymbol(value) {
                SRTlib.send(`{ "anonymous": false, "function": "isSymbol", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isSymbol"},');

        return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
                SRTlib.send('], "end": "isSymbol"},');

      }
      function toNumber(value) {
                SRTlib.send(`{ "anonymous": false, "function": "toNumber", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof value == 'number') {
                    SRTlib.send('], "end": "toNumber"},');

          return value;
        }
        if (isSymbol(value)) {
                    SRTlib.send('], "end": "toNumber"},');

          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }
        if (typeof value != 'string') {
                    SRTlib.send('], "end": "toNumber"},');

          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
                SRTlib.send('], "end": "toNumber"},');

        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
                SRTlib.send('], "end": "toNumber"},');

      }
      module.exports = debounce;
            SRTlib.send('], "end": "call21"},');

    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey148"},');

  }, {}],
  138: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey149", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global) {
            SRTlib.send(`{ "anonymous": true, "function": "call22", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var FUNC_ERROR_TEXT = 'Expected a function';
      var NAN = 0 / 0;
      var symbolTag = '[object Symbol]';
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function('return this')();
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var nativeMax = Math.max, nativeMin = Math.min;
      var now = function () {
                SRTlib.send(`{ "anonymous": false, "function": "now", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "now"},');

        return root.Date.now();
                SRTlib.send('], "end": "now"},');

      };
      function debounce(func, wait, options) {
                SRTlib.send(`{ "anonymous": false, "function": "debounce", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != 'function') {
                    SRTlib.send('], "end": "debounce"},');

          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = ('maxWait' in options);
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = ('trailing' in options) ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "invokeFunc", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
                    SRTlib.send('], "end": "invokeFunc"},');

          return result;
                    SRTlib.send('], "end": "invokeFunc"},');

        }
        function leadingEdge(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "leadingEdge", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
                    SRTlib.send('], "end": "leadingEdge"},');

          return leading ? invokeFunc(time) : result;
                    SRTlib.send('], "end": "leadingEdge"},');

        }
        function remainingWait(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "remainingWait", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
                    SRTlib.send('], "end": "remainingWait"},');

          return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
                    SRTlib.send('], "end": "remainingWait"},');

        }
        function shouldInvoke(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "shouldInvoke", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                    SRTlib.send('], "end": "shouldInvoke"},');

          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
                    SRTlib.send('], "end": "shouldInvoke"},');

        }
        function timerExpired() {
                    SRTlib.send(`{ "anonymous": false, "function": "timerExpired", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var time = now();
          if (shouldInvoke(time)) {
                        SRTlib.send('], "end": "timerExpired"},');

            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
                    SRTlib.send('], "end": "timerExpired"},');

        }
        function trailingEdge(time) {
                    SRTlib.send(`{ "anonymous": false, "function": "trailingEdge", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          timerId = undefined;
          if (trailing && lastArgs) {
                        SRTlib.send('], "end": "trailingEdge"},');

            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined;
                    SRTlib.send('], "end": "trailingEdge"},');

          return result;
                    SRTlib.send('], "end": "trailingEdge"},');

        }
        function cancel() {
                    SRTlib.send(`{ "anonymous": false, "function": "cancel", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (timerId !== undefined) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
                    SRTlib.send('], "end": "cancel"},');

        }
        function flush() {
                    SRTlib.send(`{ "anonymous": false, "function": "flush", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "flush"},');

          return timerId === undefined ? result : trailingEdge(now());
                    SRTlib.send('], "end": "flush"},');

        }
        function debounced() {
                    SRTlib.send(`{ "anonymous": false, "function": "debounced", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined) {
                            SRTlib.send('], "end": "debounced"},');

              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
                            SRTlib.send('], "end": "debounced"},');

              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }
                    SRTlib.send('], "end": "debounced"},');

          return result;
                    SRTlib.send('], "end": "debounced"},');

        }
        debounced.cancel = cancel;
        debounced.flush = flush;
                SRTlib.send('], "end": "debounce"},');

        return debounced;
                SRTlib.send('], "end": "debounce"},');

      }
      function throttle(func, wait, options) {
                SRTlib.send(`{ "anonymous": false, "function": "throttle", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var leading = true, trailing = true;
        if (typeof func != 'function') {
                    SRTlib.send('], "end": "throttle"},');

          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = ('leading' in options) ? !!options.leading : leading;
          trailing = ('trailing' in options) ? !!options.trailing : trailing;
        }
                SRTlib.send('], "end": "throttle"},');

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
                SRTlib.send('], "end": "throttle"},');

      }
      function isObject(value) {
                SRTlib.send(`{ "anonymous": false, "function": "isObject", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var type = typeof value;
                SRTlib.send('], "end": "isObject"},');

        return !!value && (type == 'object' || type == 'function');
                SRTlib.send('], "end": "isObject"},');

      }
      function isObjectLike(value) {
                SRTlib.send(`{ "anonymous": false, "function": "isObjectLike", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isObjectLike"},');

        return !!value && typeof value == 'object';
                SRTlib.send('], "end": "isObjectLike"},');

      }
      function isSymbol(value) {
                SRTlib.send(`{ "anonymous": false, "function": "isSymbol", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isSymbol"},');

        return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
                SRTlib.send('], "end": "isSymbol"},');

      }
      function toNumber(value) {
                SRTlib.send(`{ "anonymous": false, "function": "toNumber", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof value == 'number') {
                    SRTlib.send('], "end": "toNumber"},');

          return value;
        }
        if (isSymbol(value)) {
                    SRTlib.send('], "end": "toNumber"},');

          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }
        if (typeof value != 'string') {
                    SRTlib.send('], "end": "toNumber"},');

          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
                SRTlib.send('], "end": "toNumber"},');

        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
                SRTlib.send('], "end": "toNumber"},');

      }
      module.exports = throttle;
            SRTlib.send('], "end": "call22"},');

    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey149"},');

  }, {}],
  139: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey150", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    module.exports = Math.log2 || (function (x) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports11", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports11"},');

      return Math.log(x) * Math.LOG2E;
            SRTlib.send('], "end": "module.exports11"},');

    });
        SRTlib.send('], "end": "emptyKey150"},');

  }, {}],
  140: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey151", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var inherits = require('inherits');
    var HashBase = require('hash-base');
    var Buffer = require('safe-buffer').Buffer;
    var ARRAY16 = new Array(16);
    function MD5() {
            SRTlib.send(`{ "anonymous": false, "function": "MD5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      HashBase.call(this, 64);
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
            SRTlib.send('], "end": "MD5"},');

    }
    inherits(MD5, HashBase);
    MD5.prototype._update = function () {
            SRTlib.send(`{ "anonymous": true, "function": "MD5.prototype._update", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var M = ARRAY16;
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
      d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
      c = fnF(c, d, a, b, M[2], 0x242070db, 17);
      b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
      a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
      d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
      c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
      b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
      a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
      d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
      c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
      b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
      a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
      d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
      c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
      b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
      a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
      d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
      c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
      b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
      a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
      d = fnG(d, a, b, c, M[10], 0x02441453, 9);
      c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
      b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
      a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
      d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
      c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
      b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
      a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
      d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
      c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
      b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
      a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
      d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
      c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
      b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
      a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
      d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
      c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
      b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
      a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
      d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
      c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
      b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
      a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
      d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
      c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
      b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
      a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
      d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
      c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
      b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
      a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
      d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
      c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
      b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
      a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
      d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
      c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
      b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
      a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
      d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
      c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
      b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
      this._a = this._a + a | 0;
      this._b = this._b + b | 0;
      this._c = this._c + c | 0;
      this._d = this._d + d | 0;
            SRTlib.send('], "end": "MD5.prototype._update"},');

    };
    MD5.prototype._digest = function () {
            SRTlib.send(`{ "anonymous": true, "function": "MD5.prototype._digest", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._block[this._blockOffset++] = 0x80;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
            SRTlib.send('], "end": "MD5.prototype._digest"},');

      return buffer;
            SRTlib.send('], "end": "MD5.prototype._digest"},');

    };
    function rotl(x, n) {
            SRTlib.send(`{ "anonymous": false, "function": "rotl", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "rotl"},');

      return x << n | x >>> 32 - n;
            SRTlib.send('], "end": "rotl"},');

    }
    function fnF(a, b, c, d, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fnF", "fileName": "${__filename}", "paramsNumber": 7, "calls" : [`);

            SRTlib.send('], "end": "fnF"},');

      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
            SRTlib.send('], "end": "fnF"},');

    }
    function fnG(a, b, c, d, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fnG", "fileName": "${__filename}", "paramsNumber": 7, "calls" : [`);

            SRTlib.send('], "end": "fnG"},');

      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
            SRTlib.send('], "end": "fnG"},');

    }
    function fnH(a, b, c, d, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fnH", "fileName": "${__filename}", "paramsNumber": 7, "calls" : [`);

            SRTlib.send('], "end": "fnH"},');

      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
            SRTlib.send('], "end": "fnH"},');

    }
    function fnI(a, b, c, d, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fnI", "fileName": "${__filename}", "paramsNumber": 7, "calls" : [`);

            SRTlib.send('], "end": "fnI"},');

      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
            SRTlib.send('], "end": "fnI"},');

    }
    module.exports = MD5;
        SRTlib.send('], "end": "emptyKey151"},');

  }, {
    "hash-base": 117,
    "inherits": 133,
    "safe-buffer": 190
  }],
  141: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey152", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    function areInputsEqual(newInputs, lastInputs) {
            SRTlib.send(`{ "anonymous": false, "function": "areInputsEqual", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (newInputs.length !== lastInputs.length) {
                SRTlib.send('], "end": "areInputsEqual"},');

        return false;
      }
      for (var i = 0; i < newInputs.length; i++) {
        if (newInputs[i] !== lastInputs[i]) {
                    SRTlib.send('], "end": "areInputsEqual"},');

          return false;
        }
      }
            SRTlib.send('], "end": "areInputsEqual"},');

      return true;
            SRTlib.send('], "end": "areInputsEqual"},');

    }
    function memoizeOne(resultFn, isEqual) {
            SRTlib.send(`{ "anonymous": false, "function": "memoizeOne", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (isEqual === void 0) {
        isEqual = areInputsEqual;
      }
      var lastThis;
      var lastArgs = [];
      var lastResult;
      var calledOnce = false;
      function memoized() {
                SRTlib.send(`{ "anonymous": false, "function": "memoized", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          newArgs[_i] = arguments[_i];
        }
        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
                    SRTlib.send('], "end": "memoized"},');

          return lastResult;
        }
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
                SRTlib.send('], "end": "memoized"},');

        return lastResult;
                SRTlib.send('], "end": "memoized"},');

      }
            SRTlib.send('], "end": "memoizeOne"},');

      return memoized;
            SRTlib.send('], "end": "memoizeOne"},');

    }
    module.exports = memoizeOne;
        SRTlib.send('], "end": "emptyKey152"},');

  }, {}],
  142: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey153", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var bn = require('bn.js');
    var brorand = require('brorand');
    function MillerRabin(rand) {
            SRTlib.send(`{ "anonymous": false, "function": "MillerRabin", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.rand = rand || new brorand.Rand();
            SRTlib.send('], "end": "MillerRabin"},');

    }
    module.exports = MillerRabin;
    MillerRabin.create = function create(rand) {
            SRTlib.send(`{ "anonymous": true, "function": "MillerRabin.create.create", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "MillerRabin.create.create"},');

      return new MillerRabin(rand);
            SRTlib.send('], "end": "MillerRabin.create.create"},');

    };
    MillerRabin.prototype._randbelow = function _randbelow(n) {
            SRTlib.send(`{ "anonymous": true, "function": "MillerRabin.prototype._randbelow._randbelow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8);
      do var a = new bn(this.rand.generate(min_bytes)); while (a.cmp(n) >= 0);
            SRTlib.send('], "end": "MillerRabin.prototype._randbelow._randbelow"},');

      return a;
            SRTlib.send('], "end": "MillerRabin.prototype._randbelow._randbelow"},');

    };
    MillerRabin.prototype._randrange = function _randrange(start, stop) {
            SRTlib.send(`{ "anonymous": true, "function": "MillerRabin.prototype._randrange._randrange", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var size = stop.sub(start);
            SRTlib.send('], "end": "MillerRabin.prototype._randrange._randrange"},');

      return start.add(this._randbelow(size));
            SRTlib.send('], "end": "MillerRabin.prototype._randrange._randrange"},');

    };
    MillerRabin.prototype.test = function test(n, k, cb) {
            SRTlib.send(`{ "anonymous": true, "function": "MillerRabin.prototype.test.test", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      if (!k) k = Math.max(1, len / 48 | 0);
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      var prime = true;
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0) {
                        SRTlib.send('], "end": "MillerRabin.prototype.test.test"},');

            return false;
          }
          if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
                    SRTlib.send('], "end": "MillerRabin.prototype.test.test"},');

          return false;
        }
      }
            SRTlib.send('], "end": "MillerRabin.prototype.test.test"},');

      return prime;
            SRTlib.send('], "end": "MillerRabin.prototype.test.test"},');

    };
    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
            SRTlib.send(`{ "anonymous": true, "function": "MillerRabin.prototype.getDivisor.getDivisor", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      if (!k) k = Math.max(1, len / 48 | 0);
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {}
      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) {
                    SRTlib.send('], "end": "MillerRabin.prototype.getDivisor.getDivisor"},');

          return g;
        }
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0) {
                        SRTlib.send('], "end": "MillerRabin.prototype.getDivisor.getDivisor"},');

            return x.fromRed().subn(1).gcd(n);
          }
          if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
          x = x.redSqr();
                    SRTlib.send('], "end": "MillerRabin.prototype.getDivisor.getDivisor"},');

          return x.fromRed().subn(1).gcd(n);
        }
      }
            SRTlib.send('], "end": "MillerRabin.prototype.getDivisor.getDivisor"},');

      return false;
            SRTlib.send('], "end": "MillerRabin.prototype.getDivisor.getDivisor"},');

    };
        SRTlib.send('], "end": "emptyKey153"},');

  }, {
    "bn.js": 21,
    "brorand": 22
  }],
  143: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey154", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var wildcard = require('wildcard');
    var reMimePartSplit = /[\/\+\.]/;
    module.exports = function (target, pattern) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports12", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      function test(pattern) {
                SRTlib.send(`{ "anonymous": false, "function": "test", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var result = wildcard(pattern, target, reMimePartSplit);
                SRTlib.send('], "end": "test"},');

        return result && result.length >= 2;
                SRTlib.send('], "end": "test"},');

      }
            SRTlib.send('], "end": "module.exports12"},');

      return pattern ? test(pattern.split(';')[0]) : test;
            SRTlib.send('], "end": "module.exports12"},');

    };
        SRTlib.send('], "end": "emptyKey154"},');

  }, {
    "wildcard": 236
  }],
  144: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey155", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = assert;
    function assert(val, msg) {
            SRTlib.send(`{ "anonymous": false, "function": "assert", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!val) {
                SRTlib.send('], "end": "assert"},');

        throw new Error(msg || 'Assertion failed');
      }
            SRTlib.send('], "end": "assert"},');

    }
    assert.equal = function assertEqual(l, r, msg) {
            SRTlib.send(`{ "anonymous": true, "function": "assert.equal.assertEqual", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (l != r) {
                SRTlib.send('], "end": "assert.equal.assertEqual"},');

        throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
      }
            SRTlib.send('], "end": "assert.equal.assertEqual"},');

    };
        SRTlib.send('], "end": "emptyKey155"},');

  }, {}],
  145: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey156", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var utils = exports;
    function toArray(msg, enc) {
            SRTlib.send(`{ "anonymous": false, "function": "toArray", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (Array.isArray(msg)) {
                SRTlib.send('], "end": "toArray"},');

        return msg.slice();
      }
      if (!msg) {
                SRTlib.send('], "end": "toArray"},');

        return [];
      }
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
                SRTlib.send('], "end": "toArray"},');

        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi) res.push(hi, lo); else res.push(lo);
        }
      }
            SRTlib.send('], "end": "toArray"},');

      return res;
            SRTlib.send('], "end": "toArray"},');

    }
    utils.toArray = toArray;
    function zero2(word) {
            SRTlib.send(`{ "anonymous": false, "function": "zero2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (word.length === 1) return '0' + word; else {
                SRTlib.send('], "end": "emptyKey156"},');

        return '0' + word;
      }
            SRTlib.send('], "end": "zero2"},');

    }
    utils.zero2 = zero2;
    function toHex(msg) {
            SRTlib.send(`{ "anonymous": false, "function": "toHex", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var res = '';
      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
            SRTlib.send('], "end": "toHex"},');

      return res;
            SRTlib.send('], "end": "toHex"},');

    }
    utils.toHex = toHex;
    utils.encode = function encode(arr, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "utils.encode.encode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (enc === 'hex') return toHex(arr); else {
                SRTlib.send('], "end": "emptyKey156"},');

        return toHex(arr);
      }
            SRTlib.send('], "end": "utils.encode.encode"},');

    };
        SRTlib.send('], "end": "emptyKey156"},');

  }, {}],
  146: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey157", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function createNamespaceEmitter() {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.createNamespaceEmitter", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var emitter = {};
      var _fns = emitter._fns = {};
      emitter.emit = function emit(event, arg1, arg2, arg3, arg4, arg5, arg6) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.createNamespaceEmitter.emitter.emit.emit", "fileName": "${__filename}", "paramsNumber": 7, "calls" : [`);

        var toEmit = getListeners(event);
        if (toEmit.length) {
          emitAll(event, toEmit, [arg1, arg2, arg3, arg4, arg5, arg6]);
        }
                SRTlib.send('], "end": "module.exports.createNamespaceEmitter.emitter.emit.emit"},');

      };
      emitter.on = function on(event, fn) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.createNamespaceEmitter.emitter.on.on", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!_fns[event]) {
          _fns[event] = [];
        }
        _fns[event].push(fn);
                SRTlib.send('], "end": "module.exports.createNamespaceEmitter.emitter.on.on"},');

      };
      emitter.once = function once(event, fn) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.createNamespaceEmitter.emitter.once.once", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        function one() {
                    SRTlib.send(`{ "anonymous": false, "function": "one", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          fn.apply(this, arguments);
          emitter.off(event, one);
                    SRTlib.send('], "end": "one"},');

        }
        this.on(event, one);
                SRTlib.send('], "end": "module.exports.createNamespaceEmitter.emitter.once.once"},');

      };
      emitter.off = function off(event, fn) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.createNamespaceEmitter.emitter.off.off", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var keep = [];
        if (event && fn) {
          var fns = this._fns[event];
          var i = 0;
          var l = fns ? fns.length : 0;
          for (i; i < l; i++) {
            if (fns[i] !== fn) {
              keep.push(fns[i]);
            }
          }
        }
        keep.length ? this._fns[event] = keep : delete this._fns[event];
                SRTlib.send('], "end": "module.exports.createNamespaceEmitter.emitter.off.off"},');

      };
      function getListeners(e) {
                SRTlib.send(`{ "anonymous": false, "function": "getListeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var out = _fns[e] ? _fns[e] : [];
        var idx = e.indexOf(':');
        var args = idx === -1 ? [e] : [e.substring(0, idx), e.substring(idx + 1)];
        var keys = Object.keys(_fns);
        var i = 0;
        var l = keys.length;
        for (i; i < l; i++) {
          var key = keys[i];
          if (key === '*') {
            out = out.concat(_fns[key]);
          }
          if (args.length === 2 && args[0] === key) {
            out = out.concat(_fns[key]);
            break;
          }
        }
                SRTlib.send('], "end": "getListeners"},');

        return out;
                SRTlib.send('], "end": "getListeners"},');

      }
      function emitAll(e, fns, args) {
                SRTlib.send(`{ "anonymous": false, "function": "emitAll", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var i = 0;
        var l = fns.length;
        for (i; i < l; i++) {
          if (!fns[i]) break;
          fns[i].event = e;
          fns[i].apply(fns[i], args);
        }
                SRTlib.send('], "end": "emitAll"},');

      }
            SRTlib.send('], "end": "module.exports.createNamespaceEmitter"},');

      return emitter;
            SRTlib.send('], "end": "module.exports.createNamespaceEmitter"},');

    };
        SRTlib.send('], "end": "emptyKey157"},');

  }, {}],
  147: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey158", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
        SRTlib.send('], "end": "emptyKey158"},');

  }, {}],
  148: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey159", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var asn1 = require('asn1.js');
    exports.certificate = require('./certificate');
    var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
            SRTlib.send(`{ "anonymous": true, "function": "RSAPrivateKey", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
            SRTlib.send('], "end": "RSAPrivateKey"},');

    });
    exports.RSAPrivateKey = RSAPrivateKey;
    var RSAPublicKey = asn1.define('RSAPublicKey', function () {
            SRTlib.send(`{ "anonymous": true, "function": "RSAPublicKey", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
            SRTlib.send('], "end": "RSAPublicKey"},');

    });
    exports.RSAPublicKey = RSAPublicKey;
    var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
            SRTlib.send(`{ "anonymous": true, "function": "PublicKey", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
            SRTlib.send('], "end": "PublicKey"},');

    });
    exports.PublicKey = PublicKey;
    var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
            SRTlib.send(`{ "anonymous": true, "function": "AlgorithmIdentifier", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
            SRTlib.send('], "end": "AlgorithmIdentifier"},');

    });
    var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
            SRTlib.send(`{ "anonymous": true, "function": "PrivateKeyInfo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
            SRTlib.send('], "end": "PrivateKeyInfo"},');

    });
    exports.PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
            SRTlib.send(`{ "anonymous": true, "function": "EncryptedPrivateKeyInfo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
            SRTlib.send('], "end": "EncryptedPrivateKeyInfo"},');

    });
    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
    var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
            SRTlib.send(`{ "anonymous": true, "function": "DSAPrivateKey", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
            SRTlib.send('], "end": "DSAPrivateKey"},');

    });
    exports.DSAPrivateKey = DSAPrivateKey;
    exports.DSAparam = asn1.define('DSAparam', function () {
            SRTlib.send(`{ "anonymous": true, "function": "exports.DSAparam", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.int();
            SRTlib.send('], "end": "exports.DSAparam"},');

    });
    var ECPrivateKey = asn1.define('ECPrivateKey', function () {
            SRTlib.send(`{ "anonymous": true, "function": "ECPrivateKey", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
            SRTlib.send('], "end": "ECPrivateKey"},');

    });
    exports.ECPrivateKey = ECPrivateKey;
    var ECParameters = asn1.define('ECParameters', function () {
            SRTlib.send(`{ "anonymous": true, "function": "ECParameters", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.choice({
        namedCurve: this.objid()
      });
            SRTlib.send('], "end": "ECParameters"},');

    });
    exports.signature = asn1.define('signature', function () {
            SRTlib.send(`{ "anonymous": true, "function": "exports.signature", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('r').int(), this.key('s').int());
            SRTlib.send('], "end": "exports.signature"},');

    });
        SRTlib.send('], "end": "emptyKey159"},');

  }, {
    "./certificate": 149,
    "asn1.js": 3
  }],
  149: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey160", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var asn = require('asn1.js');
    var Time = asn.define('Time', function () {
            SRTlib.send(`{ "anonymous": true, "function": "Time", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      });
            SRTlib.send('], "end": "Time"},');

    });
    var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
            SRTlib.send(`{ "anonymous": true, "function": "AttributeTypeValue", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('type').objid(), this.key('value').any());
            SRTlib.send('], "end": "AttributeTypeValue"},');

    });
    var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
            SRTlib.send(`{ "anonymous": true, "function": "AlgorithmIdentifier2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
            SRTlib.send('], "end": "AlgorithmIdentifier2"},');

    });
    var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
            SRTlib.send(`{ "anonymous": true, "function": "SubjectPublicKeyInfo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
            SRTlib.send('], "end": "SubjectPublicKeyInfo"},');

    });
    var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
            SRTlib.send(`{ "anonymous": true, "function": "RelativeDistinguishedName", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.setof(AttributeTypeValue);
            SRTlib.send('], "end": "RelativeDistinguishedName"},');

    });
    var RDNSequence = asn.define('RDNSequence', function () {
            SRTlib.send(`{ "anonymous": true, "function": "RDNSequence", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seqof(RelativeDistinguishedName);
            SRTlib.send('], "end": "RDNSequence"},');

    });
    var Name = asn.define('Name', function () {
            SRTlib.send(`{ "anonymous": true, "function": "Name", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.choice({
        rdnSequence: this.use(RDNSequence)
      });
            SRTlib.send('], "end": "Name"},');

    });
    var Validity = asn.define('Validity', function () {
            SRTlib.send(`{ "anonymous": true, "function": "Validity", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
            SRTlib.send('], "end": "Validity"},');

    });
    var Extension = asn.define('Extension', function () {
            SRTlib.send(`{ "anonymous": true, "function": "Extension", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
            SRTlib.send('], "end": "Extension"},');

    });
    var TBSCertificate = asn.define('TBSCertificate', function () {
            SRTlib.send(`{ "anonymous": true, "function": "TBSCertificate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
            SRTlib.send('], "end": "TBSCertificate"},');

    });
    var X509Certificate = asn.define('X509Certificate', function () {
            SRTlib.send(`{ "anonymous": true, "function": "X509Certificate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
            SRTlib.send('], "end": "X509Certificate"},');

    });
    module.exports = X509Certificate;
        SRTlib.send('], "end": "emptyKey160"},');

  }, {
    "asn1.js": 3
  }],
  150: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey161", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m;
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m;
    var evp = require('evp_bytestokey');
    var ciphers = require('browserify-aes');
    var Buffer = require('safe-buffer').Buffer;
    module.exports = function (okey, password) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports13", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var key = okey.toString();
      var match = key.match(findProc);
      var decrypted;
      if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64');
      } else {
        var suite = 'aes' + match[1];
        var iv = Buffer.from(match[2], 'hex');
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer.concat(out);
      }
      var tag = key.match(startRegex)[1];
            SRTlib.send('], "end": "module.exports13"},');

      return {
        tag: tag,
        data: decrypted
      };
            SRTlib.send('], "end": "module.exports13"},');

    };
        SRTlib.send('], "end": "emptyKey161"},');

  }, {
    "browserify-aes": 26,
    "evp_bytestokey": 112,
    "safe-buffer": 190
  }],
  151: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey162", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var asn1 = require('./asn1');
    var aesid = require('./aesid.json');
    var fixProc = require('./fixProc');
    var ciphers = require('browserify-aes');
    var compat = require('pbkdf2');
    var Buffer = require('safe-buffer').Buffer;
    module.exports = parseKeys;
    function parseKeys(buffer) {
            SRTlib.send(`{ "anonymous": false, "function": "parseKeys", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var password;
      if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
      }
      if (typeof buffer === 'string') {
        buffer = Buffer.from(buffer);
      }
      var stripped = fixProc(buffer, password);
      var type = stripped.tag;
      var data = stripped.data;
      var subtype, ndata;
      switch (type) {
        case 'CERTIFICATE':
          ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        case 'PUBLIC KEY':
                    SRTlib.send('], "end": "emptyKey162"},');

                    SRTlib.send('], "end": "parseKeys"},');

          if (!ndata) {
            ndata = asn1.PublicKey.decode(data, 'der');
          }
          subtype = ndata.algorithm.algorithm.join('.');
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
                            SRTlib.send('], "end": "emptyKey162"},');

                            SRTlib.send('], "end": "parseKeys"},');

              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
            case '1.2.840.10045.2.1':
                            SRTlib.send('], "end": "emptyKey162"},');

                            SRTlib.send('], "end": "parseKeys"},');

              ndata.subjectPrivateKey = ndata.subjectPublicKey;
              return {
                type: 'ec',
                data: ndata
              };
            case '1.2.840.10040.4.1':
                            SRTlib.send('], "end": "emptyKey162"},');

                            SRTlib.send('], "end": "parseKeys"},');

              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
              return {
                type: 'dsa',
                data: ndata.algorithm.params
              };
            default:
                            SRTlib.send('], "end": "emptyKey162"},');

                            SRTlib.send('], "end": "parseKeys"},');

              throw new Error('unknown key id ' + subtype);
          }
          throw new Error('unknown key type ' + type);
        case 'ENCRYPTED PRIVATE KEY':
          data = asn1.EncryptedPrivateKey.decode(data, 'der');
          data = decrypt(data, password);
        case 'PRIVATE KEY':
                    SRTlib.send('], "end": "emptyKey162"},');

                    SRTlib.send('], "end": "parseKeys"},');

          ndata = asn1.PrivateKey.decode(data, 'der');
          subtype = ndata.algorithm.algorithm.join('.');
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
                            SRTlib.send('], "end": "emptyKey162"},');

                            SRTlib.send('], "end": "parseKeys"},');

              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
            case '1.2.840.10045.2.1':
                            SRTlib.send('], "end": "emptyKey162"},');

                            SRTlib.send('], "end": "parseKeys"},');

              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
              };
            case '1.2.840.10040.4.1':
                            SRTlib.send('], "end": "emptyKey162"},');

                            SRTlib.send('], "end": "parseKeys"},');

              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
              return {
                type: 'dsa',
                params: ndata.algorithm.params
              };
            default:
                            SRTlib.send('], "end": "emptyKey162"},');

                            SRTlib.send('], "end": "parseKeys"},');

              throw new Error('unknown key id ' + subtype);
          }
          throw new Error('unknown key type ' + type);
        case 'RSA PUBLIC KEY':
                    SRTlib.send('], "end": "emptyKey162"},');

                    SRTlib.send('], "end": "parseKeys"},');

          return asn1.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
                    SRTlib.send('], "end": "emptyKey162"},');

                    SRTlib.send('], "end": "parseKeys"},');

          return asn1.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
                    SRTlib.send('], "end": "emptyKey162"},');

                    SRTlib.send('], "end": "parseKeys"},');

          return {
            type: 'dsa',
            params: asn1.DSAPrivateKey.decode(data, 'der')
          };
        case 'EC PRIVATE KEY':
                    SRTlib.send('], "end": "emptyKey162"},');

                    SRTlib.send('], "end": "parseKeys"},');

          data = asn1.ECPrivateKey.decode(data, 'der');
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          };
        default:
                    SRTlib.send('], "end": "emptyKey162"},');

                    SRTlib.send('], "end": "parseKeys"},');

          throw new Error('unknown key type ' + type);
      }
            SRTlib.send('], "end": "parseKeys"},');

    }
    parseKeys.signature = asn1.signature;
    function decrypt(data, password) {
            SRTlib.send(`{ "anonymous": false, "function": "decrypt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var salt = data.algorithm.decrypt.kde.kdeparams.salt;
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
      var iv = data.algorithm.decrypt.cipher.iv;
      var cipherText = data.subjectPrivateKey;
      var keylen = parseInt(algo.split('-')[1], 10) / 8;
      var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
      var cipher = ciphers.createDecipheriv(algo, key, iv);
      var out = [];
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
            SRTlib.send('], "end": "decrypt"},');

      return Buffer.concat(out);
            SRTlib.send('], "end": "decrypt"},');

    }
        SRTlib.send('], "end": "emptyKey162"},');

  }, {
    "./aesid.json": 147,
    "./asn1": 148,
    "./fixProc": 150,
    "browserify-aes": 26,
    "pbkdf2": 154,
    "safe-buffer": 190
  }],
  152: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey163", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    exports.encode = function (obj) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.encode2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var str = '';
      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          if (str.length) str += '&';
          str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
        }
      }
            SRTlib.send('], "end": "exports.encode2"},');

      return str;
            SRTlib.send('], "end": "exports.encode2"},');

    };
    exports.decode = function (qs) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.decode2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var qry = {};
      var pairs = qs.split('&');
      for (var i = 0, l = pairs.length; i < l; i++) {
        var pair = pairs[i].split('=');
        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
      }
            SRTlib.send('], "end": "exports.decode2"},');

      return qry;
            SRTlib.send('], "end": "exports.decode2"},');

    };
        SRTlib.send('], "end": "emptyKey163"},');

  }, {}],
  153: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey164", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];
    module.exports = function parseuri(str) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.parseuri", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var src = str, b = str.indexOf('['), e = str.indexOf(']');
      if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
      }
      var m = re.exec(str || ''), uri = {}, i = 14;
      while (i--) {
        uri[parts[i]] = m[i] || '';
      }
      if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
      }
            SRTlib.send('], "end": "module.exports.parseuri"},');

      return uri;
            SRTlib.send('], "end": "module.exports.parseuri"},');

    };
        SRTlib.send('], "end": "emptyKey164"},');

  }, {}],
  154: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey165", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    exports.pbkdf2 = require('./lib/async');
    exports.pbkdf2Sync = require('./lib/sync');
        SRTlib.send('], "end": "emptyKey165"},');

  }, {
    "./lib/async": 155,
    "./lib/sync": 158
  }],
  155: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey170", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process, global) {
            SRTlib.send(`{ "anonymous": true, "function": "call23", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var checkParameters = require('./precondition');
      var defaultEncoding = require('./default-encoding');
      var sync = require('./sync');
      var Buffer = require('safe-buffer').Buffer;
      var ZERO_BUF;
      var subtle = global.crypto && global.crypto.subtle;
      var toBrowser = {
        'sha': 'SHA-1',
        'sha-1': 'SHA-1',
        'sha1': 'SHA-1',
        'sha256': 'SHA-256',
        'sha-256': 'SHA-256',
        'sha384': 'SHA-384',
        'sha-384': 'SHA-384',
        'sha-512': 'SHA-512',
        'sha512': 'SHA-512'
      };
      var checks = [];
      function checkNative(algo) {
                SRTlib.send(`{ "anonymous": false, "function": "checkNative", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (global.process && !global.process.browser) {
                    SRTlib.send('], "end": "checkNative"},');

          return Promise.resolve(false);
        }
        if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                    SRTlib.send('], "end": "checkNative"},');

          return Promise.resolve(false);
        }
        if (checks[algo] !== undefined) {
                    SRTlib.send('], "end": "checkNative"},');

          return checks[algo];
        }
        ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
        var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "prom.then.catch.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "prom.then.catch.then"},');

          return true;
                    SRTlib.send('], "end": "prom.then.catch.then"},');

        }).catch(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "prom.then.catch", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "prom.then.catch"},');

          return false;
                    SRTlib.send('], "end": "prom.then.catch"},');

        });
        checks[algo] = prom;
                SRTlib.send('], "end": "checkNative"},');

        return prom;
                SRTlib.send('], "end": "checkNative"},');

      }
      function browserPbkdf2(password, salt, iterations, length, algo) {
                SRTlib.send(`{ "anonymous": false, "function": "browserPbkdf2", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

                SRTlib.send('], "end": "browserPbkdf2"},');

        return subtle.importKey('raw', password, {
          name: 'PBKDF2'
        }, false, ['deriveBits']).then(function (key) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.then.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.then.then.then"},');

          return subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
              name: algo
            }
          }, key, length << 3);
                    SRTlib.send('], "end": "ReturnStatement.then.then.then"},');

        }).then(function (res) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.then.then"},');

          return Buffer.from(res);
                    SRTlib.send('], "end": "ReturnStatement.then.then"},');

        });
                SRTlib.send('], "end": "browserPbkdf2"},');

      }
      function resolvePromise(promise, callback) {
                SRTlib.send(`{ "anonymous": false, "function": "resolvePromise", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        promise.then(function (out) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey167", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          process.nextTick(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "emptyKey166", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            callback(null, out);
                        SRTlib.send('], "end": "emptyKey166"},');

          });
                    SRTlib.send('], "end": "emptyKey167"},');

        }, function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey169", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          process.nextTick(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "emptyKey168", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            callback(e);
                        SRTlib.send('], "end": "emptyKey168"},');

          });
                    SRTlib.send('], "end": "emptyKey169"},');

        });
                SRTlib.send('], "end": "resolvePromise"},');

      }
      module.exports = function (password, salt, iterations, keylen, digest, callback) {
                SRTlib.send(`{ "anonymous": true, "function": "call.module.exports", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

        if (typeof digest === 'function') {
          callback = digest;
          digest = undefined;
        }
        digest = digest || 'sha1';
        var algo = toBrowser[digest.toLowerCase()];
        if (!algo || typeof global.Promise !== 'function') {
                    SRTlib.send('], "end": "call.module.exports"},');

          return process.nextTick(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.module.exports.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var out;
            try {
              out = sync(password, salt, iterations, keylen, digest);
            } catch (e) {
                            SRTlib.send('], "end": "call.module.exports.ReturnStatement"},');

              return callback(e);
            }
            callback(null, out);
                        SRTlib.send('], "end": "call.module.exports.ReturnStatement"},');

          });
        }
        checkParameters(password, salt, iterations, keylen);
        if (typeof callback !== 'function') {
                    SRTlib.send('], "end": "call.module.exports"},');

          throw new Error('No callback provided to pbkdf2');
        }
        if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);
        resolvePromise(checkNative(algo).then(function (resp) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.module.exports.resolvePromise.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (resp) {
                        SRTlib.send('], "end": "call.module.exports.resolvePromise.then"},');

            return browserPbkdf2(password, salt, iterations, keylen, algo);
          }
                    SRTlib.send('], "end": "call.module.exports.resolvePromise.then"},');

          return sync(password, salt, iterations, keylen, digest);
                    SRTlib.send('], "end": "call.module.exports.resolvePromise.then"},');

        }), callback);
                SRTlib.send('], "end": "call.module.exports"},');

      };
            SRTlib.send('], "end": "call23"},');

    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey170"},');

  }, {
    "./default-encoding": 156,
    "./precondition": 157,
    "./sync": 158,
    "_process": 162,
    "safe-buffer": 190
  }],
  156: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey171", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process) {
            SRTlib.send(`{ "anonymous": true, "function": "call24", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var defaultEncoding;
      if (process.browser) {
        defaultEncoding = 'utf-8';
      } else {
        var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
        defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
      }
      module.exports = defaultEncoding;
            SRTlib.send('], "end": "call24"},');

    }).call(this, require('_process'));
        SRTlib.send('], "end": "emptyKey171"},');

  }, {
    "_process": 162
  }],
  157: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey172", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call25", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var MAX_ALLOC = Math.pow(2, 30) - 1;
      function checkBuffer(buf, name) {
                SRTlib.send(`{ "anonymous": false, "function": "checkBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
                    SRTlib.send('], "end": "checkBuffer"},');

          throw new TypeError(name + ' must be a buffer or string');
        }
                SRTlib.send('], "end": "checkBuffer"},');

      }
      module.exports = function (password, salt, iterations, keylen) {
                SRTlib.send(`{ "anonymous": true, "function": "call.module.exports2", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        checkBuffer(password, 'Password');
        checkBuffer(salt, 'Salt');
        if (typeof iterations !== 'number') {
                    SRTlib.send('], "end": "call.module.exports2"},');

          throw new TypeError('Iterations not a number');
        }
        if (iterations < 0) {
                    SRTlib.send('], "end": "call.module.exports2"},');

          throw new TypeError('Bad iterations');
        }
        if (typeof keylen !== 'number') {
                    SRTlib.send('], "end": "call.module.exports2"},');

          throw new TypeError('Key length not a number');
        }
        if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
                    SRTlib.send('], "end": "call.module.exports2"},');

          throw new TypeError('Bad key length');
        }
                SRTlib.send('], "end": "call.module.exports2"},');

      };
            SRTlib.send('], "end": "call25"},');

    }).call(this, {
      "isBuffer": require("../../is-buffer/index.js")
    });
        SRTlib.send('], "end": "emptyKey172"},');

  }, {
    "../../is-buffer/index.js": 134
  }],
  158: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey173", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var md5 = require('create-hash/md5');
    var RIPEMD160 = require('ripemd160');
    var sha = require('sha.js');
    var checkParameters = require('./precondition');
    var defaultEncoding = require('./default-encoding');
    var Buffer = require('safe-buffer').Buffer;
    var ZEROS = Buffer.alloc(128);
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    };
    function Hmac(alg, key, saltLen) {
            SRTlib.send(`{ "anonymous": false, "function": "Hmac", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var hash = getDigest(alg);
      var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
      if (key.length > blocksize) {
        key = hash(key);
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize);
      }
      var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
      }
      var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash;
      this.size = sizes[alg];
            SRTlib.send('], "end": "Hmac"},');

    }
    Hmac.prototype.run = function (data, ipad) {
            SRTlib.send(`{ "anonymous": true, "function": "Hmac.prototype.run", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      data.copy(ipad, this.blocksize);
      var h = this.hash(ipad);
      h.copy(this.opad, this.blocksize);
            SRTlib.send('], "end": "Hmac.prototype.run"},');

      return this.hash(this.opad);
            SRTlib.send('], "end": "Hmac.prototype.run"},');

    };
    function getDigest(alg) {
            SRTlib.send(`{ "anonymous": false, "function": "getDigest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      function shaFunc(data) {
                SRTlib.send(`{ "anonymous": false, "function": "shaFunc", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "shaFunc"},');

        return sha(alg).update(data).digest();
                SRTlib.send('], "end": "shaFunc"},');

      }
      function rmd160Func(data) {
                SRTlib.send(`{ "anonymous": false, "function": "rmd160Func", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "rmd160Func"},');

        return new RIPEMD160().update(data).digest();
                SRTlib.send('], "end": "rmd160Func"},');

      }
      if (alg === 'rmd160' || alg === 'ripemd160') {
                SRTlib.send('], "end": "getDigest"},');

        return rmd160Func;
      }
      if (alg === 'md5') {
                SRTlib.send('], "end": "getDigest"},');

        return md5;
      }
            SRTlib.send('], "end": "getDigest"},');

      return shaFunc;
            SRTlib.send('], "end": "getDigest"},');

    }
    function pbkdf2(password, salt, iterations, keylen, digest) {
            SRTlib.send(`{ "anonymous": false, "function": "pbkdf2", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      checkParameters(password, salt, iterations, keylen);
      if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
      if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);
      digest = digest || 'sha1';
      var hmac = new Hmac(digest, password, salt.length);
      var DK = Buffer.allocUnsafe(keylen);
      var block1 = Buffer.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var destPos = 0;
      var hLen = sizes[digest];
      var l = Math.ceil(keylen / hLen);
      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2);
          for (var k = 0; k < hLen; k++) T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
      }
            SRTlib.send('], "end": "pbkdf2"},');

      return DK;
            SRTlib.send('], "end": "pbkdf2"},');

    }
    module.exports = pbkdf2;
        SRTlib.send('], "end": "emptyKey173"},');

  }, {
    "./default-encoding": 156,
    "./precondition": 157,
    "create-hash/md5": 60,
    "ripemd160": 189,
    "safe-buffer": 190,
    "sha.js": 192
  }],
  159: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey180", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global, factory) {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey174", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('preact')) : typeof define === 'function' && define.amd ? define(['preact'], factory) : global.PreactCSSTransitionGroup = factory(global.preact);
            SRTlib.send('], "end": "emptyKey174"},');

    })(this, function (preact) {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey179", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      'use strict';
      function getKey(vnode) {
                SRTlib.send(`{ "anonymous": false, "function": "getKey", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "getKey"},');

        return vnode.attributes && vnode.attributes.key;
                SRTlib.send('], "end": "getKey"},');

      }
      function getComponentBase(component) {
                SRTlib.send(`{ "anonymous": false, "function": "getComponentBase", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "getComponentBase"},');

        return component.base;
                SRTlib.send('], "end": "getComponentBase"},');

      }
      function onlyChild(children) {
                SRTlib.send(`{ "anonymous": false, "function": "onlyChild", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "onlyChild"},');

        return children && children[0];
                SRTlib.send('], "end": "onlyChild"},');

      }
      function filterNullChildren(children) {
                SRTlib.send(`{ "anonymous": false, "function": "filterNullChildren", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "filterNullChildren"},');

        return children && children.filter(function (i) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement9", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement9"},');

          return i !== null;
                    SRTlib.send('], "end": "ReturnStatement9"},');

        });
                SRTlib.send('], "end": "filterNullChildren"},');

      }
      function find(arr, iter) {
                SRTlib.send(`{ "anonymous": false, "function": "find", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        for (var i = arr.length; i--; ) {
          if (iter(arr[i])) {
                        SRTlib.send('], "end": "find"},');

            return true;
          }
        }
                SRTlib.send('], "end": "find"},');

        return false;
                SRTlib.send('], "end": "find"},');

      }
      function inChildrenByKey(children, key) {
                SRTlib.send(`{ "anonymous": false, "function": "inChildrenByKey", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "inChildrenByKey"},');

        return find(children, function (c) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.find", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.find"},');

          return getKey(c) === key;
                    SRTlib.send('], "end": "ReturnStatement.find"},');

        });
                SRTlib.send('], "end": "inChildrenByKey"},');

      }
      function inChildren(children, child) {
                SRTlib.send(`{ "anonymous": false, "function": "inChildren", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "inChildren"},');

        return inChildrenByKey(children, getKey(child));
                SRTlib.send('], "end": "inChildren"},');

      }
      function isShownInChildrenByKey(children, key, showProp) {
                SRTlib.send(`{ "anonymous": false, "function": "isShownInChildrenByKey", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "isShownInChildrenByKey"},');

        return find(children, function (c) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.find2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.find2"},');

          return getKey(c) === key && c.props[showProp];
                    SRTlib.send('], "end": "ReturnStatement.find2"},');

        });
                SRTlib.send('], "end": "isShownInChildrenByKey"},');

      }
      function isShownInChildren(children, child, showProp) {
                SRTlib.send(`{ "anonymous": false, "function": "isShownInChildren", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "isShownInChildren"},');

        return isShownInChildrenByKey(children, getKey(child), showProp);
                SRTlib.send('], "end": "isShownInChildren"},');

      }
      function mergeChildMappings(prev, next) {
                SRTlib.send(`{ "anonymous": false, "function": "mergeChildMappings", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var ret = [];
        var nextChildrenPending = {}, pendingChildren = [];
        prev.forEach(function (c) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey175", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var key = getKey(c);
          if (inChildrenByKey(next, key)) {
            if (pendingChildren.length) {
              nextChildrenPending[key] = pendingChildren;
              pendingChildren = [];
            }
          } else {
            pendingChildren.push(c);
          }
                    SRTlib.send('], "end": "emptyKey175"},');

        });
        next.forEach(function (c) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey176", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var key = getKey(c);
          if (nextChildrenPending.hasOwnProperty(key)) {
            ret = ret.concat(nextChildrenPending[key]);
          }
          ret.push(c);
                    SRTlib.send('], "end": "emptyKey176"},');

        });
                SRTlib.send('], "end": "mergeChildMappings"},');

        return ret.concat(pendingChildren);
                SRTlib.send('], "end": "mergeChildMappings"},');

      }
      var SPACE = ' ';
      var RE_CLASS = /[\n\t\r]+/g;
      var norm = function (elemClass) {
                SRTlib.send(`{ "anonymous": false, "function": "norm", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "norm"},');

        return (SPACE + elemClass + SPACE).replace(RE_CLASS, SPACE);
                SRTlib.send('], "end": "norm"},');

      };
      function addClass(elem, className) {
                SRTlib.send(`{ "anonymous": false, "function": "addClass", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (elem.classList) {
          var _elem$classList;
          (_elem$classList = elem.classList).add.apply(_elem$classList, className.split(' '));
        } else {
          elem.className += ' ' + className;
        }
                SRTlib.send('], "end": "addClass"},');

      }
      function removeClass(elem, needle) {
                SRTlib.send(`{ "anonymous": false, "function": "removeClass", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        needle = needle.trim();
        if (elem.classList) {
          var _elem$classList2;
          (_elem$classList2 = elem.classList).remove.apply(_elem$classList2, needle.split(' '));
        } else {
          var elemClass = elem.className.trim();
          var className = norm(elemClass);
          needle = SPACE + needle + SPACE;
          while (className.indexOf(needle) >= 0) {
            className = className.replace(needle, SPACE);
          }
          elem.className = className.trim();
        }
                SRTlib.send('], "end": "removeClass"},');

      }
      var EVENT_NAME_MAP = {
        transitionend: {
          transition: 'transitionend',
          WebkitTransition: 'webkitTransitionEnd',
          MozTransition: 'mozTransitionEnd',
          OTransition: 'oTransitionEnd',
          msTransition: 'MSTransitionEnd'
        },
        animationend: {
          animation: 'animationend',
          WebkitAnimation: 'webkitAnimationEnd',
          MozAnimation: 'mozAnimationEnd',
          OAnimation: 'oAnimationEnd',
          msAnimation: 'MSAnimationEnd'
        }
      };
      var endEvents = [];
      function detectEvents() {
                SRTlib.send(`{ "anonymous": false, "function": "detectEvents", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var testEl = document.createElement('div'), style = testEl.style;
        if (!(('AnimationEvent' in window))) {
          delete EVENT_NAME_MAP.animationend.animation;
        }
        if (!(('TransitionEvent' in window))) {
          delete EVENT_NAME_MAP.transitionend.transition;
        }
        for (var baseEventName in EVENT_NAME_MAP) {
          var baseEvents = EVENT_NAME_MAP[baseEventName];
          for (var styleName in baseEvents) {
            if ((styleName in style)) {
              endEvents.push(baseEvents[styleName]);
              break;
            }
          }
        }
                SRTlib.send('], "end": "detectEvents"},');

      }
      if (typeof window !== 'undefined') {
        detectEvents();
      }
      function addEndEventListener(node, eventListener) {
                SRTlib.send(`{ "anonymous": false, "function": "addEndEventListener", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!endEvents.length) {
                    SRTlib.send('], "end": "addEndEventListener"},');

          return window.setTimeout(eventListener, 0);
        }
        endEvents.forEach(function (endEvent) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey177", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          node.addEventListener(endEvent, eventListener, false);
                    SRTlib.send('], "end": "emptyKey177"},');

        });
                SRTlib.send('], "end": "addEndEventListener"},');

      }
      function removeEndEventListener(node, eventListener) {
                SRTlib.send(`{ "anonymous": false, "function": "removeEndEventListener", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!endEvents.length) {
                    SRTlib.send('], "end": "removeEndEventListener"},');

          return;
        }
        endEvents.forEach(function (endEvent) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey178", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          node.removeEventListener(endEvent, eventListener, false);
                    SRTlib.send('], "end": "emptyKey178"},');

        });
                SRTlib.send('], "end": "removeEndEventListener"},');

      }
      var classCallCheck = function (instance, Constructor) {
                SRTlib.send(`{ "anonymous": false, "function": "classCallCheck", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!(instance instanceof Constructor)) {
                    SRTlib.send('], "end": "classCallCheck"},');

          throw new TypeError("Cannot call a class as a function");
        }
                SRTlib.send('], "end": "classCallCheck"},');

      };
      var inherits = function (subClass, superClass) {
                SRTlib.send(`{ "anonymous": false, "function": "inherits", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (typeof superClass !== "function" && superClass !== null) {
                    SRTlib.send('], "end": "inherits"},');

          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
                SRTlib.send('], "end": "inherits"},');

      };
      var objectWithoutProperties = function (obj, keys) {
                SRTlib.send(`{ "anonymous": false, "function": "objectWithoutProperties", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0) continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
          target[i] = obj[i];
        }
                SRTlib.send('], "end": "objectWithoutProperties"},');

        return target;
                SRTlib.send('], "end": "objectWithoutProperties"},');

      };
      var possibleConstructorReturn = function (self, call) {
                SRTlib.send(`{ "anonymous": false, "function": "possibleConstructorReturn", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!self) {
                    SRTlib.send('], "end": "possibleConstructorReturn"},');

          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
                SRTlib.send('], "end": "possibleConstructorReturn"},');

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
                SRTlib.send('], "end": "possibleConstructorReturn"},');

      };
      var TICK = 17;
      var CSSTransitionGroupChild = (function (_Component) {
                SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        inherits(CSSTransitionGroupChild, _Component);
        function CSSTransitionGroupChild() {
                    SRTlib.send(`{ "anonymous": false, "function": "CSSTransitionGroupChild", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _temp, _this, _ret;
          classCallCheck(this, CSSTransitionGroupChild);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
                    SRTlib.send('], "end": "CSSTransitionGroupChild"},');

          return (_ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.flushClassNameQueue = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement._ret._this.flushClassNameQueue", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (getComponentBase(_this)) {
              addClass(getComponentBase(_this), _this.classNameQueue.join(' '));
            }
            _this.classNameQueue.length = 0;
            _this.timeout = null;
                        SRTlib.send('], "end": "ReturnStatement._ret._this.flushClassNameQueue"},');

          }, _temp), possibleConstructorReturn(_this, _ret));
                    SRTlib.send('], "end": "CSSTransitionGroupChild"},');

        }
        CSSTransitionGroupChild.prototype.transition = function transition(animationType, finishCallback, timeout) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.transition.transition", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var _this2 = this;
          var node = getComponentBase(this);
          var className = this.props.name[animationType] || this.props.name + '-' + animationType;
          var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
          var timer = null;
          if (this.endListener) {
            this.endListener();
          }
          this.endListener = function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.transition.transition.endListener", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (e && e.target !== node) {
                            SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.transition.transition.endListener"},');

              return;
            }
            clearTimeout(timer);
            removeClass(node, className);
            removeClass(node, activeClassName);
            removeEndEventListener(node, _this2.endListener);
            _this2.endListener = null;
            if (finishCallback) {
              finishCallback();
            }
                        SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.transition.transition.endListener"},');

          };
          if (timeout) {
            timer = setTimeout(this.endListener, timeout);
            this.transitionTimeouts.push(timer);
          } else {
            addEndEventListener(node, this.endListener);
          }
          addClass(node, className);
          this.queueClass(activeClassName);
                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.transition.transition"},');

        };
        CSSTransitionGroupChild.prototype.queueClass = function queueClass(className) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.queueClass.queueClass", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          this.classNameQueue.push(className);
          if (!this.timeout) {
            this.timeout = setTimeout(this.flushClassNameQueue, TICK);
          }
                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.queueClass.queueClass"},');

        };
        CSSTransitionGroupChild.prototype.stop = function stop() {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.stop.stop", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (this.timeout) {
            clearTimeout(this.timeout);
            this.classNameQueue.length = 0;
            this.timeout = null;
          }
          if (this.endListener) {
            this.endListener();
          }
                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.stop.stop"},');

        };
        CSSTransitionGroupChild.prototype.componentWillMount = function componentWillMount() {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillMount.componentWillMount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          this.classNameQueue = [];
          this.transitionTimeouts = [];
                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillMount.componentWillMount"},');

        };
        CSSTransitionGroupChild.prototype.componentWillUnmount = function componentWillUnmount() {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillUnmount.componentWillUnmount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (this.timeout) {
            clearTimeout(this.timeout);
          }
          this.transitionTimeouts.forEach(function (timeout) {
                        SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillUnmount.componentWillUnmount.transitionTimeouts.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            clearTimeout(timeout);
                        SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillUnmount.componentWillUnmount.transitionTimeouts.forEach"},');

          });
                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillUnmount.componentWillUnmount"},');

        };
        CSSTransitionGroupChild.prototype.componentWillEnter = function componentWillEnter(done) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillEnter.componentWillEnter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (this.props.enter) {
            this.transition('enter', done, this.props.enterTimeout);
          } else {
            done();
          }
                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillEnter.componentWillEnter"},');

        };
        CSSTransitionGroupChild.prototype.componentWillLeave = function componentWillLeave(done) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillLeave.componentWillLeave", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (this.props.leave) {
            this.transition('leave', done, this.props.leaveTimeout);
          } else {
            done();
          }
                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.componentWillLeave.componentWillLeave"},');

        };
        CSSTransitionGroupChild.prototype.render = function render() {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.render.render", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.render.render"},');

          return onlyChild(this.props.children);
                    SRTlib.send('], "end": "CSSTransitionGroupChild.CSSTransitionGroupChild.prototype.render.render"},');

        };
                SRTlib.send('], "end": "CSSTransitionGroupChild"},');

        return CSSTransitionGroupChild;
                SRTlib.send('], "end": "CSSTransitionGroupChild"},');

      })(preact.Component);
      var CSSTransitionGroup = (function (_Component) {
                SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        inherits(CSSTransitionGroup, _Component);
        function CSSTransitionGroup(props) {
                    SRTlib.send(`{ "anonymous": false, "function": "CSSTransitionGroup", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          classCallCheck(this, CSSTransitionGroup);
          var _this = possibleConstructorReturn(this, _Component.call(this));
          _this.renderChild = function (child) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.renderChild", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var _this$props = _this.props;
            var transitionName = _this$props.transitionName;
            var transitionEnter = _this$props.transitionEnter;
            var transitionLeave = _this$props.transitionLeave;
            var transitionEnterTimeout = _this$props.transitionEnterTimeout;
            var transitionLeaveTimeout = _this$props.transitionLeaveTimeout;
            var key = getKey(child);
                        SRTlib.send('], "end": "_this.renderChild"},');

            return preact.h(CSSTransitionGroupChild, {
              key: key,
              ref: function (c) {
                                SRTlib.send(`{ "anonymous": true, "function": "_this.renderChild.ReturnStatement.ref", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                if (!(_this.refs[key] = c)) child = null;
                                SRTlib.send('], "end": "_this.renderChild.ReturnStatement.ref"},');

              },
              name: transitionName,
              enter: transitionEnter,
              leave: transitionLeave,
              enterTimeout: transitionEnterTimeout,
              leaveTimeout: transitionLeaveTimeout
            }, child);
                        SRTlib.send('], "end": "_this.renderChild"},');

          };
          _this.refs = {};
          _this.state = {
            children: (props.children || []).slice()
          };
                    SRTlib.send('], "end": "CSSTransitionGroup"},');

          return _this;
                    SRTlib.send('], "end": "CSSTransitionGroup"},');

        }
        CSSTransitionGroup.prototype.shouldComponentUpdate = function shouldComponentUpdate(_, _ref) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.shouldComponentUpdate.shouldComponentUpdate", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var children = _ref.children;
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.shouldComponentUpdate.shouldComponentUpdate"},');

          return children !== this.state.children;
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.shouldComponentUpdate.shouldComponentUpdate"},');

        };
        CSSTransitionGroup.prototype.componentWillMount = function componentWillMount() {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillMount.componentWillMount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          this.currentlyTransitioningKeys = {};
          this.keysToEnter = [];
          this.keysToLeave = [];
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillMount.componentWillMount"},');

        };
        CSSTransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref2) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _this2 = this;
          var children = _ref2.children;
          var exclusive = _ref2.exclusive;
          var showProp = _ref2.showProp;
          var nextChildMapping = filterNullChildren(children || []).slice();
          var prevChildMapping = filterNullChildren(exclusive ? this.props.children : this.state.children);
          var newChildren = mergeChildMappings(prevChildMapping, nextChildMapping);
          if (showProp) {
            newChildren = newChildren.map(function (c) {
                            SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps.newChildren", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (!c.props[showProp] && isShownInChildren(prevChildMapping, c, showProp)) {
                var _cloneElement;
                c = preact.cloneElement(c, (_cloneElement = {}, _cloneElement[showProp] = true, _cloneElement));
              }
                            SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps.newChildren"},');

              return c;
                            SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps.newChildren"},');

            });
          }
          if (exclusive) {
            newChildren.forEach(function (c) {
                            SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps"},');

              return _this2.stop(getKey(c));
                            SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps"},');

            });
          }
          this.setState({
            children: newChildren
          });
          this.forceUpdate();
          nextChildMapping.forEach(function (c) {
                        SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var key = c.key;
            var hasPrev = prevChildMapping && inChildren(prevChildMapping, c);
            if (showProp) {
              if (hasPrev) {
                var showInPrev = isShownInChildren(prevChildMapping, c, showProp), showInNow = c.props[showProp];
                if (!showInPrev && showInNow && !_this2.currentlyTransitioningKeys[key]) {
                  _this2.keysToEnter.push(key);
                }
              }
            } else if (!hasPrev && !_this2.currentlyTransitioningKeys[key]) {
              _this2.keysToEnter.push(key);
            }
                        SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps2"},');

          });
          prevChildMapping.forEach(function (c) {
                        SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var key = c.key;
            var hasNext = nextChildMapping && inChildren(nextChildMapping, c);
            if (showProp) {
              if (hasNext) {
                var showInNext = isShownInChildren(nextChildMapping, c, showProp);
                var showInNow = c.props[showProp];
                if (!showInNext && showInNow && !_this2.currentlyTransitioningKeys[key]) {
                  _this2.keysToLeave.push(key);
                }
              }
            } else if (!hasNext && !_this2.currentlyTransitioningKeys[key]) {
              _this2.keysToLeave.push(key);
            }
                        SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps3"},');

          });
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentWillReceiveProps.componentWillReceiveProps4"},');

        };
        CSSTransitionGroup.prototype.performEnter = function performEnter(key) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.performEnter.performEnter2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _this3 = this;
          this.currentlyTransitioningKeys[key] = true;
          var component = this.refs[key];
          if (component.componentWillEnter) {
            component.componentWillEnter(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.performEnter.performEnter", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.performEnter.performEnter"},');

              return _this3._handleDoneEntering(key);
                            SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.performEnter.performEnter"},');

            });
          } else {
            this._handleDoneEntering(key);
          }
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.performEnter.performEnter2"},');

        };
        CSSTransitionGroup.prototype._handleDoneEntering = function _handleDoneEntering(key) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype._handleDoneEntering._handleDoneEntering", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          delete this.currentlyTransitioningKeys[key];
          var currentChildMapping = filterNullChildren(this.props.children), showProp = this.props.showProp;
          if (!currentChildMapping || !showProp && !inChildrenByKey(currentChildMapping, key) || showProp && !isShownInChildrenByKey(currentChildMapping, key, showProp)) {
            this.performLeave(key);
          } else {
            this.setState({
              children: currentChildMapping
            });
          }
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype._handleDoneEntering._handleDoneEntering"},');

        };
        CSSTransitionGroup.prototype.stop = function stop(key) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.stop.stop", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          delete this.currentlyTransitioningKeys[key];
          var component = this.refs[key];
          if (component) component.stop();
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.stop.stop"},');

        };
        CSSTransitionGroup.prototype.performLeave = function performLeave(key) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.performLeave.performLeave2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _this4 = this;
          this.currentlyTransitioningKeys[key] = true;
          var component = this.refs[key];
          if (component && component.componentWillLeave) {
            component.componentWillLeave(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.performLeave.performLeave", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.performLeave.performLeave"},');

              return _this4._handleDoneLeaving(key);
                            SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.performLeave.performLeave"},');

            });
          } else {
            this._handleDoneLeaving(key);
          }
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.performLeave.performLeave2"},');

        };
        CSSTransitionGroup.prototype._handleDoneLeaving = function _handleDoneLeaving(key) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype._handleDoneLeaving._handleDoneLeaving", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          delete this.currentlyTransitioningKeys[key];
          var showProp = this.props.showProp, currentChildMapping = filterNullChildren(this.props.children);
          if (showProp && currentChildMapping && isShownInChildrenByKey(currentChildMapping, key, showProp)) {
            this.performEnter(key);
          } else if (!showProp && currentChildMapping && inChildrenByKey(currentChildMapping, key)) {
            this.performEnter(key);
          } else {
            this.setState({
              children: currentChildMapping
            });
          }
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype._handleDoneLeaving._handleDoneLeaving"},');

        };
        CSSTransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentDidUpdate.componentDidUpdate3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this5 = this;
          var keysToEnter = this.keysToEnter;
          var keysToLeave = this.keysToLeave;
          this.keysToEnter = [];
          keysToEnter.forEach(function (k) {
                        SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentDidUpdate.componentDidUpdate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentDidUpdate.componentDidUpdate"},');

            return _this5.performEnter(k);
                        SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentDidUpdate.componentDidUpdate"},');

          });
          this.keysToLeave = [];
          keysToLeave.forEach(function (k) {
                        SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentDidUpdate.componentDidUpdate2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentDidUpdate.componentDidUpdate2"},');

            return _this5.performLeave(k);
                        SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentDidUpdate.componentDidUpdate2"},');

          });
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.componentDidUpdate.componentDidUpdate3"},');

        };
        CSSTransitionGroup.prototype.render = function render(_ref3, _ref4) {
                    SRTlib.send(`{ "anonymous": true, "function": "CSSTransitionGroup.CSSTransitionGroup.prototype.render.render", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var Component = _ref3.component;
          var transitionName = _ref3.transitionName;
          var transitionEnter = _ref3.transitionEnter;
          var transitionLeave = _ref3.transitionLeave;
          var transitionEnterTimeout = _ref3.transitionEnterTimeout;
          var transitionLeaveTimeout = _ref3.transitionLeaveTimeout;
          var c = _ref3.children;
          var props = objectWithoutProperties(_ref3, ['component', 'transitionName', 'transitionEnter', 'transitionLeave', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'children']);
          var children = _ref4.children;
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.render.render"},');

          return preact.h(Component, props, filterNullChildren(children).map(this.renderChild));
                    SRTlib.send('], "end": "CSSTransitionGroup.CSSTransitionGroup.prototype.render.render"},');

        };
                SRTlib.send('], "end": "CSSTransitionGroup"},');

        return CSSTransitionGroup;
                SRTlib.send('], "end": "CSSTransitionGroup"},');

      })(preact.Component);
      CSSTransitionGroup.defaultProps = {
        component: 'span',
        transitionEnter: true,
        transitionLeave: true
      };
            SRTlib.send('], "end": "emptyKey179"},');

      return CSSTransitionGroup;
            SRTlib.send('], "end": "emptyKey179"},');

    });
        SRTlib.send('], "end": "emptyKey180"},');

  }, {
    "preact": 160
  }],
  160: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey182", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    !(function () {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey181", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      'use strict';
      function VNode() {
                SRTlib.send(`{ "anonymous": false, "function": "VNode", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "VNode"},');

      }
      function h(nodeName, attributes) {
                SRTlib.send(`{ "anonymous": false, "function": "h", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var lastSimple, child, simple, i, children = EMPTY_CHILDREN;
        for (i = arguments.length; i-- > 2; ) stack.push(arguments[i]);
        if (attributes && null != attributes.children) {
          if (!stack.length) stack.push(attributes.children);
          delete attributes.children;
        }
        while (stack.length) if ((child = stack.pop()) && void 0 !== child.pop) for (i = child.length; i--; ) stack.push(child[i]); else {
          if ('boolean' == typeof child) child = null;
          if (simple = 'function' != typeof nodeName) if (null == child) child = ''; else if ('number' == typeof child) child = String(child); else if ('string' != typeof child) simple = !1;
          if (simple && lastSimple) children[children.length - 1] += child; else if (children === EMPTY_CHILDREN) children = [child]; else children.push(child);
          lastSimple = simple;
        }
        var p = new VNode();
        p.nodeName = nodeName;
        p.children = children;
        p.attributes = null == attributes ? void 0 : attributes;
        p.key = null == attributes ? void 0 : attributes.key;
        if (void 0 !== options.vnode) options.vnode(p);
                SRTlib.send('], "end": "h"},');

        return p;
                SRTlib.send('], "end": "h"},');

      }
      function extend(obj, props) {
                SRTlib.send(`{ "anonymous": false, "function": "extend", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        for (var i in props) obj[i] = props[i];
                SRTlib.send('], "end": "extend"},');

        return obj;
                SRTlib.send('], "end": "extend"},');

      }
      function cloneElement(vnode, props) {
                SRTlib.send(`{ "anonymous": false, "function": "cloneElement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "cloneElement"},');

        return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);
                SRTlib.send('], "end": "cloneElement"},');

      }
      function enqueueRender(component) {
                SRTlib.send(`{ "anonymous": false, "function": "enqueueRender", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!component.__d && (component.__d = !0) && 1 == items.push(component)) (options.debounceRendering || defer)(rerender);
                SRTlib.send('], "end": "enqueueRender"},');

      }
      function rerender() {
                SRTlib.send(`{ "anonymous": false, "function": "rerender", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var p, list = items;
        items = [];
        while (p = list.pop()) if (p.__d) renderComponent(p);
                SRTlib.send('], "end": "rerender"},');

      }
      function isSameNodeType(node, vnode, hydrating) {
                SRTlib.send(`{ "anonymous": false, "function": "isSameNodeType", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if ('string' == typeof vnode || 'number' == typeof vnode) {
                    SRTlib.send('], "end": "isSameNodeType"},');

          return void 0 !== node.splitText;
        }
        if ('string' == typeof vnode.nodeName) return !node._componentConstructor && isNamedNode(node, vnode.nodeName); else {
                    SRTlib.send('], "end": "emptyKey182"},');

          return !node._componentConstructor && isNamedNode(node, vnode.nodeName);
        }
                SRTlib.send('], "end": "isSameNodeType"},');

      }
      function isNamedNode(node, nodeName) {
                SRTlib.send(`{ "anonymous": false, "function": "isNamedNode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "isNamedNode"},');

        return node.__n === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();
                SRTlib.send('], "end": "isNamedNode"},');

      }
      function getNodeProps(vnode) {
                SRTlib.send(`{ "anonymous": false, "function": "getNodeProps", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var props = extend({}, vnode.attributes);
        props.children = vnode.children;
        var defaultProps = vnode.nodeName.defaultProps;
        if (void 0 !== defaultProps) for (var i in defaultProps) if (void 0 === props[i]) props[i] = defaultProps[i];
                SRTlib.send('], "end": "getNodeProps"},');

        return props;
                SRTlib.send('], "end": "getNodeProps"},');

      }
      function createNode(nodeName, isSvg) {
                SRTlib.send(`{ "anonymous": false, "function": "createNode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);
        node.__n = nodeName;
                SRTlib.send('], "end": "createNode"},');

        return node;
                SRTlib.send('], "end": "createNode"},');

      }
      function removeNode(node) {
                SRTlib.send(`{ "anonymous": false, "function": "removeNode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var parentNode = node.parentNode;
        if (parentNode) parentNode.removeChild(node);
                SRTlib.send('], "end": "removeNode"},');

      }
      function setAccessor(node, name, old, value, isSvg) {
                SRTlib.send(`{ "anonymous": false, "function": "setAccessor", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        if ('className' === name) name = 'class';
        if ('key' === name) ; else if ('ref' === name) {
          if (old) old(null);
          if (value) value(node);
        } else if ('class' === name && !isSvg) node.className = value || ''; else if ('style' === name) {
          if (!value || 'string' == typeof value || 'string' == typeof old) node.style.cssText = value || '';
          if (value && 'object' == typeof value) {
            if ('string' != typeof old) for (var i in old) if (!((i in value))) node.style[i] = '';
            for (var i in value) node.style[i] = 'number' == typeof value[i] && !1 === IS_NON_DIMENSIONAL.test(i) ? value[i] + 'px' : value[i];
          }
        } else if ('dangerouslySetInnerHTML' === name) {
          if (value) node.innerHTML = value.__html || '';
        } else if ('o' == name[0] && 'n' == name[1]) {
          var useCapture = name !== (name = name.replace(/Capture$/, ''));
          name = name.toLowerCase().substring(2);
          if (value) {
            if (!old) node.addEventListener(name, eventProxy, useCapture);
          } else node.removeEventListener(name, eventProxy, useCapture);
          (node.__l || (node.__l = {}))[name] = value;
        } else if ('list' !== name && 'type' !== name && !isSvg && (name in node)) {
          setProperty(node, name, null == value ? '' : value);
          if (null == value || !1 === value) node.removeAttribute(name);
        } else {
          var ns = isSvg && name !== (name = name.replace(/^xlink:?/, ''));
          if (null == value || !1 === value) if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase()); else node.removeAttribute(name); else if ('function' != typeof value) if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value); else node.setAttribute(name, value);
        }
                SRTlib.send('], "end": "setAccessor"},');

      }
      function setProperty(node, name, value) {
                SRTlib.send(`{ "anonymous": false, "function": "setProperty", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        try {
          node[name] = value;
        } catch (e) {}
                SRTlib.send('], "end": "setProperty"},');

      }
      function eventProxy(e) {
                SRTlib.send(`{ "anonymous": false, "function": "eventProxy", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "eventProxy"},');

        return this.__l[e.type](options.event && options.event(e) || e);
                SRTlib.send('], "end": "eventProxy"},');

      }
      function flushMounts() {
                SRTlib.send(`{ "anonymous": false, "function": "flushMounts", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var c;
        while (c = mounts.pop()) {
          if (options.afterMount) options.afterMount(c);
          if (c.componentDidMount) c.componentDidMount();
        }
                SRTlib.send('], "end": "flushMounts"},');

      }
      function diff(dom, vnode, context, mountAll, parent, componentRoot) {
                SRTlib.send(`{ "anonymous": false, "function": "diff", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

        if (!diffLevel++) {
          isSvgMode = null != parent && void 0 !== parent.ownerSVGElement;
          hydrating = null != dom && !(('__preactattr_' in dom));
        }
        var ret = idiff(dom, vnode, context, mountAll, componentRoot);
        if (parent && ret.parentNode !== parent) parent.appendChild(ret);
        if (!--diffLevel) {
          hydrating = !1;
          if (!componentRoot) flushMounts();
        }
                SRTlib.send('], "end": "diff"},');

        return ret;
                SRTlib.send('], "end": "diff"},');

      }
      function idiff(dom, vnode, context, mountAll, componentRoot) {
                SRTlib.send(`{ "anonymous": false, "function": "idiff", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        var out = dom, prevSvgMode = isSvgMode;
        if (null == vnode || 'boolean' == typeof vnode) vnode = '';
        if ('string' == typeof vnode || 'number' == typeof vnode) {
          if (dom && void 0 !== dom.splitText && dom.parentNode && (!dom._component || componentRoot)) {
            if (dom.nodeValue != vnode) dom.nodeValue = vnode;
          } else {
            out = document.createTextNode(vnode);
            if (dom) {
              if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
              recollectNodeTree(dom, !0);
            }
          }
          out.__preactattr_ = !0;
                    SRTlib.send('], "end": "idiff"},');

          return out;
        }
        var vnodeName = vnode.nodeName;
        if ('function' == typeof vnodeName) {
                    SRTlib.send('], "end": "idiff"},');

          return buildComponentFromVNode(dom, vnode, context, mountAll);
        }
        isSvgMode = 'svg' === vnodeName ? !0 : 'foreignObject' === vnodeName ? !1 : isSvgMode;
        vnodeName = String(vnodeName);
        if (!dom || !isNamedNode(dom, vnodeName)) {
          out = createNode(vnodeName, isSvgMode);
          if (dom) {
            while (dom.firstChild) out.appendChild(dom.firstChild);
            if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
            recollectNodeTree(dom, !0);
          }
        }
        var fc = out.firstChild, props = out.__preactattr_, vchildren = vnode.children;
        if (null == props) {
          props = out.__preactattr_ = {};
          for (var a = out.attributes, i = a.length; i--; ) props[a[i].name] = a[i].value;
        }
        if (!hydrating && vchildren && 1 === vchildren.length && 'string' == typeof vchildren[0] && null != fc && void 0 !== fc.splitText && null == fc.nextSibling) {
          if (fc.nodeValue != vchildren[0]) fc.nodeValue = vchildren[0];
        } else if (vchildren && vchildren.length || null != fc) innerDiffNode(out, vchildren, context, mountAll, hydrating || null != props.dangerouslySetInnerHTML);
        diffAttributes(out, vnode.attributes, props);
        isSvgMode = prevSvgMode;
                SRTlib.send('], "end": "idiff"},');

        return out;
                SRTlib.send('], "end": "idiff"},');

      }
      function innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {
                SRTlib.send(`{ "anonymous": false, "function": "innerDiffNode", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        var j, c, f, vchild, child, originalChildren = dom.childNodes, children = [], keyed = {}, keyedLen = 0, min = 0, len = originalChildren.length, childrenLen = 0, vlen = vchildren ? vchildren.length : 0;
        if (0 !== len) for (var i = 0; i < len; i++) {
          var _child = originalChildren[i], props = _child.__preactattr_, key = vlen && props ? _child._component ? _child._component.__k : props.key : null;
          if (null != key) {
            keyedLen++;
            keyed[key] = _child;
          } else if (props || (void 0 !== _child.splitText ? isHydrating ? _child.nodeValue.trim() : !0 : isHydrating)) children[childrenLen++] = _child;
        }
        if (0 !== vlen) for (var i = 0; i < vlen; i++) {
          vchild = vchildren[i];
          child = null;
          var key = vchild.key;
          if (null != key) {
            if (keyedLen && void 0 !== keyed[key]) {
              child = keyed[key];
              keyed[key] = void 0;
              keyedLen--;
            }
          } else if (!child && min < childrenLen) for (j = min; j < childrenLen; j++) if (void 0 !== children[j] && isSameNodeType(c = children[j], vchild, isHydrating)) {
            child = c;
            children[j] = void 0;
            if (j === childrenLen - 1) childrenLen--;
            if (j === min) min++;
            break;
          }
          child = idiff(child, vchild, context, mountAll);
          f = originalChildren[i];
          if (child && child !== dom && child !== f) if (null == f) dom.appendChild(child); else if (child === f.nextSibling) removeNode(f); else dom.insertBefore(child, f);
        }
        if (keyedLen) for (var i in keyed) if (void 0 !== keyed[i]) recollectNodeTree(keyed[i], !1);
        while (min <= childrenLen) if (void 0 !== (child = children[childrenLen--])) recollectNodeTree(child, !1);
                SRTlib.send('], "end": "innerDiffNode"},');

      }
      function recollectNodeTree(node, unmountOnly) {
                SRTlib.send(`{ "anonymous": false, "function": "recollectNodeTree", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var component = node._component;
        if (component) unmountComponent(component); else {
          if (null != node.__preactattr_ && node.__preactattr_.ref) node.__preactattr_.ref(null);
          if (!1 === unmountOnly || null == node.__preactattr_) removeNode(node);
          removeChildren(node);
        }
                SRTlib.send('], "end": "recollectNodeTree"},');

      }
      function removeChildren(node) {
                SRTlib.send(`{ "anonymous": false, "function": "removeChildren", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        node = node.lastChild;
        while (node) {
          var next = node.previousSibling;
          recollectNodeTree(node, !0);
          node = next;
        }
                SRTlib.send('], "end": "removeChildren"},');

      }
      function diffAttributes(dom, attrs, old) {
                SRTlib.send(`{ "anonymous": false, "function": "diffAttributes", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var name;
        for (name in old) if ((!attrs || null == attrs[name]) && null != old[name]) setAccessor(dom, name, old[name], old[name] = void 0, isSvgMode);
        for (name in attrs) if (!('children' === name || 'innerHTML' === name || (name in old) && attrs[name] === ('value' === name || 'checked' === name ? dom[name] : old[name]))) setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);
                SRTlib.send('], "end": "diffAttributes"},');

      }
      function collectComponent(component) {
                SRTlib.send(`{ "anonymous": false, "function": "collectComponent", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var name = component.constructor.name;
        (components[name] || (components[name] = [])).push(component);
                SRTlib.send('], "end": "collectComponent"},');

      }
      function createComponent(Ctor, props, context) {
                SRTlib.send(`{ "anonymous": false, "function": "createComponent", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var inst, list = components[Ctor.name];
        if (Ctor.prototype && Ctor.prototype.render) {
          inst = new Ctor(props, context);
          Component.call(inst, props, context);
        } else {
          inst = new Component(props, context);
          inst.constructor = Ctor;
          inst.render = doRender;
        }
        if (list) for (var i = list.length; i--; ) if (list[i].constructor === Ctor) {
          inst.__b = list[i].__b;
          list.splice(i, 1);
          break;
        }
                SRTlib.send('], "end": "createComponent"},');

        return inst;
                SRTlib.send('], "end": "createComponent"},');

      }
      function doRender(props, state, context) {
                SRTlib.send(`{ "anonymous": false, "function": "doRender", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "doRender"},');

        return this.constructor(props, context);
                SRTlib.send('], "end": "doRender"},');

      }
      function setComponentProps(component, props, opts, context, mountAll) {
                SRTlib.send(`{ "anonymous": false, "function": "setComponentProps", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        if (!component.__x) {
          component.__x = !0;
          if (component.__r = props.ref) delete props.ref;
          if (component.__k = props.key) delete props.key;
          if (!component.base || mountAll) {
            if (component.componentWillMount) component.componentWillMount();
          } else if (component.componentWillReceiveProps) component.componentWillReceiveProps(props, context);
          if (context && context !== component.context) {
            if (!component.__c) component.__c = component.context;
            component.context = context;
          }
          if (!component.__p) component.__p = component.props;
          component.props = props;
          component.__x = !1;
          if (0 !== opts) if (1 === opts || !1 !== options.syncComponentUpdates || !component.base) renderComponent(component, 1, mountAll); else enqueueRender(component);
          if (component.__r) component.__r(component);
        }
                SRTlib.send('], "end": "setComponentProps"},');

      }
      function renderComponent(component, opts, mountAll, isChild) {
                SRTlib.send(`{ "anonymous": false, "function": "renderComponent", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (!component.__x) {
          var rendered, inst, cbase, props = component.props, state = component.state, context = component.context, previousProps = component.__p || props, previousState = component.__s || state, previousContext = component.__c || context, isUpdate = component.base, nextBase = component.__b, initialBase = isUpdate || nextBase, initialChildComponent = component._component, skip = !1;
          if (isUpdate) {
            component.props = previousProps;
            component.state = previousState;
            component.context = previousContext;
            if (2 !== opts && component.shouldComponentUpdate && !1 === component.shouldComponentUpdate(props, state, context)) skip = !0; else if (component.componentWillUpdate) component.componentWillUpdate(props, state, context);
            component.props = props;
            component.state = state;
            component.context = context;
          }
          component.__p = component.__s = component.__c = component.__b = null;
          component.__d = !1;
          if (!skip) {
            rendered = component.render(props, state, context);
            if (component.getChildContext) context = extend(extend({}, context), component.getChildContext());
            var toUnmount, base, childComponent = rendered && rendered.nodeName;
            if ('function' == typeof childComponent) {
              var childProps = getNodeProps(rendered);
              inst = initialChildComponent;
              if (inst && inst.constructor === childComponent && childProps.key == inst.__k) setComponentProps(inst, childProps, 1, context, !1); else {
                toUnmount = inst;
                component._component = inst = createComponent(childComponent, childProps, context);
                inst.__b = inst.__b || nextBase;
                inst.__u = component;
                setComponentProps(inst, childProps, 0, context, !1);
                renderComponent(inst, 1, mountAll, !0);
              }
              base = inst.base;
            } else {
              cbase = initialBase;
              toUnmount = initialChildComponent;
              if (toUnmount) cbase = component._component = null;
              if (initialBase || 1 === opts) {
                if (cbase) cbase._component = null;
                base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, !0);
              }
            }
            if (initialBase && base !== initialBase && inst !== initialChildComponent) {
              var baseParent = initialBase.parentNode;
              if (baseParent && base !== baseParent) {
                baseParent.replaceChild(base, initialBase);
                if (!toUnmount) {
                  initialBase._component = null;
                  recollectNodeTree(initialBase, !1);
                }
              }
            }
            if (toUnmount) unmountComponent(toUnmount);
            component.base = base;
            if (base && !isChild) {
              var componentRef = component, t = component;
              while (t = t.__u) (componentRef = t).base = base;
              base._component = componentRef;
              base._componentConstructor = componentRef.constructor;
            }
          }
          if (!isUpdate || mountAll) mounts.unshift(component); else if (!skip) {
            if (component.componentDidUpdate) component.componentDidUpdate(previousProps, previousState, previousContext);
            if (options.afterUpdate) options.afterUpdate(component);
          }
          if (null != component.__h) while (component.__h.length) component.__h.pop().call(component);
          if (!diffLevel && !isChild) flushMounts();
        }
                SRTlib.send('], "end": "renderComponent"},');

      }
      function buildComponentFromVNode(dom, vnode, context, mountAll) {
                SRTlib.send(`{ "anonymous": false, "function": "buildComponentFromVNode", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        var c = dom && dom._component, originalComponent = c, oldDom = dom, isDirectOwner = c && dom._componentConstructor === vnode.nodeName, isOwner = isDirectOwner, props = getNodeProps(vnode);
        while (c && !isOwner && (c = c.__u)) isOwner = c.constructor === vnode.nodeName;
        if (c && isOwner && (!mountAll || c._component)) {
          setComponentProps(c, props, 3, context, mountAll);
          dom = c.base;
        } else {
          if (originalComponent && !isDirectOwner) {
            unmountComponent(originalComponent);
            dom = oldDom = null;
          }
          c = createComponent(vnode.nodeName, props, context);
          if (dom && !c.__b) {
            c.__b = dom;
            oldDom = null;
          }
          setComponentProps(c, props, 1, context, mountAll);
          dom = c.base;
          if (oldDom && dom !== oldDom) {
            oldDom._component = null;
            recollectNodeTree(oldDom, !1);
          }
        }
                SRTlib.send('], "end": "buildComponentFromVNode"},');

        return dom;
                SRTlib.send('], "end": "buildComponentFromVNode"},');

      }
      function unmountComponent(component) {
                SRTlib.send(`{ "anonymous": false, "function": "unmountComponent", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (options.beforeUnmount) options.beforeUnmount(component);
        var base = component.base;
        component.__x = !0;
        if (component.componentWillUnmount) component.componentWillUnmount();
        component.base = null;
        var inner = component._component;
        if (inner) unmountComponent(inner); else if (base) {
          if (base.__preactattr_ && base.__preactattr_.ref) base.__preactattr_.ref(null);
          component.__b = base;
          removeNode(base);
          collectComponent(component);
          removeChildren(base);
        }
        if (component.__r) component.__r(null);
                SRTlib.send('], "end": "unmountComponent"},');

      }
      function Component(props, context) {
                SRTlib.send(`{ "anonymous": false, "function": "Component", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.__d = !0;
        this.context = context;
        this.props = props;
        this.state = this.state || ({});
                SRTlib.send('], "end": "Component"},');

      }
      function render(vnode, parent, merge) {
                SRTlib.send(`{ "anonymous": false, "function": "render", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "render"},');

        return diff(merge, vnode, {}, !1, parent, !1);
                SRTlib.send('], "end": "render"},');

      }
      var options = {};
      var stack = [];
      var EMPTY_CHILDREN = [];
      var defer = 'function' == typeof Promise ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;
      var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
      var items = [];
      var mounts = [];
      var diffLevel = 0;
      var isSvgMode = !1;
      var hydrating = !1;
      var components = {};
      extend(Component.prototype, {
        setState: function (state, callback) {
                    SRTlib.send(`{ "anonymous": true, "function": "extend.setState", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var s = this.state;
          if (!this.__s) this.__s = extend({}, s);
          extend(s, 'function' == typeof state ? state(s, this.props) : state);
          if (callback) (this.__h = this.__h || []).push(callback);
          enqueueRender(this);
                    SRTlib.send('], "end": "extend.setState"},');

        },
        forceUpdate: function (callback) {
                    SRTlib.send(`{ "anonymous": true, "function": "extend.forceUpdate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (callback) (this.__h = this.__h || []).push(callback);
          renderComponent(this, 2);
                    SRTlib.send('], "end": "extend.forceUpdate"},');

        },
        render: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "extend.render", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "extend.render"},');

        }
      });
      var preact = {
        h: h,
        createElement: h,
        cloneElement: cloneElement,
        Component: Component,
        render: render,
        rerender: rerender,
        options: options
      };
      if ('undefined' != typeof module) module.exports = preact; else self.preact = preact;
            SRTlib.send('], "end": "emptyKey181"},');

    })();
        SRTlib.send('], "end": "emptyKey182"},');

  }, {}],
  161: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey183", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process) {
            SRTlib.send(`{ "anonymous": true, "function": "call26", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      'use strict';
      if (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
        module.exports = {
          nextTick: nextTick
        };
      } else {
        module.exports = process;
      }
      function nextTick(fn, arg1, arg2, arg3) {
                SRTlib.send(`{ "anonymous": false, "function": "nextTick", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (typeof fn !== 'function') {
                    SRTlib.send('], "end": "nextTick"},');

          throw new TypeError('"callback" argument must be a function');
        }
        var len = arguments.length;
        var args, i;
        switch (len) {
          case 0:
          case 1:
                        SRTlib.send('], "end": "emptyKey183"},');

                        SRTlib.send('], "end": "call26"},');

                        SRTlib.send('], "end": "nextTick"},');

            return process.nextTick(fn);
          case 2:
                        SRTlib.send('], "end": "emptyKey183"},');

                        SRTlib.send('], "end": "call26"},');

                        SRTlib.send('], "end": "nextTick"},');

            return process.nextTick(function afterTickOne() {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.afterTickOne", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              fn.call(null, arg1);
                            SRTlib.send('], "end": "ReturnStatement.afterTickOne"},');

            });
          case 3:
                        SRTlib.send('], "end": "emptyKey183"},');

                        SRTlib.send('], "end": "call26"},');

                        SRTlib.send('], "end": "nextTick"},');

            return process.nextTick(function afterTickTwo() {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.afterTickTwo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              fn.call(null, arg1, arg2);
                            SRTlib.send('], "end": "ReturnStatement.afterTickTwo"},');

            });
          case 4:
                        SRTlib.send('], "end": "emptyKey183"},');

                        SRTlib.send('], "end": "call26"},');

                        SRTlib.send('], "end": "nextTick"},');

            return process.nextTick(function afterTickThree() {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.afterTickThree", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              fn.call(null, arg1, arg2, arg3);
                            SRTlib.send('], "end": "ReturnStatement.afterTickThree"},');

            });
          default:
                        SRTlib.send('], "end": "emptyKey183"},');

                        SRTlib.send('], "end": "call26"},');

                        SRTlib.send('], "end": "nextTick"},');

            args = new Array(len - 1);
            i = 0;
            while (i < args.length) {
              args[i++] = arguments[i];
            }
            return process.nextTick(function afterTick() {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.afterTick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              fn.apply(null, args);
                            SRTlib.send('], "end": "ReturnStatement.afterTick"},');

            });
        }
                SRTlib.send('], "end": "nextTick"},');

      }
            SRTlib.send('], "end": "call26"},');

    }).call(this, require('_process'));
        SRTlib.send('], "end": "emptyKey183"},');

  }, {
    "_process": 162
  }],
  162: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey185", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var process = module.exports = {};
    var cachedSetTimeout;
    var cachedClearTimeout;
    function defaultSetTimout() {
            SRTlib.send(`{ "anonymous": false, "function": "defaultSetTimout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "defaultSetTimout"},');

      throw new Error('setTimeout has not been defined');
            SRTlib.send('], "end": "defaultSetTimout"},');

    }
    function defaultClearTimeout() {
            SRTlib.send(`{ "anonymous": false, "function": "defaultClearTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "defaultClearTimeout"},');

      throw new Error('clearTimeout has not been defined');
            SRTlib.send('], "end": "defaultClearTimeout"},');

    }
    (function () {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey184", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
            SRTlib.send('], "end": "emptyKey184"},');

    })();
    function runTimeout(fun) {
            SRTlib.send(`{ "anonymous": false, "function": "runTimeout", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (cachedSetTimeout === setTimeout) {
                SRTlib.send('], "end": "runTimeout"},');

        return setTimeout(fun, 0);
      }
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
                SRTlib.send('], "end": "runTimeout"},');

        return setTimeout(fun, 0);
      }
      try {
                SRTlib.send('], "end": "runTimeout"},');

        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
                    SRTlib.send('], "end": "runTimeout"},');

          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
                    SRTlib.send('], "end": "runTimeout"},');

          return cachedSetTimeout.call(this, fun, 0);
        }
      }
            SRTlib.send('], "end": "runTimeout"},');

    }
    function runClearTimeout(marker) {
            SRTlib.send(`{ "anonymous": false, "function": "runClearTimeout", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (cachedClearTimeout === clearTimeout) {
                SRTlib.send('], "end": "runClearTimeout"},');

        return clearTimeout(marker);
      }
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
                SRTlib.send('], "end": "runClearTimeout"},');

        return clearTimeout(marker);
      }
      try {
                SRTlib.send('], "end": "runClearTimeout"},');

        return cachedClearTimeout(marker);
      } catch (e) {
        try {
                    SRTlib.send('], "end": "runClearTimeout"},');

          return cachedClearTimeout.call(null, marker);
        } catch (e) {
                    SRTlib.send('], "end": "runClearTimeout"},');

          return cachedClearTimeout.call(this, marker);
        }
      }
            SRTlib.send('], "end": "runClearTimeout"},');

    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;
    function cleanUpNextTick() {
            SRTlib.send(`{ "anonymous": false, "function": "cleanUpNextTick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!draining || !currentQueue) {
                SRTlib.send('], "end": "cleanUpNextTick"},');

        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
            SRTlib.send('], "end": "cleanUpNextTick"},');

    }
    function drainQueue() {
            SRTlib.send(`{ "anonymous": false, "function": "drainQueue", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (draining) {
                SRTlib.send('], "end": "drainQueue"},');

        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
            SRTlib.send('], "end": "drainQueue"},');

    }
    process.nextTick = function (fun) {
            SRTlib.send(`{ "anonymous": true, "function": "process.nextTick", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
            SRTlib.send('], "end": "process.nextTick"},');

    };
    function Item(fun, array) {
            SRTlib.send(`{ "anonymous": false, "function": "Item", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.fun = fun;
      this.array = array;
            SRTlib.send('], "end": "Item"},');

    }
    Item.prototype.run = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Item.prototype.run", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.fun.apply(null, this.array);
            SRTlib.send('], "end": "Item.prototype.run"},');

    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = '';
    process.versions = {};
    function noop() {
            SRTlib.send(`{ "anonymous": false, "function": "noop", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "noop"},');

    }
    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;
    process.listeners = function (name) {
            SRTlib.send(`{ "anonymous": true, "function": "process.listeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "process.listeners"},');

      return [];
            SRTlib.send('], "end": "process.listeners"},');

    };
    process.binding = function (name) {
            SRTlib.send(`{ "anonymous": true, "function": "process.binding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "process.binding"},');

      throw new Error('process.binding is not supported');
            SRTlib.send('], "end": "process.binding"},');

    };
    process.cwd = function () {
            SRTlib.send(`{ "anonymous": true, "function": "process.cwd", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "process.cwd"},');

      return '/';
            SRTlib.send('], "end": "process.cwd"},');

    };
    process.chdir = function (dir) {
            SRTlib.send(`{ "anonymous": true, "function": "process.chdir", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "process.chdir"},');

      throw new Error('process.chdir is not supported');
            SRTlib.send('], "end": "process.chdir"},');

    };
    process.umask = function () {
            SRTlib.send(`{ "anonymous": true, "function": "process.umask", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "process.umask"},');

      return 0;
            SRTlib.send('], "end": "process.umask"},');

    };
        SRTlib.send('], "end": "emptyKey185"},');

  }, {}],
  163: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey186", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    exports.publicEncrypt = require('./publicEncrypt');
    exports.privateDecrypt = require('./privateDecrypt');
    exports.privateEncrypt = function privateEncrypt(key, buf) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.privateEncrypt.privateEncrypt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "exports.privateEncrypt.privateEncrypt"},');

      return exports.publicEncrypt(key, buf, true);
            SRTlib.send('], "end": "exports.privateEncrypt.privateEncrypt"},');

    };
    exports.publicDecrypt = function publicDecrypt(key, buf) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.publicDecrypt.publicDecrypt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "exports.publicDecrypt.publicDecrypt"},');

      return exports.privateDecrypt(key, buf, true);
            SRTlib.send('], "end": "exports.publicDecrypt.publicDecrypt"},');

    };
        SRTlib.send('], "end": "emptyKey186"},');

  }, {
    "./privateDecrypt": 165,
    "./publicEncrypt": 166
  }],
  164: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey187", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var createHash = require('create-hash');
    var Buffer = require('safe-buffer').Buffer;
    module.exports = function (seed, len) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports14", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var t = Buffer.alloc(0);
      var i = 0;
      var c;
      while (t.length < len) {
        c = i2ops(i++);
        t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
      }
            SRTlib.send('], "end": "module.exports14"},');

      return t.slice(0, len);
            SRTlib.send('], "end": "module.exports14"},');

    };
    function i2ops(c) {
            SRTlib.send(`{ "anonymous": false, "function": "i2ops", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var out = Buffer.allocUnsafe(4);
      out.writeUInt32BE(c, 0);
            SRTlib.send('], "end": "i2ops"},');

      return out;
            SRTlib.send('], "end": "i2ops"},');

    }
        SRTlib.send('], "end": "emptyKey187"},');

  }, {
    "create-hash": 59,
    "safe-buffer": 190
  }],
  165: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey188", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var parseKeys = require('parse-asn1');
    var mgf = require('./mgf');
    var xor = require('./xor');
    var BN = require('bn.js');
    var crt = require('browserify-rsa');
    var createHash = require('create-hash');
    var withPublic = require('./withPublic');
    var Buffer = require('safe-buffer').Buffer;
    module.exports = function privateDecrypt(privateKey, enc, reverse) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.privateDecrypt", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var padding;
      if (privateKey.padding) {
        padding = privateKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key = parseKeys(privateKey);
      var k = key.modulus.byteLength();
      if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
                SRTlib.send('], "end": "module.exports.privateDecrypt"},');

        throw new Error('decryption error');
      }
      var msg;
      if (reverse) {
        msg = withPublic(new BN(enc), key);
      } else {
        msg = crt(enc, key);
      }
      var zBuffer = Buffer.alloc(k - msg.length);
      msg = Buffer.concat([zBuffer, msg], k);
      if (padding === 4) {
                SRTlib.send('], "end": "module.exports.privateDecrypt"},');

        return oaep(key, msg);
      } else if (padding === 1) {
                SRTlib.send('], "end": "module.exports.privateDecrypt"},');

        return pkcs1(key, msg, reverse);
      } else if (padding === 3) {
                SRTlib.send('], "end": "module.exports.privateDecrypt"},');

        return msg;
      } else {
                SRTlib.send('], "end": "module.exports.privateDecrypt"},');

        throw new Error('unknown padding');
      }
            SRTlib.send('], "end": "module.exports.privateDecrypt"},');

    };
    function oaep(key, msg) {
            SRTlib.send(`{ "anonymous": false, "function": "oaep", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var k = key.modulus.byteLength();
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
      var hLen = iHash.length;
      if (msg[0] !== 0) {
                SRTlib.send('], "end": "oaep"},');

        throw new Error('decryption error');
      }
      var maskedSeed = msg.slice(1, hLen + 1);
      var maskedDb = msg.slice(hLen + 1);
      var seed = xor(maskedSeed, mgf(maskedDb, hLen));
      var db = xor(maskedDb, mgf(seed, k - hLen - 1));
      if (compare(iHash, db.slice(0, hLen))) {
                SRTlib.send('], "end": "oaep"},');

        throw new Error('decryption error');
      }
      var i = hLen;
      while (db[i] === 0) {
        i++;
      }
      if (db[i++] !== 1) {
                SRTlib.send('], "end": "oaep"},');

        throw new Error('decryption error');
      }
            SRTlib.send('], "end": "oaep"},');

      return db.slice(i);
            SRTlib.send('], "end": "oaep"},');

    }
    function pkcs1(key, msg, reverse) {
            SRTlib.send(`{ "anonymous": false, "function": "pkcs1", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var p1 = msg.slice(0, 2);
      var i = 2;
      var status = 0;
      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++;
          break;
        }
      }
      var ps = msg.slice(2, i - 1);
      if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) {
        status++;
      }
      if (ps.length < 8) {
        status++;
      }
      if (status) {
                SRTlib.send('], "end": "pkcs1"},');

        throw new Error('decryption error');
      }
            SRTlib.send('], "end": "pkcs1"},');

      return msg.slice(i);
            SRTlib.send('], "end": "pkcs1"},');

    }
    function compare(a, b) {
            SRTlib.send(`{ "anonymous": false, "function": "compare", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      a = Buffer.from(a);
      b = Buffer.from(b);
      var dif = 0;
      var len = a.length;
      if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
      }
      var i = -1;
      while (++i < len) {
        dif += a[i] ^ b[i];
      }
            SRTlib.send('], "end": "compare"},');

      return dif;
            SRTlib.send('], "end": "compare"},');

    }
        SRTlib.send('], "end": "emptyKey188"},');

  }, {
    "./mgf": 164,
    "./withPublic": 167,
    "./xor": 168,
    "bn.js": 21,
    "browserify-rsa": 44,
    "create-hash": 59,
    "parse-asn1": 151,
    "safe-buffer": 190
  }],
  166: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey189", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var parseKeys = require('parse-asn1');
    var randomBytes = require('randombytes');
    var createHash = require('create-hash');
    var mgf = require('./mgf');
    var xor = require('./xor');
    var BN = require('bn.js');
    var withPublic = require('./withPublic');
    var crt = require('browserify-rsa');
    var Buffer = require('safe-buffer').Buffer;
    module.exports = function publicEncrypt(publicKey, msg, reverse) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.publicEncrypt", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var padding;
      if (publicKey.padding) {
        padding = publicKey.padding;
      } else if (reverse) {
        padding = 1;
      } else {
        padding = 4;
      }
      var key = parseKeys(publicKey);
      var paddedMsg;
      if (padding === 4) {
        paddedMsg = oaep(key, msg);
      } else if (padding === 1) {
        paddedMsg = pkcs1(key, msg, reverse);
      } else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) {
                    SRTlib.send('], "end": "module.exports.publicEncrypt"},');

          throw new Error('data too long for modulus');
        }
      } else {
                SRTlib.send('], "end": "module.exports.publicEncrypt"},');

        throw new Error('unknown padding');
      }
      if (reverse) {
                SRTlib.send('], "end": "module.exports.publicEncrypt"},');

        return crt(paddedMsg, key);
      } else {
                SRTlib.send('], "end": "module.exports.publicEncrypt"},');

        return withPublic(paddedMsg, key);
      }
            SRTlib.send('], "end": "module.exports.publicEncrypt"},');

    };
    function oaep(key, msg) {
            SRTlib.send(`{ "anonymous": false, "function": "oaep", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var k = key.modulus.byteLength();
      var mLen = msg.length;
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;
      if (mLen > k - hLen2 - 2) {
                SRTlib.send('], "end": "oaep"},');

        throw new Error('message too long');
      }
      var ps = Buffer.alloc(k - mLen - hLen2 - 2);
      var dblen = k - hLen - 1;
      var seed = randomBytes(hLen);
      var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen));
      var maskedSeed = xor(seed, mgf(maskedDb, hLen));
            SRTlib.send('], "end": "oaep"},');

      return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k));
            SRTlib.send('], "end": "oaep"},');

    }
    function pkcs1(key, msg, reverse) {
            SRTlib.send(`{ "anonymous": false, "function": "pkcs1", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var mLen = msg.length;
      var k = key.modulus.byteLength();
      if (mLen > k - 11) {
                SRTlib.send('], "end": "pkcs1"},');

        throw new Error('message too long');
      }
      var ps;
      if (reverse) {
        ps = Buffer.alloc(k - mLen - 3, 0xff);
      } else {
        ps = nonZero(k - mLen - 3);
      }
            SRTlib.send('], "end": "pkcs1"},');

      return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k));
            SRTlib.send('], "end": "pkcs1"},');

    }
    function nonZero(len) {
            SRTlib.send(`{ "anonymous": false, "function": "nonZero", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var out = Buffer.allocUnsafe(len);
      var i = 0;
      var cache = randomBytes(len * 2);
      var cur = 0;
      var num;
      while (i < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2);
          cur = 0;
        }
        num = cache[cur++];
        if (num) {
          out[i++] = num;
        }
      }
            SRTlib.send('], "end": "nonZero"},');

      return out;
            SRTlib.send('], "end": "nonZero"},');

    }
        SRTlib.send('], "end": "emptyKey189"},');

  }, {
    "./mgf": 164,
    "./withPublic": 167,
    "./xor": 168,
    "bn.js": 21,
    "browserify-rsa": 44,
    "create-hash": 59,
    "parse-asn1": 151,
    "randombytes": 170,
    "safe-buffer": 190
  }],
  167: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey190", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var BN = require('bn.js');
    var Buffer = require('safe-buffer').Buffer;
    function withPublic(paddedMsg, key) {
            SRTlib.send(`{ "anonymous": false, "function": "withPublic", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "withPublic"},');

      return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
            SRTlib.send('], "end": "withPublic"},');

    }
    module.exports = withPublic;
        SRTlib.send('], "end": "emptyKey190"},');

  }, {
    "bn.js": 21,
    "safe-buffer": 190
  }],
  168: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey191", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function xor(a, b) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.xor", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var len = a.length;
      var i = -1;
      while (++i < len) {
        a[i] ^= b[i];
      }
            SRTlib.send('], "end": "module.exports.xor"},');

      return a;
            SRTlib.send('], "end": "module.exports.xor"},');

    };
        SRTlib.send('], "end": "emptyKey191"},');

  }, {}],
  169: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey192", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var has = Object.prototype.hasOwnProperty, undef;
    function decode(input) {
            SRTlib.send(`{ "anonymous": false, "function": "decode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      try {
                SRTlib.send('], "end": "decode"},');

        return decodeURIComponent(input.replace(/\+/g, ' '));
      } catch (e) {
                SRTlib.send('], "end": "decode"},');

        return null;
      }
            SRTlib.send('], "end": "decode"},');

    }
    function encode(input) {
            SRTlib.send(`{ "anonymous": false, "function": "encode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      try {
                SRTlib.send('], "end": "encode"},');

        return encodeURIComponent(input);
      } catch (e) {
                SRTlib.send('], "end": "encode"},');

        return null;
      }
            SRTlib.send('], "end": "encode"},');

    }
    function querystring(query) {
            SRTlib.send(`{ "anonymous": false, "function": "querystring", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var parser = /([^=?&]+)=?([^&]*)/g, result = {}, part;
      while (part = parser.exec(query)) {
        var key = decode(part[1]), value = decode(part[2]);
        if (key === null || value === null || (key in result)) continue;
        result[key] = value;
      }
            SRTlib.send('], "end": "querystring"},');

      return result;
            SRTlib.send('], "end": "querystring"},');

    }
    function querystringify(obj, prefix) {
            SRTlib.send(`{ "anonymous": false, "function": "querystringify", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      prefix = prefix || '';
      var pairs = [], value, key;
      if ('string' !== typeof prefix) prefix = '?';
      for (key in obj) {
        if (has.call(obj, key)) {
          value = obj[key];
          if (!value && (value === null || value === undef || isNaN(value))) {
            value = '';
          }
          key = encodeURIComponent(key);
          value = encodeURIComponent(value);
          if (key === null || value === null) continue;
          pairs.push(key + '=' + value);
        }
      }
            SRTlib.send('], "end": "querystringify"},');

      return pairs.length ? prefix + pairs.join('&') : '';
            SRTlib.send('], "end": "querystringify"},');

    }
    exports.stringify = querystringify;
    exports.parse = querystring;
        SRTlib.send('], "end": "emptyKey192"},');

  }, {}],
  170: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey193", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process, global) {
            SRTlib.send(`{ "anonymous": true, "function": "call27", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      'use strict';
      var MAX_BYTES = 65536;
      var MAX_UINT32 = 4294967295;
      function oldBrowser() {
                SRTlib.send(`{ "anonymous": false, "function": "oldBrowser", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "oldBrowser"},');

        throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
                SRTlib.send('], "end": "oldBrowser"},');

      }
      var Buffer = require('safe-buffer').Buffer;
      var crypto = global.crypto || global.msCrypto;
      if (crypto && crypto.getRandomValues) {
        module.exports = randomBytes;
      } else {
        module.exports = oldBrowser;
      }
      function randomBytes(size, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "randomBytes", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (size > MAX_UINT32) {
                    SRTlib.send('], "end": "randomBytes"},');

          throw new RangeError('requested too many random bytes');
        }
        var bytes = Buffer.allocUnsafe(size);
        if (size > 0) {
          if (size > MAX_BYTES) {
            for (var generated = 0; generated < size; generated += MAX_BYTES) {
              crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
            }
          } else {
            crypto.getRandomValues(bytes);
          }
        }
        if (typeof cb === 'function') {
                    SRTlib.send('], "end": "randomBytes"},');

          return process.nextTick(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement10", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            cb(null, bytes);
                        SRTlib.send('], "end": "ReturnStatement10"},');

          });
        }
                SRTlib.send('], "end": "randomBytes"},');

        return bytes;
                SRTlib.send('], "end": "randomBytes"},');

      }
            SRTlib.send('], "end": "call27"},');

    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey193"},');

  }, {
    "_process": 162,
    "safe-buffer": 190
  }],
  171: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey195", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process, global) {
            SRTlib.send(`{ "anonymous": true, "function": "call28", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      'use strict';
      function oldBrowser() {
                SRTlib.send(`{ "anonymous": false, "function": "oldBrowser", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "oldBrowser"},');

        throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
                SRTlib.send('], "end": "oldBrowser"},');

      }
      var safeBuffer = require('safe-buffer');
      var randombytes = require('randombytes');
      var Buffer = safeBuffer.Buffer;
      var kBufferMaxLength = safeBuffer.kMaxLength;
      var crypto = global.crypto || global.msCrypto;
      var kMaxUint32 = Math.pow(2, 32) - 1;
      function assertOffset(offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "assertOffset", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (typeof offset !== 'number' || offset !== offset) {
                    SRTlib.send('], "end": "assertOffset"},');

          throw new TypeError('offset must be a number');
        }
        if (offset > kMaxUint32 || offset < 0) {
                    SRTlib.send('], "end": "assertOffset"},');

          throw new TypeError('offset must be a uint32');
        }
        if (offset > kBufferMaxLength || offset > length) {
                    SRTlib.send('], "end": "assertOffset"},');

          throw new RangeError('offset out of range');
        }
                SRTlib.send('], "end": "assertOffset"},');

      }
      function assertSize(size, offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "assertSize", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (typeof size !== 'number' || size !== size) {
                    SRTlib.send('], "end": "assertSize"},');

          throw new TypeError('size must be a number');
        }
        if (size > kMaxUint32 || size < 0) {
                    SRTlib.send('], "end": "assertSize"},');

          throw new TypeError('size must be a uint32');
        }
        if (size + offset > length || size > kBufferMaxLength) {
                    SRTlib.send('], "end": "assertSize"},');

          throw new RangeError('buffer too small');
        }
                SRTlib.send('], "end": "assertSize"},');

      }
      if (crypto && crypto.getRandomValues || !process.browser) {
        exports.randomFill = randomFill;
        exports.randomFillSync = randomFillSync;
      } else {
        exports.randomFill = oldBrowser;
        exports.randomFillSync = oldBrowser;
      }
      function randomFill(buf, offset, size, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "randomFill", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
                    SRTlib.send('], "end": "randomFill"},');

          throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
        }
        if (typeof offset === 'function') {
          cb = offset;
          offset = 0;
          size = buf.length;
        } else if (typeof size === 'function') {
          cb = size;
          size = buf.length - offset;
        } else if (typeof cb !== 'function') {
                    SRTlib.send('], "end": "randomFill"},');

          throw new TypeError('"cb" argument must be a function');
        }
        assertOffset(offset, buf.length);
        assertSize(size, offset, buf.length);
                SRTlib.send('], "end": "randomFill"},');

        return actualFill(buf, offset, size, cb);
                SRTlib.send('], "end": "randomFill"},');

      }
      function actualFill(buf, offset, size, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "actualFill", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (process.browser) {
          var ourBuf = buf.buffer;
          var uint = new Uint8Array(ourBuf, offset, size);
          crypto.getRandomValues(uint);
          if (cb) {
            process.nextTick(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "emptyKey194", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              cb(null, buf);
                            SRTlib.send('], "end": "emptyKey194"},');

            });
                        SRTlib.send('], "end": "actualFill"},');

            return;
          }
                    SRTlib.send('], "end": "actualFill"},');

          return buf;
        }
        if (cb) {
          randombytes(size, function (err, bytes) {
                        SRTlib.send(`{ "anonymous": true, "function": "randombytes", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            if (err) {
                            SRTlib.send('], "end": "randombytes"},');

              return cb(err);
            }
            bytes.copy(buf, offset);
            cb(null, buf);
                        SRTlib.send('], "end": "randombytes"},');

          });
                    SRTlib.send('], "end": "actualFill"},');

          return;
        }
        var bytes = randombytes(size);
        bytes.copy(buf, offset);
                SRTlib.send('], "end": "actualFill"},');

        return buf;
                SRTlib.send('], "end": "actualFill"},');

      }
      function randomFillSync(buf, offset, size) {
                SRTlib.send(`{ "anonymous": false, "function": "randomFillSync", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (typeof offset === 'undefined') {
          offset = 0;
        }
        if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
                    SRTlib.send('], "end": "randomFillSync"},');

          throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
        }
        assertOffset(offset, buf.length);
        if (size === undefined) size = buf.length - offset;
        assertSize(size, offset, buf.length);
                SRTlib.send('], "end": "randomFillSync"},');

        return actualFill(buf, offset, size);
                SRTlib.send('], "end": "randomFillSync"},');

      }
            SRTlib.send('], "end": "call28"},');

    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey195"},');

  }, {
    "_process": 162,
    "randombytes": 170,
    "safe-buffer": 190
  }],
  172: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey196", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = require('./lib/_stream_duplex.js');
        SRTlib.send('], "end": "emptyKey196"},');

  }, {
    "./lib/_stream_duplex.js": 173
  }],
  173: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey197", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var pna = require('process-nextick-args');
    var objectKeys = Object.keys || (function (obj) {
            SRTlib.send(`{ "anonymous": true, "function": "objectKeys", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var keys = [];
      for (var key in obj) {
        keys.push(key);
      }
            SRTlib.send('], "end": "objectKeys"},');

      return keys;
            SRTlib.send('], "end": "objectKeys"},');

    });
    module.exports = Duplex;
    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    var Readable = require('./_stream_readable');
    var Writable = require('./_stream_writable');
    util.inherits(Duplex, Readable);
    {
      var keys = objectKeys(Writable.prototype);
      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    function Duplex(options) {
            SRTlib.send(`{ "anonymous": false, "function": "Duplex", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!(this instanceof Duplex)) {
                SRTlib.send('], "end": "Duplex"},');

        return new Duplex(options);
      }
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false) this.readable = false;
      if (options && options.writable === false) this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
      this.once('end', onend);
            SRTlib.send('], "end": "Duplex"},');

    }
    Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
      enumerable: false,
      get: function () {
                SRTlib.send(`{ "anonymous": true, "function": "get2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "get2"},');

        return this._writableState.highWaterMark;
                SRTlib.send('], "end": "get2"},');

      }
    });
    function onend() {
            SRTlib.send(`{ "anonymous": false, "function": "onend", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.allowHalfOpen || this._writableState.ended) {
                SRTlib.send('], "end": "onend"},');

        return;
      }
      pna.nextTick(onEndNT, this);
            SRTlib.send('], "end": "onend"},');

    }
    function onEndNT(self) {
            SRTlib.send(`{ "anonymous": false, "function": "onEndNT", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      self.end();
            SRTlib.send('], "end": "onEndNT"},');

    }
    Object.defineProperty(Duplex.prototype, 'destroyed', {
      get: function () {
                SRTlib.send(`{ "anonymous": true, "function": "get3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this._readableState === undefined || this._writableState === undefined) {
                    SRTlib.send('], "end": "get3"},');

          return false;
        }
                SRTlib.send('], "end": "get3"},');

        return this._readableState.destroyed && this._writableState.destroyed;
                SRTlib.send('], "end": "get3"},');

      },
      set: function (value) {
                SRTlib.send(`{ "anonymous": true, "function": "set", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this._readableState === undefined || this._writableState === undefined) {
                    SRTlib.send('], "end": "set"},');

          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
                SRTlib.send('], "end": "set"},');

      }
    });
    Duplex.prototype._destroy = function (err, cb) {
            SRTlib.send(`{ "anonymous": true, "function": "Duplex.prototype._destroy", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.push(null);
      this.end();
      pna.nextTick(cb, err);
            SRTlib.send('], "end": "Duplex.prototype._destroy"},');

    };
        SRTlib.send('], "end": "emptyKey197"},');

  }, {
    "./_stream_readable": 175,
    "./_stream_writable": 177,
    "core-util-is": 57,
    "inherits": 133,
    "process-nextick-args": 161
  }],
  174: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey198", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    module.exports = PassThrough;
    var Transform = require('./_stream_transform');
    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    util.inherits(PassThrough, Transform);
    function PassThrough(options) {
            SRTlib.send(`{ "anonymous": false, "function": "PassThrough", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!(this instanceof PassThrough)) {
                SRTlib.send('], "end": "PassThrough"},');

        return new PassThrough(options);
      }
      Transform.call(this, options);
            SRTlib.send('], "end": "PassThrough"},');

    }
    PassThrough.prototype._transform = function (chunk, encoding, cb) {
            SRTlib.send(`{ "anonymous": true, "function": "PassThrough.prototype._transform", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      cb(null, chunk);
            SRTlib.send('], "end": "PassThrough.prototype._transform"},');

    };
        SRTlib.send('], "end": "emptyKey198"},');

  }, {
    "./_stream_transform": 176,
    "core-util-is": 57,
    "inherits": 133
  }],
  175: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey199", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process, global) {
            SRTlib.send(`{ "anonymous": true, "function": "call29", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      'use strict';
      var pna = require('process-nextick-args');
      module.exports = Readable;
      var isArray = require('isarray');
      var Duplex;
      Readable.ReadableState = ReadableState;
      var EE = require('events').EventEmitter;
      var EElistenerCount = function (emitter, type) {
                SRTlib.send(`{ "anonymous": false, "function": "EElistenerCount", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "EElistenerCount"},');

        return emitter.listeners(type).length;
                SRTlib.send('], "end": "EElistenerCount"},');

      };
      var Stream = require('./internal/streams/stream');
      var Buffer = require('safe-buffer').Buffer;
      var OurUint8Array = global.Uint8Array || (function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.OurUint8Array", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "call.OurUint8Array"},');

      });
      function _uint8ArrayToBuffer(chunk) {
                SRTlib.send(`{ "anonymous": false, "function": "_uint8ArrayToBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "_uint8ArrayToBuffer"},');

        return Buffer.from(chunk);
                SRTlib.send('], "end": "_uint8ArrayToBuffer"},');

      }
      function _isUint8Array(obj) {
                SRTlib.send(`{ "anonymous": false, "function": "_isUint8Array", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "_isUint8Array"},');

        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                SRTlib.send('], "end": "_isUint8Array"},');

      }
      var util = Object.create(require('core-util-is'));
      util.inherits = require('inherits');
      var debugUtil = require('util');
      var debug = void 0;
      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog('stream');
      } else {
        debug = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.debug", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "call.debug"},');

        };
      }
      var BufferList = require('./internal/streams/BufferList');
      var destroyImpl = require('./internal/streams/destroy');
      var StringDecoder;
      util.inherits(Readable, Stream);
      var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
      function prependListener(emitter, event, fn) {
                SRTlib.send(`{ "anonymous": false, "function": "prependListener", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (typeof emitter.prependListener === 'function') {
                    SRTlib.send('], "end": "prependListener"},');

          return emitter.prependListener(event, fn);
        }
        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
                SRTlib.send('], "end": "prependListener"},');

      }
      function ReadableState(options, stream) {
                SRTlib.send(`{ "anonymous": false, "function": "ReadableState", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        Duplex = Duplex || require('./_stream_duplex');
        options = options || ({});
        var isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
        var hwm = options.highWaterMark;
        var readableHwm = options.readableHighWaterMark;
        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
        if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm; else this.highWaterMark = defaultHwm;
        this.highWaterMark = Math.floor(this.highWaterMark);
        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || 'utf8';
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
                SRTlib.send('], "end": "ReadableState"},');

      }
      function Readable(options) {
                SRTlib.send(`{ "anonymous": false, "function": "Readable", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        Duplex = Duplex || require('./_stream_duplex');
        if (!(this instanceof Readable)) {
                    SRTlib.send('], "end": "Readable"},');

          return new Readable(options);
        }
        this._readableState = new ReadableState(options, this);
        this.readable = true;
        if (options) {
          if (typeof options.read === 'function') this._read = options.read;
          if (typeof options.destroy === 'function') this._destroy = options.destroy;
        }
        Stream.call(this);
                SRTlib.send('], "end": "Readable"},');

      }
      Object.defineProperty(Readable.prototype, 'destroyed', {
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.get2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (this._readableState === undefined) {
                        SRTlib.send('], "end": "call.get2"},');

            return false;
          }
                    SRTlib.send('], "end": "call.get2"},');

          return this._readableState.destroyed;
                    SRTlib.send('], "end": "call.get2"},');

        },
        set: function (value) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.set", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!this._readableState) {
                        SRTlib.send('], "end": "call.set"},');

            return;
          }
          this._readableState.destroyed = value;
                    SRTlib.send('], "end": "call.set"},');

        }
      });
      Readable.prototype.destroy = destroyImpl.destroy;
      Readable.prototype._undestroy = destroyImpl.undestroy;
      Readable.prototype._destroy = function (err, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype._destroy", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.push(null);
        cb(err);
                SRTlib.send('], "end": "call.Readable.prototype._destroy"},');

      };
      Readable.prototype.push = function (chunk, encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.push", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer.from(chunk, encoding);
              encoding = '';
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
                SRTlib.send('], "end": "call.Readable.prototype.push"},');

        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                SRTlib.send('], "end": "call.Readable.prototype.push"},');

      };
      Readable.prototype.unshift = function (chunk) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.unshift", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.Readable.prototype.unshift"},');

        return readableAddChunk(this, chunk, null, true, false);
                SRTlib.send('], "end": "call.Readable.prototype.unshift"},');

      };
      function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                SRTlib.send(`{ "anonymous": false, "function": "readableAddChunk", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else {
          var er;
          if (!skipChunkCheck) er = chunkInvalid(state, chunk);
          if (er) {
            stream.emit('error', er);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event')); else addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              stream.emit('error', new Error('stream.push() after EOF'));
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
          }
        }
                SRTlib.send('], "end": "readableAddChunk"},');

        return needMoreData(state);
                SRTlib.send('], "end": "readableAddChunk"},');

      }
      function addChunk(stream, state, chunk, addToFront) {
                SRTlib.send(`{ "anonymous": false, "function": "addChunk", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
          if (state.needReadable) emitReadable(stream);
        }
        maybeReadMore(stream, state);
                SRTlib.send('], "end": "addChunk"},');

      }
      function chunkInvalid(state, chunk) {
                SRTlib.send(`{ "anonymous": false, "function": "chunkInvalid", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var er;
        if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
          er = new TypeError('Invalid non-string/buffer chunk');
        }
                SRTlib.send('], "end": "chunkInvalid"},');

        return er;
                SRTlib.send('], "end": "chunkInvalid"},');

      }
      function needMoreData(state) {
                SRTlib.send(`{ "anonymous": false, "function": "needMoreData", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "needMoreData"},');

        return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                SRTlib.send('], "end": "needMoreData"},');

      }
      Readable.prototype.isPaused = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.isPaused", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "call.Readable.prototype.isPaused"},');

        return this._readableState.flowing === false;
                SRTlib.send('], "end": "call.Readable.prototype.isPaused"},');

      };
      Readable.prototype.setEncoding = function (enc) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.setEncoding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this._readableState.decoder = new StringDecoder(enc);
        this._readableState.encoding = enc;
                SRTlib.send('], "end": "call.Readable.prototype.setEncoding"},');

        return this;
                SRTlib.send('], "end": "call.Readable.prototype.setEncoding"},');

      };
      var MAX_HWM = 0x800000;
      function computeNewHighWaterMark(n) {
                SRTlib.send(`{ "anonymous": false, "function": "computeNewHighWaterMark", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (n >= MAX_HWM) {
          n = MAX_HWM;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
                SRTlib.send('], "end": "computeNewHighWaterMark"},');

        return n;
                SRTlib.send('], "end": "computeNewHighWaterMark"},');

      }
      function howMuchToRead(n, state) {
                SRTlib.send(`{ "anonymous": false, "function": "howMuchToRead", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (n <= 0 || state.length === 0 && state.ended) {
                    SRTlib.send('], "end": "howMuchToRead"},');

          return 0;
        }
        if (state.objectMode) {
                    SRTlib.send('], "end": "howMuchToRead"},');

          return 1;
        }
        if (n !== n) {
          if (state.flowing && state.length) return state.buffer.head.data.length; else {
                        SRTlib.send('], "end": "emptyKey199"},');

            return state.buffer.head.data.length;
          }
        }
        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
        if (n <= state.length) {
                    SRTlib.send('], "end": "howMuchToRead"},');

          return n;
        }
        if (!state.ended) {
          state.needReadable = true;
                    SRTlib.send('], "end": "howMuchToRead"},');

          return 0;
        }
                SRTlib.send('], "end": "howMuchToRead"},');

        return state.length;
                SRTlib.send('], "end": "howMuchToRead"},');

      }
      Readable.prototype.read = function (n) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.read", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        debug('read', n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0) state.emittedReadable = false;
        if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
          debug('read: emitReadable', state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
                    SRTlib.send('], "end": "call.Readable.prototype.read"},');

          return null;
        }
        n = howMuchToRead(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this);
                    SRTlib.send('], "end": "call.Readable.prototype.read"},');

          return null;
        }
        var doRead = state.needReadable;
        debug('need readable', doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug('length less than watermark', doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug('reading or ended', doRead);
        } else if (doRead) {
          debug('do read');
          state.reading = true;
          state.sync = true;
          if (state.length === 0) state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading) n = howMuchToRead(nOrig, state);
        }
        var ret;
        if (n > 0) ret = fromList(n, state); else ret = null;
        if (ret === null) {
          state.needReadable = true;
          n = 0;
        } else {
          state.length -= n;
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true;
          if (nOrig !== n && state.ended) endReadable(this);
        }
        if (ret !== null) this.emit('data', ret);
                SRTlib.send('], "end": "call.Readable.prototype.read"},');

        return ret;
                SRTlib.send('], "end": "call.Readable.prototype.read"},');

      };
      function onEofChunk(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "onEofChunk", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (state.ended) {
                    SRTlib.send('], "end": "onEofChunk"},');

          return;
        }
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        emitReadable(stream);
                SRTlib.send('], "end": "onEofChunk"},');

      }
      function emitReadable(stream) {
                SRTlib.send(`{ "anonymous": false, "function": "emitReadable", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var state = stream._readableState;
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug('emitReadable', state.flowing);
          state.emittedReadable = true;
          if (state.sync) pna.nextTick(emitReadable_, stream); else emitReadable_(stream);
        }
                SRTlib.send('], "end": "emitReadable"},');

      }
      function emitReadable_(stream) {
                SRTlib.send(`{ "anonymous": false, "function": "emitReadable_", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        debug('emit readable');
        stream.emit('readable');
        flow(stream);
                SRTlib.send('], "end": "emitReadable_"},');

      }
      function maybeReadMore(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "maybeReadMore", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!state.readingMore) {
          state.readingMore = true;
          pna.nextTick(maybeReadMore_, stream, state);
        }
                SRTlib.send('], "end": "maybeReadMore"},');

      }
      function maybeReadMore_(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "maybeReadMore_", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var len = state.length;
        while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
          debug('maybeReadMore read 0');
          stream.read(0);
          if (len === state.length) break; else len = state.length;
        }
        state.readingMore = false;
                SRTlib.send('], "end": "maybeReadMore_"},');

      }
      Readable.prototype._read = function (n) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype._read", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.emit('error', new Error('_read() is not implemented'));
                SRTlib.send('], "end": "call.Readable.prototype._read"},');

      };
      Readable.prototype.pipe = function (dest, pipeOpts) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.pipe", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend : unpipe;
        if (state.endEmitted) pna.nextTick(endFn); else src.once('end', endFn);
        dest.on('unpipe', onunpipe);
        function onunpipe(readable, unpipeInfo) {
                    SRTlib.send(`{ "anonymous": false, "function": "onunpipe", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          debug('onunpipe');
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
                    SRTlib.send('], "end": "onunpipe"},');

        }
        function onend() {
                    SRTlib.send(`{ "anonymous": false, "function": "onend", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          debug('onend');
          dest.end();
                    SRTlib.send('], "end": "onend"},');

        }
        var ondrain = pipeOnDrain(src);
        dest.on('drain', ondrain);
        var cleanedUp = false;
        function cleanup() {
                    SRTlib.send(`{ "anonymous": false, "function": "cleanup", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          debug('cleanup');
          dest.removeListener('close', onclose);
          dest.removeListener('finish', onfinish);
          dest.removeListener('drain', ondrain);
          dest.removeListener('error', onerror);
          dest.removeListener('unpipe', onunpipe);
          src.removeListener('end', onend);
          src.removeListener('end', unpipe);
          src.removeListener('data', ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                    SRTlib.send('], "end": "cleanup"},');

        }
        var increasedAwaitDrain = false;
        src.on('data', ondata);
        function ondata(chunk) {
                    SRTlib.send(`{ "anonymous": false, "function": "ondata", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          debug('ondata');
          increasedAwaitDrain = false;
          var ret = dest.write(chunk);
          if (false === ret && !increasedAwaitDrain) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
              debug('false write response, pause', src._readableState.awaitDrain);
              src._readableState.awaitDrain++;
              increasedAwaitDrain = true;
            }
            src.pause();
          }
                    SRTlib.send('], "end": "ondata"},');

        }
        function onerror(er) {
                    SRTlib.send(`{ "anonymous": false, "function": "onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          debug('onerror', er);
          unpipe();
          dest.removeListener('error', onerror);
          if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                    SRTlib.send('], "end": "onerror"},');

        }
        prependListener(dest, 'error', onerror);
        function onclose() {
                    SRTlib.send(`{ "anonymous": false, "function": "onclose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          dest.removeListener('finish', onfinish);
          unpipe();
                    SRTlib.send('], "end": "onclose"},');

        }
        dest.once('close', onclose);
        function onfinish() {
                    SRTlib.send(`{ "anonymous": false, "function": "onfinish", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          debug('onfinish');
          dest.removeListener('close', onclose);
          unpipe();
                    SRTlib.send('], "end": "onfinish"},');

        }
        dest.once('finish', onfinish);
        function unpipe() {
                    SRTlib.send(`{ "anonymous": false, "function": "unpipe", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          debug('unpipe');
          src.unpipe(dest);
                    SRTlib.send('], "end": "unpipe"},');

        }
        dest.emit('pipe', src);
        if (!state.flowing) {
          debug('pipe resume');
          src.resume();
        }
                SRTlib.send('], "end": "call.Readable.prototype.pipe"},');

        return dest;
                SRTlib.send('], "end": "call.Readable.prototype.pipe"},');

      };
      function pipeOnDrain(src) {
                SRTlib.send(`{ "anonymous": false, "function": "pipeOnDrain", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "pipeOnDrain"},');

        return function () {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement11", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var state = src._readableState;
          debug('pipeOnDrain', state.awaitDrain);
          if (state.awaitDrain) state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
          }
                    SRTlib.send('], "end": "ReturnStatement11"},');

        };
                SRTlib.send('], "end": "pipeOnDrain"},');

      }
      Readable.prototype.unpipe = function (dest) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.unpipe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (state.pipesCount === 0) {
                    SRTlib.send('], "end": "call.Readable.prototype.unpipe"},');

          return this;
        }
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) {
                        SRTlib.send('], "end": "call.Readable.prototype.unpipe"},');

            return this;
          }
          if (!dest) dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit('unpipe', this, unpipeInfo);
                    SRTlib.send('], "end": "call.Readable.prototype.unpipe"},');

          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++) {
            dests[i].emit('unpipe', this, unpipeInfo);
          }
                    SRTlib.send('], "end": "call.Readable.prototype.unpipe"},');

          return this;
        }
        var index = indexOf(state.pipes, dest);
        if (index === -1) {
                    SRTlib.send('], "end": "call.Readable.prototype.unpipe"},');

          return this;
        }
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];
        dest.emit('unpipe', this, unpipeInfo);
                SRTlib.send('], "end": "call.Readable.prototype.unpipe"},');

        return this;
                SRTlib.send('], "end": "call.Readable.prototype.unpipe"},');

      };
      Readable.prototype.on = function (ev, fn) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.on", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var res = Stream.prototype.on.call(this, ev, fn);
        if (ev === 'data') {
          if (this._readableState.flowing !== false) this.resume();
        } else if (ev === 'readable') {
          var state = this._readableState;
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.emittedReadable = false;
            if (!state.reading) {
              pna.nextTick(nReadingNextTick, this);
            } else if (state.length) {
              emitReadable(this);
            }
          }
        }
                SRTlib.send('], "end": "call.Readable.prototype.on"},');

        return res;
                SRTlib.send('], "end": "call.Readable.prototype.on"},');

      };
      Readable.prototype.addListener = Readable.prototype.on;
      function nReadingNextTick(self) {
                SRTlib.send(`{ "anonymous": false, "function": "nReadingNextTick", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        debug('readable nexttick read 0');
        self.read(0);
                SRTlib.send('], "end": "nReadingNextTick"},');

      }
      Readable.prototype.resume = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.resume", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var state = this._readableState;
        if (!state.flowing) {
          debug('resume');
          state.flowing = true;
          resume(this, state);
        }
                SRTlib.send('], "end": "call.Readable.prototype.resume"},');

        return this;
                SRTlib.send('], "end": "call.Readable.prototype.resume"},');

      };
      function resume(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "resume", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          pna.nextTick(resume_, stream, state);
        }
                SRTlib.send('], "end": "resume"},');

      }
      function resume_(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "resume_", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!state.reading) {
          debug('resume read 0');
          stream.read(0);
        }
        state.resumeScheduled = false;
        state.awaitDrain = 0;
        stream.emit('resume');
        flow(stream);
        if (state.flowing && !state.reading) stream.read(0);
                SRTlib.send('], "end": "resume_"},');

      }
      Readable.prototype.pause = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.pause", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        debug('call pause flowing=%j', this._readableState.flowing);
        if (false !== this._readableState.flowing) {
          debug('pause');
          this._readableState.flowing = false;
          this.emit('pause');
        }
                SRTlib.send('], "end": "call.Readable.prototype.pause"},');

        return this;
                SRTlib.send('], "end": "call.Readable.prototype.pause"},');

      };
      function flow(stream) {
                SRTlib.send(`{ "anonymous": false, "function": "flow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var state = stream._readableState;
        debug('flow', state.flowing);
        while (state.flowing && stream.read() !== null) {}
                SRTlib.send('], "end": "flow"},');

      }
      Readable.prototype.wrap = function (stream) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.wrap3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on('end', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.wrap", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          debug('wrapped end');
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
          }
          _this.push(null);
                    SRTlib.send('], "end": "call.Readable.prototype.wrap"},');

        });
        stream.on('data', function (chunk) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.wrap2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          debug('wrapped data');
          if (state.decoder) chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === undefined)) return; else {
                        SRTlib.send('], "end": "emptyKey199"},');

            return;
          }
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
                    SRTlib.send('], "end": "call.Readable.prototype.wrap2"},');

        });
        for (var i in stream) {
          if (this[i] === undefined && typeof stream[i] === 'function') {
            this[i] = (function (method) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.wrap.i", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.Readable.prototype.wrap.i"},');

              return function () {
                                SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.wrap.i.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                SRTlib.send('], "end": "call.Readable.prototype.wrap.i.ReturnStatement"},');

                return stream[method].apply(stream, arguments);
                                SRTlib.send('], "end": "call.Readable.prototype.wrap.i.ReturnStatement"},');

              };
                            SRTlib.send('], "end": "call.Readable.prototype.wrap.i"},');

            })(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function (n) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Readable.prototype.wrap._read", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          debug('wrapped _read', n);
          if (paused) {
            paused = false;
            stream.resume();
          }
                    SRTlib.send('], "end": "call.Readable.prototype.wrap._read"},');

        };
                SRTlib.send('], "end": "call.Readable.prototype.wrap3"},');

        return this;
                SRTlib.send('], "end": "call.Readable.prototype.wrap3"},');

      };
      Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
        enumerable: false,
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.get3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "call.get3"},');

          return this._readableState.highWaterMark;
                    SRTlib.send('], "end": "call.get3"},');

        }
      });
      Readable._fromList = fromList;
      function fromList(n, state) {
                SRTlib.send(`{ "anonymous": false, "function": "fromList", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (state.length === 0) {
                    SRTlib.send('], "end": "fromList"},');

          return null;
        }
        var ret;
        if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
          if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = fromListPartial(n, state.buffer, state.decoder);
        }
                SRTlib.send('], "end": "fromList"},');

        return ret;
                SRTlib.send('], "end": "fromList"},');

      }
      function fromListPartial(n, list, hasStrings) {
                SRTlib.send(`{ "anonymous": false, "function": "fromListPartial", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var ret;
        if (n < list.head.data.length) {
          ret = list.head.data.slice(0, n);
          list.head.data = list.head.data.slice(n);
        } else if (n === list.head.data.length) {
          ret = list.shift();
        } else {
          ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
        }
                SRTlib.send('], "end": "fromListPartial"},');

        return ret;
                SRTlib.send('], "end": "fromListPartial"},');

      }
      function copyFromBufferString(n, list) {
                SRTlib.send(`{ "anonymous": false, "function": "copyFromBufferString", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var p = list.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          if (nb === str.length) ret += str; else ret += str.slice(0, n);
          n -= nb;
          if (n === 0) {
            if (nb === str.length) {
              ++c;
              if (p.next) list.head = p.next; else list.head = list.tail = null;
            } else {
              list.head = p;
              p.data = str.slice(nb);
            }
            break;
          }
          ++c;
        }
        list.length -= c;
                SRTlib.send('], "end": "copyFromBufferString"},');

        return ret;
                SRTlib.send('], "end": "copyFromBufferString"},');

      }
      function copyFromBuffer(n, list) {
                SRTlib.send(`{ "anonymous": false, "function": "copyFromBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var ret = Buffer.allocUnsafe(n);
        var p = list.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;
          if (n === 0) {
            if (nb === buf.length) {
              ++c;
              if (p.next) list.head = p.next; else list.head = list.tail = null;
            } else {
              list.head = p;
              p.data = buf.slice(nb);
            }
            break;
          }
          ++c;
        }
        list.length -= c;
                SRTlib.send('], "end": "copyFromBuffer"},');

        return ret;
                SRTlib.send('], "end": "copyFromBuffer"},');

      }
      function endReadable(stream) {
                SRTlib.send(`{ "anonymous": false, "function": "endReadable", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var state = stream._readableState;
        if (state.length > 0) {
                    SRTlib.send('], "end": "endReadable"},');

          throw new Error('"endReadable()" called on non-empty stream');
        }
        if (!state.endEmitted) {
          state.ended = true;
          pna.nextTick(endReadableNT, state, stream);
        }
                SRTlib.send('], "end": "endReadable"},');

      }
      function endReadableNT(state, stream) {
                SRTlib.send(`{ "anonymous": false, "function": "endReadableNT", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit('end');
        }
                SRTlib.send('], "end": "endReadableNT"},');

      }
      function indexOf(xs, x) {
                SRTlib.send(`{ "anonymous": false, "function": "indexOf", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) {
                        SRTlib.send('], "end": "indexOf"},');

            return i;
          }
        }
                SRTlib.send('], "end": "indexOf"},');

        return -1;
                SRTlib.send('], "end": "indexOf"},');

      }
            SRTlib.send('], "end": "call29"},');

    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey199"},');

  }, {
    "./_stream_duplex": 173,
    "./internal/streams/BufferList": 178,
    "./internal/streams/destroy": 179,
    "./internal/streams/stream": 180,
    "_process": 162,
    "core-util-is": 57,
    "events": 361,
    "inherits": 133,
    "isarray": 181,
    "process-nextick-args": 161,
    "safe-buffer": 190,
    "string_decoder/": 182,
    "util": 23
  }],
  176: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey200", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    module.exports = Transform;
    var Duplex = require('./_stream_duplex');
    var util = Object.create(require('core-util-is'));
    util.inherits = require('inherits');
    util.inherits(Transform, Duplex);
    function afterTransform(er, data) {
            SRTlib.send(`{ "anonymous": false, "function": "afterTransform", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb) {
                SRTlib.send('], "end": "afterTransform"},');

        return this.emit('error', new Error('write callback called multiple times'));
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
            SRTlib.send('], "end": "afterTransform"},');

    }
    function Transform(options) {
            SRTlib.send(`{ "anonymous": false, "function": "Transform", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!(this instanceof Transform)) {
                SRTlib.send('], "end": "Transform"},');

        return new Transform(options);
      }
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      }
      this.on('prefinish', prefinish);
            SRTlib.send('], "end": "Transform"},');

    }
    function prefinish() {
            SRTlib.send(`{ "anonymous": false, "function": "prefinish", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var _this = this;
      if (typeof this._flush === 'function') {
        this._flush(function (er, data) {
                    SRTlib.send(`{ "anonymous": true, "function": "_flush", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          done(_this, er, data);
                    SRTlib.send('], "end": "_flush"},');

        });
      } else {
        done(this, null, null);
      }
            SRTlib.send('], "end": "prefinish"},');

    }
    Transform.prototype.push = function (chunk, encoding) {
            SRTlib.send(`{ "anonymous": true, "function": "Transform.prototype.push", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this._transformState.needTransform = false;
            SRTlib.send('], "end": "Transform.prototype.push"},');

      return Duplex.prototype.push.call(this, chunk, encoding);
            SRTlib.send('], "end": "Transform.prototype.push"},');

    };
    Transform.prototype._transform = function (chunk, encoding, cb) {
            SRTlib.send(`{ "anonymous": true, "function": "Transform.prototype._transform", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "Transform.prototype._transform"},');

      throw new Error('_transform() is not implemented');
            SRTlib.send('], "end": "Transform.prototype._transform"},');

    };
    Transform.prototype._write = function (chunk, encoding, cb) {
            SRTlib.send(`{ "anonymous": true, "function": "Transform.prototype._write", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
            SRTlib.send('], "end": "Transform.prototype._write"},');

    };
    Transform.prototype._read = function (n) {
            SRTlib.send(`{ "anonymous": true, "function": "Transform.prototype._read", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var ts = this._transformState;
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
            SRTlib.send('], "end": "Transform.prototype._read"},');

    };
    Transform.prototype._destroy = function (err, cb) {
            SRTlib.send(`{ "anonymous": true, "function": "Transform.prototype._destroy", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var _this2 = this;
      Duplex.prototype._destroy.call(this, err, function (err2) {
                SRTlib.send(`{ "anonymous": true, "function": "Transform.prototype._destroy.Duplex.prototype._destroy.call", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        cb(err2);
        _this2.emit('close');
                SRTlib.send('], "end": "Transform.prototype._destroy.Duplex.prototype._destroy.call"},');

      });
            SRTlib.send('], "end": "Transform.prototype._destroy"},');

    };
    function done(stream, er, data) {
            SRTlib.send(`{ "anonymous": false, "function": "done", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (er) {
                SRTlib.send('], "end": "done"},');

        return stream.emit('error', er);
      }
      if (data != null) stream.push(data);
      if (stream._writableState.length) {
                SRTlib.send('], "end": "done"},');

        throw new Error('Calling transform done when ws.length != 0');
      }
      if (stream._transformState.transforming) {
                SRTlib.send('], "end": "done"},');

        throw new Error('Calling transform done when still transforming');
      }
            SRTlib.send('], "end": "done"},');

      return stream.push(null);
            SRTlib.send('], "end": "done"},');

    }
        SRTlib.send('], "end": "emptyKey200"},');

  }, {
    "./_stream_duplex": 173,
    "core-util-is": 57,
    "inherits": 133
  }],
  177: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey202", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process, global, setImmediate) {
            SRTlib.send(`{ "anonymous": true, "function": "call31", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      'use strict';
      var pna = require('process-nextick-args');
      module.exports = Writable;
      function WriteReq(chunk, encoding, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "WriteReq", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        this.chunk = chunk;
        this.encoding = encoding;
        this.callback = cb;
        this.next = null;
                SRTlib.send('], "end": "WriteReq"},');

      }
      function CorkedRequest(state) {
                SRTlib.send(`{ "anonymous": false, "function": "CorkedRequest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "finish", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          onCorkedFinish(_this, state);
                    SRTlib.send('], "end": "finish"},');

        };
                SRTlib.send('], "end": "CorkedRequest"},');

      }
      var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
      var Duplex;
      Writable.WritableState = WritableState;
      var util = Object.create(require('core-util-is'));
      util.inherits = require('inherits');
      var internalUtil = {
        deprecate: require('util-deprecate')
      };
      var Stream = require('./internal/streams/stream');
      var Buffer = require('safe-buffer').Buffer;
      var OurUint8Array = global.Uint8Array || (function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.OurUint8Array2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "call.OurUint8Array2"},');

      });
      function _uint8ArrayToBuffer(chunk) {
                SRTlib.send(`{ "anonymous": false, "function": "_uint8ArrayToBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "_uint8ArrayToBuffer"},');

        return Buffer.from(chunk);
                SRTlib.send('], "end": "_uint8ArrayToBuffer"},');

      }
      function _isUint8Array(obj) {
                SRTlib.send(`{ "anonymous": false, "function": "_isUint8Array", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "_isUint8Array"},');

        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                SRTlib.send('], "end": "_isUint8Array"},');

      }
      var destroyImpl = require('./internal/streams/destroy');
      util.inherits(Writable, Stream);
      function nop() {
                SRTlib.send(`{ "anonymous": false, "function": "nop", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "nop"},');

      }
      function WritableState(options, stream) {
                SRTlib.send(`{ "anonymous": false, "function": "WritableState", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        Duplex = Duplex || require('./_stream_duplex');
        options = options || ({});
        var isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
        var hwm = options.highWaterMark;
        var writableHwm = options.writableHighWaterMark;
        var defaultHwm = this.objectMode ? 16 : 16 * 1024;
        if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm; else this.highWaterMark = defaultHwm;
        this.highWaterMark = Math.floor(this.highWaterMark);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || 'utf8';
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function (er) {
                    SRTlib.send(`{ "anonymous": true, "function": "onwrite", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          onwrite(stream, er);
                    SRTlib.send('], "end": "onwrite"},');

        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
                SRTlib.send('], "end": "WritableState"},');

      }
      WritableState.prototype.getBuffer = function getBuffer() {
                SRTlib.send(`{ "anonymous": true, "function": "call.WritableState.prototype.getBuffer.getBuffer", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
                SRTlib.send('], "end": "call.WritableState.prototype.getBuffer.getBuffer"},');

        return out;
                SRTlib.send('], "end": "call.WritableState.prototype.getBuffer.getBuffer"},');

      };
      (function () {
                SRTlib.send(`{ "anonymous": true, "function": "call30", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        try {
          Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.get4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.get4"},');

              return this.getBuffer();
                            SRTlib.send('], "end": "call.get4"},');

            }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
          });
        } catch (_) {}
                SRTlib.send('], "end": "call30"},');

      })();
      var realHasInstance;
      if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: function (object) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (realHasInstance.call(this, object)) {
                            SRTlib.send('], "end": "call.value"},');

              return true;
            }
            if (this !== Writable) {
                            SRTlib.send('], "end": "call.value"},');

              return false;
            }
                        SRTlib.send('], "end": "call.value"},');

            return object && object._writableState instanceof WritableState;
                        SRTlib.send('], "end": "call.value"},');

          }
        });
      } else {
        realHasInstance = function (object) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.realHasInstance", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call.realHasInstance"},');

          return object instanceof this;
                    SRTlib.send('], "end": "call.realHasInstance"},');

        };
      }
      function Writable(options) {
                SRTlib.send(`{ "anonymous": false, "function": "Writable", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        Duplex = Duplex || require('./_stream_duplex');
        if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                    SRTlib.send('], "end": "Writable"},');

          return new Writable(options);
        }
        this._writableState = new WritableState(options, this);
        this.writable = true;
        if (options) {
          if (typeof options.write === 'function') this._write = options.write;
          if (typeof options.writev === 'function') this._writev = options.writev;
          if (typeof options.destroy === 'function') this._destroy = options.destroy;
          if (typeof options.final === 'function') this._final = options.final;
        }
        Stream.call(this);
                SRTlib.send('], "end": "Writable"},');

      }
      Writable.prototype.pipe = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.Writable.prototype.pipe", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.emit('error', new Error('Cannot pipe, not readable'));
                SRTlib.send('], "end": "call.Writable.prototype.pipe"},');

      };
      function writeAfterEnd(stream, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "writeAfterEnd", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var er = new Error('write after end');
        stream.emit('error', er);
        pna.nextTick(cb, er);
                SRTlib.send('], "end": "writeAfterEnd"},');

      }
      function validChunk(stream, state, chunk, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "validChunk", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        var valid = true;
        var er = false;
        if (chunk === null) {
          er = new TypeError('May not write null values to stream');
        } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
          er = new TypeError('Invalid non-string/buffer chunk');
        }
        if (er) {
          stream.emit('error', er);
          pna.nextTick(cb, er);
          valid = false;
        }
                SRTlib.send('], "end": "validChunk"},');

        return valid;
                SRTlib.send('], "end": "validChunk"},');

      }
      Writable.prototype.write = function (chunk, encoding, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Writable.prototype.write", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === 'function') {
          cb = encoding;
          encoding = null;
        }
        if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;
        if (typeof cb !== 'function') cb = nop;
        if (state.ended) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
        }
                SRTlib.send('], "end": "call.Writable.prototype.write"},');

        return ret;
                SRTlib.send('], "end": "call.Writable.prototype.write"},');

      };
      Writable.prototype.cork = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.Writable.prototype.cork", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var state = this._writableState;
        state.corked++;
                SRTlib.send('], "end": "call.Writable.prototype.cork"},');

      };
      Writable.prototype.uncork = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.Writable.prototype.uncork", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
        }
                SRTlib.send('], "end": "call.Writable.prototype.uncork"},');

      };
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Writable.prototype.setDefaultEncoding.setDefaultEncoding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof encoding === 'string') encoding = encoding.toLowerCase();
        if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) {
                    SRTlib.send('], "end": "call.Writable.prototype.setDefaultEncoding.setDefaultEncoding"},');

          throw new TypeError('Unknown encoding: ' + encoding);
        }
        this._writableState.defaultEncoding = encoding;
                SRTlib.send('], "end": "call.Writable.prototype.setDefaultEncoding.setDefaultEncoding"},');

        return this;
                SRTlib.send('], "end": "call.Writable.prototype.setDefaultEncoding.setDefaultEncoding"},');

      };
      function decodeChunk(state, chunk, encoding) {
                SRTlib.send(`{ "anonymous": false, "function": "decodeChunk", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
          chunk = Buffer.from(chunk, encoding);
        }
                SRTlib.send('], "end": "decodeChunk"},');

        return chunk;
                SRTlib.send('], "end": "decodeChunk"},');

      }
      Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
        enumerable: false,
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.get5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "call.get5"},');

          return this._writableState.highWaterMark;
                    SRTlib.send('], "end": "call.get5"},');

        }
      });
      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "writeOrBuffer", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret) state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }
                SRTlib.send('], "end": "writeOrBuffer"},');

        return ret;
                SRTlib.send('], "end": "writeOrBuffer"},');

      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "doWrite", "fileName": "${__filename}", "paramsNumber": 7, "calls" : [`);

        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
                SRTlib.send('], "end": "doWrite"},');

      }
      function onwriteError(stream, state, sync, er, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "onwriteError", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        --state.pendingcb;
        if (sync) {
          pna.nextTick(cb, er);
          pna.nextTick(finishMaybe, stream, state);
          stream._writableState.errorEmitted = true;
          stream.emit('error', er);
        } else {
          cb(er);
          stream._writableState.errorEmitted = true;
          stream.emit('error', er);
          finishMaybe(stream, state);
        }
                SRTlib.send('], "end": "onwriteError"},');

      }
      function onwriteStateUpdate(state) {
                SRTlib.send(`{ "anonymous": false, "function": "onwriteStateUpdate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
                SRTlib.send('], "end": "onwriteStateUpdate"},');

      }
      function onwrite(stream, er) {
                SRTlib.send(`{ "anonymous": false, "function": "onwrite", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        onwriteStateUpdate(state);
        if (er) onwriteError(stream, state, sync, er, cb); else {
          var finished = needFinish(state);
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
          }
          if (sync) {
            asyncWrite(afterWrite, stream, state, finished, cb);
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
                SRTlib.send('], "end": "onwrite"},');

      }
      function afterWrite(stream, state, finished, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "afterWrite", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (!finished) onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
                SRTlib.send('], "end": "afterWrite"},');

      }
      function onwriteDrain(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "onwriteDrain", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit('drain');
        }
                SRTlib.send('], "end": "onwriteDrain"},');

      }
      function clearBuffer(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "clearBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite(stream, state, true, state.length, buffer, '', holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null) state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
                SRTlib.send('], "end": "clearBuffer"},');

      }
      Writable.prototype._write = function (chunk, encoding, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Writable.prototype._write", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        cb(new Error('_write() is not implemented'));
                SRTlib.send('], "end": "call.Writable.prototype._write"},');

      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function (chunk, encoding, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Writable.prototype.end", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var state = this._writableState;
        if (typeof chunk === 'function') {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === 'function') {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending && !state.finished) endWritable(this, state, cb);
                SRTlib.send('], "end": "call.Writable.prototype.end"},');

      };
      function needFinish(state) {
                SRTlib.send(`{ "anonymous": false, "function": "needFinish", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "needFinish"},');

        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                SRTlib.send('], "end": "needFinish"},');

      }
      function callFinal(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "callFinal", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        stream._final(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey201", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          state.pendingcb--;
          if (err) {
            stream.emit('error', err);
          }
          state.prefinished = true;
          stream.emit('prefinish');
          finishMaybe(stream, state);
                    SRTlib.send('], "end": "emptyKey201"},');

        });
                SRTlib.send('], "end": "callFinal"},');

      }
      function prefinish(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "prefinish", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === 'function') {
            state.pendingcb++;
            state.finalCalled = true;
            pna.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit('prefinish');
          }
        }
                SRTlib.send('], "end": "prefinish"},');

      }
      function finishMaybe(stream, state) {
                SRTlib.send(`{ "anonymous": false, "function": "finishMaybe", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var need = needFinish(state);
        if (need) {
          prefinish(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
          }
        }
                SRTlib.send('], "end": "finishMaybe"},');

        return need;
                SRTlib.send('], "end": "finishMaybe"},');

      }
      function endWritable(stream, state, cb) {
                SRTlib.send(`{ "anonymous": false, "function": "endWritable", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        state.ending = true;
        finishMaybe(stream, state);
        if (cb) {
          if (state.finished) pna.nextTick(cb); else stream.once('finish', cb);
        }
        state.ended = true;
        stream.writable = false;
                SRTlib.send('], "end": "endWritable"},');

      }
      function onCorkedFinish(corkReq, state, err) {
                SRTlib.send(`{ "anonymous": false, "function": "onCorkedFinish", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = corkReq;
        } else {
          state.corkedRequestsFree = corkReq;
        }
                SRTlib.send('], "end": "onCorkedFinish"},');

      }
      Object.defineProperty(Writable.prototype, 'destroyed', {
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.get6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (this._writableState === undefined) {
                        SRTlib.send('], "end": "call.get6"},');

            return false;
          }
                    SRTlib.send('], "end": "call.get6"},');

          return this._writableState.destroyed;
                    SRTlib.send('], "end": "call.get6"},');

        },
        set: function (value) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.set2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!this._writableState) {
                        SRTlib.send('], "end": "call.set2"},');

            return;
          }
          this._writableState.destroyed = value;
                    SRTlib.send('], "end": "call.set2"},');

        }
      });
      Writable.prototype.destroy = destroyImpl.destroy;
      Writable.prototype._undestroy = destroyImpl.undestroy;
      Writable.prototype._destroy = function (err, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Writable.prototype._destroy", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.end();
        cb(err);
                SRTlib.send('], "end": "call.Writable.prototype._destroy"},');

      };
            SRTlib.send('], "end": "call31"},');

    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("timers").setImmediate);
        SRTlib.send('], "end": "emptyKey202"},');

  }, {
    "./_stream_duplex": 173,
    "./internal/streams/destroy": 179,
    "./internal/streams/stream": 180,
    "_process": 162,
    "core-util-is": 57,
    "inherits": 133,
    "process-nextick-args": 161,
    "safe-buffer": 190,
    "timers": 219,
    "util-deprecate": 233
  }],
  178: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey203", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    function _classCallCheck(instance, Constructor) {
            SRTlib.send(`{ "anonymous": false, "function": "_classCallCheck", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(instance instanceof Constructor)) {
                SRTlib.send('], "end": "_classCallCheck"},');

        throw new TypeError("Cannot call a class as a function");
      }
            SRTlib.send('], "end": "_classCallCheck"},');

    }
    var Buffer = require('safe-buffer').Buffer;
    var util = require('util');
    function copyBuffer(src, target, offset) {
            SRTlib.send(`{ "anonymous": false, "function": "copyBuffer", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      src.copy(target, offset);
            SRTlib.send('], "end": "copyBuffer"},');

    }
    module.exports = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports15", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function BufferList() {
                SRTlib.send(`{ "anonymous": false, "function": "BufferList", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
                SRTlib.send('], "end": "BufferList"},');

      }
      BufferList.prototype.push = function push(v) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.BufferList.prototype.push.push", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0) this.tail.next = entry; else this.head = entry;
        this.tail = entry;
        ++this.length;
                SRTlib.send('], "end": "module.exports.BufferList.prototype.push.push"},');

      };
      BufferList.prototype.unshift = function unshift(v) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.BufferList.prototype.unshift.unshift", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
                SRTlib.send('], "end": "module.exports.BufferList.prototype.unshift.unshift"},');

      };
      BufferList.prototype.shift = function shift() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.BufferList.prototype.shift.shift", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.length === 0) {
                    SRTlib.send('], "end": "module.exports.BufferList.prototype.shift.shift"},');

          return;
        }
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
        --this.length;
                SRTlib.send('], "end": "module.exports.BufferList.prototype.shift.shift"},');

        return ret;
                SRTlib.send('], "end": "module.exports.BufferList.prototype.shift.shift"},');

      };
      BufferList.prototype.clear = function clear() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.BufferList.prototype.clear.clear", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.head = this.tail = null;
        this.length = 0;
                SRTlib.send('], "end": "module.exports.BufferList.prototype.clear.clear"},');

      };
      BufferList.prototype.join = function join(s) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.BufferList.prototype.join.join", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length === 0) {
                    SRTlib.send('], "end": "module.exports.BufferList.prototype.join.join"},');

          return '';
        }
        var p = this.head;
        var ret = '' + p.data;
        while (p = p.next) {
          ret += s + p.data;
        }
                SRTlib.send('], "end": "module.exports.BufferList.prototype.join.join"},');

        return ret;
                SRTlib.send('], "end": "module.exports.BufferList.prototype.join.join"},');

      };
      BufferList.prototype.concat = function concat(n) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.BufferList.prototype.concat.concat", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (this.length === 0) {
                    SRTlib.send('], "end": "module.exports.BufferList.prototype.concat.concat"},');

          return Buffer.alloc(0);
        }
        if (this.length === 1) {
                    SRTlib.send('], "end": "module.exports.BufferList.prototype.concat.concat"},');

          return this.head.data;
        }
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
                SRTlib.send('], "end": "module.exports.BufferList.prototype.concat.concat"},');

        return ret;
                SRTlib.send('], "end": "module.exports.BufferList.prototype.concat.concat"},');

      };
            SRTlib.send('], "end": "module.exports15"},');

      return BufferList;
            SRTlib.send('], "end": "module.exports15"},');

    })();
    if (util && util.inspect && util.inspect.custom) {
      module.exports.prototype[util.inspect.custom] = function () {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.prototype", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var obj = util.inspect({
          length: this.length
        });
                SRTlib.send('], "end": "module.exports.prototype"},');

        return this.constructor.name + ' ' + obj;
                SRTlib.send('], "end": "module.exports.prototype"},');

      };
    }
        SRTlib.send('], "end": "emptyKey203"},');

  }, {
    "safe-buffer": 190,
    "util": 23
  }],
  179: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey204", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var pna = require('process-nextick-args');
    function destroy(err, cb) {
            SRTlib.send(`{ "anonymous": false, "function": "destroy", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
          pna.nextTick(emitErrorNT, this, err);
        }
                SRTlib.send('], "end": "destroy"},');

        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function (err) {
                SRTlib.send(`{ "anonymous": true, "function": "_destroy", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!cb && err) {
          pna.nextTick(emitErrorNT, _this, err);
          if (_this._writableState) {
            _this._writableState.errorEmitted = true;
          }
        } else if (cb) {
          cb(err);
        }
                SRTlib.send('], "end": "_destroy"},');

      });
            SRTlib.send('], "end": "destroy"},');

      return this;
            SRTlib.send('], "end": "destroy"},');

    }
    function undestroy() {
            SRTlib.send(`{ "anonymous": false, "function": "undestroy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
            SRTlib.send('], "end": "undestroy"},');

    }
    function emitErrorNT(self, err) {
            SRTlib.send(`{ "anonymous": false, "function": "emitErrorNT", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      self.emit('error', err);
            SRTlib.send('], "end": "emitErrorNT"},');

    }
    module.exports = {
      destroy: destroy,
      undestroy: undestroy
    };
        SRTlib.send('], "end": "emptyKey204"},');

  }, {
    "process-nextick-args": 161
  }],
  180: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey205", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = require('events').EventEmitter;
        SRTlib.send('], "end": "emptyKey205"},');

  }, {
    "events": 361
  }],
  181: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey206", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][115][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey206"},');

  }, {
    "dup": 115
  }],
  182: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey207", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var Buffer = require('safe-buffer').Buffer;
    var isEncoding = Buffer.isEncoding || (function (encoding) {
            SRTlib.send(`{ "anonymous": true, "function": "isEncoding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
                    SRTlib.send('], "end": "emptyKey207"},');

                    SRTlib.send('], "end": "isEncoding"},');

          return true;
        default:
                    SRTlib.send('], "end": "emptyKey207"},');

                    SRTlib.send('], "end": "isEncoding"},');

          return false;
      }
            SRTlib.send('], "end": "isEncoding"},');

    });
    function _normalizeEncoding(enc) {
            SRTlib.send(`{ "anonymous": false, "function": "_normalizeEncoding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!enc) {
                SRTlib.send('], "end": "_normalizeEncoding"},');

        return 'utf8';
      }
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
                        SRTlib.send('], "end": "emptyKey207"},');

                        SRTlib.send('], "end": "_normalizeEncoding"},');

            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
                        SRTlib.send('], "end": "emptyKey207"},');

                        SRTlib.send('], "end": "_normalizeEncoding"},');

            return 'utf16le';
          case 'latin1':
          case 'binary':
                        SRTlib.send('], "end": "emptyKey207"},');

                        SRTlib.send('], "end": "_normalizeEncoding"},');

            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
                        SRTlib.send('], "end": "emptyKey207"},');

                        SRTlib.send('], "end": "_normalizeEncoding"},');

            return enc;
          default:
            if (retried) {
                            SRTlib.send('], "end": "_normalizeEncoding"},');

              return;
            }
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
            SRTlib.send('], "end": "_normalizeEncoding"},');

    }
    ;
    function normalizeEncoding(enc) {
            SRTlib.send(`{ "anonymous": false, "function": "normalizeEncoding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) {
                SRTlib.send('], "end": "normalizeEncoding"},');

        throw new Error('Unknown encoding: ' + enc);
      }
            SRTlib.send('], "end": "normalizeEncoding"},');

      return nenc || enc;
            SRTlib.send('], "end": "normalizeEncoding"},');

    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
            SRTlib.send(`{ "anonymous": false, "function": "StringDecoder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
                    SRTlib.send('], "end": "emptyKey207"},');

                    SRTlib.send('], "end": "StringDecoder"},');

          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
            SRTlib.send('], "end": "StringDecoder"},');

    }
    StringDecoder.prototype.write = function (buf) {
            SRTlib.send(`{ "anonymous": true, "function": "StringDecoder.prototype.write", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (buf.length === 0) {
                SRTlib.send('], "end": "StringDecoder.prototype.write"},');

        return '';
      }
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) {
                    SRTlib.send('], "end": "StringDecoder.prototype.write"},');

          return '';
        }
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) {
                SRTlib.send('], "end": "StringDecoder.prototype.write"},');

        return r ? r + this.text(buf, i) : this.text(buf, i);
      }
            SRTlib.send('], "end": "StringDecoder.prototype.write"},');

      return r || '';
            SRTlib.send('], "end": "StringDecoder.prototype.write"},');

    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function (buf) {
            SRTlib.send(`{ "anonymous": true, "function": "StringDecoder.prototype.fillLast", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                SRTlib.send('], "end": "StringDecoder.prototype.fillLast"},');

        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
            SRTlib.send('], "end": "StringDecoder.prototype.fillLast"},');

    };
    function utf8CheckByte(byte) {
            SRTlib.send(`{ "anonymous": false, "function": "utf8CheckByte", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (byte <= 0x7F) return 0; else {
                SRTlib.send('], "end": "emptyKey207"},');

        return 0;
      }
            SRTlib.send('], "end": "utf8CheckByte"},');

      return byte >> 6 === 0x02 ? -1 : -2;
            SRTlib.send('], "end": "utf8CheckByte"},');

    }
    function utf8CheckIncomplete(self, buf, i) {
            SRTlib.send(`{ "anonymous": false, "function": "utf8CheckIncomplete", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var j = buf.length - 1;
      if (j < i) {
                SRTlib.send('], "end": "utf8CheckIncomplete"},');

        return 0;
      }
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
                SRTlib.send('], "end": "utf8CheckIncomplete"},');

        return nb;
      }
      if (--j < i || nb === -2) {
                SRTlib.send('], "end": "utf8CheckIncomplete"},');

        return 0;
      }
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
                SRTlib.send('], "end": "utf8CheckIncomplete"},');

        return nb;
      }
      if (--j < i || nb === -2) {
                SRTlib.send('], "end": "utf8CheckIncomplete"},');

        return 0;
      }
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
        }
                SRTlib.send('], "end": "utf8CheckIncomplete"},');

        return nb;
      }
            SRTlib.send('], "end": "utf8CheckIncomplete"},');

      return 0;
            SRTlib.send('], "end": "utf8CheckIncomplete"},');

    }
    function utf8CheckExtraBytes(self, buf, p) {
            SRTlib.send(`{ "anonymous": false, "function": "utf8CheckExtraBytes", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
                SRTlib.send('], "end": "utf8CheckExtraBytes"},');

        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
                    SRTlib.send('], "end": "utf8CheckExtraBytes"},');

          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
                        SRTlib.send('], "end": "utf8CheckExtraBytes"},');

            return '\ufffd';
          }
        }
      }
            SRTlib.send('], "end": "utf8CheckExtraBytes"},');

    }
    function utf8FillLast(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "utf8FillLast", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== undefined) {
                SRTlib.send('], "end": "utf8FillLast"},');

        return r;
      }
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
                SRTlib.send('], "end": "utf8FillLast"},');

        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
            SRTlib.send('], "end": "utf8FillLast"},');

    }
    function utf8Text(buf, i) {
            SRTlib.send(`{ "anonymous": false, "function": "utf8Text", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) {
                SRTlib.send('], "end": "utf8Text"},');

        return buf.toString('utf8', i);
      }
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
            SRTlib.send('], "end": "utf8Text"},');

      return buf.toString('utf8', i, end);
            SRTlib.send('], "end": "utf8Text"},');

    }
    function utf8End(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "utf8End", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
                SRTlib.send('], "end": "utf8End"},');

        return r + '\ufffd';
      }
            SRTlib.send('], "end": "utf8End"},');

      return r;
            SRTlib.send('], "end": "utf8End"},');

    }
    function utf16Text(buf, i) {
            SRTlib.send(`{ "anonymous": false, "function": "utf16Text", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
                        SRTlib.send('], "end": "utf16Text"},');

            return r.slice(0, -1);
          }
        }
                SRTlib.send('], "end": "utf16Text"},');

        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
            SRTlib.send('], "end": "utf16Text"},');

      return buf.toString('utf16le', i, buf.length - 1);
            SRTlib.send('], "end": "utf16Text"},');

    }
    function utf16End(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "utf16End", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
                SRTlib.send('], "end": "utf16End"},');

        return r + this.lastChar.toString('utf16le', 0, end);
      }
            SRTlib.send('], "end": "utf16End"},');

      return r;
            SRTlib.send('], "end": "utf16End"},');

    }
    function base64Text(buf, i) {
            SRTlib.send(`{ "anonymous": false, "function": "base64Text", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var n = (buf.length - i) % 3;
      if (n === 0) {
                SRTlib.send('], "end": "base64Text"},');

        return buf.toString('base64', i);
      }
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
            SRTlib.send('], "end": "base64Text"},');

      return buf.toString('base64', i, buf.length - n);
            SRTlib.send('], "end": "base64Text"},');

    }
    function base64End(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "base64End", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
                SRTlib.send('], "end": "base64End"},');

        return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      }
            SRTlib.send('], "end": "base64End"},');

      return r;
            SRTlib.send('], "end": "base64End"},');

    }
    function simpleWrite(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "simpleWrite", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "simpleWrite"},');

      return buf.toString(this.encoding);
            SRTlib.send('], "end": "simpleWrite"},');

    }
    function simpleEnd(buf) {
            SRTlib.send(`{ "anonymous": false, "function": "simpleEnd", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "simpleEnd"},');

      return buf && buf.length ? this.write(buf) : '';
            SRTlib.send('], "end": "simpleEnd"},');

    }
        SRTlib.send('], "end": "emptyKey207"},');

  }, {
    "safe-buffer": 190
  }],
  183: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey208", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = require('./readable').PassThrough;
        SRTlib.send('], "end": "emptyKey208"},');

  }, {
    "./readable": 184
  }],
  184: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey209", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    exports = module.exports = require('./lib/_stream_readable.js');
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require('./lib/_stream_writable.js');
    exports.Duplex = require('./lib/_stream_duplex.js');
    exports.Transform = require('./lib/_stream_transform.js');
    exports.PassThrough = require('./lib/_stream_passthrough.js');
        SRTlib.send('], "end": "emptyKey209"},');

  }, {
    "./lib/_stream_duplex.js": 173,
    "./lib/_stream_passthrough.js": 174,
    "./lib/_stream_readable.js": 175,
    "./lib/_stream_transform.js": 176,
    "./lib/_stream_writable.js": 177
  }],
  185: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey210", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = require('./readable').Transform;
        SRTlib.send('], "end": "emptyKey210"},');

  }, {
    "./readable": 184
  }],
  186: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey211", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = require('./lib/_stream_writable.js');
        SRTlib.send('], "end": "emptyKey211"},');

  }, {
    "./lib/_stream_writable.js": 177
  }],
  187: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey212", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    module.exports = function required(port, protocol) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.required", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      protocol = protocol.split(':')[0];
      port = +port;
      if (!port) {
                SRTlib.send('], "end": "module.exports.required"},');

        return false;
      }
      switch (protocol) {
        case 'http':
        case 'ws':
                    SRTlib.send('], "end": "emptyKey212"},');

                    SRTlib.send('], "end": "module.exports.required"},');

          return port !== 80;
        case 'https':
        case 'wss':
                    SRTlib.send('], "end": "emptyKey212"},');

                    SRTlib.send('], "end": "module.exports.required"},');

          return port !== 443;
        case 'ftp':
                    SRTlib.send('], "end": "emptyKey212"},');

                    SRTlib.send('], "end": "module.exports.required"},');

          return port !== 21;
        case 'gopher':
                    SRTlib.send('], "end": "emptyKey212"},');

                    SRTlib.send('], "end": "module.exports.required"},');

          return port !== 70;
        case 'file':
                    SRTlib.send('], "end": "emptyKey212"},');

                    SRTlib.send('], "end": "module.exports.required"},');

          return false;
      }
            SRTlib.send('], "end": "module.exports.required"},');

      return port !== 0;
            SRTlib.send('], "end": "module.exports.required"},');

    };
        SRTlib.send('], "end": "emptyKey212"},');

  }, {}],
  188: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey214", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global) {
            SRTlib.send(`{ "anonymous": true, "function": "call34", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      (function (global, factory) {
                SRTlib.send(`{ "anonymous": true, "function": "call32", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.ResizeObserver = factory();
                SRTlib.send('], "end": "call32"},');

      })(this, function () {
                SRTlib.send(`{ "anonymous": true, "function": "call33", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        'use strict';
        var MapShim = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.MapShim", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (typeof Map !== 'undefined') {
                        SRTlib.send('], "end": "call.MapShim"},');

            return Map;
          }
          function getIndex(arr, key) {
                        SRTlib.send(`{ "anonymous": false, "function": "getIndex", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var result = -1;
            arr.some(function (entry, index) {
                            SRTlib.send(`{ "anonymous": true, "function": "emptyKey213", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              if (entry[0] === key) {
                result = index;
                                SRTlib.send('], "end": "emptyKey213"},');

                return true;
              }
                            SRTlib.send('], "end": "emptyKey213"},');

              return false;
                            SRTlib.send('], "end": "emptyKey213"},');

            });
                        SRTlib.send('], "end": "getIndex"},');

            return result;
                        SRTlib.send('], "end": "getIndex"},');

          }
                    SRTlib.send('], "end": "call.MapShim"},');

          return (function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.MapShim.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            function class_1() {
                            SRTlib.send(`{ "anonymous": false, "function": "class_1", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              this.__entries__ = [];
                            SRTlib.send('], "end": "class_1"},');

            }
            Object.defineProperty(class_1.prototype, "size", {
              get: function () {
                                SRTlib.send(`{ "anonymous": true, "function": "call.MapShim.ReturnStatement.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                SRTlib.send('], "end": "call.MapShim.ReturnStatement.get"},');

                return this.__entries__.length;
                                SRTlib.send('], "end": "call.MapShim.ReturnStatement.get"},');

              },
              enumerable: true,
              configurable: true
            });
            class_1.prototype.get = function (key) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.MapShim.ReturnStatement.class_1.prototype.get", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var index = getIndex(this.__entries__, key);
              var entry = this.__entries__[index];
                            SRTlib.send('], "end": "call.MapShim.ReturnStatement.class_1.prototype.get"},');

              return entry && entry[1];
                            SRTlib.send('], "end": "call.MapShim.ReturnStatement.class_1.prototype.get"},');

            };
            class_1.prototype.set = function (key, value) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.MapShim.ReturnStatement.class_1.prototype.set", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var index = getIndex(this.__entries__, key);
              if (~index) {
                this.__entries__[index][1] = value;
              } else {
                this.__entries__.push([key, value]);
              }
                            SRTlib.send('], "end": "call.MapShim.ReturnStatement.class_1.prototype.set"},');

            };
            class_1.prototype.delete = function (key) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.MapShim.ReturnStatement.class_1.prototype.delete", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var entries = this.__entries__;
              var index = getIndex(entries, key);
              if (~index) {
                entries.splice(index, 1);
              }
                            SRTlib.send('], "end": "call.MapShim.ReturnStatement.class_1.prototype.delete"},');

            };
            class_1.prototype.has = function (key) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.MapShim.ReturnStatement.class_1.prototype.has", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.MapShim.ReturnStatement.class_1.prototype.has"},');

              return !!~getIndex(this.__entries__, key);
                            SRTlib.send('], "end": "call.MapShim.ReturnStatement.class_1.prototype.has"},');

            };
            class_1.prototype.clear = function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.MapShim.ReturnStatement.class_1.prototype.clear", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              this.__entries__.splice(0);
                            SRTlib.send('], "end": "call.MapShim.ReturnStatement.class_1.prototype.clear"},');

            };
            class_1.prototype.forEach = function (callback, ctx) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.MapShim.ReturnStatement.class_1.prototype.forEach", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              if (ctx === void 0) {
                ctx = null;
              }
              for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
              }
                            SRTlib.send('], "end": "call.MapShim.ReturnStatement.class_1.prototype.forEach"},');

            };
                        SRTlib.send('], "end": "call.MapShim.ReturnStatement"},');

            return class_1;
                        SRTlib.send('], "end": "call.MapShim.ReturnStatement"},');

          })();
                    SRTlib.send('], "end": "call.MapShim"},');

        })();
        var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;
        var global$1 = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.global$1", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (typeof global !== 'undefined' && global.Math === Math) {
                        SRTlib.send('], "end": "call.global$1"},');

            return global;
          }
          if (typeof self !== 'undefined' && self.Math === Math) {
                        SRTlib.send('], "end": "call.global$1"},');

            return self;
          }
          if (typeof window !== 'undefined' && window.Math === Math) {
                        SRTlib.send('], "end": "call.global$1"},');

            return window;
          }
                    SRTlib.send('], "end": "call.global$1"},');

          return Function('return this')();
                    SRTlib.send('], "end": "call.global$1"},');

        })();
        var requestAnimationFrame$1 = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.requestAnimationFrame$1", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (typeof requestAnimationFrame === 'function') {
                        SRTlib.send('], "end": "call.requestAnimationFrame$1"},');

            return requestAnimationFrame.bind(global$1);
          }
                    SRTlib.send('], "end": "call.requestAnimationFrame$1"},');

          return function (callback) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.requestAnimationFrame$1.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call.requestAnimationFrame$1.ReturnStatement"},');

            return setTimeout(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.requestAnimationFrame$1.ReturnStatement.ReturnStatement.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.requestAnimationFrame$1.ReturnStatement.ReturnStatement.setTimeout"},');

              return callback(Date.now());
                            SRTlib.send('], "end": "call.requestAnimationFrame$1.ReturnStatement.ReturnStatement.setTimeout"},');

            }, 1000 / 60);
                        SRTlib.send('], "end": "call.requestAnimationFrame$1.ReturnStatement"},');

          };
                    SRTlib.send('], "end": "call.requestAnimationFrame$1"},');

        })();
        var trailingTimeout = 2;
        function throttle(callback, delay) {
                    SRTlib.send(`{ "anonymous": false, "function": "throttle", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var leadingCall = false, trailingCall = false, lastCallTime = 0;
          function resolvePending() {
                        SRTlib.send(`{ "anonymous": false, "function": "resolvePending", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (leadingCall) {
              leadingCall = false;
              callback();
            }
            if (trailingCall) {
              proxy();
            }
                        SRTlib.send('], "end": "resolvePending"},');

          }
          function timeoutCallback() {
                        SRTlib.send(`{ "anonymous": false, "function": "timeoutCallback", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            requestAnimationFrame$1(resolvePending);
                        SRTlib.send('], "end": "timeoutCallback"},');

          }
          function proxy() {
                        SRTlib.send(`{ "anonymous": false, "function": "proxy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var timeStamp = Date.now();
            if (leadingCall) {
              if (timeStamp - lastCallTime < trailingTimeout) {
                                SRTlib.send('], "end": "proxy"},');

                return;
              }
              trailingCall = true;
            } else {
              leadingCall = true;
              trailingCall = false;
              setTimeout(timeoutCallback, delay);
            }
            lastCallTime = timeStamp;
                        SRTlib.send('], "end": "proxy"},');

          }
                    SRTlib.send('], "end": "throttle"},');

          return proxy;
                    SRTlib.send('], "end": "throttle"},');

        }
        var REFRESH_DELAY = 20;
        var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
        var mutationObserverSupported = typeof MutationObserver !== 'undefined';
        var ResizeObserverController = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function ResizeObserverController() {
                        SRTlib.send(`{ "anonymous": false, "function": "ResizeObserverController", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            this.connected_ = false;
            this.mutationEventsAdded_ = false;
            this.mutationsObserver_ = null;
            this.observers_ = [];
            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
                        SRTlib.send('], "end": "ResizeObserverController"},');

          }
          ResizeObserverController.prototype.addObserver = function (observer) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.addObserver", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (!~this.observers_.indexOf(observer)) {
              this.observers_.push(observer);
            }
            if (!this.connected_) {
              this.connect_();
            }
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.addObserver"},');

          };
          ResizeObserverController.prototype.removeObserver = function (observer) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.removeObserver", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var observers = this.observers_;
            var index = observers.indexOf(observer);
            if (~index) {
              observers.splice(index, 1);
            }
            if (!observers.length && this.connected_) {
              this.disconnect_();
            }
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.removeObserver"},');

          };
          ResizeObserverController.prototype.refresh = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.refresh", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var changesDetected = this.updateObservers_();
            if (changesDetected) {
              this.refresh();
            }
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.refresh"},');

          };
          ResizeObserverController.prototype.updateObservers_ = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var activeObservers = this.observers_.filter(function (observer) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_.activeObservers.observers_.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_.activeObservers.observers_.filter"},');

              return (observer.gatherActive(), observer.hasActive());
                            SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_.activeObservers.observers_.filter"},');

            });
            activeObservers.forEach(function (observer) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_"},');

              return observer.broadcastActive();
                            SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_"},');

            });
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_2"},');

            return activeObservers.length > 0;
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.updateObservers_2"},');

          };
          ResizeObserverController.prototype.connect_ = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.connect_", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!isBrowser || this.connected_) {
                            SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.connect_"},');

              return;
            }
            document.addEventListener('transitionend', this.onTransitionEnd_);
            window.addEventListener('resize', this.refresh);
            if (mutationObserverSupported) {
              this.mutationsObserver_ = new MutationObserver(this.refresh);
              this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
              });
            } else {
              document.addEventListener('DOMSubtreeModified', this.refresh);
              this.mutationEventsAdded_ = true;
            }
            this.connected_ = true;
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.connect_"},');

          };
          ResizeObserverController.prototype.disconnect_ = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.disconnect_", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!isBrowser || !this.connected_) {
                            SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.disconnect_"},');

              return;
            }
            document.removeEventListener('transitionend', this.onTransitionEnd_);
            window.removeEventListener('resize', this.refresh);
            if (this.mutationsObserver_) {
              this.mutationsObserver_.disconnect();
            }
            if (this.mutationEventsAdded_) {
              document.removeEventListener('DOMSubtreeModified', this.refresh);
            }
            this.mutationsObserver_ = null;
            this.mutationEventsAdded_ = false;
            this.connected_ = false;
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.disconnect_"},');

          };
          ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.onTransitionEnd_", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
            var isReflowProperty = transitionKeys.some(function (key) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.prototype.onTransitionEnd_.isReflowProperty", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.onTransitionEnd_.isReflowProperty"},');

              return !!~propertyName.indexOf(key);
                            SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.onTransitionEnd_.isReflowProperty"},');

            });
            if (isReflowProperty) {
              this.refresh();
            }
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.prototype.onTransitionEnd_"},');

          };
          ResizeObserverController.getInstance = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverController.ResizeObserverController.getInstance", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!this.instance_) {
              this.instance_ = new ResizeObserverController();
            }
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.getInstance"},');

            return this.instance_;
                        SRTlib.send('], "end": "call.ResizeObserverController.ResizeObserverController.getInstance"},');

          };
          ResizeObserverController.instance_ = null;
                    SRTlib.send('], "end": "call.ResizeObserverController"},');

          return ResizeObserverController;
                    SRTlib.send('], "end": "call.ResizeObserverController"},');

        })();
        var defineConfigurable = function (target, props) {
                    SRTlib.send(`{ "anonymous": false, "function": "defineConfigurable", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var key = _a[_i];
            Object.defineProperty(target, key, {
              value: props[key],
              enumerable: false,
              writable: false,
              configurable: true
            });
          }
                    SRTlib.send('], "end": "defineConfigurable"},');

          return target;
                    SRTlib.send('], "end": "defineConfigurable"},');

        };
        var getWindowOf = function (target) {
                    SRTlib.send(`{ "anonymous": false, "function": "getWindowOf", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
                    SRTlib.send('], "end": "getWindowOf"},');

          return ownerGlobal || global$1;
                    SRTlib.send('], "end": "getWindowOf"},');

        };
        var emptyRect = createRectInit(0, 0, 0, 0);
        function toFloat(value) {
                    SRTlib.send(`{ "anonymous": false, "function": "toFloat", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "toFloat"},');

          return parseFloat(value) || 0;
                    SRTlib.send('], "end": "toFloat"},');

        }
        function getBordersSize(styles) {
                    SRTlib.send(`{ "anonymous": false, "function": "getBordersSize", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var positions = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            positions[_i - 1] = arguments[_i];
          }
                    SRTlib.send('], "end": "getBordersSize"},');

          return positions.reduce(function (size, position) {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement12", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var value = styles['border-' + position + '-width'];
                        SRTlib.send('], "end": "ReturnStatement12"},');

            return size + toFloat(value);
                        SRTlib.send('], "end": "ReturnStatement12"},');

          }, 0);
                    SRTlib.send('], "end": "getBordersSize"},');

        }
        function getPaddings(styles) {
                    SRTlib.send(`{ "anonymous": false, "function": "getPaddings", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var positions = ['top', 'right', 'bottom', 'left'];
          var paddings = {};
          for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var position = positions_1[_i];
            var value = styles['padding-' + position];
            paddings[position] = toFloat(value);
          }
                    SRTlib.send('], "end": "getPaddings"},');

          return paddings;
                    SRTlib.send('], "end": "getPaddings"},');

        }
        function getSVGContentRect(target) {
                    SRTlib.send(`{ "anonymous": false, "function": "getSVGContentRect", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var bbox = target.getBBox();
                    SRTlib.send('], "end": "getSVGContentRect"},');

          return createRectInit(0, 0, bbox.width, bbox.height);
                    SRTlib.send('], "end": "getSVGContentRect"},');

        }
        function getHTMLElementContentRect(target) {
                    SRTlib.send(`{ "anonymous": false, "function": "getHTMLElementContentRect", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
          if (!clientWidth && !clientHeight) {
                        SRTlib.send('], "end": "getHTMLElementContentRect"},');

            return emptyRect;
          }
          var styles = getWindowOf(target).getComputedStyle(target);
          var paddings = getPaddings(styles);
          var horizPad = paddings.left + paddings.right;
          var vertPad = paddings.top + paddings.bottom;
          var width = toFloat(styles.width), height = toFloat(styles.height);
          if (styles.boxSizing === 'border-box') {
            if (Math.round(width + horizPad) !== clientWidth) {
              width -= getBordersSize(styles, 'left', 'right') + horizPad;
            }
            if (Math.round(height + vertPad) !== clientHeight) {
              height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
            }
          }
          if (!isDocumentElement(target)) {
            var vertScrollbar = Math.round(width + horizPad) - clientWidth;
            var horizScrollbar = Math.round(height + vertPad) - clientHeight;
            if (Math.abs(vertScrollbar) !== 1) {
              width -= vertScrollbar;
            }
            if (Math.abs(horizScrollbar) !== 1) {
              height -= horizScrollbar;
            }
          }
                    SRTlib.send('], "end": "getHTMLElementContentRect"},');

          return createRectInit(paddings.left, paddings.top, width, height);
                    SRTlib.send('], "end": "getHTMLElementContentRect"},');

        }
        var isSVGGraphicsElement = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.isSVGGraphicsElement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (typeof SVGGraphicsElement !== 'undefined') {
                        SRTlib.send('], "end": "call.isSVGGraphicsElement"},');

            return function (target) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.isSVGGraphicsElement.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.isSVGGraphicsElement.ReturnStatement"},');

              return target instanceof getWindowOf(target).SVGGraphicsElement;
                            SRTlib.send('], "end": "call.isSVGGraphicsElement.ReturnStatement"},');

            };
          }
                    SRTlib.send('], "end": "call.isSVGGraphicsElement"},');

          return function (target) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.isSVGGraphicsElement.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call.isSVGGraphicsElement.ReturnStatement2"},');

            return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
                        SRTlib.send('], "end": "call.isSVGGraphicsElement.ReturnStatement2"},');

          };
                    SRTlib.send('], "end": "call.isSVGGraphicsElement"},');

        })();
        function isDocumentElement(target) {
                    SRTlib.send(`{ "anonymous": false, "function": "isDocumentElement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "isDocumentElement"},');

          return target === getWindowOf(target).document.documentElement;
                    SRTlib.send('], "end": "isDocumentElement"},');

        }
        function getContentRect(target) {
                    SRTlib.send(`{ "anonymous": false, "function": "getContentRect", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!isBrowser) {
                        SRTlib.send('], "end": "getContentRect"},');

            return emptyRect;
          }
          if (isSVGGraphicsElement(target)) {
                        SRTlib.send('], "end": "getContentRect"},');

            return getSVGContentRect(target);
          }
                    SRTlib.send('], "end": "getContentRect"},');

          return getHTMLElementContentRect(target);
                    SRTlib.send('], "end": "getContentRect"},');

        }
        function createReadOnlyRect(_a) {
                    SRTlib.send(`{ "anonymous": false, "function": "createReadOnlyRect", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
          var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
          var rect = Object.create(Constr.prototype);
          defineConfigurable(rect, {
            x: x,
            y: y,
            width: width,
            height: height,
            top: y,
            right: x + width,
            bottom: height + y,
            left: x
          });
                    SRTlib.send('], "end": "createReadOnlyRect"},');

          return rect;
                    SRTlib.send('], "end": "createReadOnlyRect"},');

        }
        function createRectInit(x, y, width, height) {
                    SRTlib.send(`{ "anonymous": false, "function": "createRectInit", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

                    SRTlib.send('], "end": "createRectInit"},');

          return {
            x: x,
            y: y,
            width: width,
            height: height
          };
                    SRTlib.send('], "end": "createRectInit"},');

        }
        var ResizeObservation = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObservation", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function ResizeObservation(target) {
                        SRTlib.send(`{ "anonymous": false, "function": "ResizeObservation", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            this.broadcastWidth = 0;
            this.broadcastHeight = 0;
            this.contentRect_ = createRectInit(0, 0, 0, 0);
            this.target = target;
                        SRTlib.send('], "end": "ResizeObservation"},');

          }
          ResizeObservation.prototype.isActive = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObservation.ResizeObservation.prototype.isActive", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var rect = getContentRect(this.target);
            this.contentRect_ = rect;
                        SRTlib.send('], "end": "call.ResizeObservation.ResizeObservation.prototype.isActive"},');

            return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
                        SRTlib.send('], "end": "call.ResizeObservation.ResizeObservation.prototype.isActive"},');

          };
          ResizeObservation.prototype.broadcastRect = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObservation.ResizeObservation.prototype.broadcastRect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var rect = this.contentRect_;
            this.broadcastWidth = rect.width;
            this.broadcastHeight = rect.height;
                        SRTlib.send('], "end": "call.ResizeObservation.ResizeObservation.prototype.broadcastRect"},');

            return rect;
                        SRTlib.send('], "end": "call.ResizeObservation.ResizeObservation.prototype.broadcastRect"},');

          };
                    SRTlib.send('], "end": "call.ResizeObservation"},');

          return ResizeObservation;
                    SRTlib.send('], "end": "call.ResizeObservation"},');

        })();
        var ResizeObserverEntry = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverEntry", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function ResizeObserverEntry(target, rectInit) {
                        SRTlib.send(`{ "anonymous": false, "function": "ResizeObserverEntry", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var contentRect = createReadOnlyRect(rectInit);
            defineConfigurable(this, {
              target: target,
              contentRect: contentRect
            });
                        SRTlib.send('], "end": "ResizeObserverEntry"},');

          }
                    SRTlib.send('], "end": "call.ResizeObserverEntry"},');

          return ResizeObserverEntry;
                    SRTlib.send('], "end": "call.ResizeObserverEntry"},');

        })();
        var ResizeObserverSPI = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function ResizeObserverSPI(callback, controller, callbackCtx) {
                        SRTlib.send(`{ "anonymous": false, "function": "ResizeObserverSPI", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            this.activeObservations_ = [];
            this.observations_ = new MapShim();
            if (typeof callback !== 'function') {
                            SRTlib.send('], "end": "ResizeObserverSPI"},');

              throw new TypeError('The callback provided as parameter 1 is not a function.');
            }
            this.callback_ = callback;
            this.controller_ = controller;
            this.callbackCtx_ = callbackCtx;
                        SRTlib.send('], "end": "ResizeObserverSPI"},');

          }
          ResizeObserverSPI.prototype.observe = function (target) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.observe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (!arguments.length) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.observe"},');

              throw new TypeError('1 argument required, but only 0 present.');
            }
            if (typeof Element === 'undefined' || !(Element instanceof Object)) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.observe"},');

              return;
            }
            if (!(target instanceof getWindowOf(target).Element)) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.observe"},');

              throw new TypeError('parameter 1 is not of type "Element".');
            }
            var observations = this.observations_;
            if (observations.has(target)) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.observe"},');

              return;
            }
            observations.set(target, new ResizeObservation(target));
            this.controller_.addObserver(this);
            this.controller_.refresh();
                        SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.observe"},');

          };
          ResizeObserverSPI.prototype.unobserve = function (target) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.unobserve", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (!arguments.length) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.unobserve"},');

              throw new TypeError('1 argument required, but only 0 present.');
            }
            if (typeof Element === 'undefined' || !(Element instanceof Object)) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.unobserve"},');

              return;
            }
            if (!(target instanceof getWindowOf(target).Element)) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.unobserve"},');

              throw new TypeError('parameter 1 is not of type "Element".');
            }
            var observations = this.observations_;
            if (!observations.has(target)) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.unobserve"},');

              return;
            }
            observations.delete(target);
            if (!observations.size) {
              this.controller_.removeObserver(this);
            }
                        SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.unobserve"},');

          };
          ResizeObserverSPI.prototype.disconnect = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.disconnect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            this.clearActive();
            this.observations_.clear();
            this.controller_.removeObserver(this);
                        SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.disconnect"},');

          };
          ResizeObserverSPI.prototype.gatherActive = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.gatherActive", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var _this = this;
            this.clearActive();
            this.observations_.forEach(function (observation) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.gatherActive.observations_.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (observation.isActive()) {
                _this.activeObservations_.push(observation);
              }
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.gatherActive.observations_.forEach"},');

            });
                        SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.gatherActive"},');

          };
          ResizeObserverSPI.prototype.broadcastActive = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.broadcastActive", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!this.hasActive()) {
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.broadcastActive"},');

              return;
            }
            var ctx = this.callbackCtx_;
            var entries = this.activeObservations_.map(function (observation) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.broadcastActive.entries.activeObservations_.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.broadcastActive.entries.activeObservations_.map"},');

              return new ResizeObserverEntry(observation.target, observation.broadcastRect());
                            SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.broadcastActive.entries.activeObservations_.map"},');

            });
            this.callback_.call(ctx, entries, ctx);
            this.clearActive();
                        SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.broadcastActive"},');

          };
          ResizeObserverSPI.prototype.clearActive = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.clearActive", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            this.activeObservations_.splice(0);
                        SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.clearActive"},');

          };
          ResizeObserverSPI.prototype.hasActive = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.hasActive", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.hasActive"},');

            return this.activeObservations_.length > 0;
                        SRTlib.send('], "end": "call.ResizeObserverSPI.ResizeObserverSPI.prototype.hasActive"},');

          };
                    SRTlib.send('], "end": "call.ResizeObserverSPI"},');

          return ResizeObserverSPI;
                    SRTlib.send('], "end": "call.ResizeObserverSPI"},');

        })();
        var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
        var ResizeObserver = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.ResizeObserver", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function ResizeObserver(callback) {
                        SRTlib.send(`{ "anonymous": false, "function": "ResizeObserver", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (!(this instanceof ResizeObserver)) {
                            SRTlib.send('], "end": "ResizeObserver"},');

              throw new TypeError('Cannot call a class as a function.');
            }
            if (!arguments.length) {
                            SRTlib.send('], "end": "ResizeObserver"},');

              throw new TypeError('1 argument required, but only 0 present.');
            }
            var controller = ResizeObserverController.getInstance();
            var observer = new ResizeObserverSPI(callback, controller, this);
            observers.set(this, observer);
                        SRTlib.send('], "end": "ResizeObserver"},');

          }
                    SRTlib.send('], "end": "call.ResizeObserver"},');

          return ResizeObserver;
                    SRTlib.send('], "end": "call.ResizeObserver"},');

        })();
        ['observe', 'unobserve', 'disconnect'].forEach(function (method) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.forEach2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          ResizeObserver.prototype[method] = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.forEach.ResizeObserver.prototype.method", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var _a;
                        SRTlib.send('], "end": "call.forEach.ResizeObserver.prototype.method"},');

            return (_a = observers.get(this))[method].apply(_a, arguments);
                        SRTlib.send('], "end": "call.forEach.ResizeObserver.prototype.method"},');

          };
                    SRTlib.send('], "end": "call.forEach2"},');

        });
        var index = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.index", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (typeof global$1.ResizeObserver !== 'undefined') {
                        SRTlib.send('], "end": "call.index"},');

            return global$1.ResizeObserver;
          }
                    SRTlib.send('], "end": "call.index"},');

          return ResizeObserver;
                    SRTlib.send('], "end": "call.index"},');

        })();
                SRTlib.send('], "end": "call33"},');

        return index;
                SRTlib.send('], "end": "call33"},');

      });
            SRTlib.send('], "end": "call34"},');

    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey214"},');

  }, {}],
  189: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey215", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var Buffer = require('buffer').Buffer;
    var inherits = require('inherits');
    var HashBase = require('hash-base');
    var ARRAY16 = new Array(16);
    var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
    var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
    var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
    var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
    var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
    var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];
    function RIPEMD160() {
            SRTlib.send(`{ "anonymous": false, "function": "RIPEMD160", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      HashBase.call(this, 64);
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;
            SRTlib.send('], "end": "RIPEMD160"},');

    }
    inherits(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function () {
            SRTlib.send(`{ "anonymous": true, "function": "RIPEMD160.prototype._update", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var words = ARRAY16;
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }
      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
            SRTlib.send('], "end": "RIPEMD160.prototype._update"},');

    };
    RIPEMD160.prototype._digest = function () {
            SRTlib.send(`{ "anonymous": true, "function": "RIPEMD160.prototype._digest", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._block[this._blockOffset++] = 0x80;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
            SRTlib.send('], "end": "RIPEMD160.prototype._digest"},');

      return buffer;
            SRTlib.send('], "end": "RIPEMD160.prototype._digest"},');

    };
    function rotl(x, n) {
            SRTlib.send(`{ "anonymous": false, "function": "rotl", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "rotl"},');

      return x << n | x >>> 32 - n;
            SRTlib.send('], "end": "rotl"},');

    }
    function fn1(a, b, c, d, e, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fn1", "fileName": "${__filename}", "paramsNumber": 8, "calls" : [`);

            SRTlib.send('], "end": "fn1"},');

      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
            SRTlib.send('], "end": "fn1"},');

    }
    function fn2(a, b, c, d, e, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fn2", "fileName": "${__filename}", "paramsNumber": 8, "calls" : [`);

            SRTlib.send('], "end": "fn2"},');

      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
            SRTlib.send('], "end": "fn2"},');

    }
    function fn3(a, b, c, d, e, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fn3", "fileName": "${__filename}", "paramsNumber": 8, "calls" : [`);

            SRTlib.send('], "end": "fn3"},');

      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
            SRTlib.send('], "end": "fn3"},');

    }
    function fn4(a, b, c, d, e, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fn4", "fileName": "${__filename}", "paramsNumber": 8, "calls" : [`);

            SRTlib.send('], "end": "fn4"},');

      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
            SRTlib.send('], "end": "fn4"},');

    }
    function fn5(a, b, c, d, e, m, k, s) {
            SRTlib.send(`{ "anonymous": false, "function": "fn5", "fileName": "${__filename}", "paramsNumber": 8, "calls" : [`);

            SRTlib.send('], "end": "fn5"},');

      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
            SRTlib.send('], "end": "fn5"},');

    }
    module.exports = RIPEMD160;
        SRTlib.send('], "end": "emptyKey215"},');

  }, {
    "buffer": 360,
    "hash-base": 117,
    "inherits": 133
  }],
  190: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey216", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var buffer = require('buffer');
    var Buffer = buffer.Buffer;
    function copyProps(src, dst) {
            SRTlib.send(`{ "anonymous": false, "function": "copyProps", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      for (var key in src) {
        dst[key] = src[key];
      }
            SRTlib.send('], "end": "copyProps"},');

    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
            SRTlib.send(`{ "anonymous": false, "function": "SafeBuffer", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "SafeBuffer"},');

      return Buffer(arg, encodingOrOffset, length);
            SRTlib.send('], "end": "SafeBuffer"},');

    }
    copyProps(Buffer, SafeBuffer);
    SafeBuffer.from = function (arg, encodingOrOffset, length) {
            SRTlib.send(`{ "anonymous": true, "function": "SafeBuffer.from", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof arg === 'number') {
                SRTlib.send('], "end": "SafeBuffer.from"},');

        throw new TypeError('Argument must not be a number');
      }
            SRTlib.send('], "end": "SafeBuffer.from"},');

      return Buffer(arg, encodingOrOffset, length);
            SRTlib.send('], "end": "SafeBuffer.from"},');

    };
    SafeBuffer.alloc = function (size, fill, encoding) {
            SRTlib.send(`{ "anonymous": true, "function": "SafeBuffer.alloc", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof size !== 'number') {
                SRTlib.send('], "end": "SafeBuffer.alloc"},');

        throw new TypeError('Argument must be a number');
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
            SRTlib.send('], "end": "SafeBuffer.alloc"},');

      return buf;
            SRTlib.send('], "end": "SafeBuffer.alloc"},');

    };
    SafeBuffer.allocUnsafe = function (size) {
            SRTlib.send(`{ "anonymous": true, "function": "SafeBuffer.allocUnsafe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof size !== 'number') {
                SRTlib.send('], "end": "SafeBuffer.allocUnsafe"},');

        throw new TypeError('Argument must be a number');
      }
            SRTlib.send('], "end": "SafeBuffer.allocUnsafe"},');

      return Buffer(size);
            SRTlib.send('], "end": "SafeBuffer.allocUnsafe"},');

    };
    SafeBuffer.allocUnsafeSlow = function (size) {
            SRTlib.send(`{ "anonymous": true, "function": "SafeBuffer.allocUnsafeSlow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof size !== 'number') {
                SRTlib.send('], "end": "SafeBuffer.allocUnsafeSlow"},');

        throw new TypeError('Argument must be a number');
      }
            SRTlib.send('], "end": "SafeBuffer.allocUnsafeSlow"},');

      return buffer.SlowBuffer(size);
            SRTlib.send('], "end": "SafeBuffer.allocUnsafeSlow"},');

    };
        SRTlib.send('], "end": "emptyKey216"},');

  }, {
    "buffer": 360
  }],
  191: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey217", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var Buffer = require('safe-buffer').Buffer;
    function Hash(blockSize, finalSize) {
            SRTlib.send(`{ "anonymous": false, "function": "Hash", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this._block = Buffer.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
            SRTlib.send('], "end": "Hash"},');

    }
    Hash.prototype.update = function (data, enc) {
            SRTlib.send(`{ "anonymous": true, "function": "Hash.prototype.update", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer.from(data, enc);
      }
      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;
      for (var offset = 0; offset < length; ) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i];
        }
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) {
          this._update(block);
        }
      }
      this._len += length;
            SRTlib.send('], "end": "Hash.prototype.update"},');

      return this;
            SRTlib.send('], "end": "Hash.prototype.update"},');

    };
    Hash.prototype.digest = function (enc) {
            SRTlib.send(`{ "anonymous": true, "function": "Hash.prototype.digest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var rem = this._len % this._blockSize;
      this._block[rem] = 0x80;
      this._block.fill(0, rem + 1);
      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }
      var bits = this._len * 8;
      if (bits <= 0xffffffff) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);
      } else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }
      this._update(this._block);
      var hash = this._hash();
            SRTlib.send('], "end": "Hash.prototype.digest"},');

      return enc ? hash.toString(enc) : hash;
            SRTlib.send('], "end": "Hash.prototype.digest"},');

    };
    Hash.prototype._update = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Hash.prototype._update2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Hash.prototype._update2"},');

      throw new Error('_update must be implemented by subclass');
            SRTlib.send('], "end": "Hash.prototype._update2"},');

    };
    module.exports = Hash;
        SRTlib.send('], "end": "emptyKey217"},');

  }, {
    "safe-buffer": 190
  }],
  192: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey218", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var exports = module.exports = function SHA(algorithm) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.module.exports.SHA", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      algorithm = algorithm.toLowerCase();
      var Algorithm = exports[algorithm];
      if (!Algorithm) {
                SRTlib.send('], "end": "exports.module.exports.SHA"},');

        throw new Error(algorithm + ' is not supported (we accept pull requests)');
      }
            SRTlib.send('], "end": "exports.module.exports.SHA"},');

      return new Algorithm();
            SRTlib.send('], "end": "exports.module.exports.SHA"},');

    };
    exports.sha = require('./sha');
    exports.sha1 = require('./sha1');
    exports.sha224 = require('./sha224');
    exports.sha256 = require('./sha256');
    exports.sha384 = require('./sha384');
    exports.sha512 = require('./sha512');
        SRTlib.send('], "end": "emptyKey218"},');

  }, {
    "./sha": 193,
    "./sha1": 194,
    "./sha224": 195,
    "./sha256": 196,
    "./sha384": 197,
    "./sha512": 198
  }],
  193: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey219", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var Hash = require('./hash');
    var Buffer = require('safe-buffer').Buffer;
    var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
    var W = new Array(80);
    function Sha() {
            SRTlib.send(`{ "anonymous": false, "function": "Sha", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
            SRTlib.send('], "end": "Sha"},');

    }
    inherits(Sha, Hash);
    Sha.prototype.init = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha.prototype.init", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;
            SRTlib.send('], "end": "Sha.prototype.init"},');

      return this;
            SRTlib.send('], "end": "Sha.prototype.init"},');

    };
    function rotl5(num) {
            SRTlib.send(`{ "anonymous": false, "function": "rotl5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "rotl5"},');

      return num << 5 | num >>> 27;
            SRTlib.send('], "end": "rotl5"},');

    }
    function rotl30(num) {
            SRTlib.send(`{ "anonymous": false, "function": "rotl30", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "rotl30"},');

      return num << 30 | num >>> 2;
            SRTlib.send('], "end": "rotl30"},');

    }
    function ft(s, b, c, d) {
            SRTlib.send(`{ "anonymous": false, "function": "ft", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (s === 0) {
                SRTlib.send('], "end": "ft"},');

        return b & c | ~b & d;
      }
      if (s === 2) {
                SRTlib.send('], "end": "ft"},');

        return b & c | b & d | c & d;
      }
            SRTlib.send('], "end": "ft"},');

      return b ^ c ^ d;
            SRTlib.send('], "end": "ft"},');

    }
    Sha.prototype._update = function (M) {
            SRTlib.send(`{ "anonymous": true, "function": "Sha.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var W = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
            SRTlib.send('], "end": "Sha.prototype._update"},');

    };
    Sha.prototype._hash = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha.prototype._hash", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var H = Buffer.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
            SRTlib.send('], "end": "Sha.prototype._hash"},');

      return H;
            SRTlib.send('], "end": "Sha.prototype._hash"},');

    };
    module.exports = Sha;
        SRTlib.send('], "end": "emptyKey219"},');

  }, {
    "./hash": 191,
    "inherits": 133,
    "safe-buffer": 190
  }],
  194: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey220", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var Hash = require('./hash');
    var Buffer = require('safe-buffer').Buffer;
    var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
    var W = new Array(80);
    function Sha1() {
            SRTlib.send(`{ "anonymous": false, "function": "Sha1", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
            SRTlib.send('], "end": "Sha1"},');

    }
    inherits(Sha1, Hash);
    Sha1.prototype.init = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha1.prototype.init", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;
            SRTlib.send('], "end": "Sha1.prototype.init"},');

      return this;
            SRTlib.send('], "end": "Sha1.prototype.init"},');

    };
    function rotl1(num) {
            SRTlib.send(`{ "anonymous": false, "function": "rotl1", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "rotl1"},');

      return num << 1 | num >>> 31;
            SRTlib.send('], "end": "rotl1"},');

    }
    function rotl5(num) {
            SRTlib.send(`{ "anonymous": false, "function": "rotl5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "rotl5"},');

      return num << 5 | num >>> 27;
            SRTlib.send('], "end": "rotl5"},');

    }
    function rotl30(num) {
            SRTlib.send(`{ "anonymous": false, "function": "rotl30", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "rotl30"},');

      return num << 30 | num >>> 2;
            SRTlib.send('], "end": "rotl30"},');

    }
    function ft(s, b, c, d) {
            SRTlib.send(`{ "anonymous": false, "function": "ft", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (s === 0) {
                SRTlib.send('], "end": "ft"},');

        return b & c | ~b & d;
      }
      if (s === 2) {
                SRTlib.send('], "end": "ft"},');

        return b & c | b & d | c & d;
      }
            SRTlib.send('], "end": "ft"},');

      return b ^ c ^ d;
            SRTlib.send('], "end": "ft"},');

    }
    Sha1.prototype._update = function (M) {
            SRTlib.send(`{ "anonymous": true, "function": "Sha1.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var W = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
            SRTlib.send('], "end": "Sha1.prototype._update"},');

    };
    Sha1.prototype._hash = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha1.prototype._hash", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var H = Buffer.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
            SRTlib.send('], "end": "Sha1.prototype._hash"},');

      return H;
            SRTlib.send('], "end": "Sha1.prototype._hash"},');

    };
    module.exports = Sha1;
        SRTlib.send('], "end": "emptyKey220"},');

  }, {
    "./hash": 191,
    "inherits": 133,
    "safe-buffer": 190
  }],
  195: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey221", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var Sha256 = require('./sha256');
    var Hash = require('./hash');
    var Buffer = require('safe-buffer').Buffer;
    var W = new Array(64);
    function Sha224() {
            SRTlib.send(`{ "anonymous": false, "function": "Sha224", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
            SRTlib.send('], "end": "Sha224"},');

    }
    inherits(Sha224, Sha256);
    Sha224.prototype.init = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha224.prototype.init", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._a = 0xc1059ed8;
      this._b = 0x367cd507;
      this._c = 0x3070dd17;
      this._d = 0xf70e5939;
      this._e = 0xffc00b31;
      this._f = 0x68581511;
      this._g = 0x64f98fa7;
      this._h = 0xbefa4fa4;
            SRTlib.send('], "end": "Sha224.prototype.init"},');

      return this;
            SRTlib.send('], "end": "Sha224.prototype.init"},');

    };
    Sha224.prototype._hash = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha224.prototype._hash", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var H = Buffer.allocUnsafe(28);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
            SRTlib.send('], "end": "Sha224.prototype._hash"},');

      return H;
            SRTlib.send('], "end": "Sha224.prototype._hash"},');

    };
    module.exports = Sha224;
        SRTlib.send('], "end": "emptyKey221"},');

  }, {
    "./hash": 191,
    "./sha256": 196,
    "inherits": 133,
    "safe-buffer": 190
  }],
  196: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey222", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var Hash = require('./hash');
    var Buffer = require('safe-buffer').Buffer;
    var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
    var W = new Array(64);
    function Sha256() {
            SRTlib.send(`{ "anonymous": false, "function": "Sha256", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
            SRTlib.send('], "end": "Sha256"},');

    }
    inherits(Sha256, Hash);
    Sha256.prototype.init = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha256.prototype.init", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._a = 0x6a09e667;
      this._b = 0xbb67ae85;
      this._c = 0x3c6ef372;
      this._d = 0xa54ff53a;
      this._e = 0x510e527f;
      this._f = 0x9b05688c;
      this._g = 0x1f83d9ab;
      this._h = 0x5be0cd19;
            SRTlib.send('], "end": "Sha256.prototype.init"},');

      return this;
            SRTlib.send('], "end": "Sha256.prototype.init"},');

    };
    function ch(x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "ch", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "ch"},');

      return z ^ x & (y ^ z);
            SRTlib.send('], "end": "ch"},');

    }
    function maj(x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "maj", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "maj"},');

      return x & y | z & (x | y);
            SRTlib.send('], "end": "maj"},');

    }
    function sigma0(x) {
            SRTlib.send(`{ "anonymous": false, "function": "sigma0", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "sigma0"},');

      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
            SRTlib.send('], "end": "sigma0"},');

    }
    function sigma1(x) {
            SRTlib.send(`{ "anonymous": false, "function": "sigma1", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "sigma1"},');

      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
            SRTlib.send('], "end": "sigma1"},');

    }
    function gamma0(x) {
            SRTlib.send(`{ "anonymous": false, "function": "gamma0", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "gamma0"},');

      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
            SRTlib.send('], "end": "gamma0"},');

    }
    function gamma1(x) {
            SRTlib.send(`{ "anonymous": false, "function": "gamma1", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "gamma1"},');

      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
            SRTlib.send('], "end": "gamma1"},');

    }
    Sha256.prototype._update = function (M) {
            SRTlib.send(`{ "anonymous": true, "function": "Sha256.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var W = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;
      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 64; ++i) W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
      for (var j = 0; j < 64; ++j) {
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
      this._f = f + this._f | 0;
      this._g = g + this._g | 0;
      this._h = h + this._h | 0;
            SRTlib.send('], "end": "Sha256.prototype._update"},');

    };
    Sha256.prototype._hash = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha256.prototype._hash", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var H = Buffer.allocUnsafe(32);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);
            SRTlib.send('], "end": "Sha256.prototype._hash"},');

      return H;
            SRTlib.send('], "end": "Sha256.prototype._hash"},');

    };
    module.exports = Sha256;
        SRTlib.send('], "end": "emptyKey222"},');

  }, {
    "./hash": 191,
    "inherits": 133,
    "safe-buffer": 190
  }],
  197: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey223", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var SHA512 = require('./sha512');
    var Hash = require('./hash');
    var Buffer = require('safe-buffer').Buffer;
    var W = new Array(160);
    function Sha384() {
            SRTlib.send(`{ "anonymous": false, "function": "Sha384", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
            SRTlib.send('], "end": "Sha384"},');

    }
    inherits(Sha384, SHA512);
    Sha384.prototype.init = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha384.prototype.init", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._ah = 0xcbbb9d5d;
      this._bh = 0x629a292a;
      this._ch = 0x9159015a;
      this._dh = 0x152fecd8;
      this._eh = 0x67332667;
      this._fh = 0x8eb44a87;
      this._gh = 0xdb0c2e0d;
      this._hh = 0x47b5481d;
      this._al = 0xc1059ed8;
      this._bl = 0x367cd507;
      this._cl = 0x3070dd17;
      this._dl = 0xf70e5939;
      this._el = 0xffc00b31;
      this._fl = 0x68581511;
      this._gl = 0x64f98fa7;
      this._hl = 0xbefa4fa4;
            SRTlib.send('], "end": "Sha384.prototype.init"},');

      return this;
            SRTlib.send('], "end": "Sha384.prototype.init"},');

    };
    Sha384.prototype._hash = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha384.prototype._hash", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var H = Buffer.allocUnsafe(48);
      function writeInt64BE(h, l, offset) {
                SRTlib.send(`{ "anonymous": false, "function": "writeInt64BE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
                SRTlib.send('], "end": "writeInt64BE"},');

      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
            SRTlib.send('], "end": "Sha384.prototype._hash"},');

      return H;
            SRTlib.send('], "end": "Sha384.prototype._hash"},');

    };
    module.exports = Sha384;
        SRTlib.send('], "end": "emptyKey223"},');

  }, {
    "./hash": 191,
    "./sha512": 198,
    "inherits": 133,
    "safe-buffer": 190
  }],
  198: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey224", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var inherits = require('inherits');
    var Hash = require('./hash');
    var Buffer = require('safe-buffer').Buffer;
    var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
    var W = new Array(160);
    function Sha512() {
            SRTlib.send(`{ "anonymous": false, "function": "Sha512", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
            SRTlib.send('], "end": "Sha512"},');

    }
    inherits(Sha512, Hash);
    Sha512.prototype.init = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha512.prototype.init", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this._ah = 0x6a09e667;
      this._bh = 0xbb67ae85;
      this._ch = 0x3c6ef372;
      this._dh = 0xa54ff53a;
      this._eh = 0x510e527f;
      this._fh = 0x9b05688c;
      this._gh = 0x1f83d9ab;
      this._hh = 0x5be0cd19;
      this._al = 0xf3bcc908;
      this._bl = 0x84caa73b;
      this._cl = 0xfe94f82b;
      this._dl = 0x5f1d36f1;
      this._el = 0xade682d1;
      this._fl = 0x2b3e6c1f;
      this._gl = 0xfb41bd6b;
      this._hl = 0x137e2179;
            SRTlib.send('], "end": "Sha512.prototype.init"},');

      return this;
            SRTlib.send('], "end": "Sha512.prototype.init"},');

    };
    function Ch(x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "Ch", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "Ch"},');

      return z ^ x & (y ^ z);
            SRTlib.send('], "end": "Ch"},');

    }
    function maj(x, y, z) {
            SRTlib.send(`{ "anonymous": false, "function": "maj", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "maj"},');

      return x & y | z & (x | y);
            SRTlib.send('], "end": "maj"},');

    }
    function sigma0(x, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "sigma0", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "sigma0"},');

      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
            SRTlib.send('], "end": "sigma0"},');

    }
    function sigma1(x, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "sigma1", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "sigma1"},');

      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
            SRTlib.send('], "end": "sigma1"},');

    }
    function Gamma0(x, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "Gamma0", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "Gamma0"},');

      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
            SRTlib.send('], "end": "Gamma0"},');

    }
    function Gamma0l(x, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "Gamma0l", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "Gamma0l"},');

      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
            SRTlib.send('], "end": "Gamma0l"},');

    }
    function Gamma1(x, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "Gamma1", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "Gamma1"},');

      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
            SRTlib.send('], "end": "Gamma1"},');

    }
    function Gamma1l(x, xl) {
            SRTlib.send(`{ "anonymous": false, "function": "Gamma1l", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "Gamma1l"},');

      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
            SRTlib.send('], "end": "Gamma1l"},');

    }
    function getCarry(a, b) {
            SRTlib.send(`{ "anonymous": false, "function": "getCarry", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "getCarry"},');

      return a >>> 0 < b >>> 0 ? 1 : 0;
            SRTlib.send('], "end": "getCarry"},');

    }
    Sha512.prototype._update = function (M) {
            SRTlib.send(`{ "anonymous": true, "function": "Sha512.prototype._update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var W = this._w;
      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;
      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;
      for (var i = 0; i < 32; i += 2) {
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
      }
      for (; i < 160; i += 2) {
        var xh = W[i - 15 * 2];
        var xl = W[i - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W[i - 2 * 2];
        xl = W[i - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        var Wi7h = W[i - 7 * 2];
        var Wi7l = W[i - 7 * 2 + 1];
        var Wi16h = W[i - 16 * 2];
        var Wi16l = W[i - 16 * 2 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
      }
      for (var j = 0; j < 160; j += 2) {
        Wih = W[j];
        Wil = W[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
      }
      this._al = this._al + al | 0;
      this._bl = this._bl + bl | 0;
      this._cl = this._cl + cl | 0;
      this._dl = this._dl + dl | 0;
      this._el = this._el + el | 0;
      this._fl = this._fl + fl | 0;
      this._gl = this._gl + gl | 0;
      this._hl = this._hl + hl | 0;
      this._ah = this._ah + ah + getCarry(this._al, al) | 0;
      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
      this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
      this._eh = this._eh + eh + getCarry(this._el, el) | 0;
      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
            SRTlib.send('], "end": "Sha512.prototype._update"},');

    };
    Sha512.prototype._hash = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Sha512.prototype._hash", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var H = Buffer.allocUnsafe(64);
      function writeInt64BE(h, l, offset) {
                SRTlib.send(`{ "anonymous": false, "function": "writeInt64BE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
                SRTlib.send('], "end": "writeInt64BE"},');

      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);
            SRTlib.send('], "end": "Sha512.prototype._hash"},');

      return H;
            SRTlib.send('], "end": "Sha512.prototype._hash"},');

    };
    module.exports = Sha512;
        SRTlib.send('], "end": "emptyKey224"},');

  }, {
    "./hash": 191,
    "inherits": 133,
    "safe-buffer": 190
  }],
  199: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey225", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var url = require('./url');
    var parser = require('socket.io-parser');
    var Manager = require('./manager');
    var debug = require('debug')('socket.io-client');
    module.exports = exports = lookup;
    var cache = exports.managers = {};
    function lookup(uri, opts) {
            SRTlib.send(`{ "anonymous": false, "function": "lookup", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof uri === 'object') {
        opts = uri;
        uri = undefined;
      }
      opts = opts || ({});
      var parsed = url(uri);
      var source = parsed.source;
      var id = parsed.id;
      var path = parsed.path;
      var sameNamespace = cache[id] && (path in cache[id].nsps);
      var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;
      var io;
      if (newConnection) {
        debug('ignoring socket cache for %s', source);
        io = Manager(source, opts);
      } else {
        if (!cache[id]) {
          debug('new io instance for %s', source);
          cache[id] = Manager(source, opts);
        }
        io = cache[id];
      }
      if (parsed.query && !opts.query) {
        opts.query = parsed.query;
      }
            SRTlib.send('], "end": "lookup"},');

      return io.socket(parsed.path, opts);
            SRTlib.send('], "end": "lookup"},');

    }
    exports.protocol = parser.protocol;
    exports.connect = lookup;
    exports.Manager = require('./manager');
    exports.Socket = require('./socket');
        SRTlib.send('], "end": "emptyKey225"},');

  }, {
    "./manager": 200,
    "./socket": 202,
    "./url": 203,
    "debug": 205,
    "socket.io-parser": 209
  }],
  200: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey226", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var eio = require('engine.io-client');
    var Socket = require('./socket');
    var Emitter = require('component-emitter');
    var parser = require('socket.io-parser');
    var on = require('./on');
    var bind = require('component-bind');
    var debug = require('debug')('socket.io-client:manager');
    var indexOf = require('indexof');
    var Backoff = require('backo2');
    var has = Object.prototype.hasOwnProperty;
    module.exports = Manager;
    function Manager(uri, opts) {
            SRTlib.send(`{ "anonymous": false, "function": "Manager", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(this instanceof Manager)) {
                SRTlib.send('], "end": "Manager"},');

        return new Manager(uri, opts);
      }
      if (uri && 'object' === typeof uri) {
        opts = uri;
        uri = undefined;
      }
      opts = opts || ({});
      opts.path = opts.path || '/socket.io';
      this.nsps = {};
      this.subs = [];
      this.opts = opts;
      this.reconnection(opts.reconnection !== false);
      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
      this.reconnectionDelay(opts.reconnectionDelay || 1000);
      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
      this.randomizationFactor(opts.randomizationFactor || 0.5);
      this.backoff = new Backoff({
        min: this.reconnectionDelay(),
        max: this.reconnectionDelayMax(),
        jitter: this.randomizationFactor()
      });
      this.timeout(null == opts.timeout ? 20000 : opts.timeout);
      this.readyState = 'closed';
      this.uri = uri;
      this.connecting = [];
      this.lastPing = null;
      this.encoding = false;
      this.packetBuffer = [];
      var _parser = opts.parser || parser;
      this.encoder = new _parser.Encoder();
      this.decoder = new _parser.Decoder();
      this.autoConnect = opts.autoConnect !== false;
      if (this.autoConnect) this.open();
            SRTlib.send('], "end": "Manager"},');

    }
    Manager.prototype.emitAll = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.emitAll", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.emit.apply(this, arguments);
      for (var nsp in this.nsps) {
        if (has.call(this.nsps, nsp)) {
          this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
        }
      }
            SRTlib.send('], "end": "Manager.prototype.emitAll"},');

    };
    Manager.prototype.updateSocketIds = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.updateSocketIds", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      for (var nsp in this.nsps) {
        if (has.call(this.nsps, nsp)) {
          this.nsps[nsp].id = this.generateId(nsp);
        }
      }
            SRTlib.send('], "end": "Manager.prototype.updateSocketIds"},');

    };
    Manager.prototype.generateId = function (nsp) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.generateId", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Manager.prototype.generateId"},');

      return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
            SRTlib.send('], "end": "Manager.prototype.generateId"},');

    };
    Emitter(Manager.prototype);
    Manager.prototype.reconnection = function (v) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.reconnection", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!arguments.length) {
                SRTlib.send('], "end": "Manager.prototype.reconnection"},');

        return this._reconnection;
      }
      this._reconnection = !!v;
            SRTlib.send('], "end": "Manager.prototype.reconnection"},');

      return this;
            SRTlib.send('], "end": "Manager.prototype.reconnection"},');

    };
    Manager.prototype.reconnectionAttempts = function (v) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.reconnectionAttempts", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!arguments.length) {
                SRTlib.send('], "end": "Manager.prototype.reconnectionAttempts"},');

        return this._reconnectionAttempts;
      }
      this._reconnectionAttempts = v;
            SRTlib.send('], "end": "Manager.prototype.reconnectionAttempts"},');

      return this;
            SRTlib.send('], "end": "Manager.prototype.reconnectionAttempts"},');

    };
    Manager.prototype.reconnectionDelay = function (v) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.reconnectionDelay", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!arguments.length) {
                SRTlib.send('], "end": "Manager.prototype.reconnectionDelay"},');

        return this._reconnectionDelay;
      }
      this._reconnectionDelay = v;
      this.backoff && this.backoff.setMin(v);
            SRTlib.send('], "end": "Manager.prototype.reconnectionDelay"},');

      return this;
            SRTlib.send('], "end": "Manager.prototype.reconnectionDelay"},');

    };
    Manager.prototype.randomizationFactor = function (v) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.randomizationFactor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!arguments.length) {
                SRTlib.send('], "end": "Manager.prototype.randomizationFactor"},');

        return this._randomizationFactor;
      }
      this._randomizationFactor = v;
      this.backoff && this.backoff.setJitter(v);
            SRTlib.send('], "end": "Manager.prototype.randomizationFactor"},');

      return this;
            SRTlib.send('], "end": "Manager.prototype.randomizationFactor"},');

    };
    Manager.prototype.reconnectionDelayMax = function (v) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.reconnectionDelayMax", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!arguments.length) {
                SRTlib.send('], "end": "Manager.prototype.reconnectionDelayMax"},');

        return this._reconnectionDelayMax;
      }
      this._reconnectionDelayMax = v;
      this.backoff && this.backoff.setMax(v);
            SRTlib.send('], "end": "Manager.prototype.reconnectionDelayMax"},');

      return this;
            SRTlib.send('], "end": "Manager.prototype.reconnectionDelayMax"},');

    };
    Manager.prototype.timeout = function (v) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.timeout", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!arguments.length) {
                SRTlib.send('], "end": "Manager.prototype.timeout"},');

        return this._timeout;
      }
      this._timeout = v;
            SRTlib.send('], "end": "Manager.prototype.timeout"},');

      return this;
            SRTlib.send('], "end": "Manager.prototype.timeout"},');

    };
    Manager.prototype.maybeReconnectOnOpen = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.maybeReconnectOnOpen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
        this.reconnect();
      }
            SRTlib.send('], "end": "Manager.prototype.maybeReconnectOnOpen"},');

    };
    Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.open.Manager.prototype.connect", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      debug('readyState %s', this.readyState);
      if (~this.readyState.indexOf('open')) {
                SRTlib.send('], "end": "Manager.prototype.open.Manager.prototype.connect"},');

        return this;
      }
      debug('opening %s', this.uri);
      this.engine = eio(this.uri, this.opts);
      var socket = this.engine;
      var self = this;
      this.readyState = 'opening';
      this.skipReconnect = false;
      var openSub = on(socket, 'open', function () {
                SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.open.Manager.prototype.connect.openSub.on", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        self.onopen();
        fn && fn();
                SRTlib.send('], "end": "Manager.prototype.open.Manager.prototype.connect.openSub.on"},');

      });
      var errorSub = on(socket, 'error', function (data) {
                SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.open.Manager.prototype.connect.errorSub.on", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        debug('connect_error');
        self.cleanup();
        self.readyState = 'closed';
        self.emitAll('connect_error', data);
        if (fn) {
          var err = new Error('Connection error');
          err.data = data;
          fn(err);
        } else {
          self.maybeReconnectOnOpen();
        }
                SRTlib.send('], "end": "Manager.prototype.open.Manager.prototype.connect.errorSub.on"},');

      });
      if (false !== this._timeout) {
        var timeout = this._timeout;
        debug('connect attempt will timeout after %d', timeout);
        var timer = setTimeout(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.open.Manager.prototype.connect.timer.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          debug('connect attempt timed out after %d', timeout);
          openSub.destroy();
          socket.close();
          socket.emit('error', 'timeout');
          self.emitAll('connect_timeout', timeout);
                    SRTlib.send('], "end": "Manager.prototype.open.Manager.prototype.connect.timer.setTimeout"},');

        }, timeout);
        this.subs.push({
          destroy: function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.open.Manager.prototype.connect.subs.push.destroy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            clearTimeout(timer);
                        SRTlib.send('], "end": "Manager.prototype.open.Manager.prototype.connect.subs.push.destroy"},');

          }
        });
      }
      this.subs.push(openSub);
      this.subs.push(errorSub);
            SRTlib.send('], "end": "Manager.prototype.open.Manager.prototype.connect"},');

      return this;
            SRTlib.send('], "end": "Manager.prototype.open.Manager.prototype.connect"},');

    };
    Manager.prototype.onopen = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.onopen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      debug('open');
      this.cleanup();
      this.readyState = 'open';
      this.emit('open');
      var socket = this.engine;
      this.subs.push(on(socket, 'data', bind(this, 'ondata')));
      this.subs.push(on(socket, 'ping', bind(this, 'onping')));
      this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
      this.subs.push(on(socket, 'error', bind(this, 'onerror')));
      this.subs.push(on(socket, 'close', bind(this, 'onclose')));
      this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
            SRTlib.send('], "end": "Manager.prototype.onopen"},');

    };
    Manager.prototype.onping = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.onping", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.lastPing = new Date();
      this.emitAll('ping');
            SRTlib.send('], "end": "Manager.prototype.onping"},');

    };
    Manager.prototype.onpong = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.onpong", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.emitAll('pong', new Date() - this.lastPing);
            SRTlib.send('], "end": "Manager.prototype.onpong"},');

    };
    Manager.prototype.ondata = function (data) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.ondata", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.decoder.add(data);
            SRTlib.send('], "end": "Manager.prototype.ondata"},');

    };
    Manager.prototype.ondecoded = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.ondecoded", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.emit('packet', packet);
            SRTlib.send('], "end": "Manager.prototype.ondecoded"},');

    };
    Manager.prototype.onerror = function (err) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      debug('error', err);
      this.emitAll('error', err);
            SRTlib.send('], "end": "Manager.prototype.onerror"},');

    };
    Manager.prototype.socket = function (nsp, opts) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.socket2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var socket = this.nsps[nsp];
      if (!socket) {
        socket = new Socket(this, nsp, opts);
        this.nsps[nsp] = socket;
        var self = this;
        socket.on('connecting', onConnecting);
        socket.on('connect', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.socket", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          socket.id = self.generateId(nsp);
                    SRTlib.send('], "end": "Manager.prototype.socket"},');

        });
        if (this.autoConnect) {
          onConnecting();
        }
      }
      function onConnecting() {
                SRTlib.send(`{ "anonymous": false, "function": "onConnecting", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (!~indexOf(self.connecting, socket)) {
          self.connecting.push(socket);
        }
                SRTlib.send('], "end": "onConnecting"},');

      }
            SRTlib.send('], "end": "Manager.prototype.socket2"},');

      return socket;
            SRTlib.send('], "end": "Manager.prototype.socket2"},');

    };
    Manager.prototype.destroy = function (socket) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.destroy", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var index = indexOf(this.connecting, socket);
      if (~index) this.connecting.splice(index, 1);
      if (this.connecting.length) {
                SRTlib.send('], "end": "Manager.prototype.destroy"},');

        return;
      }
      this.close();
            SRTlib.send('], "end": "Manager.prototype.destroy"},');

    };
    Manager.prototype.packet = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.packet", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      debug('writing packet %j', packet);
      var self = this;
      if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;
      if (!self.encoding) {
        self.encoding = true;
        this.encoder.encode(packet, function (encodedPackets) {
                    SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.packet.encoder.encode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          for (var i = 0; i < encodedPackets.length; i++) {
            self.engine.write(encodedPackets[i], packet.options);
          }
          self.encoding = false;
          self.processPacketQueue();
                    SRTlib.send('], "end": "Manager.prototype.packet.encoder.encode"},');

        });
      } else {
        self.packetBuffer.push(packet);
      }
            SRTlib.send('], "end": "Manager.prototype.packet"},');

    };
    Manager.prototype.processPacketQueue = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.processPacketQueue", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.packetBuffer.length > 0 && !this.encoding) {
        var pack = this.packetBuffer.shift();
        this.packet(pack);
      }
            SRTlib.send('], "end": "Manager.prototype.processPacketQueue"},');

    };
    Manager.prototype.cleanup = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.cleanup", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      debug('cleanup');
      var subsLength = this.subs.length;
      for (var i = 0; i < subsLength; i++) {
        var sub = this.subs.shift();
        sub.destroy();
      }
      this.packetBuffer = [];
      this.encoding = false;
      this.lastPing = null;
      this.decoder.destroy();
            SRTlib.send('], "end": "Manager.prototype.cleanup"},');

    };
    Manager.prototype.close = Manager.prototype.disconnect = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.close.Manager.prototype.disconnect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      debug('disconnect');
      this.skipReconnect = true;
      this.reconnecting = false;
      if ('opening' === this.readyState) {
        this.cleanup();
      }
      this.backoff.reset();
      this.readyState = 'closed';
      if (this.engine) this.engine.close();
            SRTlib.send('], "end": "Manager.prototype.close.Manager.prototype.disconnect"},');

    };
    Manager.prototype.onclose = function (reason) {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.onclose", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      debug('onclose');
      this.cleanup();
      this.backoff.reset();
      this.readyState = 'closed';
      this.emit('close', reason);
      if (this._reconnection && !this.skipReconnect) {
        this.reconnect();
      }
            SRTlib.send('], "end": "Manager.prototype.onclose"},');

    };
    Manager.prototype.reconnect = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.reconnect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.reconnecting || this.skipReconnect) {
                SRTlib.send('], "end": "Manager.prototype.reconnect"},');

        return this;
      }
      var self = this;
      if (this.backoff.attempts >= this._reconnectionAttempts) {
        debug('reconnect failed');
        this.backoff.reset();
        this.emitAll('reconnect_failed');
        this.reconnecting = false;
      } else {
        var delay = this.backoff.duration();
        debug('will wait %dms before reconnect attempt', delay);
        this.reconnecting = true;
        var timer = setTimeout(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.reconnect.timer.setTimeout2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (self.skipReconnect) {
                        SRTlib.send('], "end": "Manager.prototype.reconnect.timer.setTimeout2"},');

            return;
          }
          debug('attempting reconnect');
          self.emitAll('reconnect_attempt', self.backoff.attempts);
          self.emitAll('reconnecting', self.backoff.attempts);
          if (self.skipReconnect) {
                        SRTlib.send('], "end": "Manager.prototype.reconnect.timer.setTimeout2"},');

            return;
          }
          self.open(function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.reconnect.timer.setTimeout", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (err) {
              debug('reconnect attempt error');
              self.reconnecting = false;
              self.reconnect();
              self.emitAll('reconnect_error', err.data);
            } else {
              debug('reconnect success');
              self.onreconnect();
            }
                        SRTlib.send('], "end": "Manager.prototype.reconnect.timer.setTimeout"},');

          });
                    SRTlib.send('], "end": "Manager.prototype.reconnect.timer.setTimeout2"},');

        }, delay);
        this.subs.push({
          destroy: function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.reconnect.subs.push.destroy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            clearTimeout(timer);
                        SRTlib.send('], "end": "Manager.prototype.reconnect.subs.push.destroy"},');

          }
        });
      }
            SRTlib.send('], "end": "Manager.prototype.reconnect"},');

    };
    Manager.prototype.onreconnect = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Manager.prototype.onreconnect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var attempt = this.backoff.attempts;
      this.reconnecting = false;
      this.backoff.reset();
      this.updateSocketIds();
      this.emitAll('reconnect', attempt);
            SRTlib.send('], "end": "Manager.prototype.onreconnect"},');

    };
        SRTlib.send('], "end": "emptyKey226"},');

  }, {
    "./on": 201,
    "./socket": 202,
    "backo2": 17,
    "component-bind": 54,
    "component-emitter": 204,
    "debug": 205,
    "engine.io-client": 94,
    "indexof": 132,
    "socket.io-parser": 209
  }],
  201: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey227", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = on;
    function on(obj, ev, fn) {
            SRTlib.send(`{ "anonymous": false, "function": "on", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      obj.on(ev, fn);
            SRTlib.send('], "end": "on"},');

      return {
        destroy: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.destroy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          obj.removeListener(ev, fn);
                    SRTlib.send('], "end": "ReturnStatement.destroy"},');

        }
      };
            SRTlib.send('], "end": "on"},');

    }
        SRTlib.send('], "end": "emptyKey227"},');

  }, {}],
  202: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey228", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var parser = require('socket.io-parser');
    var Emitter = require('component-emitter');
    var toArray = require('to-array');
    var on = require('./on');
    var bind = require('component-bind');
    var debug = require('debug')('socket.io-client:socket');
    var parseqs = require('parseqs');
    var hasBin = require('has-binary2');
    module.exports = exports = Socket;
    var events = {
      connect: 1,
      connect_error: 1,
      connect_timeout: 1,
      connecting: 1,
      disconnect: 1,
      error: 1,
      reconnect: 1,
      reconnect_attempt: 1,
      reconnect_failed: 1,
      reconnect_error: 1,
      reconnecting: 1,
      ping: 1,
      pong: 1
    };
    var emit = Emitter.prototype.emit;
    function Socket(io, nsp, opts) {
            SRTlib.send(`{ "anonymous": false, "function": "Socket", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      this.io = io;
      this.nsp = nsp;
      this.json = this;
      this.ids = 0;
      this.acks = {};
      this.receiveBuffer = [];
      this.sendBuffer = [];
      this.connected = false;
      this.disconnected = true;
      this.flags = {};
      if (opts && opts.query) {
        this.query = opts.query;
      }
      if (this.io.autoConnect) this.open();
            SRTlib.send('], "end": "Socket"},');

    }
    Emitter(Socket.prototype);
    Socket.prototype.subEvents = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.subEvents", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.subs) {
                SRTlib.send('], "end": "Socket.prototype.subEvents"},');

        return;
      }
      var io = this.io;
      this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
            SRTlib.send('], "end": "Socket.prototype.subEvents"},');

    };
    Socket.prototype.open = Socket.prototype.connect = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.open.Socket.prototype.connect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.connected) {
                SRTlib.send('], "end": "Socket.prototype.open.Socket.prototype.connect"},');

        return this;
      }
      this.subEvents();
      this.io.open();
      if ('open' === this.io.readyState) this.onopen();
      this.emit('connecting');
            SRTlib.send('], "end": "Socket.prototype.open.Socket.prototype.connect"},');

      return this;
            SRTlib.send('], "end": "Socket.prototype.open.Socket.prototype.connect"},');

    };
    Socket.prototype.send = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.send", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var args = toArray(arguments);
      args.unshift('message');
      this.emit.apply(this, args);
            SRTlib.send('], "end": "Socket.prototype.send"},');

      return this;
            SRTlib.send('], "end": "Socket.prototype.send"},');

    };
    Socket.prototype.emit = function (ev) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.emit", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (events.hasOwnProperty(ev)) {
        emit.apply(this, arguments);
                SRTlib.send('], "end": "Socket.prototype.emit"},');

        return this;
      }
      var args = toArray(arguments);
      var packet = {
        type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
        data: args
      };
      packet.options = {};
      packet.options.compress = !this.flags || false !== this.flags.compress;
      if ('function' === typeof args[args.length - 1]) {
        debug('emitting packet with ack id %d', this.ids);
        this.acks[this.ids] = args.pop();
        packet.id = this.ids++;
      }
      if (this.connected) {
        this.packet(packet);
      } else {
        this.sendBuffer.push(packet);
      }
      this.flags = {};
            SRTlib.send('], "end": "Socket.prototype.emit"},');

      return this;
            SRTlib.send('], "end": "Socket.prototype.emit"},');

    };
    Socket.prototype.packet = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.packet", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      packet.nsp = this.nsp;
      this.io.packet(packet);
            SRTlib.send('], "end": "Socket.prototype.packet"},');

    };
    Socket.prototype.onopen = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onopen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      debug('transport is open - connecting');
      if ('/' !== this.nsp) {
        if (this.query) {
          var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
          debug('sending connect packet with query %s', query);
          this.packet({
            type: parser.CONNECT,
            query: query
          });
        } else {
          this.packet({
            type: parser.CONNECT
          });
        }
      }
            SRTlib.send('], "end": "Socket.prototype.onopen"},');

    };
    Socket.prototype.onclose = function (reason) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onclose", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      debug('close (%s)', reason);
      this.connected = false;
      this.disconnected = true;
      delete this.id;
      this.emit('disconnect', reason);
            SRTlib.send('], "end": "Socket.prototype.onclose"},');

    };
    Socket.prototype.onpacket = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onpacket", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var sameNamespace = packet.nsp === this.nsp;
      var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';
      if (!sameNamespace && !rootNamespaceError) {
                SRTlib.send('], "end": "Socket.prototype.onpacket"},');

        return;
      }
      switch (packet.type) {
        case parser.CONNECT:
          this.onconnect();
          break;
        case parser.EVENT:
          this.onevent(packet);
          break;
        case parser.BINARY_EVENT:
          this.onevent(packet);
          break;
        case parser.ACK:
          this.onack(packet);
          break;
        case parser.BINARY_ACK:
          this.onack(packet);
          break;
        case parser.DISCONNECT:
          this.ondisconnect();
          break;
        case parser.ERROR:
          this.emit('error', packet.data);
          break;
      }
            SRTlib.send('], "end": "Socket.prototype.onpacket"},');

    };
    Socket.prototype.onevent = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onevent", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var args = packet.data || [];
      debug('emitting event %j', args);
      if (null != packet.id) {
        debug('attaching ack callback to event');
        args.push(this.ack(packet.id));
      }
      if (this.connected) {
        emit.apply(this, args);
      } else {
        this.receiveBuffer.push(args);
      }
            SRTlib.send('], "end": "Socket.prototype.onevent"},');

    };
    Socket.prototype.ack = function (id) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.ack", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var self = this;
      var sent = false;
            SRTlib.send('], "end": "Socket.prototype.ack"},');

      return function () {
                SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.ack.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (sent) {
                    SRTlib.send('], "end": "Socket.prototype.ack.ReturnStatement"},');

          return;
        }
        sent = true;
        var args = toArray(arguments);
        debug('sending ack %j', args);
        self.packet({
          type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
          id: id,
          data: args
        });
                SRTlib.send('], "end": "Socket.prototype.ack.ReturnStatement"},');

      };
            SRTlib.send('], "end": "Socket.prototype.ack"},');

    };
    Socket.prototype.onack = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onack", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var ack = this.acks[packet.id];
      if ('function' === typeof ack) {
        debug('calling ack %s with %j', packet.id, packet.data);
        ack.apply(this, packet.data);
        delete this.acks[packet.id];
      } else {
        debug('bad ack %s', packet.id);
      }
            SRTlib.send('], "end": "Socket.prototype.onack"},');

    };
    Socket.prototype.onconnect = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.onconnect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.connected = true;
      this.disconnected = false;
      this.emit('connect');
      this.emitBuffered();
            SRTlib.send('], "end": "Socket.prototype.onconnect"},');

    };
    Socket.prototype.emitBuffered = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.emitBuffered", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var i;
      for (i = 0; i < this.receiveBuffer.length; i++) {
        emit.apply(this, this.receiveBuffer[i]);
      }
      this.receiveBuffer = [];
      for (i = 0; i < this.sendBuffer.length; i++) {
        this.packet(this.sendBuffer[i]);
      }
      this.sendBuffer = [];
            SRTlib.send('], "end": "Socket.prototype.emitBuffered"},');

    };
    Socket.prototype.ondisconnect = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.ondisconnect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      debug('server disconnect (%s)', this.nsp);
      this.destroy();
      this.onclose('io server disconnect');
            SRTlib.send('], "end": "Socket.prototype.ondisconnect"},');

    };
    Socket.prototype.destroy = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.destroy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.subs) {
        for (var i = 0; i < this.subs.length; i++) {
          this.subs[i].destroy();
        }
        this.subs = null;
      }
      this.io.destroy(this);
            SRTlib.send('], "end": "Socket.prototype.destroy"},');

    };
    Socket.prototype.close = Socket.prototype.disconnect = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.close.Socket.prototype.disconnect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.connected) {
        debug('performing disconnect (%s)', this.nsp);
        this.packet({
          type: parser.DISCONNECT
        });
      }
      this.destroy();
      if (this.connected) {
        this.onclose('io client disconnect');
      }
            SRTlib.send('], "end": "Socket.prototype.close.Socket.prototype.disconnect"},');

      return this;
            SRTlib.send('], "end": "Socket.prototype.close.Socket.prototype.disconnect"},');

    };
    Socket.prototype.compress = function (compress) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.compress", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.flags.compress = compress;
            SRTlib.send('], "end": "Socket.prototype.compress"},');

      return this;
            SRTlib.send('], "end": "Socket.prototype.compress"},');

    };
    Socket.prototype.binary = function (binary) {
            SRTlib.send(`{ "anonymous": true, "function": "Socket.prototype.binary", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.flags.binary = binary;
            SRTlib.send('], "end": "Socket.prototype.binary"},');

      return this;
            SRTlib.send('], "end": "Socket.prototype.binary"},');

    };
        SRTlib.send('], "end": "emptyKey228"},');

  }, {
    "./on": 201,
    "component-bind": 54,
    "component-emitter": 204,
    "debug": 205,
    "has-binary2": 114,
    "parseqs": 152,
    "socket.io-parser": 209,
    "to-array": 220
  }],
  203: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey229", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var parseuri = require('parseuri');
    var debug = require('debug')('socket.io-client:url');
    module.exports = url;
    function url(uri, loc) {
            SRTlib.send(`{ "anonymous": false, "function": "url", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var obj = uri;
      loc = loc || typeof location !== 'undefined' && location;
      if (null == uri) uri = loc.protocol + '//' + loc.host;
      if ('string' === typeof uri) {
        if ('/' === uri.charAt(0)) {
          if ('/' === uri.charAt(1)) {
            uri = loc.protocol + uri;
          } else {
            uri = loc.host + uri;
          }
        }
        if (!(/^(https?|wss?):\/\//).test(uri)) {
          debug('protocol-less url %s', uri);
          if ('undefined' !== typeof loc) {
            uri = loc.protocol + '//' + uri;
          } else {
            uri = 'https://' + uri;
          }
        }
        debug('parse %s', uri);
        obj = parseuri(uri);
      }
      if (!obj.port) {
        if ((/^(http|ws)$/).test(obj.protocol)) {
          obj.port = '80';
        } else if ((/^(http|ws)s$/).test(obj.protocol)) {
          obj.port = '443';
        }
      }
      obj.path = obj.path || '/';
      var ipv6 = obj.host.indexOf(':') !== -1;
      var host = ipv6 ? '[' + obj.host + ']' : obj.host;
      obj.id = obj.protocol + '://' + host + ':' + obj.port;
      obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);
            SRTlib.send('], "end": "url"},');

      return obj;
            SRTlib.send('], "end": "url"},');

    }
        SRTlib.send('], "end": "emptyKey229"},');

  }, {
    "debug": 205,
    "parseuri": 153
  }],
  204: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey230", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][103][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey230"},');

  }, {
    "dup": 103
  }],
  205: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey231", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process) {
            SRTlib.send(`{ "anonymous": true, "function": "call35", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      exports = module.exports = require('./debug');
      exports.log = log;
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
      exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
      function useColors() {
                SRTlib.send(`{ "anonymous": false, "function": "useColors", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
                    SRTlib.send('], "end": "useColors"},');

          return true;
        }
        if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
                    SRTlib.send('], "end": "useColors"},');

          return false;
        }
                SRTlib.send('], "end": "useColors"},');

        return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
                SRTlib.send('], "end": "useColors"},');

      }
      exports.formatters.j = function (v) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.formatters.j2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        try {
                    SRTlib.send('], "end": "call.exports.formatters.j2"},');

          return JSON.stringify(v);
        } catch (err) {
                    SRTlib.send('], "end": "call.exports.formatters.j2"},');

          return '[UnexpectedJSONParseError]: ' + err.message;
        }
                SRTlib.send('], "end": "call.exports.formatters.j2"},');

      };
      function formatArgs(args) {
                SRTlib.send(`{ "anonymous": false, "function": "formatArgs", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var useColors = this.useColors;
        args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
        if (!useColors) {
                    SRTlib.send('], "end": "formatArgs"},');

          return;
        }
        var c = 'color: ' + this.color;
        args.splice(1, 0, c, 'color: inherit');
        var index = 0;
        var lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, function (match) {
                    SRTlib.send(`{ "anonymous": true, "function": "args.replace2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if ('%%' === match) {
                        SRTlib.send('], "end": "args.replace2"},');

            return;
          }
          index++;
          if ('%c' === match) {
            lastC = index;
          }
                    SRTlib.send('], "end": "args.replace2"},');

        });
        args.splice(lastC, 0, c);
                SRTlib.send('], "end": "formatArgs"},');

      }
      function log() {
                SRTlib.send(`{ "anonymous": false, "function": "log", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "log"},');

        return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
                SRTlib.send('], "end": "log"},');

      }
      function save(namespaces) {
                SRTlib.send(`{ "anonymous": false, "function": "save", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        try {
          if (null == namespaces) {
            exports.storage.removeItem('debug');
          } else {
            exports.storage.debug = namespaces;
          }
        } catch (e) {}
                SRTlib.send('], "end": "save"},');

      }
      function load() {
                SRTlib.send(`{ "anonymous": false, "function": "load", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var r;
        try {
          r = exports.storage.debug;
        } catch (e) {}
        if (!r && typeof process !== 'undefined' && ('env' in process)) {
          r = process.env.DEBUG;
        }
                SRTlib.send('], "end": "load"},');

        return r;
                SRTlib.send('], "end": "load"},');

      }
      exports.enable(load());
      function localstorage() {
                SRTlib.send(`{ "anonymous": false, "function": "localstorage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        try {
                    SRTlib.send('], "end": "localstorage"},');

          return window.localStorage;
        } catch (e) {}
                SRTlib.send('], "end": "localstorage"},');

      }
            SRTlib.send('], "end": "call35"},');

    }).call(this, require('_process'));
        SRTlib.send('], "end": "emptyKey231"},');

  }, {
    "./debug": 206,
    "_process": 162
  }],
  206: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey232", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][105][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey232"},');

  }, {
    "dup": 105,
    "ms": 207
  }],
  207: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey233", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][106][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey233"},');

  }, {
    "dup": 106
  }],
  208: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey234", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var isArray = require('isarray');
    var isBuf = require('./is-buffer');
    var toString = Object.prototype.toString;
    var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
    var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
    exports.deconstructPacket = function (packet) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.deconstructPacket", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var buffers = [];
      var packetData = packet.data;
      var pack = packet;
      pack.data = _deconstructPacket(packetData, buffers);
      pack.attachments = buffers.length;
            SRTlib.send('], "end": "exports.deconstructPacket"},');

      return {
        packet: pack,
        buffers: buffers
      };
            SRTlib.send('], "end": "exports.deconstructPacket"},');

    };
    function _deconstructPacket(data, buffers) {
            SRTlib.send(`{ "anonymous": false, "function": "_deconstructPacket", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!data) {
                SRTlib.send('], "end": "_deconstructPacket"},');

        return data;
      }
      if (isBuf(data)) {
        var placeholder = {
          _placeholder: true,
          num: buffers.length
        };
        buffers.push(data);
                SRTlib.send('], "end": "_deconstructPacket"},');

        return placeholder;
      } else if (isArray(data)) {
        var newData = new Array(data.length);
        for (var i = 0; i < data.length; i++) {
          newData[i] = _deconstructPacket(data[i], buffers);
        }
                SRTlib.send('], "end": "_deconstructPacket"},');

        return newData;
      } else if (typeof data === 'object' && !(data instanceof Date)) {
        var newData = {};
        for (var key in data) {
          newData[key] = _deconstructPacket(data[key], buffers);
        }
                SRTlib.send('], "end": "_deconstructPacket"},');

        return newData;
      }
            SRTlib.send('], "end": "_deconstructPacket"},');

      return data;
            SRTlib.send('], "end": "_deconstructPacket"},');

    }
    exports.reconstructPacket = function (packet, buffers) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.reconstructPacket", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      packet.data = _reconstructPacket(packet.data, buffers);
      packet.attachments = undefined;
            SRTlib.send('], "end": "exports.reconstructPacket"},');

      return packet;
            SRTlib.send('], "end": "exports.reconstructPacket"},');

    };
    function _reconstructPacket(data, buffers) {
            SRTlib.send(`{ "anonymous": false, "function": "_reconstructPacket", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!data) {
                SRTlib.send('], "end": "_reconstructPacket"},');

        return data;
      }
      if (data && data._placeholder) {
                SRTlib.send('], "end": "_reconstructPacket"},');

        return buffers[data.num];
      } else if (isArray(data)) {
        for (var i = 0; i < data.length; i++) {
          data[i] = _reconstructPacket(data[i], buffers);
        }
      } else if (typeof data === 'object') {
        for (var key in data) {
          data[key] = _reconstructPacket(data[key], buffers);
        }
      }
            SRTlib.send('], "end": "_reconstructPacket"},');

      return data;
            SRTlib.send('], "end": "_reconstructPacket"},');

    }
    exports.removeBlobs = function (data, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.removeBlobs", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      function _removeBlobs(obj, curKey, containingObject) {
                SRTlib.send(`{ "anonymous": false, "function": "_removeBlobs", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (!obj) {
                    SRTlib.send('], "end": "_removeBlobs"},');

          return obj;
        }
        if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
          pendingBlobs++;
          var fileReader = new FileReader();
          fileReader.onload = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "fileReader.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (containingObject) {
              containingObject[curKey] = this.result;
            } else {
              bloblessData = this.result;
            }
            if (!--pendingBlobs) {
              callback(bloblessData);
            }
                        SRTlib.send('], "end": "fileReader.onload"},');

          };
          fileReader.readAsArrayBuffer(obj);
        } else if (isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            _removeBlobs(obj[i], i, obj);
          }
        } else if (typeof obj === 'object' && !isBuf(obj)) {
          for (var key in obj) {
            _removeBlobs(obj[key], key, obj);
          }
        }
                SRTlib.send('], "end": "_removeBlobs"},');

      }
      var pendingBlobs = 0;
      var bloblessData = data;
      _removeBlobs(bloblessData);
      if (!pendingBlobs) {
        callback(bloblessData);
      }
            SRTlib.send('], "end": "exports.removeBlobs"},');

    };
        SRTlib.send('], "end": "emptyKey234"},');

  }, {
    "./is-buffer": 210,
    "isarray": 214
  }],
  209: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey235", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var debug = require('debug')('socket.io-parser');
    var Emitter = require('component-emitter');
    var binary = require('./binary');
    var isArray = require('isarray');
    var isBuf = require('./is-buffer');
    exports.protocol = 4;
    exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];
    exports.CONNECT = 0;
    exports.DISCONNECT = 1;
    exports.EVENT = 2;
    exports.ACK = 3;
    exports.ERROR = 4;
    exports.BINARY_EVENT = 5;
    exports.BINARY_ACK = 6;
    exports.Encoder = Encoder;
    exports.Decoder = Decoder;
    function Encoder() {
            SRTlib.send(`{ "anonymous": false, "function": "Encoder", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Encoder"},');

    }
    var ERROR_PACKET = exports.ERROR + '"encode error"';
    Encoder.prototype.encode = function (obj, callback) {
            SRTlib.send(`{ "anonymous": true, "function": "Encoder.prototype.encode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      debug('encoding packet %j', obj);
      if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
        encodeAsBinary(obj, callback);
      } else {
        var encoding = encodeAsString(obj);
        callback([encoding]);
      }
            SRTlib.send('], "end": "Encoder.prototype.encode"},');

    };
    function encodeAsString(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeAsString", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var str = '' + obj.type;
      if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
        str += obj.attachments + '-';
      }
      if (obj.nsp && '/' !== obj.nsp) {
        str += obj.nsp + ',';
      }
      if (null != obj.id) {
        str += obj.id;
      }
      if (null != obj.data) {
        var payload = tryStringify(obj.data);
        if (payload !== false) {
          str += payload;
        } else {
                    SRTlib.send('], "end": "encodeAsString"},');

          return ERROR_PACKET;
        }
      }
      debug('encoded %j as %s', obj, str);
            SRTlib.send('], "end": "encodeAsString"},');

      return str;
            SRTlib.send('], "end": "encodeAsString"},');

    }
    function tryStringify(str) {
            SRTlib.send(`{ "anonymous": false, "function": "tryStringify", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      try {
                SRTlib.send('], "end": "tryStringify"},');

        return JSON.stringify(str);
      } catch (e) {
                SRTlib.send('], "end": "tryStringify"},');

        return false;
      }
            SRTlib.send('], "end": "tryStringify"},');

    }
    function encodeAsBinary(obj, callback) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeAsBinary", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      function writeEncoding(bloblessData) {
                SRTlib.send(`{ "anonymous": false, "function": "writeEncoding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var deconstruction = binary.deconstructPacket(bloblessData);
        var pack = encodeAsString(deconstruction.packet);
        var buffers = deconstruction.buffers;
        buffers.unshift(pack);
        callback(buffers);
                SRTlib.send('], "end": "writeEncoding"},');

      }
      binary.removeBlobs(obj, writeEncoding);
            SRTlib.send('], "end": "encodeAsBinary"},');

    }
    function Decoder() {
            SRTlib.send(`{ "anonymous": false, "function": "Decoder", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.reconstructor = null;
            SRTlib.send('], "end": "Decoder"},');

    }
    Emitter(Decoder.prototype);
    Decoder.prototype.add = function (obj) {
            SRTlib.send(`{ "anonymous": true, "function": "Decoder.prototype.add", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var packet;
      if (typeof obj === 'string') {
        packet = decodeString(obj);
        if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
          this.reconstructor = new BinaryReconstructor(packet);
          if (this.reconstructor.reconPack.attachments === 0) {
            this.emit('decoded', packet);
          }
        } else {
          this.emit('decoded', packet);
        }
      } else if (isBuf(obj) || obj.base64) {
        if (!this.reconstructor) {
                    SRTlib.send('], "end": "Decoder.prototype.add"},');

          throw new Error('got binary data when not reconstructing a packet');
        } else {
          packet = this.reconstructor.takeBinaryData(obj);
          if (packet) {
            this.reconstructor = null;
            this.emit('decoded', packet);
          }
        }
      } else {
                SRTlib.send('], "end": "Decoder.prototype.add"},');

        throw new Error('Unknown type: ' + obj);
      }
            SRTlib.send('], "end": "Decoder.prototype.add"},');

    };
    function decodeString(str) {
            SRTlib.send(`{ "anonymous": false, "function": "decodeString", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var i = 0;
      var p = {
        type: Number(str.charAt(0))
      };
      if (null == exports.types[p.type]) {
                SRTlib.send('], "end": "decodeString"},');

        return error('unknown packet type ' + p.type);
      }
      if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
        var buf = '';
        while (str.charAt(++i) !== '-') {
          buf += str.charAt(i);
          if (i == str.length) break;
        }
        if (buf != Number(buf) || str.charAt(i) !== '-') {
                    SRTlib.send('], "end": "decodeString"},');

          throw new Error('Illegal attachments');
        }
        p.attachments = Number(buf);
      }
      if ('/' === str.charAt(i + 1)) {
        p.nsp = '';
        while (++i) {
          var c = str.charAt(i);
          if (',' === c) break;
          p.nsp += c;
          if (i === str.length) break;
        }
      } else {
        p.nsp = '/';
      }
      var next = str.charAt(i + 1);
      if ('' !== next && Number(next) == next) {
        p.id = '';
        while (++i) {
          var c = str.charAt(i);
          if (null == c || Number(c) != c) {
            --i;
            break;
          }
          p.id += str.charAt(i);
          if (i === str.length) break;
        }
        p.id = Number(p.id);
      }
      if (str.charAt(++i)) {
        var payload = tryParse(str.substr(i));
        var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
        if (isPayloadValid) {
          p.data = payload;
        } else {
                    SRTlib.send('], "end": "decodeString"},');

          return error('invalid payload');
        }
      }
      debug('decoded %s as %j', str, p);
            SRTlib.send('], "end": "decodeString"},');

      return p;
            SRTlib.send('], "end": "decodeString"},');

    }
    function tryParse(str) {
            SRTlib.send(`{ "anonymous": false, "function": "tryParse", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      try {
                SRTlib.send('], "end": "tryParse"},');

        return JSON.parse(str);
      } catch (e) {
                SRTlib.send('], "end": "tryParse"},');

        return false;
      }
            SRTlib.send('], "end": "tryParse"},');

    }
    Decoder.prototype.destroy = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Decoder.prototype.destroy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (this.reconstructor) {
        this.reconstructor.finishedReconstruction();
      }
            SRTlib.send('], "end": "Decoder.prototype.destroy"},');

    };
    function BinaryReconstructor(packet) {
            SRTlib.send(`{ "anonymous": false, "function": "BinaryReconstructor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.reconPack = packet;
      this.buffers = [];
            SRTlib.send('], "end": "BinaryReconstructor"},');

    }
    BinaryReconstructor.prototype.takeBinaryData = function (binData) {
            SRTlib.send(`{ "anonymous": true, "function": "BinaryReconstructor.prototype.takeBinaryData", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      this.buffers.push(binData);
      if (this.buffers.length === this.reconPack.attachments) {
        var packet = binary.reconstructPacket(this.reconPack, this.buffers);
        this.finishedReconstruction();
                SRTlib.send('], "end": "BinaryReconstructor.prototype.takeBinaryData"},');

        return packet;
      }
            SRTlib.send('], "end": "BinaryReconstructor.prototype.takeBinaryData"},');

      return null;
            SRTlib.send('], "end": "BinaryReconstructor.prototype.takeBinaryData"},');

    };
    BinaryReconstructor.prototype.finishedReconstruction = function () {
            SRTlib.send(`{ "anonymous": true, "function": "BinaryReconstructor.prototype.finishedReconstruction", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      this.reconPack = null;
      this.buffers = [];
            SRTlib.send('], "end": "BinaryReconstructor.prototype.finishedReconstruction"},');

    };
    function error(msg) {
            SRTlib.send(`{ "anonymous": false, "function": "error", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "error"},');

      return {
        type: exports.ERROR,
        data: 'parser error: ' + msg
      };
            SRTlib.send('], "end": "error"},');

    }
        SRTlib.send('], "end": "emptyKey235"},');

  }, {
    "./binary": 208,
    "./is-buffer": 210,
    "component-emitter": 211,
    "debug": 212,
    "isarray": 214
  }],
  210: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey236", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call36", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      module.exports = isBuf;
      var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
      var withNativeArrayBuffer = typeof ArrayBuffer === 'function';
      var isView = function (obj) {
                SRTlib.send(`{ "anonymous": false, "function": "isView", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isView"},');

        return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
                SRTlib.send('], "end": "isView"},');

      };
      function isBuf(obj) {
                SRTlib.send(`{ "anonymous": false, "function": "isBuf", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isBuf"},');

        return withNativeBuffer && Buffer.isBuffer(obj) || withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj));
                SRTlib.send('], "end": "isBuf"},');

      }
            SRTlib.send('], "end": "call36"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey236"},');

  }, {
    "buffer": 360
  }],
  211: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey237", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][103][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey237"},');

  }, {
    "dup": 103
  }],
  212: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey238", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process) {
            SRTlib.send(`{ "anonymous": true, "function": "call37", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      exports = module.exports = require('./debug');
      exports.log = log;
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
      exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
      function useColors() {
                SRTlib.send(`{ "anonymous": false, "function": "useColors", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
                    SRTlib.send('], "end": "useColors"},');

          return true;
        }
        if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
                    SRTlib.send('], "end": "useColors"},');

          return false;
        }
                SRTlib.send('], "end": "useColors"},');

        return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
                SRTlib.send('], "end": "useColors"},');

      }
      exports.formatters.j = function (v) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.formatters.j3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        try {
                    SRTlib.send('], "end": "call.exports.formatters.j3"},');

          return JSON.stringify(v);
        } catch (err) {
                    SRTlib.send('], "end": "call.exports.formatters.j3"},');

          return '[UnexpectedJSONParseError]: ' + err.message;
        }
                SRTlib.send('], "end": "call.exports.formatters.j3"},');

      };
      function formatArgs(args) {
                SRTlib.send(`{ "anonymous": false, "function": "formatArgs", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var useColors = this.useColors;
        args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
        if (!useColors) {
                    SRTlib.send('], "end": "formatArgs"},');

          return;
        }
        var c = 'color: ' + this.color;
        args.splice(1, 0, c, 'color: inherit');
        var index = 0;
        var lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, function (match) {
                    SRTlib.send(`{ "anonymous": true, "function": "args.replace3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if ('%%' === match) {
                        SRTlib.send('], "end": "args.replace3"},');

            return;
          }
          index++;
          if ('%c' === match) {
            lastC = index;
          }
                    SRTlib.send('], "end": "args.replace3"},');

        });
        args.splice(lastC, 0, c);
                SRTlib.send('], "end": "formatArgs"},');

      }
      function log() {
                SRTlib.send(`{ "anonymous": false, "function": "log", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "log"},');

        return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
                SRTlib.send('], "end": "log"},');

      }
      function save(namespaces) {
                SRTlib.send(`{ "anonymous": false, "function": "save", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        try {
          if (null == namespaces) {
            exports.storage.removeItem('debug');
          } else {
            exports.storage.debug = namespaces;
          }
        } catch (e) {}
                SRTlib.send('], "end": "save"},');

      }
      function load() {
                SRTlib.send(`{ "anonymous": false, "function": "load", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var r;
        try {
          r = exports.storage.debug;
        } catch (e) {}
        if (!r && typeof process !== 'undefined' && ('env' in process)) {
          r = process.env.DEBUG;
        }
                SRTlib.send('], "end": "load"},');

        return r;
                SRTlib.send('], "end": "load"},');

      }
      exports.enable(load());
      function localstorage() {
                SRTlib.send(`{ "anonymous": false, "function": "localstorage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        try {
                    SRTlib.send('], "end": "localstorage"},');

          return window.localStorage;
        } catch (e) {}
                SRTlib.send('], "end": "localstorage"},');

      }
            SRTlib.send('], "end": "call37"},');

    }).call(this, require('_process'));
        SRTlib.send('], "end": "emptyKey238"},');

  }, {
    "./debug": 213,
    "_process": 162
  }],
  213: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey239", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][105][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey239"},');

  }, {
    "dup": 105,
    "ms": 215
  }],
  214: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey240", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][115][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey240"},');

  }, {
    "dup": 115
  }],
  215: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey241", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][106][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey241"},');

  }, {
    "dup": 106
  }],
  216: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey242", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = Stream;
    var EE = require('events').EventEmitter;
    var inherits = require('inherits');
    inherits(Stream, EE);
    Stream.Readable = require('readable-stream/readable.js');
    Stream.Writable = require('readable-stream/writable.js');
    Stream.Duplex = require('readable-stream/duplex.js');
    Stream.Transform = require('readable-stream/transform.js');
    Stream.PassThrough = require('readable-stream/passthrough.js');
    Stream.Stream = Stream;
    function Stream() {
            SRTlib.send(`{ "anonymous": false, "function": "Stream", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      EE.call(this);
            SRTlib.send('], "end": "Stream"},');

    }
    Stream.prototype.pipe = function (dest, options) {
            SRTlib.send(`{ "anonymous": true, "function": "Stream.prototype.pipe", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var source = this;
      function ondata(chunk) {
                SRTlib.send(`{ "anonymous": false, "function": "ondata", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
                SRTlib.send('], "end": "ondata"},');

      }
      source.on('data', ondata);
      function ondrain() {
                SRTlib.send(`{ "anonymous": false, "function": "ondrain", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (source.readable && source.resume) {
          source.resume();
        }
                SRTlib.send('], "end": "ondrain"},');

      }
      dest.on('drain', ondrain);
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }
      var didOnEnd = false;
      function onend() {
                SRTlib.send(`{ "anonymous": false, "function": "onend", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (didOnEnd) {
                    SRTlib.send('], "end": "onend"},');

          return;
        }
        didOnEnd = true;
        dest.end();
                SRTlib.send('], "end": "onend"},');

      }
      function onclose() {
                SRTlib.send(`{ "anonymous": false, "function": "onclose", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (didOnEnd) {
                    SRTlib.send('], "end": "onclose"},');

          return;
        }
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
                SRTlib.send('], "end": "onclose"},');

      }
      function onerror(er) {
                SRTlib.send(`{ "anonymous": false, "function": "onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        cleanup();
        if (EE.listenerCount(this, 'error') === 0) {
                    SRTlib.send('], "end": "onerror"},');

          throw er;
        }
                SRTlib.send('], "end": "onerror"},');

      }
      source.on('error', onerror);
      dest.on('error', onerror);
      function cleanup() {
                SRTlib.send(`{ "anonymous": false, "function": "cleanup", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
                SRTlib.send('], "end": "cleanup"},');

      }
      source.on('end', cleanup);
      source.on('close', cleanup);
      dest.on('close', cleanup);
      dest.emit('pipe', source);
            SRTlib.send('], "end": "Stream.prototype.pipe"},');

      return dest;
            SRTlib.send('], "end": "Stream.prototype.pipe"},');

    };
        SRTlib.send('], "end": "emptyKey242"},');

  }, {
    "events": 361,
    "inherits": 133,
    "readable-stream/duplex.js": 172,
    "readable-stream/passthrough.js": 183,
    "readable-stream/readable.js": 184,
    "readable-stream/transform.js": 185,
    "readable-stream/writable.js": 186
  }],
  217: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey243", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][182][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey243"},');

  }, {
    "dup": 182,
    "safe-buffer": 218
  }],
  218: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey244", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var buffer = require('buffer');
    var Buffer = buffer.Buffer;
    function copyProps(src, dst) {
            SRTlib.send(`{ "anonymous": false, "function": "copyProps", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      for (var key in src) {
        dst[key] = src[key];
      }
            SRTlib.send('], "end": "copyProps"},');

    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
            SRTlib.send(`{ "anonymous": false, "function": "SafeBuffer", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            SRTlib.send('], "end": "SafeBuffer"},');

      return Buffer(arg, encodingOrOffset, length);
            SRTlib.send('], "end": "SafeBuffer"},');

    }
    SafeBuffer.prototype = Object.create(Buffer.prototype);
    copyProps(Buffer, SafeBuffer);
    SafeBuffer.from = function (arg, encodingOrOffset, length) {
            SRTlib.send(`{ "anonymous": true, "function": "SafeBuffer.from2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof arg === 'number') {
                SRTlib.send('], "end": "SafeBuffer.from2"},');

        throw new TypeError('Argument must not be a number');
      }
            SRTlib.send('], "end": "SafeBuffer.from2"},');

      return Buffer(arg, encodingOrOffset, length);
            SRTlib.send('], "end": "SafeBuffer.from2"},');

    };
    SafeBuffer.alloc = function (size, fill, encoding) {
            SRTlib.send(`{ "anonymous": true, "function": "SafeBuffer.alloc2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (typeof size !== 'number') {
                SRTlib.send('], "end": "SafeBuffer.alloc2"},');

        throw new TypeError('Argument must be a number');
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
            SRTlib.send('], "end": "SafeBuffer.alloc2"},');

      return buf;
            SRTlib.send('], "end": "SafeBuffer.alloc2"},');

    };
    SafeBuffer.allocUnsafe = function (size) {
            SRTlib.send(`{ "anonymous": true, "function": "SafeBuffer.allocUnsafe2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof size !== 'number') {
                SRTlib.send('], "end": "SafeBuffer.allocUnsafe2"},');

        throw new TypeError('Argument must be a number');
      }
            SRTlib.send('], "end": "SafeBuffer.allocUnsafe2"},');

      return Buffer(size);
            SRTlib.send('], "end": "SafeBuffer.allocUnsafe2"},');

    };
    SafeBuffer.allocUnsafeSlow = function (size) {
            SRTlib.send(`{ "anonymous": true, "function": "SafeBuffer.allocUnsafeSlow2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof size !== 'number') {
                SRTlib.send('], "end": "SafeBuffer.allocUnsafeSlow2"},');

        throw new TypeError('Argument must be a number');
      }
            SRTlib.send('], "end": "SafeBuffer.allocUnsafeSlow2"},');

      return buffer.SlowBuffer(size);
            SRTlib.send('], "end": "SafeBuffer.allocUnsafeSlow2"},');

    };
        SRTlib.send('], "end": "emptyKey244"},');

  }, {
    "buffer": 360
  }],
  219: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey245", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (setImmediate, clearImmediate) {
            SRTlib.send(`{ "anonymous": true, "function": "call38", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var nextTick = require('process/browser.js').nextTick;
      var apply = Function.prototype.apply;
      var slice = Array.prototype.slice;
      var immediateIds = {};
      var nextImmediateId = 0;
      exports.setTimeout = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "call.exports.setTimeout"},');

        return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
                SRTlib.send('], "end": "call.exports.setTimeout"},');

      };
      exports.setInterval = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.setInterval", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "call.exports.setInterval"},');

        return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
                SRTlib.send('], "end": "call.exports.setInterval"},');

      };
      exports.clearTimeout = exports.clearInterval = function (timeout) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.clearTimeout.exports.clearInterval", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        timeout.close();
                SRTlib.send('], "end": "call.exports.clearTimeout.exports.clearInterval"},');

      };
      function Timeout(id, clearFn) {
                SRTlib.send(`{ "anonymous": false, "function": "Timeout", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._id = id;
        this._clearFn = clearFn;
                SRTlib.send('], "end": "Timeout"},');

      }
      Timeout.prototype.unref = Timeout.prototype.ref = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.Timeout.prototype.unref.Timeout.prototype.ref", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "call.Timeout.prototype.unref.Timeout.prototype.ref"},');

      };
      Timeout.prototype.close = function () {
                SRTlib.send(`{ "anonymous": true, "function": "call.Timeout.prototype.close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this._clearFn.call(window, this._id);
                SRTlib.send('], "end": "call.Timeout.prototype.close"},');

      };
      exports.enroll = function (item, msecs) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.enroll", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        clearTimeout(item._idleTimeoutId);
        item._idleTimeout = msecs;
                SRTlib.send('], "end": "call.exports.enroll"},');

      };
      exports.unenroll = function (item) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.unenroll", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        clearTimeout(item._idleTimeoutId);
        item._idleTimeout = -1;
                SRTlib.send('], "end": "call.exports.unenroll"},');

      };
      exports._unrefActive = exports.active = function (item) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports._unrefActive.exports.active", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        clearTimeout(item._idleTimeoutId);
        var msecs = item._idleTimeout;
        if (msecs >= 0) {
          item._idleTimeoutId = setTimeout(function onTimeout() {
                        SRTlib.send(`{ "anonymous": true, "function": "call.exports._unrefActive.exports.active.item._idleTimeoutId.setTimeout.onTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (item._onTimeout) item._onTimeout();
                        SRTlib.send('], "end": "call.exports._unrefActive.exports.active.item._idleTimeoutId.setTimeout.onTimeout"},');

          }, msecs);
        }
                SRTlib.send('], "end": "call.exports._unrefActive.exports.active"},');

      };
      exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.setImmediate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var id = nextImmediateId++;
        var args = arguments.length < 2 ? false : slice.call(arguments, 1);
        immediateIds[id] = true;
        nextTick(function onNextTick() {
                    SRTlib.send(`{ "anonymous": true, "function": "call.exports.setImmediate.nextTick.onNextTick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (immediateIds[id]) {
            if (args) {
              fn.apply(null, args);
            } else {
              fn.call(null);
            }
            exports.clearImmediate(id);
          }
                    SRTlib.send('], "end": "call.exports.setImmediate.nextTick.onNextTick"},');

        });
                SRTlib.send('], "end": "call.exports.setImmediate"},');

        return id;
                SRTlib.send('], "end": "call.exports.setImmediate"},');

      };
      exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
                SRTlib.send(`{ "anonymous": true, "function": "call.exports.clearImmediate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        delete immediateIds[id];
                SRTlib.send('], "end": "call.exports.clearImmediate"},');

      };
            SRTlib.send('], "end": "call38"},');

    }).call(this, require("timers").setImmediate, require("timers").clearImmediate);
        SRTlib.send('], "end": "emptyKey245"},');

  }, {
    "process/browser.js": 162,
    "timers": 219
  }],
  220: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey246", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = toArray;
    function toArray(list, index) {
            SRTlib.send(`{ "anonymous": false, "function": "toArray", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var array = [];
      index = index || 0;
      for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i];
      }
            SRTlib.send('], "end": "toArray"},');

      return array;
            SRTlib.send('], "end": "toArray"},');

    }
        SRTlib.send('], "end": "emptyKey246"},');

  }, {}],
  221: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey247", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = fingerprint;
    var _isReactNative = require("./isReactNative");
    var _isReactNative2 = _interopRequireDefault(_isReactNative);
    function _interopRequireDefault(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "_interopRequireDefault", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_interopRequireDefault"},');

      return obj && obj.__esModule ? obj : {
        default: obj
      };
            SRTlib.send('], "end": "_interopRequireDefault"},');

    }
    function fingerprint(file, options, callback) {
            SRTlib.send(`{ "anonymous": false, "function": "fingerprint", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if ((0, _isReactNative2.default)()) {
                SRTlib.send('], "end": "fingerprint"},');

        return callback(null, reactNativeFingerprint(file, options));
      }
            SRTlib.send('], "end": "fingerprint"},');

      return callback(null, ["tus-br", file.name, file.type, file.size, file.lastModified, options.endpoint].join("-"));
            SRTlib.send('], "end": "fingerprint"},');

    }
    function reactNativeFingerprint(file, options) {
            SRTlib.send(`{ "anonymous": false, "function": "reactNativeFingerprint", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var exifHash = file.exif ? hashCode(JSON.stringify(file.exif)) : "noexif";
            SRTlib.send('], "end": "reactNativeFingerprint"},');

      return ["tus-rn", file.name || "noname", file.size || "nosize", exifHash, options.endpoint].join("/");
            SRTlib.send('], "end": "reactNativeFingerprint"},');

    }
    function hashCode(str) {
            SRTlib.send(`{ "anonymous": false, "function": "hashCode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var hash = 0;
      if (str.length === 0) {
                SRTlib.send('], "end": "hashCode"},');

        return hash;
      }
      for (var i = 0; i < str.length; i++) {
        var char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
            SRTlib.send('], "end": "hashCode"},');

      return hash;
            SRTlib.send('], "end": "hashCode"},');

    }
        SRTlib.send('], "end": "emptyKey247"},');

  }, {
    "./isReactNative": 223
  }],
  222: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey248", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var isCordova = function isCordova() {
            SRTlib.send(`{ "anonymous": false, "function": "isCordova", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "isCordova"},');

      return typeof window != "undefined" && (typeof window.PhoneGap != "undefined" || typeof window.Cordova != "undefined" || typeof window.cordova != "undefined");
            SRTlib.send('], "end": "isCordova"},');

    };
    exports.default = isCordova;
        SRTlib.send('], "end": "emptyKey248"},');

  }, {}],
  223: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey249", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var isReactNative = function isReactNative() {
            SRTlib.send(`{ "anonymous": false, "function": "isReactNative", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "isReactNative"},');

      return typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
            SRTlib.send('], "end": "isReactNative"},');

    };
    exports.default = isReactNative;
        SRTlib.send('], "end": "emptyKey249"},');

  }, {}],
  224: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey250", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function readAsByteArray(chunk, callback) {
            SRTlib.send(`{ "anonymous": false, "function": "readAsByteArray", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var reader = new FileReader();
      reader.onload = function () {
                SRTlib.send(`{ "anonymous": true, "function": "reader.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        callback(null, new Uint8Array(reader.result));
                SRTlib.send('], "end": "reader.onload"},');

      };
      reader.onerror = function (err) {
                SRTlib.send(`{ "anonymous": true, "function": "reader.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        callback(err);
                SRTlib.send('], "end": "reader.onerror"},');

      };
      reader.readAsArrayBuffer(chunk);
            SRTlib.send('], "end": "readAsByteArray"},');

    }
    exports.default = readAsByteArray;
        SRTlib.send('], "end": "emptyKey250"},');

  }, {}],
  225: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey251", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.newRequest = newRequest;
    exports.resolveUrl = resolveUrl;
    var _urlParse = require("url-parse");
    var _urlParse2 = _interopRequireDefault(_urlParse);
    function _interopRequireDefault(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "_interopRequireDefault", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_interopRequireDefault"},');

      return obj && obj.__esModule ? obj : {
        default: obj
      };
            SRTlib.send('], "end": "_interopRequireDefault"},');

    }
    function newRequest() {
            SRTlib.send(`{ "anonymous": false, "function": "newRequest", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "newRequest"},');

      return new window.XMLHttpRequest();
            SRTlib.send('], "end": "newRequest"},');

    }
    function resolveUrl(origin, link) {
            SRTlib.send(`{ "anonymous": false, "function": "resolveUrl", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "resolveUrl"},');

      return new _urlParse2.default(link, origin).toString();
            SRTlib.send('], "end": "resolveUrl"},');

    }
        SRTlib.send('], "end": "emptyKey251"},');

  }, {
    "url-parse": 232
  }],
  226: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey253", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "_createClass", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function defineProperties(target, props) {
                SRTlib.send(`{ "anonymous": false, "function": "defineProperties", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if (("value" in descriptor)) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
                SRTlib.send('], "end": "defineProperties"},');

      }
            SRTlib.send('], "end": "_createClass"},');

      return function (Constructor, protoProps, staticProps) {
                SRTlib.send(`{ "anonymous": true, "function": "_createClass.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
                SRTlib.send('], "end": "_createClass.ReturnStatement"},');

        return Constructor;
                SRTlib.send('], "end": "_createClass.ReturnStatement"},');

      };
            SRTlib.send('], "end": "_createClass"},');

    })();
    exports.getSource = getSource;
    var _isReactNative = require("./isReactNative");
    var _isReactNative2 = _interopRequireDefault(_isReactNative);
    var _uriToBlob = require("./uriToBlob");
    var _uriToBlob2 = _interopRequireDefault(_uriToBlob);
    var _isCordova = require("./isCordova");
    var _isCordova2 = _interopRequireDefault(_isCordova);
    var _readAsByteArray = require("./readAsByteArray");
    var _readAsByteArray2 = _interopRequireDefault(_readAsByteArray);
    function _interopRequireDefault(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "_interopRequireDefault", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_interopRequireDefault"},');

      return obj && obj.__esModule ? obj : {
        default: obj
      };
            SRTlib.send('], "end": "_interopRequireDefault"},');

    }
    function _classCallCheck(instance, Constructor) {
            SRTlib.send(`{ "anonymous": false, "function": "_classCallCheck", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(instance instanceof Constructor)) {
                SRTlib.send('], "end": "_classCallCheck"},');

        throw new TypeError("Cannot call a class as a function");
      }
            SRTlib.send('], "end": "_classCallCheck"},');

    }
    var FileSource = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "FileSource", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function FileSource(file) {
                SRTlib.send(`{ "anonymous": false, "function": "FileSource", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        _classCallCheck(this, FileSource);
        this._file = file;
        this.size = file.size;
                SRTlib.send('], "end": "FileSource"},');

      }
      _createClass(FileSource, [{
        key: "slice",
        value: function slice(start, end, callback) {
                    SRTlib.send(`{ "anonymous": true, "function": "FileSource._createClass.value.slice2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          if ((0, _isCordova2.default)()) {
            (0, _readAsByteArray2.default)(this._file.slice(start, end), function (err, chunk) {
                            SRTlib.send(`{ "anonymous": true, "function": "FileSource._createClass.value.slice", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              if (err) {
                                SRTlib.send('], "end": "FileSource._createClass.value.slice"},');

                return callback(err);
              }
              callback(null, chunk);
                            SRTlib.send('], "end": "FileSource._createClass.value.slice"},');

            });
                        SRTlib.send('], "end": "FileSource._createClass.value.slice2"},');

            return;
          }
          callback(null, this._file.slice(start, end));
                    SRTlib.send('], "end": "FileSource._createClass.value.slice2"},');

        }
      }, {
        key: "close",
        value: function close() {
                    SRTlib.send(`{ "anonymous": true, "function": "FileSource._createClass.value.close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "FileSource._createClass.value.close"},');

        }
      }]);
            SRTlib.send('], "end": "FileSource"},');

      return FileSource;
            SRTlib.send('], "end": "FileSource"},');

    })();
    var StreamSource = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "StreamSource", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function StreamSource(reader, chunkSize) {
                SRTlib.send(`{ "anonymous": false, "function": "StreamSource", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        _classCallCheck(this, StreamSource);
        this._chunkSize = chunkSize;
        this._buffer = undefined;
        this._bufferOffset = 0;
        this._reader = reader;
        this._done = false;
                SRTlib.send('], "end": "StreamSource"},');

      }
      _createClass(StreamSource, [{
        key: "slice",
        value: function slice(start, end, callback) {
                    SRTlib.send(`{ "anonymous": true, "function": "StreamSource._createClass.value.slice", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          if (start < this._bufferOffset) {
            callback(new Error("Requested data is before the reader's current offset"));
                        SRTlib.send('], "end": "StreamSource._createClass.value.slice"},');

            return;
          }
                    SRTlib.send('], "end": "StreamSource._createClass.value.slice"},');

          return this._readUntilEnoughDataOrDone(start, end, callback);
                    SRTlib.send('], "end": "StreamSource._createClass.value.slice"},');

        }
      }, {
        key: "_readUntilEnoughDataOrDone",
        value: function _readUntilEnoughDataOrDone(start, end, callback) {
                    SRTlib.send(`{ "anonymous": true, "function": "StreamSource._createClass.value._readUntilEnoughDataOrDone", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var _this = this;
          var hasEnoughData = end <= this._bufferOffset + len(this._buffer);
          if (this._done || hasEnoughData) {
            var value = this._getDataFromBuffer(start, end);
            callback(null, value, value == null ? this._done : false);
                        SRTlib.send('], "end": "StreamSource._createClass.value._readUntilEnoughDataOrDone"},');

            return;
          }
          this._reader.read().then(function (_ref) {
                        SRTlib.send(`{ "anonymous": true, "function": "StreamSource._createClass.value._readUntilEnoughDataOrDone._reader.read.then.catch._reader.read.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var value = _ref.value, done = _ref.done;
            if (done) {
              _this._done = true;
            } else if (_this._buffer === undefined) {
              _this._buffer = value;
            } else {
              _this._buffer = concat(_this._buffer, value);
            }
            _this._readUntilEnoughDataOrDone(start, end, callback);
                        SRTlib.send('], "end": "StreamSource._createClass.value._readUntilEnoughDataOrDone._reader.read.then.catch._reader.read.then"},');

          }).catch(function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "StreamSource._createClass.value._readUntilEnoughDataOrDone._reader.read.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            callback(new Error("Error during read: " + err));
                        SRTlib.send('], "end": "StreamSource._createClass.value._readUntilEnoughDataOrDone._reader.read.then.catch"},');

          });
                    SRTlib.send('], "end": "StreamSource._createClass.value._readUntilEnoughDataOrDone"},');

        }
      }, {
        key: "_getDataFromBuffer",
        value: function _getDataFromBuffer(start, end) {
                    SRTlib.send(`{ "anonymous": true, "function": "StreamSource._createClass.value._getDataFromBuffer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (start > this._bufferOffset) {
            this._buffer = this._buffer.slice(start - this._bufferOffset);
            this._bufferOffset = start;
          }
          var hasAllDataBeenRead = len(this._buffer) === 0;
          if (this._done && hasAllDataBeenRead) {
                        SRTlib.send('], "end": "StreamSource._createClass.value._getDataFromBuffer"},');

            return null;
          }
                    SRTlib.send('], "end": "StreamSource._createClass.value._getDataFromBuffer"},');

          return this._buffer.slice(0, end - start);
                    SRTlib.send('], "end": "StreamSource._createClass.value._getDataFromBuffer"},');

        }
      }, {
        key: "close",
        value: function close() {
                    SRTlib.send(`{ "anonymous": true, "function": "StreamSource._createClass.value.close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (this._reader.cancel) {
            this._reader.cancel();
          }
                    SRTlib.send('], "end": "StreamSource._createClass.value.close"},');

        }
      }]);
            SRTlib.send('], "end": "StreamSource"},');

      return StreamSource;
            SRTlib.send('], "end": "StreamSource"},');

    })();
    function len(blobOrArray) {
            SRTlib.send(`{ "anonymous": false, "function": "len", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (blobOrArray === undefined) {
                SRTlib.send('], "end": "len"},');

        return 0;
      }
      if (blobOrArray.size !== undefined) {
                SRTlib.send('], "end": "len"},');

        return blobOrArray.size;
      }
            SRTlib.send('], "end": "len"},');

      return blobOrArray.length;
            SRTlib.send('], "end": "len"},');

    }
    function concat(a, b) {
            SRTlib.send(`{ "anonymous": false, "function": "concat", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (a.concat) {
                SRTlib.send('], "end": "concat"},');

        return a.concat(b);
      }
      if (a instanceof Blob) {
                SRTlib.send('], "end": "concat"},');

        return new Blob([a, b], {
          type: a.type
        });
      }
      if (a.set) {
        var c = new a.constructor(a.length + b.length);
        c.set(a);
        c.set(b, a.length);
                SRTlib.send('], "end": "concat"},');

        return c;
      }
            SRTlib.send('], "end": "concat"},');

      throw new Error("Unknown data type");
            SRTlib.send('], "end": "concat"},');

    }
    function getSource(input, chunkSize, callback) {
            SRTlib.send(`{ "anonymous": false, "function": "getSource", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if ((0, _isReactNative2.default)() && input && typeof input.uri !== "undefined") {
        (0, _uriToBlob2.default)(input.uri, function (err, blob) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey252", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (err) {
                        SRTlib.send('], "end": "emptyKey252"},');

            return callback(new Error("tus: cannot fetch `file.uri` as Blob, make sure the uri is correct and accessible. " + err));
          }
          callback(null, new FileSource(blob));
                    SRTlib.send('], "end": "emptyKey252"},');

        });
                SRTlib.send('], "end": "getSource"},');

        return;
      }
      if (typeof input.slice === "function" && typeof input.size !== "undefined") {
        callback(null, new FileSource(input));
                SRTlib.send('], "end": "getSource"},');

        return;
      }
      if (typeof input.read === "function") {
        chunkSize = +chunkSize;
        if (!isFinite(chunkSize)) {
          callback(new Error("cannot create source for stream without a finite value for the `chunkSize` option"));
                    SRTlib.send('], "end": "getSource"},');

          return;
        }
        callback(null, new StreamSource(input, chunkSize));
                SRTlib.send('], "end": "getSource"},');

        return;
      }
      callback(new Error("source object may only be an instance of File, Blob, or Reader in this environment"));
            SRTlib.send('], "end": "getSource"},');

    }
        SRTlib.send('], "end": "emptyKey253"},');

  }, {
    "./isCordova": 222,
    "./isReactNative": 223,
    "./readAsByteArray": 224,
    "./uriToBlob": 228
  }],
  227: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey254", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "_createClass2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function defineProperties(target, props) {
                SRTlib.send(`{ "anonymous": false, "function": "defineProperties", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if (("value" in descriptor)) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
                SRTlib.send('], "end": "defineProperties"},');

      }
            SRTlib.send('], "end": "_createClass2"},');

      return function (Constructor, protoProps, staticProps) {
                SRTlib.send(`{ "anonymous": true, "function": "_createClass.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
                SRTlib.send('], "end": "_createClass.ReturnStatement2"},');

        return Constructor;
                SRTlib.send('], "end": "_createClass.ReturnStatement2"},');

      };
            SRTlib.send('], "end": "_createClass2"},');

    })();
    exports.getStorage = getStorage;
    function _classCallCheck(instance, Constructor) {
            SRTlib.send(`{ "anonymous": false, "function": "_classCallCheck", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(instance instanceof Constructor)) {
                SRTlib.send('], "end": "_classCallCheck"},');

        throw new TypeError("Cannot call a class as a function");
      }
            SRTlib.send('], "end": "_classCallCheck"},');

    }
    var hasStorage = false;
    try {
      hasStorage = ("localStorage" in window);
      var key = "tusSupport";
      localStorage.setItem(key, localStorage.getItem(key));
    } catch (e) {
      if (e.code === e.SECURITY_ERR || e.code === e.QUOTA_EXCEEDED_ERR) {
        hasStorage = false;
      } else {
                SRTlib.send('], "end": "emptyKey254"},');

        throw e;
      }
    }
    var canStoreURLs = exports.canStoreURLs = hasStorage;
    var LocalStorage = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "LocalStorage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function LocalStorage() {
                SRTlib.send(`{ "anonymous": false, "function": "LocalStorage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        _classCallCheck(this, LocalStorage);
                SRTlib.send('], "end": "LocalStorage"},');

      }
      _createClass(LocalStorage, [{
        key: "setItem",
        value: function setItem(key, value, cb) {
                    SRTlib.send(`{ "anonymous": true, "function": "LocalStorage._createClass.value.setItem", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          cb(null, localStorage.setItem(key, value));
                    SRTlib.send('], "end": "LocalStorage._createClass.value.setItem"},');

        }
      }, {
        key: "getItem",
        value: function getItem(key, cb) {
                    SRTlib.send(`{ "anonymous": true, "function": "LocalStorage._createClass.value.getItem", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          cb(null, localStorage.getItem(key));
                    SRTlib.send('], "end": "LocalStorage._createClass.value.getItem"},');

        }
      }, {
        key: "removeItem",
        value: function removeItem(key, cb) {
                    SRTlib.send(`{ "anonymous": true, "function": "LocalStorage._createClass.value.removeItem", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          cb(null, localStorage.removeItem(key));
                    SRTlib.send('], "end": "LocalStorage._createClass.value.removeItem"},');

        }
      }]);
            SRTlib.send('], "end": "LocalStorage"},');

      return LocalStorage;
            SRTlib.send('], "end": "LocalStorage"},');

    })();
    function getStorage() {
            SRTlib.send(`{ "anonymous": false, "function": "getStorage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "getStorage"},');

      return hasStorage ? new LocalStorage() : null;
            SRTlib.send('], "end": "getStorage"},');

    }
        SRTlib.send('], "end": "emptyKey254"},');

  }, {}],
  228: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey255", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function uriToBlob(uri, done) {
            SRTlib.send(`{ "anonymous": false, "function": "uriToBlob", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var xhr = new XMLHttpRequest();
      xhr.responseType = "blob";
      xhr.onload = function () {
                SRTlib.send(`{ "anonymous": true, "function": "xhr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var blob = xhr.response;
        done(null, blob);
                SRTlib.send('], "end": "xhr.onload"},');

      };
      xhr.onerror = function (err) {
                SRTlib.send(`{ "anonymous": true, "function": "xhr.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        done(err);
                SRTlib.send('], "end": "xhr.onerror"},');

      };
      xhr.open("GET", uri);
      xhr.send();
            SRTlib.send('], "end": "uriToBlob"},');

    }
    exports.default = uriToBlob;
        SRTlib.send('], "end": "emptyKey255"},');

  }, {}],
  229: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey256", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _classCallCheck(instance, Constructor) {
            SRTlib.send(`{ "anonymous": false, "function": "_classCallCheck", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(instance instanceof Constructor)) {
                SRTlib.send('], "end": "_classCallCheck"},');

        throw new TypeError("Cannot call a class as a function");
      }
            SRTlib.send('], "end": "_classCallCheck"},');

    }
    function _possibleConstructorReturn(self, call) {
            SRTlib.send(`{ "anonymous": false, "function": "_possibleConstructorReturn", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!self) {
                SRTlib.send('], "end": "_possibleConstructorReturn"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_possibleConstructorReturn"},');

      return call && (typeof call === "object" || typeof call === "function") ? call : self;
            SRTlib.send('], "end": "_possibleConstructorReturn"},');

    }
    function _inherits(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inherits", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof superClass !== "function" && superClass !== null) {
                SRTlib.send('], "end": "_inherits"},');

        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inherits"},');

    }
    var DetailedError = (function (_Error) {
            SRTlib.send(`{ "anonymous": true, "function": "DetailedError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inherits(DetailedError, _Error);
      function DetailedError(error) {
                SRTlib.send(`{ "anonymous": false, "function": "DetailedError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var causingErr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var xhr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        _classCallCheck(this, DetailedError);
        var _this = _possibleConstructorReturn(this, (DetailedError.__proto__ || Object.getPrototypeOf(DetailedError)).call(this, error.message));
        _this.originalRequest = xhr;
        _this.causingError = causingErr;
        var message = error.message;
        if (causingErr != null) {
          message += ", caused by " + causingErr.toString();
        }
        if (xhr != null) {
          message += ", originated from request (response code: " + xhr.status + ", response text: " + xhr.responseText + ")";
        }
        _this.message = message;
                SRTlib.send('], "end": "DetailedError"},');

        return _this;
                SRTlib.send('], "end": "DetailedError"},');

      }
            SRTlib.send('], "end": "DetailedError"},');

      return DetailedError;
            SRTlib.send('], "end": "DetailedError"},');

    })(Error);
    exports.default = DetailedError;
        SRTlib.send('], "end": "emptyKey256"},');

  }, {}],
  230: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey257", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    var _upload = require("./upload");
    var _upload2 = _interopRequireDefault(_upload);
    var _storage = require("./node/storage");
    var storage = _interopRequireWildcard(_storage);
    function _interopRequireWildcard(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "_interopRequireWildcard", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (obj && obj.__esModule) {
                SRTlib.send('], "end": "_interopRequireWildcard"},');

        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
          }
        }
        newObj.default = obj;
                SRTlib.send('], "end": "_interopRequireWildcard"},');

        return newObj;
      }
            SRTlib.send('], "end": "_interopRequireWildcard"},');

    }
    function _interopRequireDefault(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "_interopRequireDefault", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_interopRequireDefault"},');

      return obj && obj.__esModule ? obj : {
        default: obj
      };
            SRTlib.send('], "end": "_interopRequireDefault"},');

    }
    var defaultOptions = _upload2.default.defaultOptions;
    var moduleExport = {
      Upload: _upload2.default,
      canStoreURLs: storage.canStoreURLs,
      defaultOptions: defaultOptions
    };
    if (typeof window !== "undefined") {
      var _window = window, XMLHttpRequest = _window.XMLHttpRequest, Blob = _window.Blob;
      moduleExport.isSupported = XMLHttpRequest && Blob && typeof Blob.prototype.slice === "function";
    } else {
      moduleExport.isSupported = true;
      moduleExport.FileStorage = storage.FileStorage;
    }
    module.exports = moduleExport;
        SRTlib.send('], "end": "emptyKey257"},');

  }, {
    "./node/storage": 227,
    "./upload": 231
  }],
  231: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey258", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "_createClass3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function defineProperties(target, props) {
                SRTlib.send(`{ "anonymous": false, "function": "defineProperties", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if (("value" in descriptor)) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
                SRTlib.send('], "end": "defineProperties"},');

      }
            SRTlib.send('], "end": "_createClass3"},');

      return function (Constructor, protoProps, staticProps) {
                SRTlib.send(`{ "anonymous": true, "function": "_createClass.ReturnStatement3", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
                SRTlib.send('], "end": "_createClass.ReturnStatement3"},');

        return Constructor;
                SRTlib.send('], "end": "_createClass.ReturnStatement3"},');

      };
            SRTlib.send('], "end": "_createClass3"},');

    })();
    var _error = require("./error");
    var _error2 = _interopRequireDefault(_error);
    var _extend = require("extend");
    var _extend2 = _interopRequireDefault(_extend);
    var _jsBase = require("js-base64");
    var _request = require("./node/request");
    var _source = require("./node/source");
    var _storage = require("./node/storage");
    var _fingerprint = require("./node/fingerprint");
    var _fingerprint2 = _interopRequireDefault(_fingerprint);
    function _interopRequireDefault(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "_interopRequireDefault", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_interopRequireDefault"},');

      return obj && obj.__esModule ? obj : {
        default: obj
      };
            SRTlib.send('], "end": "_interopRequireDefault"},');

    }
    function _classCallCheck(instance, Constructor) {
            SRTlib.send(`{ "anonymous": false, "function": "_classCallCheck", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (!(instance instanceof Constructor)) {
                SRTlib.send('], "end": "_classCallCheck"},');

        throw new TypeError("Cannot call a class as a function");
      }
            SRTlib.send('], "end": "_classCallCheck"},');

    }
    var defaultOptions = {
      endpoint: null,
      fingerprint: _fingerprint2.default,
      resume: true,
      onProgress: null,
      onChunkComplete: null,
      onSuccess: null,
      onError: null,
      headers: {},
      chunkSize: Infinity,
      withCredentials: false,
      uploadUrl: null,
      uploadSize: null,
      overridePatchMethod: false,
      retryDelays: null,
      removeFingerprintOnSuccess: false,
      uploadLengthDeferred: false,
      urlStorage: null,
      fileReader: null,
      uploadDataDuringCreation: false
    };
    var Upload = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "Upload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function Upload(file, options) {
                SRTlib.send(`{ "anonymous": false, "function": "Upload", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        _classCallCheck(this, Upload);
        this.options = (0, _extend2.default)(true, {}, defaultOptions, options);
        this._storage = this.options.urlStorage;
        this.file = file;
        this.url = null;
        this._xhr = null;
        this._fingerprint = null;
        this._offset = null;
        this._aborted = false;
        this._size = null;
        this._source = null;
        this._retryAttempt = 0;
        this._retryTimeout = null;
        this._offsetBeforeRetry = 0;
                SRTlib.send('], "end": "Upload"},');

      }
      _createClass(Upload, [{
        key: "start",
        value: function start() {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value.start", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this = this;
          var file = this.file;
          if (!file) {
            this._emitError(new Error("tus: no file or stream to upload provided"));
                        SRTlib.send('], "end": "Upload._createClass.value.start"},');

            return;
          }
          if (!this.options.endpoint && !this.options.uploadUrl) {
            this._emitError(new Error("tus: neither an endpoint or an upload URL is provided"));
                        SRTlib.send('], "end": "Upload._createClass.value.start"},');

            return;
          }
          if (this.options.resume && this._storage == null) {
            this._storage = (0, _storage.getStorage)();
          }
          if (this._source) {
            this._start(this._source);
          } else {
            var fileReader = this.options.fileReader || _source.getSource;
            fileReader(file, this.options.chunkSize, function (err, source) {
                            SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value.start.fileReader", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              if (err) {
                _this._emitError(err);
                                SRTlib.send('], "end": "Upload._createClass.value.start.fileReader"},');

                return;
              }
              _this._source = source;
              _this._start(source);
                            SRTlib.send('], "end": "Upload._createClass.value.start.fileReader"},');

            });
          }
                    SRTlib.send('], "end": "Upload._createClass.value.start"},');

        }
      }, {
        key: "_start",
        value: function _start(source) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._start", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _this2 = this;
          var file = this.file;
          if (this.options.uploadLengthDeferred) {
            this._size = null;
          } else if (this.options.uploadSize != null) {
            this._size = +this.options.uploadSize;
            if (isNaN(this._size)) {
              this._emitError(new Error("tus: cannot convert `uploadSize` option into a number"));
                            SRTlib.send('], "end": "Upload._createClass.value._start"},');

              return;
            }
          } else {
            this._size = source.size;
            if (this._size == null) {
              this._emitError(new Error("tus: cannot automatically derive upload's size from input and must be specified manually using the `uploadSize` option"));
                            SRTlib.send('], "end": "Upload._createClass.value._start"},');

              return;
            }
          }
          var retryDelays = this.options.retryDelays;
          if (retryDelays != null) {
            if (Object.prototype.toString.call(retryDelays) !== "[object Array]") {
              this._emitError(new Error("tus: the `retryDelays` option must either be an array or null"));
                            SRTlib.send('], "end": "Upload._createClass.value._start"},');

              return;
            } else {
              var errorCallback = this.options.onError;
              this.options.onError = function (err) {
                                SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._start.options.onError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                _this2.options.onError = errorCallback;
                var shouldResetDelays = _this2._offset != null && _this2._offset > _this2._offsetBeforeRetry;
                if (shouldResetDelays) {
                  _this2._retryAttempt = 0;
                }
                var isOnline = true;
                if (typeof window !== "undefined" && ("navigator" in window) && window.navigator.onLine === false) {
                  isOnline = false;
                }
                var status = err.originalRequest ? err.originalRequest.status : 0;
                var isServerError = !inStatusCategory(status, 400) || status === 409 || status === 423;
                var shouldRetry = _this2._retryAttempt < retryDelays.length && err.originalRequest != null && isServerError && isOnline;
                if (!shouldRetry) {
                  _this2._emitError(err);
                                    SRTlib.send('], "end": "Upload._createClass.value._start.options.onError"},');

                  return;
                }
                var delay = retryDelays[_this2._retryAttempt++];
                _this2._offsetBeforeRetry = _this2._offset;
                _this2.options.uploadUrl = _this2.url;
                _this2._retryTimeout = setTimeout(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._start.options.onError._this2._retryTimeout.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  _this2.start();
                                    SRTlib.send('], "end": "Upload._createClass.value._start.options.onError._this2._retryTimeout.setTimeout"},');

                }, delay);
                                SRTlib.send('], "end": "Upload._createClass.value._start.options.onError"},');

              };
            }
          }
          this._aborted = false;
          if (this.url != null) {
            this._resumeUpload();
                        SRTlib.send('], "end": "Upload._createClass.value._start"},');

            return;
          }
          if (this.options.uploadUrl != null) {
            this.url = this.options.uploadUrl;
            this._resumeUpload();
                        SRTlib.send('], "end": "Upload._createClass.value._start"},');

            return;
          }
          if (this._hasStorage()) {
            this.options.fingerprint(file, this.options, function (err, fingerprintValue) {
                            SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._start.options.fingerprint", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              if (err) {
                _this2._emitError(err);
                                SRTlib.send('], "end": "Upload._createClass.value._start.options.fingerprint"},');

                return;
              }
              _this2._fingerprint = fingerprintValue;
              _this2._storage.getItem(_this2._fingerprint, function (err, resumedUrl) {
                                SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._start.options.fingerprint._this2._storage.getItem", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                if (err) {
                  _this2._emitError(err);
                                    SRTlib.send('], "end": "Upload._createClass.value._start.options.fingerprint._this2._storage.getItem"},');

                  return;
                }
                if (resumedUrl != null) {
                  _this2.url = resumedUrl;
                  _this2._resumeUpload();
                } else {
                  _this2._createUpload();
                }
                                SRTlib.send('], "end": "Upload._createClass.value._start.options.fingerprint._this2._storage.getItem"},');

              });
                            SRTlib.send('], "end": "Upload._createClass.value._start.options.fingerprint"},');

            });
          } else {
            this._createUpload();
          }
                    SRTlib.send('], "end": "Upload._createClass.value._start"},');

        }
      }, {
        key: "abort",
        value: function abort(shouldTerminate, cb) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value.abort2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var _this3 = this;
          if (this._xhr !== null) {
            this._xhr.abort();
            this._source.close();
          }
          this._aborted = true;
          if (this._retryTimeout != null) {
            clearTimeout(this._retryTimeout);
            this._retryTimeout = null;
          }
          cb = cb || (function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value.abort.cb", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "Upload._createClass.value.abort.cb"},');

          });
          if (shouldTerminate) {
            Upload.terminate(this.url, this.options, function (err, xhr) {
                            SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value.abort", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              if (err) {
                                SRTlib.send('], "end": "Upload._createClass.value.abort"},');

                return cb(err, xhr);
              }
              _this3._hasStorage() ? _this3._storage.removeItem(_this3._fingerprint, cb) : cb();
                            SRTlib.send('], "end": "Upload._createClass.value.abort"},');

            });
          } else {
            cb();
          }
                    SRTlib.send('], "end": "Upload._createClass.value.abort2"},');

        }
      }, {
        key: "_hasStorage",
        value: function _hasStorage() {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._hasStorage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Upload._createClass.value._hasStorage"},');

          return this.options.resume && this._storage;
                    SRTlib.send('], "end": "Upload._createClass.value._hasStorage"},');

        }
      }, {
        key: "_emitXhrError",
        value: function _emitXhrError(xhr, err, causingErr) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._emitXhrError", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          this._emitError(new _error2.default(err, causingErr, xhr));
                    SRTlib.send('], "end": "Upload._createClass.value._emitXhrError"},');

        }
      }, {
        key: "_emitError",
        value: function _emitError(err) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._emitError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (typeof this.options.onError === "function") {
            this.options.onError(err);
          } else {
                        SRTlib.send('], "end": "Upload._createClass.value._emitError"},');

            throw err;
          }
                    SRTlib.send('], "end": "Upload._createClass.value._emitError"},');

        }
      }, {
        key: "_emitSuccess",
        value: function _emitSuccess() {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._emitSuccess", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (typeof this.options.onSuccess === "function") {
            this.options.onSuccess();
          }
                    SRTlib.send('], "end": "Upload._createClass.value._emitSuccess"},');

        }
      }, {
        key: "_emitProgress",
        value: function _emitProgress(bytesSent, bytesTotal) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._emitProgress", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (typeof this.options.onProgress === "function") {
            this.options.onProgress(bytesSent, bytesTotal);
          }
                    SRTlib.send('], "end": "Upload._createClass.value._emitProgress"},');

        }
      }, {
        key: "_emitChunkComplete",
        value: function _emitChunkComplete(chunkSize, bytesAccepted, bytesTotal) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._emitChunkComplete", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          if (typeof this.options.onChunkComplete === "function") {
            this.options.onChunkComplete(chunkSize, bytesAccepted, bytesTotal);
          }
                    SRTlib.send('], "end": "Upload._createClass.value._emitChunkComplete"},');

        }
      }, {
        key: "_setupXHR",
        value: function _setupXHR(xhr) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._setupXHR", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          this._xhr = xhr;
          setupXHR(xhr, this.options);
                    SRTlib.send('], "end": "Upload._createClass.value._setupXHR"},');

        }
      }, {
        key: "_createUpload",
        value: function _createUpload() {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._createUpload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this4 = this;
          if (!this.options.endpoint) {
            this._emitError(new Error("tus: unable to create upload because no endpoint is provided"));
                        SRTlib.send('], "end": "Upload._createClass.value._createUpload"},');

            return;
          }
          var xhr = (0, _request.newRequest)();
          xhr.open("POST", this.options.endpoint, true);
          xhr.onload = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._createUpload.xhr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!inStatusCategory(xhr.status, 200)) {
              _this4._emitXhrError(xhr, new Error("tus: unexpected response while creating upload"));
                            SRTlib.send('], "end": "Upload._createClass.value._createUpload.xhr.onload"},');

              return;
            }
            var location = xhr.getResponseHeader("Location");
            if (location == null) {
              _this4._emitXhrError(xhr, new Error("tus: invalid or missing Location header"));
                            SRTlib.send('], "end": "Upload._createClass.value._createUpload.xhr.onload"},');

              return;
            }
            _this4.url = (0, _request.resolveUrl)(_this4.options.endpoint, location);
            if (_this4._size === 0) {
              _this4._emitSuccess();
              _this4._source.close();
                            SRTlib.send('], "end": "Upload._createClass.value._createUpload.xhr.onload"},');

              return;
            }
            if (_this4._hasStorage()) {
              _this4._storage.setItem(_this4._fingerprint, _this4.url, function (err) {
                                SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._createUpload.xhr.onload._this4._storage.setItem", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                if (err) {
                  _this4._emitError(err);
                }
                                SRTlib.send('], "end": "Upload._createClass.value._createUpload.xhr.onload._this4._storage.setItem"},');

              });
            }
            if (_this4.options.uploadDataDuringCreation) {
              _this4._handleUploadResponse(xhr);
            } else {
              _this4._offset = 0;
              _this4._startUpload();
            }
                        SRTlib.send('], "end": "Upload._createClass.value._createUpload.xhr.onload"},');

          };
          xhr.onerror = function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._createUpload.xhr.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this4._emitXhrError(xhr, new Error("tus: failed to create upload"), err);
                        SRTlib.send('], "end": "Upload._createClass.value._createUpload.xhr.onerror"},');

          };
          this._setupXHR(xhr);
          if (this.options.uploadLengthDeferred) {
            xhr.setRequestHeader("Upload-Defer-Length", 1);
          } else {
            xhr.setRequestHeader("Upload-Length", this._size);
          }
          var metadata = encodeMetadata(this.options.metadata);
          if (metadata !== "") {
            xhr.setRequestHeader("Upload-Metadata", metadata);
          }
          if (this.options.uploadDataDuringCreation && !this.options.uploadLengthDeferred) {
            this._offset = 0;
            this._addChunkToRequest(xhr);
          } else {
            xhr.send(null);
          }
                    SRTlib.send('], "end": "Upload._createClass.value._createUpload"},');

        }
      }, {
        key: "_resumeUpload",
        value: function _resumeUpload() {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._resumeUpload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this5 = this;
          var xhr = (0, _request.newRequest)();
          xhr.open("HEAD", this.url, true);
          xhr.onload = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._resumeUpload.xhr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!inStatusCategory(xhr.status, 200)) {
              if (_this5._hasStorage() && inStatusCategory(xhr.status, 400)) {
                _this5._storage.removeItem(_this5._fingerprint, function (err) {
                                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._resumeUpload.xhr.onload._this5._storage.removeItem", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                  if (err) {
                    _this5._emitError(err);
                  }
                                    SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onload._this5._storage.removeItem"},');

                });
              }
              if (xhr.status === 423) {
                _this5._emitXhrError(xhr, new Error("tus: upload is currently locked; retry later"));
                                SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onload"},');

                return;
              }
              if (!_this5.options.endpoint) {
                _this5._emitXhrError(xhr, new Error("tus: unable to resume upload (new upload cannot be created without an endpoint)"));
                                SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onload"},');

                return;
              }
              _this5.url = null;
              _this5._createUpload();
                            SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onload"},');

              return;
            }
            var offset = parseInt(xhr.getResponseHeader("Upload-Offset"), 10);
            if (isNaN(offset)) {
              _this5._emitXhrError(xhr, new Error("tus: invalid or missing offset value"));
                            SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onload"},');

              return;
            }
            var length = parseInt(xhr.getResponseHeader("Upload-Length"), 10);
            if (isNaN(length) && !_this5.options.uploadLengthDeferred) {
              _this5._emitXhrError(xhr, new Error("tus: invalid or missing length value"));
                            SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onload"},');

              return;
            }
            if (offset === length) {
              _this5._emitProgress(length, length);
              _this5._emitSuccess();
                            SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onload"},');

              return;
            }
            _this5._offset = offset;
            _this5._startUpload();
                        SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onload"},');

          };
          xhr.onerror = function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._resumeUpload.xhr.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this5._emitXhrError(xhr, new Error("tus: failed to resume upload"), err);
                        SRTlib.send('], "end": "Upload._createClass.value._resumeUpload.xhr.onerror"},');

          };
          this._setupXHR(xhr);
          xhr.send(null);
                    SRTlib.send('], "end": "Upload._createClass.value._resumeUpload"},');

        }
      }, {
        key: "_startUpload",
        value: function _startUpload() {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._startUpload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this6 = this;
          if (this._aborted) {
                        SRTlib.send('], "end": "Upload._createClass.value._startUpload"},');

            return;
          }
          var xhr = (0, _request.newRequest)();
          if (this.options.overridePatchMethod) {
            xhr.open("POST", this.url, true);
            xhr.setRequestHeader("X-HTTP-Method-Override", "PATCH");
          } else {
            xhr.open("PATCH", this.url, true);
          }
          xhr.onload = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._startUpload.xhr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!inStatusCategory(xhr.status, 200)) {
              _this6._emitXhrError(xhr, new Error("tus: unexpected response while uploading chunk"));
                            SRTlib.send('], "end": "Upload._createClass.value._startUpload.xhr.onload"},');

              return;
            }
            _this6._handleUploadResponse(xhr);
                        SRTlib.send('], "end": "Upload._createClass.value._startUpload.xhr.onload"},');

          };
          xhr.onerror = function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._startUpload.xhr.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (_this6._aborted) {
                            SRTlib.send('], "end": "Upload._createClass.value._startUpload.xhr.onerror"},');

              return;
            }
            _this6._emitXhrError(xhr, new Error("tus: failed to upload chunk at offset " + _this6._offset), err);
                        SRTlib.send('], "end": "Upload._createClass.value._startUpload.xhr.onerror"},');

          };
          this._setupXHR(xhr);
          xhr.setRequestHeader("Upload-Offset", this._offset);
          this._addChunkToRequest(xhr);
                    SRTlib.send('], "end": "Upload._createClass.value._startUpload"},');

        }
      }, {
        key: "_addChunkToRequest",
        value: function _addChunkToRequest(xhr) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._addChunkToRequest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _this7 = this;
          if (("upload" in xhr)) {
            xhr.upload.onprogress = function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._addChunkToRequest.xhr.upload.onprogress", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (!e.lengthComputable) {
                                SRTlib.send('], "end": "Upload._createClass.value._addChunkToRequest.xhr.upload.onprogress"},');

                return;
              }
              _this7._emitProgress(start + e.loaded, _this7._size);
                            SRTlib.send('], "end": "Upload._createClass.value._addChunkToRequest.xhr.upload.onprogress"},');

            };
          }
          xhr.setRequestHeader("Content-Type", "application/offset+octet-stream");
          var start = this._offset;
          var end = this._offset + this.options.chunkSize;
          if ((end === Infinity || end > this._size) && !this.options.uploadLengthDeferred) {
            end = this._size;
          }
          this._source.slice(start, end, function (err, value, complete) {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._addChunkToRequest._source.slice", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            if (err) {
              _this7._emitError(err);
                            SRTlib.send('], "end": "Upload._createClass.value._addChunkToRequest._source.slice"},');

              return;
            }
            if (_this7.options.uploadLengthDeferred) {
              if (complete) {
                _this7._size = _this7._offset + (value && value.size ? value.size : 0);
                xhr.setRequestHeader("Upload-Length", _this7._size);
              }
            }
            if (value === null) {
              xhr.send();
            } else {
              xhr.send(value);
              _this7._emitProgress(_this7._offset, _this7._size);
            }
                        SRTlib.send('], "end": "Upload._createClass.value._addChunkToRequest._source.slice"},');

          });
                    SRTlib.send('], "end": "Upload._createClass.value._addChunkToRequest"},');

        }
      }, {
        key: "_handleUploadResponse",
        value: function _handleUploadResponse(xhr) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._handleUploadResponse", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _this8 = this;
          var offset = parseInt(xhr.getResponseHeader("Upload-Offset"), 10);
          if (isNaN(offset)) {
            this._emitXhrError(xhr, new Error("tus: invalid or missing offset value"));
                        SRTlib.send('], "end": "Upload._createClass.value._handleUploadResponse"},');

            return;
          }
          this._emitProgress(offset, this._size);
          this._emitChunkComplete(offset - this._offset, offset, this._size);
          this._offset = offset;
          if (offset == this._size) {
            if (this.options.removeFingerprintOnSuccess && this.options.resume) {
              this._storage.removeItem(this._fingerprint, function (err) {
                                SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value._handleUploadResponse._storage.removeItem", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                if (err) {
                  _this8._emitError(err);
                }
                                SRTlib.send('], "end": "Upload._createClass.value._handleUploadResponse._storage.removeItem"},');

              });
            }
            this._emitSuccess();
            this._source.close();
                        SRTlib.send('], "end": "Upload._createClass.value._handleUploadResponse"},');

            return;
          }
          this._startUpload();
                    SRTlib.send('], "end": "Upload._createClass.value._handleUploadResponse"},');

        }
      }], [{
        key: "terminate",
        value: function terminate(url, options, cb) {
                    SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value.terminate", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          if (typeof options !== "function" && typeof cb !== "function") {
                        SRTlib.send('], "end": "Upload._createClass.value.terminate"},');

            throw new Error("tus: a callback function must be specified");
          }
          if (typeof options === "function") {
            cb = options;
            options = {};
          }
          var xhr = (0, _request.newRequest)();
          xhr.open("DELETE", url, true);
          xhr.onload = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value.terminate.xhr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (xhr.status !== 204) {
              cb(new _error2.default(new Error("tus: unexpected response while terminating upload"), null, xhr));
                            SRTlib.send('], "end": "Upload._createClass.value.terminate.xhr.onload"},');

              return;
            }
            cb();
                        SRTlib.send('], "end": "Upload._createClass.value.terminate.xhr.onload"},');

          };
          xhr.onerror = function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "Upload._createClass.value.terminate.xhr.onerror", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            cb(new _error2.default(err, new Error("tus: failed to terminate upload"), xhr));
                        SRTlib.send('], "end": "Upload._createClass.value.terminate.xhr.onerror"},');

          };
          setupXHR(xhr, options);
          xhr.send(null);
                    SRTlib.send('], "end": "Upload._createClass.value.terminate"},');

        }
      }]);
            SRTlib.send('], "end": "Upload"},');

      return Upload;
            SRTlib.send('], "end": "Upload"},');

    })();
    function encodeMetadata(metadata) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeMetadata", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var encoded = [];
      for (var key in metadata) {
        encoded.push(key + " " + _jsBase.Base64.encode(metadata[key]));
      }
            SRTlib.send('], "end": "encodeMetadata"},');

      return encoded.join(",");
            SRTlib.send('], "end": "encodeMetadata"},');

    }
    function inStatusCategory(status, category) {
            SRTlib.send(`{ "anonymous": false, "function": "inStatusCategory", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "inStatusCategory"},');

      return status >= category && status < category + 100;
            SRTlib.send('], "end": "inStatusCategory"},');

    }
    function setupXHR(xhr, options) {
            SRTlib.send(`{ "anonymous": false, "function": "setupXHR", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      xhr.setRequestHeader("Tus-Resumable", "1.0.0");
      var headers = options.headers || ({});
      for (var name in headers) {
        xhr.setRequestHeader(name, headers[name]);
      }
      xhr.withCredentials = options.withCredentials;
            SRTlib.send('], "end": "setupXHR"},');

    }
    Upload.defaultOptions = defaultOptions;
    exports.default = Upload;
        SRTlib.send('], "end": "emptyKey258"},');

  }, {
    "./error": 229,
    "./node/fingerprint": 221,
    "./node/request": 225,
    "./node/source": 226,
    "./node/storage": 227,
    "extend": 113,
    "js-base64": 136
  }],
  232: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey259", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global) {
            SRTlib.send(`{ "anonymous": true, "function": "call39", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      'use strict';
      var required = require('requires-port'), qs = require('querystringify'), slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//, protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i, whitespace = '[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]', left = new RegExp('^' + whitespace + '+');
      function trimLeft(str) {
                SRTlib.send(`{ "anonymous": false, "function": "trimLeft", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "trimLeft"},');

        return (str ? str : '').toString().replace(left, '');
                SRTlib.send('], "end": "trimLeft"},');

      }
      var rules = [['#', 'hash'], ['?', 'query'], function sanitize(address) {
                SRTlib.send(`{ "anonymous": true, "function": "call.rules.sanitize", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.rules.sanitize"},');

        return address.replace('\\', '/');
                SRTlib.send('], "end": "call.rules.sanitize"},');

      }, ['/', 'pathname'], ['@', 'auth', 1], [NaN, 'host', undefined, 1, 1], [/:(\d+)$/, 'port', undefined, 1], [NaN, 'hostname', undefined, 1, 1]];
      var ignore = {
        hash: 1,
        query: 1
      };
      function lolcation(loc) {
                SRTlib.send(`{ "anonymous": false, "function": "lolcation", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var globalVar;
        if (typeof window !== 'undefined') globalVar = window; else if (typeof global !== 'undefined') globalVar = global; else if (typeof self !== 'undefined') globalVar = self; else globalVar = {};
        var location = globalVar.location || ({});
        loc = loc || location;
        var finaldestination = {}, type = typeof loc, key;
        if ('blob:' === loc.protocol) {
          finaldestination = new Url(unescape(loc.pathname), {});
        } else if ('string' === type) {
          finaldestination = new Url(loc, {});
          for (key in ignore) delete finaldestination[key];
        } else if ('object' === type) {
          for (key in loc) {
            if ((key in ignore)) continue;
            finaldestination[key] = loc[key];
          }
          if (finaldestination.slashes === undefined) {
            finaldestination.slashes = slashes.test(loc.href);
          }
        }
                SRTlib.send('], "end": "lolcation"},');

        return finaldestination;
                SRTlib.send('], "end": "lolcation"},');

      }
      function extractProtocol(address) {
                SRTlib.send(`{ "anonymous": false, "function": "extractProtocol", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        address = trimLeft(address);
        var match = protocolre.exec(address);
                SRTlib.send('], "end": "extractProtocol"},');

        return {
          protocol: match[1] ? match[1].toLowerCase() : '',
          slashes: !!match[2],
          rest: match[3]
        };
                SRTlib.send('], "end": "extractProtocol"},');

      }
      function resolve(relative, base) {
                SRTlib.send(`{ "anonymous": false, "function": "resolve", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (relative === '') {
                    SRTlib.send('], "end": "resolve"},');

          return base;
        }
        var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')), i = path.length, last = path[i - 1], unshift = false, up = 0;
        while (i--) {
          if (path[i] === '.') {
            path.splice(i, 1);
          } else if (path[i] === '..') {
            path.splice(i, 1);
            up++;
          } else if (up) {
            if (i === 0) unshift = true;
            path.splice(i, 1);
            up--;
          }
        }
        if (unshift) path.unshift('');
        if (last === '.' || last === '..') path.push('');
                SRTlib.send('], "end": "resolve"},');

        return path.join('/');
                SRTlib.send('], "end": "resolve"},');

      }
      function Url(address, location, parser) {
                SRTlib.send(`{ "anonymous": false, "function": "Url", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        address = trimLeft(address);
        if (!(this instanceof Url)) {
                    SRTlib.send('], "end": "Url"},');

          return new Url(address, location, parser);
        }
        var relative, extracted, parse, instruction, index, key, instructions = rules.slice(), type = typeof location, url = this, i = 0;
        if ('object' !== type && 'string' !== type) {
          parser = location;
          location = null;
        }
        if (parser && 'function' !== typeof parser) parser = qs.parse;
        location = lolcation(location);
        extracted = extractProtocol(address || '');
        relative = !extracted.protocol && !extracted.slashes;
        url.slashes = extracted.slashes || relative && location.slashes;
        url.protocol = extracted.protocol || location.protocol || '';
        address = extracted.rest;
        if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];
        for (; i < instructions.length; i++) {
          instruction = instructions[i];
          if (typeof instruction === 'function') {
            address = instruction(address);
            continue;
          }
          parse = instruction[0];
          key = instruction[1];
          if (parse !== parse) {
            url[key] = address;
          } else if ('string' === typeof parse) {
            if (~(index = address.indexOf(parse))) {
              if ('number' === typeof instruction[2]) {
                url[key] = address.slice(0, index);
                address = address.slice(index + instruction[2]);
              } else {
                url[key] = address.slice(index);
                address = address.slice(0, index);
              }
            }
          } else if (index = parse.exec(address)) {
            url[key] = index[1];
            address = address.slice(0, index.index);
          }
          url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : '');
          if (instruction[4]) url[key] = url[key].toLowerCase();
        }
        if (parser) url.query = parser(url.query);
        if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
          url.pathname = resolve(url.pathname, location.pathname);
        }
        if (!required(url.port, url.protocol)) {
          url.host = url.hostname;
          url.port = '';
        }
        url.username = url.password = '';
        if (url.auth) {
          instruction = url.auth.split(':');
          url.username = instruction[0] || '';
          url.password = instruction[1] || '';
        }
        url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
        url.href = url.toString();
                SRTlib.send('], "end": "Url"},');

      }
      function set(part, value, fn) {
                SRTlib.send(`{ "anonymous": false, "function": "set", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var url = this;
        switch (part) {
          case 'query':
            if ('string' === typeof value && value.length) {
              value = (fn || qs.parse)(value);
            }
            url[part] = value;
            break;
          case 'port':
            url[part] = value;
            if (!required(value, url.protocol)) {
              url.host = url.hostname;
              url[part] = '';
            } else if (value) {
              url.host = url.hostname + ':' + value;
            }
            break;
          case 'hostname':
            url[part] = value;
            if (url.port) value += ':' + url.port;
            url.host = value;
            break;
          case 'host':
            url[part] = value;
            if ((/:\d+$/).test(value)) {
              value = value.split(':');
              url.port = value.pop();
              url.hostname = value.join(':');
            } else {
              url.hostname = value;
              url.port = '';
            }
            break;
          case 'protocol':
            url.protocol = value.toLowerCase();
            url.slashes = !fn;
            break;
          case 'pathname':
          case 'hash':
            if (value) {
              var char = part === 'pathname' ? '/' : '#';
              url[part] = value.charAt(0) !== char ? char + value : value;
            } else {
              url[part] = value;
            }
            break;
          default:
            url[part] = value;
        }
        for (var i = 0; i < rules.length; i++) {
          var ins = rules[i];
          if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
        }
        url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
        url.href = url.toString();
                SRTlib.send('], "end": "set"},');

        return url;
                SRTlib.send('], "end": "set"},');

      }
      function toString(stringify) {
                SRTlib.send(`{ "anonymous": false, "function": "toString", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
        var query, url = this, protocol = url.protocol;
        if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
        var result = protocol + (url.slashes ? '//' : '');
        if (url.username) {
          result += url.username;
          if (url.password) result += ':' + url.password;
          result += '@';
        }
        result += url.host + url.pathname;
        query = 'object' === typeof url.query ? stringify(url.query) : url.query;
        if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
        if (url.hash) result += url.hash;
                SRTlib.send('], "end": "toString"},');

        return result;
                SRTlib.send('], "end": "toString"},');

      }
      Url.prototype = {
        set: set,
        toString: toString
      };
      Url.extractProtocol = extractProtocol;
      Url.location = lolcation;
      Url.trimLeft = trimLeft;
      Url.qs = qs;
      module.exports = Url;
            SRTlib.send('], "end": "call39"},');

    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey259"},');

  }, {
    "querystringify": 169,
    "requires-port": 187
  }],
  233: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey260", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global) {
            SRTlib.send(`{ "anonymous": true, "function": "call40", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      module.exports = deprecate;
      function deprecate(fn, msg) {
                SRTlib.send(`{ "anonymous": false, "function": "deprecate", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (config('noDeprecation')) {
                    SRTlib.send('], "end": "deprecate"},');

          return fn;
        }
        var warned = false;
        function deprecated() {
                    SRTlib.send(`{ "anonymous": false, "function": "deprecated", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!warned) {
            if (config('throwDeprecation')) {
                            SRTlib.send('], "end": "deprecated"},');

              throw new Error(msg);
            } else if (config('traceDeprecation')) {
              console.trace(msg);
            } else {
              console.warn(msg);
            }
            warned = true;
          }
                    SRTlib.send('], "end": "deprecated"},');

          return fn.apply(this, arguments);
                    SRTlib.send('], "end": "deprecated"},');

        }
                SRTlib.send('], "end": "deprecate"},');

        return deprecated;
                SRTlib.send('], "end": "deprecate"},');

      }
      function config(name) {
                SRTlib.send(`{ "anonymous": false, "function": "config", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        try {
          if (!global.localStorage) {
                        SRTlib.send('], "end": "config"},');

            return false;
          }
        } catch (_) {
                    SRTlib.send('], "end": "config"},');

          return false;
        }
        var val = global.localStorage[name];
        if (null == val) {
                    SRTlib.send('], "end": "config"},');

          return false;
        }
                SRTlib.send('], "end": "config"},');

        return String(val).toLowerCase() === 'true';
                SRTlib.send('], "end": "config"},');

      }
            SRTlib.send('], "end": "call40"},');

    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        SRTlib.send('], "end": "emptyKey260"},');

  }, {}],
  234: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey261", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var indexOf = function (xs, item) {
            SRTlib.send(`{ "anonymous": false, "function": "indexOf", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (xs.indexOf) return xs.indexOf(item); else {
                SRTlib.send('], "end": "emptyKey261"},');

        return xs.indexOf(item);
      }
            SRTlib.send('], "end": "indexOf"},');

      return -1;
            SRTlib.send('], "end": "indexOf"},');

    };
    var Object_keys = function (obj) {
            SRTlib.send(`{ "anonymous": false, "function": "Object_keys", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (Object.keys) return Object.keys(obj); else {
                SRTlib.send('], "end": "emptyKey261"},');

        return Object.keys(obj);
      }
            SRTlib.send('], "end": "Object_keys"},');

    };
    var forEach = function (xs, fn) {
            SRTlib.send(`{ "anonymous": false, "function": "forEach", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (xs.forEach) return xs.forEach(fn); else {
                SRTlib.send('], "end": "emptyKey261"},');

        return xs.forEach(fn);
      }
            SRTlib.send('], "end": "forEach"},');

    };
    var defineProp = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "defineProp", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      try {
        Object.defineProperty({}, '_', {});
                SRTlib.send('], "end": "defineProp"},');

        return function (obj, name, value) {
                    SRTlib.send(`{ "anonymous": true, "function": "defineProp.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          Object.defineProperty(obj, name, {
            writable: true,
            enumerable: false,
            configurable: true,
            value: value
          });
                    SRTlib.send('], "end": "defineProp.ReturnStatement"},');

        };
      } catch (e) {
                SRTlib.send('], "end": "defineProp"},');

        return function (obj, name, value) {
                    SRTlib.send(`{ "anonymous": true, "function": "defineProp.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          obj[name] = value;
                    SRTlib.send('], "end": "defineProp.ReturnStatement2"},');

        };
      }
            SRTlib.send('], "end": "defineProp"},');

    })();
    var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function', 'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError', 'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape', 'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];
    function Context() {
            SRTlib.send(`{ "anonymous": false, "function": "Context", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Context"},');

    }
    Context.prototype = {};
    var Script = exports.Script = function NodeScript(code) {
            SRTlib.send(`{ "anonymous": true, "function": "Script.exports.Script.NodeScript", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!(this instanceof Script)) {
                SRTlib.send('], "end": "Script.exports.Script.NodeScript"},');

        return new Script(code);
      }
      this.code = code;
            SRTlib.send('], "end": "Script.exports.Script.NodeScript"},');

    };
    Script.prototype.runInContext = function (context) {
            SRTlib.send(`{ "anonymous": true, "function": "Script.prototype.runInContext", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!(context instanceof Context)) {
                SRTlib.send('], "end": "Script.prototype.runInContext"},');

        throw new TypeError("needs a 'context' argument.");
      }
      var iframe = document.createElement('iframe');
      if (!iframe.style) iframe.style = {};
      iframe.style.display = 'none';
      document.body.appendChild(iframe);
      var win = iframe.contentWindow;
      var wEval = win.eval, wExecScript = win.execScript;
      if (!wEval && wExecScript) {
        wExecScript.call(win, 'null');
        wEval = win.eval;
      }
      forEach(Object_keys(context), function (key) {
                SRTlib.send(`{ "anonymous": true, "function": "Script.prototype.runInContext.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        win[key] = context[key];
                SRTlib.send('], "end": "Script.prototype.runInContext.forEach"},');

      });
      forEach(globals, function (key) {
                SRTlib.send(`{ "anonymous": true, "function": "Script.prototype.runInContext.forEach2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (context[key]) {
          win[key] = context[key];
        }
                SRTlib.send('], "end": "Script.prototype.runInContext.forEach2"},');

      });
      var winKeys = Object_keys(win);
      var res = wEval.call(win, this.code);
      forEach(Object_keys(win), function (key) {
                SRTlib.send(`{ "anonymous": true, "function": "Script.prototype.runInContext.forEach3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if ((key in context) || indexOf(winKeys, key) === -1) {
          context[key] = win[key];
        }
                SRTlib.send('], "end": "Script.prototype.runInContext.forEach3"},');

      });
      forEach(globals, function (key) {
                SRTlib.send(`{ "anonymous": true, "function": "Script.prototype.runInContext.forEach4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!((key in context))) {
          defineProp(context, key, win[key]);
        }
                SRTlib.send('], "end": "Script.prototype.runInContext.forEach4"},');

      });
      document.body.removeChild(iframe);
            SRTlib.send('], "end": "Script.prototype.runInContext"},');

      return res;
            SRTlib.send('], "end": "Script.prototype.runInContext"},');

    };
    Script.prototype.runInThisContext = function () {
            SRTlib.send(`{ "anonymous": true, "function": "Script.prototype.runInThisContext", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "Script.prototype.runInThisContext"},');

      return eval(this.code);
            SRTlib.send('], "end": "Script.prototype.runInThisContext"},');

    };
    Script.prototype.runInNewContext = function (context) {
            SRTlib.send(`{ "anonymous": true, "function": "Script.prototype.runInNewContext", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var ctx = Script.createContext(context);
      var res = this.runInContext(ctx);
      if (context) {
        forEach(Object_keys(ctx), function (key) {
                    SRTlib.send(`{ "anonymous": true, "function": "Script.prototype.runInNewContext.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          context[key] = ctx[key];
                    SRTlib.send('], "end": "Script.prototype.runInNewContext.forEach"},');

        });
      }
            SRTlib.send('], "end": "Script.prototype.runInNewContext"},');

      return res;
            SRTlib.send('], "end": "Script.prototype.runInNewContext"},');

    };
    forEach(Object_keys(Script.prototype), function (name) {
            SRTlib.send(`{ "anonymous": true, "function": "forEach2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      exports[name] = Script[name] = function (code) {
                SRTlib.send(`{ "anonymous": true, "function": "forEach.exports.name.Script.name", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var s = Script(code);
                SRTlib.send('], "end": "forEach.exports.name.Script.name"},');

        return s[name].apply(s, [].slice.call(arguments, 1));
                SRTlib.send('], "end": "forEach.exports.name.Script.name"},');

      };
            SRTlib.send('], "end": "forEach2"},');

    });
    exports.isContext = function (context) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.isContext", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "exports.isContext"},');

      return context instanceof Context;
            SRTlib.send('], "end": "exports.isContext"},');

    };
    exports.createScript = function (code) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.createScript", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "exports.createScript"},');

      return exports.Script(code);
            SRTlib.send('], "end": "exports.createScript"},');

    };
    exports.createContext = Script.createContext = function (context) {
            SRTlib.send(`{ "anonymous": true, "function": "exports.createContext.Script.createContext", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var copy = new Context();
      if (typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
                    SRTlib.send(`{ "anonymous": true, "function": "exports.createContext.Script.createContext.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          copy[key] = context[key];
                    SRTlib.send('], "end": "exports.createContext.Script.createContext.forEach"},');

        });
      }
            SRTlib.send('], "end": "exports.createContext.Script.createContext"},');

      return copy;
            SRTlib.send('], "end": "exports.createContext.Script.createContext"},');

    };
        SRTlib.send('], "end": "emptyKey261"},');

  }, {}],
  235: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey266", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (global, factory) {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey262", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
            SRTlib.send('], "end": "emptyKey262"},');

    })(this, function (exports) {
            SRTlib.send(`{ "anonymous": true, "function": "emptyKey265", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      'use strict';
      var support = {
        searchParams: ('URLSearchParams' in self),
        iterable: ('Symbol' in self) && ('iterator' in Symbol),
        blob: ('FileReader' in self) && ('Blob' in self) && (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "support.blob", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          try {
            new Blob();
                        SRTlib.send('], "end": "support.blob"},');

            return true;
          } catch (e) {
                        SRTlib.send('], "end": "support.blob"},');

            return false;
          }
                    SRTlib.send('], "end": "support.blob"},');

        })(),
        formData: ('FormData' in self),
        arrayBuffer: ('ArrayBuffer' in self)
      };
      function isDataView(obj) {
                SRTlib.send(`{ "anonymous": false, "function": "isDataView", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isDataView"},');

        return obj && DataView.prototype.isPrototypeOf(obj);
                SRTlib.send('], "end": "isDataView"},');

      }
      if (support.arrayBuffer) {
        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];
        var isArrayBufferView = ArrayBuffer.isView || (function (obj) {
                    SRTlib.send(`{ "anonymous": true, "function": "isArrayBufferView", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "isArrayBufferView"},');

          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
                    SRTlib.send('], "end": "isArrayBufferView"},');

        });
      }
      function normalizeName(name) {
                SRTlib.send(`{ "anonymous": false, "function": "normalizeName", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof name !== 'string') {
          name = String(name);
        }
        if ((/[^a-z0-9\-#$%&'*+.^_`|~]/i).test(name)) {
                    SRTlib.send('], "end": "normalizeName"},');

          throw new TypeError('Invalid character in header field name');
        }
                SRTlib.send('], "end": "normalizeName"},');

        return name.toLowerCase();
                SRTlib.send('], "end": "normalizeName"},');

      }
      function normalizeValue(value) {
                SRTlib.send(`{ "anonymous": false, "function": "normalizeValue", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof value !== 'string') {
          value = String(value);
        }
                SRTlib.send('], "end": "normalizeValue"},');

        return value;
                SRTlib.send('], "end": "normalizeValue"},');

      }
      function iteratorFor(items) {
                SRTlib.send(`{ "anonymous": false, "function": "iteratorFor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var iterator = {
          next: function () {
                        SRTlib.send(`{ "anonymous": true, "function": "iterator.next", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var value = items.shift();
                        SRTlib.send('], "end": "iterator.next"},');

            return {
              done: value === undefined,
              value: value
            };
                        SRTlib.send('], "end": "iterator.next"},');

          }
        };
        if (support.iterable) {
          iterator[Symbol.iterator] = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "iterator", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "iterator"},');

            return iterator;
                        SRTlib.send('], "end": "iterator"},');

          };
        }
                SRTlib.send('], "end": "iteratorFor"},');

        return iterator;
                SRTlib.send('], "end": "iteratorFor"},');

      }
      function Headers(headers) {
                SRTlib.send(`{ "anonymous": false, "function": "Headers", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.map = {};
        if (headers instanceof Headers) {
          headers.forEach(function (value, name) {
                        SRTlib.send(`{ "anonymous": true, "function": "emptyKey263", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            this.append(name, value);
                        SRTlib.send('], "end": "emptyKey263"},');

          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function (header) {
                        SRTlib.send(`{ "anonymous": true, "function": "emptyKey264", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            this.append(header[0], header[1]);
                        SRTlib.send('], "end": "emptyKey264"},');

          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function (name) {
                        SRTlib.send(`{ "anonymous": true, "function": "forEach3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            this.append(name, headers[name]);
                        SRTlib.send('], "end": "forEach3"},');

          }, this);
        }
                SRTlib.send('], "end": "Headers"},');

      }
      Headers.prototype.append = function (name, value) {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.append", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
                SRTlib.send('], "end": "Headers.prototype.append"},');

      };
      Headers.prototype['delete'] = function (name) {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        delete this.map[normalizeName(name)];
                SRTlib.send('], "end": "Headers.prototype"},');

      };
      Headers.prototype.get = function (name) {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.get", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        name = normalizeName(name);
                SRTlib.send('], "end": "Headers.prototype.get"},');

        return this.has(name) ? this.map[name] : null;
                SRTlib.send('], "end": "Headers.prototype.get"},');

      };
      Headers.prototype.has = function (name) {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.has", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Headers.prototype.has"},');

        return this.map.hasOwnProperty(normalizeName(name));
                SRTlib.send('], "end": "Headers.prototype.has"},');

      };
      Headers.prototype.set = function (name, value) {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.set", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.map[normalizeName(name)] = normalizeValue(value);
                SRTlib.send('], "end": "Headers.prototype.set"},');

      };
      Headers.prototype.forEach = function (callback, thisArg) {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.forEach", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
                SRTlib.send('], "end": "Headers.prototype.forEach"},');

      };
      Headers.prototype.keys = function () {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.keys", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var items = [];
        this.forEach(function (value, name) {
                    SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.keys.forEach", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          items.push(name);
                    SRTlib.send('], "end": "Headers.prototype.keys.forEach"},');

        });
                SRTlib.send('], "end": "Headers.prototype.keys"},');

        return iteratorFor(items);
                SRTlib.send('], "end": "Headers.prototype.keys"},');

      };
      Headers.prototype.values = function () {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.values", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var items = [];
        this.forEach(function (value) {
                    SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.values.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          items.push(value);
                    SRTlib.send('], "end": "Headers.prototype.values.forEach"},');

        });
                SRTlib.send('], "end": "Headers.prototype.values"},');

        return iteratorFor(items);
                SRTlib.send('], "end": "Headers.prototype.values"},');

      };
      Headers.prototype.entries = function () {
                SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.entries", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var items = [];
        this.forEach(function (value, name) {
                    SRTlib.send(`{ "anonymous": true, "function": "Headers.prototype.entries.forEach", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          items.push([name, value]);
                    SRTlib.send('], "end": "Headers.prototype.entries.forEach"},');

        });
                SRTlib.send('], "end": "Headers.prototype.entries"},');

        return iteratorFor(items);
                SRTlib.send('], "end": "Headers.prototype.entries"},');

      };
      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }
      function consumed(body) {
                SRTlib.send(`{ "anonymous": false, "function": "consumed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (body.bodyUsed) {
                    SRTlib.send('], "end": "consumed"},');

          return Promise.reject(new TypeError('Already read'));
        }
        body.bodyUsed = true;
                SRTlib.send('], "end": "consumed"},');

      }
      function fileReaderReady(reader) {
                SRTlib.send(`{ "anonymous": false, "function": "fileReaderReady", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "fileReaderReady"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement13", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          reader.onload = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.reader.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            resolve(reader.result);
                        SRTlib.send('], "end": "ReturnStatement.reader.onload"},');

          };
          reader.onerror = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.reader.onerror", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            reject(reader.error);
                        SRTlib.send('], "end": "ReturnStatement.reader.onerror"},');

          };
                    SRTlib.send('], "end": "ReturnStatement13"},');

        });
                SRTlib.send('], "end": "fileReaderReady"},');

      }
      function readBlobAsArrayBuffer(blob) {
                SRTlib.send(`{ "anonymous": false, "function": "readBlobAsArrayBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
                SRTlib.send('], "end": "readBlobAsArrayBuffer"},');

        return promise;
                SRTlib.send('], "end": "readBlobAsArrayBuffer"},');

      }
      function readBlobAsText(blob) {
                SRTlib.send(`{ "anonymous": false, "function": "readBlobAsText", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsText(blob);
                SRTlib.send('], "end": "readBlobAsText"},');

        return promise;
                SRTlib.send('], "end": "readBlobAsText"},');

      }
      function readArrayBufferAsText(buf) {
                SRTlib.send(`{ "anonymous": false, "function": "readArrayBufferAsText", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }
                SRTlib.send('], "end": "readArrayBufferAsText"},');

        return chars.join('');
                SRTlib.send('], "end": "readArrayBufferAsText"},');

      }
      function bufferClone(buf) {
                SRTlib.send(`{ "anonymous": false, "function": "bufferClone", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (buf.slice) {
                    SRTlib.send('], "end": "bufferClone"},');

          return buf.slice(0);
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
                    SRTlib.send('], "end": "bufferClone"},');

          return view.buffer;
        }
                SRTlib.send('], "end": "bufferClone"},');

      }
      function Body() {
                SRTlib.send(`{ "anonymous": false, "function": "Body", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.bodyUsed = false;
        this._initBody = function (body) {
                    SRTlib.send(`{ "anonymous": true, "function": "_initBody", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          this._bodyInit = body;
          if (!body) {
            this._bodyText = '';
          } else if (typeof body === 'string') {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }
          if (!this.headers.get('content-type')) {
            if (typeof body === 'string') {
              this.headers.set('content-type', 'text/plain;charset=UTF-8');
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set('content-type', this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
          }
                    SRTlib.send('], "end": "_initBody"},');

        };
        if (support.blob) {
          this.blob = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "blob", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var rejected = consumed(this);
            if (rejected) {
                            SRTlib.send('], "end": "blob"},');

              return rejected;
            }
            if (this._bodyBlob) {
                            SRTlib.send('], "end": "blob"},');

              return Promise.resolve(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
                            SRTlib.send('], "end": "blob"},');

              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            } else if (this._bodyFormData) {
                            SRTlib.send('], "end": "blob"},');

              throw new Error('could not read FormData body as blob');
            } else {
                            SRTlib.send('], "end": "blob"},');

              return Promise.resolve(new Blob([this._bodyText]));
            }
                        SRTlib.send('], "end": "blob"},');

          };
          this.arrayBuffer = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "arrayBuffer", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (this._bodyArrayBuffer) {
                            SRTlib.send('], "end": "arrayBuffer"},');

              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
            } else {
                            SRTlib.send('], "end": "arrayBuffer"},');

              return this.blob().then(readBlobAsArrayBuffer);
            }
                        SRTlib.send('], "end": "arrayBuffer"},');

          };
        }
        this.text = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "text", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var rejected = consumed(this);
          if (rejected) {
                        SRTlib.send('], "end": "text"},');

            return rejected;
          }
          if (this._bodyBlob) {
                        SRTlib.send('], "end": "text"},');

            return readBlobAsText(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
                        SRTlib.send('], "end": "text"},');

            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
          } else if (this._bodyFormData) {
                        SRTlib.send('], "end": "text"},');

            throw new Error('could not read FormData body as text');
          } else {
                        SRTlib.send('], "end": "text"},');

            return Promise.resolve(this._bodyText);
          }
                    SRTlib.send('], "end": "text"},');

        };
        if (support.formData) {
          this.formData = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "formData", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "formData"},');

            return this.text().then(decode);
                        SRTlib.send('], "end": "formData"},');

          };
        }
        this.json = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "json", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "json"},');

          return this.text().then(JSON.parse);
                    SRTlib.send('], "end": "json"},');

        };
                SRTlib.send('], "end": "Body"},');

        return this;
                SRTlib.send('], "end": "Body"},');

      }
      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];
      function normalizeMethod(method) {
                SRTlib.send(`{ "anonymous": false, "function": "normalizeMethod", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var upcased = method.toUpperCase();
                SRTlib.send('], "end": "normalizeMethod"},');

        return methods.indexOf(upcased) > -1 ? upcased : method;
                SRTlib.send('], "end": "normalizeMethod"},');

      }
      function Request(input, options) {
                SRTlib.send(`{ "anonymous": false, "function": "Request", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        options = options || ({});
        var body = options.body;
        if (input instanceof Request) {
          if (input.bodyUsed) {
                        SRTlib.send('], "end": "Request"},');

            throw new TypeError('Already read');
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal;
        this.referrer = null;
        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
                    SRTlib.send('], "end": "Request"},');

          throw new TypeError('Body not allowed for GET or HEAD requests');
        }
        this._initBody(body);
                SRTlib.send('], "end": "Request"},');

      }
      Request.prototype.clone = function () {
                SRTlib.send(`{ "anonymous": true, "function": "Request.prototype.clone", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "Request.prototype.clone"},');

        return new Request(this, {
          body: this._bodyInit
        });
                SRTlib.send('], "end": "Request.prototype.clone"},');

      };
      function decode(body) {
                SRTlib.send(`{ "anonymous": false, "function": "decode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var form = new FormData();
        body.trim().split('&').forEach(function (bytes) {
                    SRTlib.send(`{ "anonymous": true, "function": "split.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
          }
                    SRTlib.send('], "end": "split.forEach"},');

        });
                SRTlib.send('], "end": "decode"},');

        return form;
                SRTlib.send('], "end": "decode"},');

      }
      function parseHeaders(rawHeaders) {
                SRTlib.send(`{ "anonymous": false, "function": "parseHeaders", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var headers = new Headers();
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
                    SRTlib.send(`{ "anonymous": true, "function": "forEach4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var parts = line.split(':');
          var key = parts.shift().trim();
          if (key) {
            var value = parts.join(':').trim();
            headers.append(key, value);
          }
                    SRTlib.send('], "end": "forEach4"},');

        });
                SRTlib.send('], "end": "parseHeaders"},');

        return headers;
                SRTlib.send('], "end": "parseHeaders"},');

      }
      Body.call(Request.prototype);
      function Response(bodyInit, options) {
                SRTlib.send(`{ "anonymous": false, "function": "Response", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!options) {
          options = {};
        }
        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = ('statusText' in options) ? options.statusText : 'OK';
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
                SRTlib.send('], "end": "Response"},');

      }
      Body.call(Response.prototype);
      Response.prototype.clone = function () {
                SRTlib.send(`{ "anonymous": true, "function": "Response.prototype.clone", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "Response.prototype.clone"},');

        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        });
                SRTlib.send('], "end": "Response.prototype.clone"},');

      };
      Response.error = function () {
                SRTlib.send(`{ "anonymous": true, "function": "Response.error", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var response = new Response(null, {
          status: 0,
          statusText: ''
        });
        response.type = 'error';
                SRTlib.send('], "end": "Response.error"},');

        return response;
                SRTlib.send('], "end": "Response.error"},');

      };
      var redirectStatuses = [301, 302, 303, 307, 308];
      Response.redirect = function (url, status) {
                SRTlib.send(`{ "anonymous": true, "function": "Response.redirect", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (redirectStatuses.indexOf(status) === -1) {
                    SRTlib.send('], "end": "Response.redirect"},');

          throw new RangeError('Invalid status code');
        }
                SRTlib.send('], "end": "Response.redirect"},');

        return new Response(null, {
          status: status,
          headers: {
            location: url
          }
        });
                SRTlib.send('], "end": "Response.redirect"},');

      };
      exports.DOMException = self.DOMException;
      try {
        new exports.DOMException();
      } catch (err) {
        exports.DOMException = function (message, name) {
                    SRTlib.send(`{ "anonymous": true, "function": "exports.DOMException", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          this.message = message;
          this.name = name;
          var error = Error(message);
          this.stack = error.stack;
                    SRTlib.send('], "end": "exports.DOMException"},');

        };
        exports.DOMException.prototype = Object.create(Error.prototype);
        exports.DOMException.prototype.constructor = exports.DOMException;
      }
      function fetch(input, init) {
                SRTlib.send(`{ "anonymous": false, "function": "fetch", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "fetch"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement14", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var request = new Request(input, init);
          if (request.signal && request.signal.aborted) {
                        SRTlib.send('], "end": "ReturnStatement14"},');

            return reject(new exports.DOMException('Aborted', 'AbortError'));
          }
          var xhr = new XMLHttpRequest();
          function abortXhr() {
                        SRTlib.send(`{ "anonymous": false, "function": "abortXhr", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            xhr.abort();
                        SRTlib.send('], "end": "abortXhr"},');

          }
          xhr.onload = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.xhr.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var options = {
              status: xhr.status,
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || '')
            };
            options.url = ('responseURL' in xhr) ? xhr.responseURL : options.headers.get('X-Request-URL');
            var body = ('response' in xhr) ? xhr.response : xhr.responseText;
            resolve(new Response(body, options));
                        SRTlib.send('], "end": "ReturnStatement.xhr.onload"},');

          };
          xhr.onerror = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.xhr.onerror", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            reject(new TypeError('Network request failed'));
                        SRTlib.send('], "end": "ReturnStatement.xhr.onerror"},');

          };
          xhr.ontimeout = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.xhr.ontimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            reject(new TypeError('Network request failed'));
                        SRTlib.send('], "end": "ReturnStatement.xhr.ontimeout"},');

          };
          xhr.onabort = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.xhr.onabort", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            reject(new exports.DOMException('Aborted', 'AbortError'));
                        SRTlib.send('], "end": "ReturnStatement.xhr.onabort"},');

          };
          xhr.open(request.method, request.url, true);
          if (request.credentials === 'include') {
            xhr.withCredentials = true;
          } else if (request.credentials === 'omit') {
            xhr.withCredentials = false;
          }
          if (('responseType' in xhr) && support.blob) {
            xhr.responseType = 'blob';
          }
          request.headers.forEach(function (value, name) {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.request.headers.forEach", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            xhr.setRequestHeader(name, value);
                        SRTlib.send('], "end": "ReturnStatement.request.headers.forEach"},');

          });
          if (request.signal) {
            request.signal.addEventListener('abort', abortXhr);
            xhr.onreadystatechange = function () {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.xhr.onreadystatechange", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              if (xhr.readyState === 4) {
                request.signal.removeEventListener('abort', abortXhr);
              }
                            SRTlib.send('], "end": "ReturnStatement.xhr.onreadystatechange"},');

            };
          }
          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
                    SRTlib.send('], "end": "ReturnStatement14"},');

        });
                SRTlib.send('], "end": "fetch"},');

      }
      fetch.polyfill = true;
      if (!self.fetch) {
        self.fetch = fetch;
        self.Headers = Headers;
        self.Request = Request;
        self.Response = Response;
      }
      exports.Headers = Headers;
      exports.Request = Request;
      exports.Response = Response;
      exports.fetch = fetch;
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
            SRTlib.send('], "end": "emptyKey265"},');

    });
        SRTlib.send('], "end": "emptyKey266"},');

  }, {}],
  236: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey267", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    function WildcardMatcher(text, separator) {
            SRTlib.send(`{ "anonymous": false, "function": "WildcardMatcher", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      this.text = text = text || '';
      this.hasWild = ~text.indexOf('*');
      this.separator = separator;
      this.parts = text.split(separator);
            SRTlib.send('], "end": "WildcardMatcher"},');

    }
    WildcardMatcher.prototype.match = function (input) {
            SRTlib.send(`{ "anonymous": true, "function": "WildcardMatcher.prototype.match", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var matches = true;
      var parts = this.parts;
      var ii;
      var partsCount = parts.length;
      var testParts;
      if (typeof input == 'string' || input instanceof String) {
        if (!this.hasWild && this.text != input) {
          matches = false;
        } else {
          testParts = (input || '').split(this.separator);
          for (ii = 0; matches && ii < partsCount; ii++) {
            if (parts[ii] === '*') {
              continue;
            } else if (ii < testParts.length) {
              matches = parts[ii] === testParts[ii];
            } else {
              matches = false;
            }
          }
          matches = matches && testParts;
        }
      } else if (typeof input.splice == 'function') {
        matches = [];
        for (ii = input.length; ii--; ) {
          if (this.match(input[ii])) {
            matches[matches.length] = input[ii];
          }
        }
      } else if (typeof input == 'object') {
        matches = {};
        for (var key in input) {
          if (this.match(key)) {
            matches[key] = input[key];
          }
        }
      }
            SRTlib.send('], "end": "WildcardMatcher.prototype.match"},');

      return matches;
            SRTlib.send('], "end": "WildcardMatcher.prototype.match"},');

    };
    module.exports = function (text, test, separator) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports16", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var matcher = new WildcardMatcher(text, separator || /[\/\.]/);
      if (typeof test != 'undefined') {
                SRTlib.send('], "end": "module.exports16"},');

        return matcher.match(test);
      }
            SRTlib.send('], "end": "module.exports16"},');

      return matcher;
            SRTlib.send('], "end": "module.exports16"},');

    };
        SRTlib.send('], "end": "emptyKey267"},');

  }, {}],
  237: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey268", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var alphabet = ('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_').split(''), length = 64, map = {}, seed = 0, i = 0, prev;
    function encode(num) {
            SRTlib.send(`{ "anonymous": false, "function": "encode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var encoded = '';
      do {
        encoded = alphabet[num % length] + encoded;
        num = Math.floor(num / length);
      } while (num > 0);
            SRTlib.send('], "end": "encode"},');

      return encoded;
            SRTlib.send('], "end": "encode"},');

    }
    function decode(str) {
            SRTlib.send(`{ "anonymous": false, "function": "decode", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var decoded = 0;
      for (i = 0; i < str.length; i++) {
        decoded = decoded * length + map[str.charAt(i)];
      }
            SRTlib.send('], "end": "decode"},');

      return decoded;
            SRTlib.send('], "end": "decode"},');

    }
    function yeast() {
            SRTlib.send(`{ "anonymous": false, "function": "yeast", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var now = encode(+new Date());
      if (now !== prev) {
                SRTlib.send('], "end": "yeast"},');

        return (seed = 0, prev = now);
      }
            SRTlib.send('], "end": "yeast"},');

      return now + '.' + encode(seed++);
            SRTlib.send('], "end": "yeast"},');

    }
    for (; i < length; i++) map[alphabet[i]] = i;
    yeast.encode = encode;
    yeast.decode = decode;
    module.exports = yeast;
        SRTlib.send('], "end": "emptyKey268"},');

  }, {}],
  238: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey269", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/companion-client",
      "description": "Client library for communication with Companion. Intended for use in Uppy plugins.",
      "version": "1.4.5",
      "license": "MIT",
      "main": "lib/index.js",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "companion", "provider"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@uppy/utils": "file:../utils",
        "namespace-emitter": "^2.0.1"
      }
    };
        SRTlib.send('], "end": "emptyKey269"},');

  }, {}],
  239: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey270", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    function _wrapNativeSuper(Class) {
            SRTlib.send(`{ "anonymous": false, "function": "_wrapNativeSuper", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var _cache = typeof Map === "function" ? new Map() : undefined;
      _wrapNativeSuper = function _wrapNativeSuper(Class) {
                SRTlib.send(`{ "anonymous": true, "function": "_wrapNativeSuper._wrapNativeSuper", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (Class === null || !_isNativeFunction(Class)) {
                    SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper"},');

          return Class;
        }
        if (typeof Class !== "function") {
                    SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper"},');

          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) {
                        SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper"},');

            return _cache.get(Class);
          }
          _cache.set(Class, Wrapper);
        }
        function Wrapper() {
                    SRTlib.send(`{ "anonymous": false, "function": "Wrapper", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Wrapper"},');

          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                    SRTlib.send('], "end": "Wrapper"},');

        }
        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
                SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper"},');

        return _setPrototypeOf(Wrapper, Class);
                SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper"},');

      };
            SRTlib.send('], "end": "_wrapNativeSuper"},');

      return _wrapNativeSuper(Class);
            SRTlib.send('], "end": "_wrapNativeSuper"},');

    }
    function _construct(Parent, args, Class) {
            SRTlib.send(`{ "anonymous": false, "function": "_construct", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
                    SRTlib.send(`{ "anonymous": true, "function": "_construct._construct", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
                    SRTlib.send('], "end": "_construct._construct"},');

          return instance;
                    SRTlib.send('], "end": "_construct._construct"},');

        };
      }
            SRTlib.send('], "end": "_construct"},');

      return _construct.apply(null, arguments);
            SRTlib.send('], "end": "_construct"},');

    }
    function _isNativeReflectConstruct() {
            SRTlib.send(`{ "anonymous": false, "function": "_isNativeReflectConstruct", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (typeof Reflect === "undefined" || !Reflect.construct) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
      if (Reflect.construct.sham) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
      if (typeof Proxy === "function") {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return true;
      }
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Date.prototype.toString.call", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Date.prototype.toString.call"},');

        }));
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return true;
      } catch (e) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
            SRTlib.send('], "end": "_isNativeReflectConstruct"},');

    }
    function _isNativeFunction(fn) {
            SRTlib.send(`{ "anonymous": false, "function": "_isNativeFunction", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_isNativeFunction"},');

      return Function.toString.call(fn).indexOf("[native code]") !== -1;
            SRTlib.send('], "end": "_isNativeFunction"},');

    }
    function _setPrototypeOf(o, p) {
            SRTlib.send(`{ "anonymous": false, "function": "_setPrototypeOf", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      _setPrototypeOf = Object.setPrototypeOf || (function _setPrototypeOf(o, p) {
                SRTlib.send(`{ "anonymous": true, "function": "_setPrototypeOf._setPrototypeOf", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        o.__proto__ = p;
                SRTlib.send('], "end": "_setPrototypeOf._setPrototypeOf"},');

        return o;
                SRTlib.send('], "end": "_setPrototypeOf._setPrototypeOf"},');

      });
            SRTlib.send('], "end": "_setPrototypeOf"},');

      return _setPrototypeOf(o, p);
            SRTlib.send('], "end": "_setPrototypeOf"},');

    }
    function _getPrototypeOf(o) {
            SRTlib.send(`{ "anonymous": false, "function": "_getPrototypeOf", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                SRTlib.send(`{ "anonymous": true, "function": "_getPrototypeOf._getPrototypeOf", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "_getPrototypeOf._getPrototypeOf"},');

        return o.__proto__ || Object.getPrototypeOf(o);
                SRTlib.send('], "end": "_getPrototypeOf._getPrototypeOf"},');

      };
            SRTlib.send('], "end": "_getPrototypeOf"},');

      return _getPrototypeOf(o);
            SRTlib.send('], "end": "_getPrototypeOf"},');

    }
    var AuthError = (function (_Error) {
            SRTlib.send(`{ "anonymous": true, "function": "AuthError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(AuthError, _Error);
      function AuthError() {
                SRTlib.send(`{ "anonymous": false, "function": "AuthError", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this;
        _this = _Error.call(this, 'Authorization required') || this;
        _this.name = 'AuthError';
        _this.isAuthError = true;
                SRTlib.send('], "end": "AuthError"},');

        return _this;
                SRTlib.send('], "end": "AuthError"},');

      }
            SRTlib.send('], "end": "AuthError"},');

      return AuthError;
            SRTlib.send('], "end": "AuthError"},');

    })(_wrapNativeSuper(Error));
    module.exports = AuthError;
        SRTlib.send('], "end": "emptyKey270"},');

  }, {}],
  240: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey271", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends"},');

        return target;
                SRTlib.send('], "end": "_extends"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var RequestClient = require('./RequestClient');
    var tokenStorage = require('./tokenStorage');
    var _getName = function _getName(id) {
            SRTlib.send(`{ "anonymous": false, "function": "_getName", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_getName"},');

      return id.split('-').map(function (s) {
                SRTlib.send(`{ "anonymous": true, "function": "_getName._getName.ReturnStatement.map.join.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "_getName._getName.ReturnStatement.map.join.map"},');

        return s.charAt(0).toUpperCase() + s.slice(1);
                SRTlib.send('], "end": "_getName._getName.ReturnStatement.map.join.map"},');

      }).join(' ');
            SRTlib.send('], "end": "_getName"},');

    };
    module.exports = (function (_RequestClient) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports17", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Provider, _RequestClient);
      function Provider(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Provider", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _RequestClient.call(this, uppy, opts) || this;
        _this.provider = opts.provider;
        _this.id = _this.provider;
        _this.authProvider = opts.authProvider || _this.provider;
        _this.name = _this.opts.name || _getName(_this.id);
        _this.pluginId = _this.opts.pluginId;
        _this.tokenKey = "companion-" + _this.pluginId + "-auth-token";
                SRTlib.send('], "end": "Provider"},');

        return _this;
                SRTlib.send('], "end": "Provider"},');

      }
      var _proto = Provider.prototype;
      _proto.headers = function headers() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.headers.headers", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this2 = this;
                SRTlib.send('], "end": "module.exports._proto.headers.headers"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.headers.headers.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _RequestClient.prototype.headers.call(_this2).then(function (headers) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.headers.headers.ReturnStatement._RequestClient.prototype.headers.call.then.catch._RequestClient.prototype.headers.call.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this2.getAuthToken().then(function (token) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.headers.headers.ReturnStatement._RequestClient.prototype.headers.call.then.catch._RequestClient.prototype.headers.call.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              resolve(_extends({}, headers, {
                'uppy-auth-token': token
              }));
                            SRTlib.send('], "end": "module.exports._proto.headers.headers.ReturnStatement._RequestClient.prototype.headers.call.then.catch._RequestClient.prototype.headers.call.then.then"},');

            });
                        SRTlib.send('], "end": "module.exports._proto.headers.headers.ReturnStatement._RequestClient.prototype.headers.call.then.catch._RequestClient.prototype.headers.call.then"},');

          }).catch(reject);
                    SRTlib.send('], "end": "module.exports._proto.headers.headers.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._proto.headers.headers"},');

      };
      _proto.onReceiveResponse = function onReceiveResponse(response) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.onReceiveResponse.onReceiveResponse", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        response = _RequestClient.prototype.onReceiveResponse.call(this, response);
        var plugin = this.uppy.getPlugin(this.pluginId);
        var oldAuthenticated = plugin.getPluginState().authenticated;
        var authenticated = oldAuthenticated ? response.status !== 401 : response.status < 400;
        plugin.setPluginState({
          authenticated: authenticated
        });
                SRTlib.send('], "end": "module.exports._proto.onReceiveResponse.onReceiveResponse"},');

        return response;
                SRTlib.send('], "end": "module.exports._proto.onReceiveResponse.onReceiveResponse"},');

      };
      _proto.setAuthToken = function setAuthToken(token) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.setAuthToken.setAuthToken", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.setAuthToken.setAuthToken"},');

        return this.uppy.getPlugin(this.pluginId).storage.setItem(this.tokenKey, token);
                SRTlib.send('], "end": "module.exports._proto.setAuthToken.setAuthToken"},');

      };
      _proto.getAuthToken = function getAuthToken() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.getAuthToken.getAuthToken", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.getAuthToken.getAuthToken"},');

        return this.uppy.getPlugin(this.pluginId).storage.getItem(this.tokenKey);
                SRTlib.send('], "end": "module.exports._proto.getAuthToken.getAuthToken"},');

      };
      _proto.authUrl = function authUrl() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.authUrl.authUrl", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.authUrl.authUrl"},');

        return this.hostname + "/" + this.id + "/connect";
                SRTlib.send('], "end": "module.exports._proto.authUrl.authUrl"},');

      };
      _proto.fileUrl = function fileUrl(id) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.fileUrl.fileUrl", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.fileUrl.fileUrl"},');

        return this.hostname + "/" + this.id + "/get/" + id;
                SRTlib.send('], "end": "module.exports._proto.fileUrl.fileUrl"},');

      };
      _proto.list = function list(directory) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.list.list", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.list.list"},');

        return this.get(this.id + "/list/" + (directory || ''));
                SRTlib.send('], "end": "module.exports._proto.list.list"},');

      };
      _proto.logout = function logout() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.logout.logout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this3 = this;
                SRTlib.send('], "end": "module.exports._proto.logout.logout"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.logout.logout.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this3.get(_this3.id + "/logout").then(function (res) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.logout.logout.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this3.uppy.getPlugin(_this3.pluginId).storage.removeItem(_this3.tokenKey).then(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.logout.logout.ReturnStatement.then.catch.then.storage.removeItem.then.catch.storage.removeItem.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._proto.logout.logout.ReturnStatement.then.catch.then.storage.removeItem.then.catch.storage.removeItem.then"},');

              return resolve(res);
                            SRTlib.send('], "end": "module.exports._proto.logout.logout.ReturnStatement.then.catch.then.storage.removeItem.then.catch.storage.removeItem.then"},');

            }).catch(reject);
                        SRTlib.send('], "end": "module.exports._proto.logout.logout.ReturnStatement.then.catch.then"},');

          }).catch(reject);
                    SRTlib.send('], "end": "module.exports._proto.logout.logout.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._proto.logout.logout"},');

      };
      Provider.initPlugin = function initPlugin(plugin, opts, defaultOpts) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.Provider.initPlugin.initPlugin", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        plugin.type = 'acquirer';
        plugin.files = [];
        if (defaultOpts) {
          plugin.opts = _extends({}, defaultOpts, opts);
        }
        if (opts.serverUrl || opts.serverPattern) {
                    SRTlib.send('], "end": "module.exports.Provider.initPlugin.initPlugin"},');

          throw new Error('`serverUrl` and `serverPattern` have been renamed to `companionUrl` and `companionAllowedHosts` respectively in the 0.30.5 release. Please consult the docs (for example, https://uppy.io/docs/instagram/ for the Instagram plugin) and use the updated options.`');
        }
        if (opts.companionAllowedHosts) {
          var pattern = opts.companionAllowedHosts;
          if (typeof pattern !== 'string' && !Array.isArray(pattern) && !(pattern instanceof RegExp)) {
                        SRTlib.send('], "end": "module.exports.Provider.initPlugin.initPlugin"},');

            throw new TypeError(plugin.id + ": the option \"companionAllowedHosts\" must be one of string, Array, RegExp");
          }
          plugin.opts.companionAllowedHosts = pattern;
        } else {
          if ((/^(?!https?:\/\/).*$/i).test(opts.companionUrl)) {
            plugin.opts.companionAllowedHosts = "https://" + opts.companionUrl.replace(/^\/\//, '');
          } else {
            plugin.opts.companionAllowedHosts = opts.companionUrl;
          }
        }
        plugin.storage = plugin.opts.storage || tokenStorage;
                SRTlib.send('], "end": "module.exports.Provider.initPlugin.initPlugin"},');

      };
            SRTlib.send('], "end": "module.exports17"},');

      return Provider;
            SRTlib.send('], "end": "module.exports17"},');

    })(RequestClient);
        SRTlib.send('], "end": "emptyKey271"},');

  }, {
    "./RequestClient": 241,
    "./tokenStorage": 244
  }],
  241: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey272", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends2"},');

        return target;
                SRTlib.send('], "end": "_extends2"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _defineProperties(target, props) {
            SRTlib.send(`{ "anonymous": false, "function": "_defineProperties", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if (("value" in descriptor)) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
            SRTlib.send('], "end": "_defineProperties"},');

    }
    function _createClass(Constructor, protoProps, staticProps) {
            SRTlib.send(`{ "anonymous": false, "function": "_createClass", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
            SRTlib.send('], "end": "_createClass"},');

      return Constructor;
            SRTlib.send('], "end": "_createClass"},');

    }
    var AuthError = require('./AuthError');
    var NetworkError = require('./../../utils/lib/NetworkError');
    function stripSlash(url) {
            SRTlib.send(`{ "anonymous": false, "function": "stripSlash", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "stripSlash"},');

      return url.replace(/\/$/, '');
            SRTlib.send('], "end": "stripSlash"},');

    }
    module.exports = (_temp = _class = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function RequestClient(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "RequestClient", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.uppy = uppy;
        this.opts = opts;
        this.onReceiveResponse = this.onReceiveResponse.bind(this);
        this.allowedHeaders = ['accept', 'content-type', 'uppy-auth-token'];
        this.preflightDone = false;
                SRTlib.send('], "end": "RequestClient"},');

      }
      var _proto = RequestClient.prototype;
      _proto.headers = function headers() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.headers.headers", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var userHeaders = this.opts.companionHeaders || this.opts.serverHeaders || ({});
                SRTlib.send('], "end": "module.exports._temp._class._proto.headers.headers"},');

        return Promise.resolve(_extends({}, this.defaultHeaders, {}, userHeaders));
                SRTlib.send('], "end": "module.exports._temp._class._proto.headers.headers"},');

      };
      _proto._getPostResponseFunc = function _getPostResponseFunc(skip) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getPostResponseFunc._getPostResponseFunc", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto._getPostResponseFunc._getPostResponseFunc"},');

        return function (response) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getPostResponseFunc._getPostResponseFunc.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!skip) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto._getPostResponseFunc._getPostResponseFunc.ReturnStatement"},');

            return _this.onReceiveResponse(response);
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto._getPostResponseFunc._getPostResponseFunc.ReturnStatement"},');

          return response;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._getPostResponseFunc._getPostResponseFunc.ReturnStatement"},');

        };
                SRTlib.send('], "end": "module.exports._temp._class._proto._getPostResponseFunc._getPostResponseFunc"},');

      };
      _proto.onReceiveResponse = function onReceiveResponse(response) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onReceiveResponse.onReceiveResponse", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var state = this.uppy.getState();
        var companion = state.companion || ({});
        var host = this.opts.companionUrl;
        var headers = response.headers;
        if (headers.has('i-am') && headers.get('i-am') !== companion[host]) {
          var _extends2;
          this.uppy.setState({
            companion: _extends({}, companion, (_extends2 = {}, _extends2[host] = headers.get('i-am'), _extends2))
          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.onReceiveResponse.onReceiveResponse"},');

        return response;
                SRTlib.send('], "end": "module.exports._temp._class._proto.onReceiveResponse.onReceiveResponse"},');

      };
      _proto._getUrl = function _getUrl(url) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getUrl._getUrl", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if ((/^(https?:|)\/\//).test(url)) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._getUrl._getUrl"},');

          return url;
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto._getUrl._getUrl"},');

        return this.hostname + "/" + url;
                SRTlib.send('], "end": "module.exports._temp._class._proto._getUrl._getUrl"},');

      };
      _proto._json = function _json(res) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._json._json", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (res.status === 401) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._json._json"},');

          throw new AuthError();
        }
        if (res.status < 200 || res.status > 300) {
          var errMsg = "Failed request with status: " + res.status + ". " + res.statusText;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._json._json"},');

          return res.json().then(function (errData) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._json._json.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            errMsg = errData.message ? errMsg + " message: " + errData.message : errMsg;
            errMsg = errData.requestId ? errMsg + " request-Id: " + errData.requestId : errMsg;
                        SRTlib.send('], "end": "module.exports._temp._class._proto._json._json.ReturnStatement.then.catch.then"},');

            throw new Error(errMsg);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._json._json.ReturnStatement.then.catch.then"},');

          }).catch(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._json._json.ReturnStatement.then.catch", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto._json._json.ReturnStatement.then.catch"},');

            throw new Error(errMsg);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._json._json.ReturnStatement.then.catch"},');

          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto._json._json"},');

        return res.json();
                SRTlib.send('], "end": "module.exports._temp._class._proto._json._json"},');

      };
      _proto.preflight = function preflight(path) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.preflight.preflight", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this2 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto.preflight.preflight"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (_this2.preflightDone) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement"},');

            return resolve(_this2.allowedHeaders.slice());
          }
          fetch(_this2._getUrl(path), {
            method: 'OPTIONS'
          }).then(function (response) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (response.headers.has('access-control-allow-headers')) {
              _this2.allowedHeaders = response.headers.get('access-control-allow-headers').split(',').map(function (headerName) {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement.then.catch.then._this2.allowedHeaders.response.headers.get.split.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement.then.catch.then._this2.allowedHeaders.response.headers.get.split.map"},');

                return headerName.trim().toLowerCase();
                                SRTlib.send('], "end": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement.then.catch.then._this2.allowedHeaders.response.headers.get.split.map"},');

              });
            }
            _this2.preflightDone = true;
            resolve(_this2.allowedHeaders.slice());
                        SRTlib.send('], "end": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement.then.catch.then"},');

          }).catch(function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this2.uppy.log("[CompanionClient] unable to make preflight request " + err, 'warning');
            _this2.preflightDone = true;
            resolve(_this2.allowedHeaders.slice());
                        SRTlib.send('], "end": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement.then.catch"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto.preflight.preflight.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.preflight.preflight"},');

      };
      _proto.preflightAndHeaders = function preflightAndHeaders(path) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.preflightAndHeaders.preflightAndHeaders", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this3 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto.preflightAndHeaders.preflightAndHeaders"},');

        return Promise.all([this.preflight(path), this.headers()]).then(function (_ref) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.preflightAndHeaders.preflightAndHeaders.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var allowedHeaders = _ref[0], headers = _ref[1];
          Object.keys(headers).forEach(function (header) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.preflightAndHeaders.preflightAndHeaders.ReturnStatement.then.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (allowedHeaders.indexOf(header.toLowerCase()) === -1) {
              _this3.uppy.log("[CompanionClient] excluding unallowed header " + header);
              delete headers[header];
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto.preflightAndHeaders.preflightAndHeaders.ReturnStatement.then.forEach"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto.preflightAndHeaders.preflightAndHeaders.ReturnStatement.then"},');

          return headers;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.preflightAndHeaders.preflightAndHeaders.ReturnStatement.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.preflightAndHeaders.preflightAndHeaders"},');

      };
      _proto.get = function get(path, skipPostResponse) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.get.get", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this4 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto.get.get"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.get.get.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this4.preflightAndHeaders(path).then(function (headers) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            fetch(_this4._getUrl(path), {
              method: 'get',
              headers: headers,
              credentials: 'same-origin'
            }).catch(function (err) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (err.name === 'AbortError') {
                                SRTlib.send('], "end": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

                throw err;
              } else {
                                SRTlib.send('], "end": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

                throw new NetworkError(err);
              }
                            SRTlib.send('], "end": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

            }).then(_this4._getPostResponseFunc(skipPostResponse)).then(function (res) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then"},');

              return _this4._json(res).then(resolve);
                            SRTlib.send('], "end": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then"},');

            }).catch(function (err) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              err = err.isAuthError ? err : new Error("Could not get " + _this4._getUrl(path) + ". " + err);
              reject(err);
                            SRTlib.send('], "end": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then.catch.then.then.catch"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto.get.get.ReturnStatement.then.catch.then"},');

          }).catch(reject);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.get.get.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.get.get"},');

      };
      _proto.post = function post(path, data, skipPostResponse) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.post.post", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var _this5 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto.post.post"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.post.post.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this5.preflightAndHeaders(path).then(function (headers) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            fetch(_this5._getUrl(path), {
              method: 'post',
              headers: headers,
              credentials: 'same-origin',
              body: JSON.stringify(data)
            }).catch(function (err) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (err.name === 'AbortError') {
                                SRTlib.send('], "end": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

                throw err;
              } else {
                                SRTlib.send('], "end": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

                throw new NetworkError(err);
              }
                            SRTlib.send('], "end": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

            }).then(_this5._getPostResponseFunc(skipPostResponse)).then(function (res) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then"},');

              return _this5._json(res).then(resolve);
                            SRTlib.send('], "end": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then"},');

            }).catch(function (err) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              err = err.isAuthError ? err : new Error("Could not post " + _this5._getUrl(path) + ". " + err);
              reject(err);
                            SRTlib.send('], "end": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then.catch.then.then.catch"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto.post.post.ReturnStatement.then.catch.then"},');

          }).catch(reject);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.post.post.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.post.post"},');

      };
      _proto.delete = function _delete(path, data, skipPostResponse) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.delete._delete", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var _this6 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.delete._delete.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this6.preflightAndHeaders(path).then(function (headers) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            fetch(_this6.hostname + "/" + path, {
              method: 'delete',
              headers: headers,
              credentials: 'same-origin',
              body: data ? JSON.stringify(data) : null
            }).catch(function (err) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (err.name === 'AbortError') {
                                SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

                throw err;
              } else {
                                SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

                throw new NetworkError(err);
              }
                            SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then.catch.then.catch"},');

            }).then(_this6._getPostResponseFunc(skipPostResponse)).then(function (res) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then"},');

              return _this6._json(res).then(resolve);
                            SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch.catch.then.then"},');

            }).catch(function (err) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              err = err.isAuthError ? err : new Error("Could not delete " + _this6._getUrl(path) + ". " + err);
              reject(err);
                            SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then.catch.then.then.catch"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete.ReturnStatement.then.catch.then"},');

          }).catch(reject);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.delete._delete"},');

      };
      _createClass(RequestClient, [{
        key: "hostname",
        get: function get() {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._createClass.get.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this$uppy$getState = this.uppy.getState(), companion = _this$uppy$getState.companion;
          var host = this.opts.companionUrl;
                    SRTlib.send('], "end": "module.exports._temp._class._createClass.get.get"},');

          return stripSlash(companion && companion[host] ? companion[host] : host);
                    SRTlib.send('], "end": "module.exports._temp._class._createClass.get.get"},');

        }
      }, {
        key: "defaultHeaders",
        get: function get() {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._createClass.get.get2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._createClass.get.get2"},');

          return {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            'Uppy-Versions': "@uppy/companion-client=" + RequestClient.VERSION
          };
                    SRTlib.send('], "end": "module.exports._temp._class._createClass.get.get2"},');

        }
      }]);
            SRTlib.send('], "end": "module.exports._temp._class"},');

      return RequestClient;
            SRTlib.send('], "end": "module.exports._temp._class"},');

    })(), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey272"},');

  }, {
    "../package.json": 238,
    "./../../utils/lib/NetworkError": 318,
    "./AuthError": 239
  }],
  242: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey273", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var ee = require('namespace-emitter');
    module.exports = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports18", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function UppySocket(opts) {
                SRTlib.send(`{ "anonymous": false, "function": "UppySocket", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.opts = opts;
        this._queued = [];
        this.isOpen = false;
        this.emitter = ee();
        this._handleMessage = this._handleMessage.bind(this);
        this.close = this.close.bind(this);
        this.emit = this.emit.bind(this);
        this.on = this.on.bind(this);
        this.once = this.once.bind(this);
        this.send = this.send.bind(this);
        if (!opts || opts.autoOpen !== false) {
          this.open();
        }
                SRTlib.send('], "end": "UppySocket"},');

      }
      var _proto = UppySocket.prototype;
      _proto.open = function open() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.open.open", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this = this;
        this.socket = new WebSocket(this.opts.target);
        this.socket.onopen = function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.open.open.socket.onopen", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this.isOpen = true;
          while (_this._queued.length > 0 && _this.isOpen) {
            var first = _this._queued[0];
            _this.send(first.action, first.payload);
            _this._queued = _this._queued.slice(1);
          }
                    SRTlib.send('], "end": "module.exports._proto.open.open.socket.onopen"},');

        };
        this.socket.onclose = function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.open.open.socket.onclose", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this.isOpen = false;
                    SRTlib.send('], "end": "module.exports._proto.open.open.socket.onclose"},');

        };
        this.socket.onmessage = this._handleMessage;
                SRTlib.send('], "end": "module.exports._proto.open.open"},');

      };
      _proto.close = function close() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.close.close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.socket) {
          this.socket.close();
        }
                SRTlib.send('], "end": "module.exports._proto.close.close"},');

      };
      _proto.send = function send(action, payload) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.send.send", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!this.isOpen) {
          this._queued.push({
            action: action,
            payload: payload
          });
                    SRTlib.send('], "end": "module.exports._proto.send.send"},');

          return;
        }
        this.socket.send(JSON.stringify({
          action: action,
          payload: payload
        }));
                SRTlib.send('], "end": "module.exports._proto.send.send"},');

      };
      _proto.on = function on(action, handler) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.on.on", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.emitter.on(action, handler);
                SRTlib.send('], "end": "module.exports._proto.on.on"},');

      };
      _proto.emit = function emit(action, payload) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.emit.emit", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.emitter.emit(action, payload);
                SRTlib.send('], "end": "module.exports._proto.emit.emit"},');

      };
      _proto.once = function once(action, handler) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.once.once", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.emitter.once(action, handler);
                SRTlib.send('], "end": "module.exports._proto.once.once"},');

      };
      _proto._handleMessage = function _handleMessage(e) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._handleMessage._handleMessage", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        try {
          var message = JSON.parse(e.data);
          this.emit(message.action, message.payload);
        } catch (err) {
          console.log(err);
        }
                SRTlib.send('], "end": "module.exports._proto._handleMessage._handleMessage"},');

      };
            SRTlib.send('], "end": "module.exports18"},');

      return UppySocket;
            SRTlib.send('], "end": "module.exports18"},');

    })();
        SRTlib.send('], "end": "emptyKey273"},');

  }, {
    "namespace-emitter": 146
  }],
  243: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey274", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    var RequestClient = require('./RequestClient');
    var Provider = require('./Provider');
    var Socket = require('./Socket');
    module.exports = {
      RequestClient: RequestClient,
      Provider: Provider,
      Socket: Socket
    };
        SRTlib.send('], "end": "emptyKey274"},');

  }, {
    "./Provider": 240,
    "./RequestClient": 241,
    "./Socket": 242
  }],
  244: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey275", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    'use strict';
    module.exports.setItem = function (key, value) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.setItem", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "module.exports.setItem"},');

      return new Promise(function (resolve) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.setItem.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        localStorage.setItem(key, value);
        resolve();
                SRTlib.send('], "end": "module.exports.setItem.ReturnStatement"},');

      });
            SRTlib.send('], "end": "module.exports.setItem"},');

    };
    module.exports.getItem = function (key) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getItem", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.getItem"},');

      return Promise.resolve(localStorage.getItem(key));
            SRTlib.send('], "end": "module.exports.getItem"},');

    };
    module.exports.removeItem = function (key) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.removeItem", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.removeItem"},');

      return new Promise(function (resolve) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.removeItem.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        localStorage.removeItem(key);
        resolve();
                SRTlib.send('], "end": "module.exports.removeItem.ReturnStatement"},');

      });
            SRTlib.send('], "end": "module.exports.removeItem"},');

    };
        SRTlib.send('], "end": "emptyKey275"},');

  }, {}],
  245: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey276", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function prettierBytes(num) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.prettierBytes", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof num !== 'number' || isNaN(num)) {
                SRTlib.send('], "end": "module.exports.prettierBytes"},');

        throw new TypeError('Expected a number, got ' + typeof num);
      }
      var neg = num < 0;
      var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
      if (neg) {
        num = -num;
      }
      if (num < 1) {
                SRTlib.send('], "end": "module.exports.prettierBytes"},');

        return (neg ? '-' : '') + num + ' B';
      }
      var exponent = Math.min(Math.floor(Math.log(num) / Math.log(1024)), units.length - 1);
      num = Number(num / Math.pow(1024, exponent));
      var unit = units[exponent];
      if (num >= 10 || num % 1 === 0) {
                SRTlib.send('], "end": "module.exports.prettierBytes"},');

        return (neg ? '-' : '') + num.toFixed(0) + ' ' + unit;
      } else {
                SRTlib.send('], "end": "module.exports.prettierBytes"},');

        return (neg ? '-' : '') + num.toFixed(1) + ' ' + unit;
      }
            SRTlib.send('], "end": "module.exports.prettierBytes"},');

    };
        SRTlib.send('], "end": "emptyKey276"},');

  }, {}],
  246: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey277", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/core",
      "description": "Core module for the extensible JavaScript file upload widget with support for drag&drop, resumable uploads, previews, restrictions, file processing/encoding, remote providers like Instagram, Dropbox, Google Drive, S3 and more :dog:",
      "version": "1.10.5",
      "license": "MIT",
      "main": "lib/index.js",
      "style": "dist/style.min.css",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@transloadit/prettier-bytes": "0.0.7",
        "@uppy/store-default": "file:../store-default",
        "@uppy/utils": "file:../utils",
        "cuid": "^2.1.1",
        "lodash.throttle": "^4.1.1",
        "mime-match": "^1.0.2",
        "namespace-emitter": "^2.0.1",
        "preact": "8.2.9"
      }
    };
        SRTlib.send('], "end": "emptyKey277"},');

  }, {}],
  247: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey278", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends3"},');

        return target;
                SRTlib.send('], "end": "_extends3"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var preact = require('preact');
    var findDOMElement = require('./../../utils/lib/findDOMElement');
    function debounce(fn) {
            SRTlib.send(`{ "anonymous": false, "function": "debounce", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var calling = null;
      var latestArgs = null;
            SRTlib.send('], "end": "debounce"},');

      return function () {
                SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement15", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        latestArgs = args;
        if (!calling) {
          calling = Promise.resolve().then(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.calling.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            calling = null;
                        SRTlib.send('], "end": "ReturnStatement.calling.then"},');

            return fn.apply(void 0, latestArgs);
                        SRTlib.send('], "end": "ReturnStatement.calling.then"},');

          });
        }
                SRTlib.send('], "end": "ReturnStatement15"},');

        return calling;
                SRTlib.send('], "end": "ReturnStatement15"},');

      };
            SRTlib.send('], "end": "debounce"},');

    }
    module.exports = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports19", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function Plugin(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Plugin", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.uppy = uppy;
        this.opts = opts || ({});
        this.update = this.update.bind(this);
        this.mount = this.mount.bind(this);
        this.install = this.install.bind(this);
        this.uninstall = this.uninstall.bind(this);
                SRTlib.send('], "end": "Plugin"},');

      }
      var _proto = Plugin.prototype;
      _proto.getPluginState = function getPluginState() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.getPluginState.getPluginState", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this$uppy$getState = this.uppy.getState(), plugins = _this$uppy$getState.plugins;
                SRTlib.send('], "end": "module.exports._proto.getPluginState.getPluginState"},');

        return plugins[this.id] || ({});
                SRTlib.send('], "end": "module.exports._proto.getPluginState.getPluginState"},');

      };
      _proto.setPluginState = function setPluginState(update) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.setPluginState.setPluginState", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _extends2;
        var _this$uppy$getState2 = this.uppy.getState(), plugins = _this$uppy$getState2.plugins;
        this.uppy.setState({
          plugins: _extends({}, plugins, (_extends2 = {}, _extends2[this.id] = _extends({}, plugins[this.id], {}, update), _extends2))
        });
                SRTlib.send('], "end": "module.exports._proto.setPluginState.setPluginState"},');

      };
      _proto.setOptions = function setOptions(newOpts) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.setOptions.setOptions", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.opts = _extends({}, this.opts, {}, newOpts);
        this.setPluginState();
                SRTlib.send('], "end": "module.exports._proto.setOptions.setOptions"},');

      };
      _proto.update = function update(state) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.update.update", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof this.el === 'undefined') {
                    SRTlib.send('], "end": "module.exports._proto.update.update"},');

          return;
        }
        if (this._updateUI) {
          this._updateUI(state);
        }
                SRTlib.send('], "end": "module.exports._proto.update.update"},');

      };
      _proto.afterUpdate = function afterUpdate() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.afterUpdate.afterUpdate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.afterUpdate.afterUpdate"},');

      };
      _proto.onMount = function onMount() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.onMount.onMount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.onMount.onMount"},');

      };
      _proto.mount = function mount(target, plugin) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.mount.mount", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this = this;
        var callerPluginName = plugin.id;
        var targetElement = findDOMElement(target);
        if (targetElement) {
          this.isTargetDOMEl = true;
          this.rerender = function (state) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.mount.mount.rerender", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (!_this.uppy.getPlugin(_this.id)) {
                            SRTlib.send('], "end": "module.exports._proto.mount.mount.rerender"},');

              return;
            }
            _this.el = preact.render(_this.render(state), targetElement, _this.el);
            _this.afterUpdate();
                        SRTlib.send('], "end": "module.exports._proto.mount.mount.rerender"},');

          };
          this._updateUI = debounce(this.rerender);
          this.uppy.log("Installing " + callerPluginName + " to a DOM element '" + target + "'");
          if (this.opts.replaceTargetContent) {
            targetElement.innerHTML = '';
          }
          this.el = preact.render(this.render(this.uppy.getState()), targetElement);
          this.onMount();
                    SRTlib.send('], "end": "module.exports._proto.mount.mount"},');

          return this.el;
        }
        var targetPlugin;
        if (typeof target === 'object' && target instanceof Plugin) {
          targetPlugin = target;
        } else if (typeof target === 'function') {
          var Target = target;
          this.uppy.iteratePlugins(function (plugin) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.mount.mount.uppy.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (plugin instanceof Target) {
              targetPlugin = plugin;
                            SRTlib.send('], "end": "module.exports._proto.mount.mount.uppy.iteratePlugins"},');

              return false;
            }
                        SRTlib.send('], "end": "module.exports._proto.mount.mount.uppy.iteratePlugins"},');

          });
        }
        if (targetPlugin) {
          this.uppy.log("Installing " + callerPluginName + " to " + targetPlugin.id);
          this.parent = targetPlugin;
          this.el = targetPlugin.addTarget(plugin);
          this.onMount();
                    SRTlib.send('], "end": "module.exports._proto.mount.mount"},');

          return this.el;
        }
        this.uppy.log("Not installing " + callerPluginName);
        var message = "Invalid target option given to " + callerPluginName + ".";
        if (typeof target === 'function') {
          message += ' The given target is not a Plugin class. ' + 'Please check that you\'re not specifying a React Component instead of a plugin. ' + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: ' + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.';
        } else {
          message += 'If you meant to target an HTML element, please make sure that the element exists. ' + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. ' + '(see https://github.com/transloadit/uppy/issues/1042)\n\n' + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.';
        }
                SRTlib.send('], "end": "module.exports._proto.mount.mount"},');

        throw new Error(message);
                SRTlib.send('], "end": "module.exports._proto.mount.mount"},');

      };
      _proto.render = function render(state) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.render.render", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.render.render"},');

        throw new Error('Extend the render method to add your plugin to a DOM element');
                SRTlib.send('], "end": "module.exports._proto.render.render"},');

      };
      _proto.addTarget = function addTarget(plugin) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.addTarget.addTarget", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.addTarget.addTarget"},');

        throw new Error('Extend the addTarget method to add your plugin to another plugin\'s target');
                SRTlib.send('], "end": "module.exports._proto.addTarget.addTarget"},');

      };
      _proto.unmount = function unmount() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.unmount.unmount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.isTargetDOMEl && this.el && this.el.parentNode) {
          this.el.parentNode.removeChild(this.el);
        }
                SRTlib.send('], "end": "module.exports._proto.unmount.unmount"},');

      };
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.install.install", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.install.install"},');

      };
      _proto.uninstall = function uninstall() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.uninstall.uninstall", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.unmount();
                SRTlib.send('], "end": "module.exports._proto.uninstall.uninstall"},');

      };
            SRTlib.send('], "end": "module.exports19"},');

      return Plugin;
            SRTlib.send('], "end": "module.exports19"},');

    })();
        SRTlib.send('], "end": "emptyKey278"},');

  }, {
    "./../../utils/lib/findDOMElement": 325,
    "preact": 160
  }],
  248: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey279", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends4"},');

        return target;
                SRTlib.send('], "end": "_extends4"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _defineProperties(target, props) {
            SRTlib.send(`{ "anonymous": false, "function": "_defineProperties", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if (("value" in descriptor)) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
            SRTlib.send('], "end": "_defineProperties"},');

    }
    function _createClass(Constructor, protoProps, staticProps) {
            SRTlib.send(`{ "anonymous": false, "function": "_createClass", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
            SRTlib.send('], "end": "_createClass"},');

      return Constructor;
            SRTlib.send('], "end": "_createClass"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    function _wrapNativeSuper(Class) {
            SRTlib.send(`{ "anonymous": false, "function": "_wrapNativeSuper", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var _cache = typeof Map === "function" ? new Map() : undefined;
      _wrapNativeSuper = function _wrapNativeSuper(Class) {
                SRTlib.send(`{ "anonymous": true, "function": "_wrapNativeSuper._wrapNativeSuper2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (Class === null || !_isNativeFunction(Class)) {
                    SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper2"},');

          return Class;
        }
        if (typeof Class !== "function") {
                    SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper2"},');

          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) {
                        SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper2"},');

            return _cache.get(Class);
          }
          _cache.set(Class, Wrapper);
        }
        function Wrapper() {
                    SRTlib.send(`{ "anonymous": false, "function": "Wrapper", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Wrapper"},');

          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                    SRTlib.send('], "end": "Wrapper"},');

        }
        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
                SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper2"},');

        return _setPrototypeOf(Wrapper, Class);
                SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper2"},');

      };
            SRTlib.send('], "end": "_wrapNativeSuper"},');

      return _wrapNativeSuper(Class);
            SRTlib.send('], "end": "_wrapNativeSuper"},');

    }
    function _construct(Parent, args, Class) {
            SRTlib.send(`{ "anonymous": false, "function": "_construct", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
                    SRTlib.send(`{ "anonymous": true, "function": "_construct._construct2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
                    SRTlib.send('], "end": "_construct._construct2"},');

          return instance;
                    SRTlib.send('], "end": "_construct._construct2"},');

        };
      }
            SRTlib.send('], "end": "_construct"},');

      return _construct.apply(null, arguments);
            SRTlib.send('], "end": "_construct"},');

    }
    function _isNativeReflectConstruct() {
            SRTlib.send(`{ "anonymous": false, "function": "_isNativeReflectConstruct", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (typeof Reflect === "undefined" || !Reflect.construct) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
      if (Reflect.construct.sham) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
      if (typeof Proxy === "function") {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return true;
      }
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Date.prototype.toString.call2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Date.prototype.toString.call2"},');

        }));
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return true;
      } catch (e) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
            SRTlib.send('], "end": "_isNativeReflectConstruct"},');

    }
    function _isNativeFunction(fn) {
            SRTlib.send(`{ "anonymous": false, "function": "_isNativeFunction", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_isNativeFunction"},');

      return Function.toString.call(fn).indexOf("[native code]") !== -1;
            SRTlib.send('], "end": "_isNativeFunction"},');

    }
    function _setPrototypeOf(o, p) {
            SRTlib.send(`{ "anonymous": false, "function": "_setPrototypeOf", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      _setPrototypeOf = Object.setPrototypeOf || (function _setPrototypeOf(o, p) {
                SRTlib.send(`{ "anonymous": true, "function": "_setPrototypeOf._setPrototypeOf2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        o.__proto__ = p;
                SRTlib.send('], "end": "_setPrototypeOf._setPrototypeOf2"},');

        return o;
                SRTlib.send('], "end": "_setPrototypeOf._setPrototypeOf2"},');

      });
            SRTlib.send('], "end": "_setPrototypeOf"},');

      return _setPrototypeOf(o, p);
            SRTlib.send('], "end": "_setPrototypeOf"},');

    }
    function _getPrototypeOf(o) {
            SRTlib.send(`{ "anonymous": false, "function": "_getPrototypeOf", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                SRTlib.send(`{ "anonymous": true, "function": "_getPrototypeOf._getPrototypeOf2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "_getPrototypeOf._getPrototypeOf2"},');

        return o.__proto__ || Object.getPrototypeOf(o);
                SRTlib.send('], "end": "_getPrototypeOf._getPrototypeOf2"},');

      };
            SRTlib.send('], "end": "_getPrototypeOf"},');

      return _getPrototypeOf(o);
            SRTlib.send('], "end": "_getPrototypeOf"},');

    }
    var Translator = require('./../../utils/lib/Translator');
    var ee = require('namespace-emitter');
    var cuid = require('cuid');
    var throttle = require('lodash.throttle');
    var prettierBytes = require('@transloadit/prettier-bytes');
    var match = require('mime-match');
    var DefaultStore = require('./../../store-default');
    var getFileType = require('./../../utils/lib/getFileType');
    var getFileNameAndExtension = require('./../../utils/lib/getFileNameAndExtension');
    var generateFileID = require('./../../utils/lib/generateFileID');
    var supportsUploadProgress = require('./supportsUploadProgress');
    var _require = require('./loggers'), justErrorsLogger = _require.justErrorsLogger, debugLogger = _require.debugLogger;
    var Plugin = require('./Plugin');
    var RestrictionError = (function (_Error) {
            SRTlib.send(`{ "anonymous": true, "function": "RestrictionError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(RestrictionError, _Error);
      function RestrictionError() {
                SRTlib.send(`{ "anonymous": false, "function": "RestrictionError", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _Error.call.apply(_Error, [this].concat(args)) || this;
        _this.isRestriction = true;
                SRTlib.send('], "end": "RestrictionError"},');

        return _this;
                SRTlib.send('], "end": "RestrictionError"},');

      }
            SRTlib.send('], "end": "RestrictionError"},');

      return RestrictionError;
            SRTlib.send('], "end": "RestrictionError"},');

    })(_wrapNativeSuper(Error));
    var Uppy = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "Uppy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function Uppy(opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Uppy", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this2 = this;
        this.defaultLocale = {
          strings: {
            addBulkFilesFailed: {
              0: 'Failed to add %{smart_count} file due to an internal error',
              1: 'Failed to add %{smart_count} files due to internal errors'
            },
            youCanOnlyUploadX: {
              0: 'You can only upload %{smart_count} file',
              1: 'You can only upload %{smart_count} files'
            },
            youHaveToAtLeastSelectX: {
              0: 'You have to select at least %{smart_count} file',
              1: 'You have to select at least %{smart_count} files'
            },
            exceedsSize2: '%{backwardsCompat} %{size}',
            exceedsSize: 'This file exceeds maximum allowed size of',
            youCanOnlyUploadFileTypes: 'You can only upload: %{types}',
            noNewAlreadyUploading: 'Cannot add new files: already uploading',
            noDuplicates: 'Cannot add the duplicate file \'%{fileName}\', it already exists',
            companionError: 'Connection with Companion failed',
            companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',
            failedToUpload: 'Failed to upload %{file}',
            noInternetConnection: 'No Internet connection',
            connectedToInternet: 'Connected to the Internet',
            noFilesFound: 'You have no files or folders here',
            selectX: {
              0: 'Select %{smart_count}',
              1: 'Select %{smart_count}'
            },
            selectAllFilesFromFolderNamed: 'Select all files from folder %{name}',
            unselectAllFilesFromFolderNamed: 'Unselect all files from folder %{name}',
            selectFileNamed: 'Select file %{name}',
            unselectFileNamed: 'Unselect file %{name}',
            openFolderNamed: 'Open folder %{name}',
            cancel: 'Cancel',
            logOut: 'Log out',
            filter: 'Filter',
            resetFilter: 'Reset filter',
            loading: 'Loading...',
            authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',
            authenticateWith: 'Connect to %{pluginName}',
            emptyFolderAdded: 'No files were added from empty folder',
            folderAdded: {
              0: 'Added %{smart_count} file from %{folder}',
              1: 'Added %{smart_count} files from %{folder}'
            }
          }
        };
        var defaultOptions = {
          id: 'uppy',
          autoProceed: false,
          allowMultipleUploads: true,
          debug: false,
          restrictions: {
            maxFileSize: null,
            maxNumberOfFiles: null,
            minNumberOfFiles: null,
            allowedFileTypes: null
          },
          meta: {},
          onBeforeFileAdded: function onBeforeFileAdded(currentFile, files) {
                        SRTlib.send(`{ "anonymous": true, "function": "defaultOptions.onBeforeFileAdded.onBeforeFileAdded", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                        SRTlib.send('], "end": "defaultOptions.onBeforeFileAdded.onBeforeFileAdded"},');

            return currentFile;
                        SRTlib.send('], "end": "defaultOptions.onBeforeFileAdded.onBeforeFileAdded"},');

          },
          onBeforeUpload: function onBeforeUpload(files) {
                        SRTlib.send(`{ "anonymous": true, "function": "defaultOptions.onBeforeUpload.onBeforeUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "defaultOptions.onBeforeUpload.onBeforeUpload"},');

            return files;
                        SRTlib.send('], "end": "defaultOptions.onBeforeUpload.onBeforeUpload"},');

          },
          store: DefaultStore(),
          logger: justErrorsLogger
        };
        this.opts = _extends({}, defaultOptions, {}, opts, {
          restrictions: _extends({}, defaultOptions.restrictions, {}, opts && opts.restrictions)
        });
        if (opts && opts.logger && opts.debug) {
          this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');
        } else if (opts && opts.debug) {
          this.opts.logger = debugLogger;
        }
        this.log("Using Core v" + this.constructor.VERSION);
        if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {
                    SRTlib.send('], "end": "Uppy"},');

          throw new TypeError('`restrictions.allowedFileTypes` must be an array');
        }
        this.i18nInit();
        this.plugins = {};
        this.getState = this.getState.bind(this);
        this.getPlugin = this.getPlugin.bind(this);
        this.setFileMeta = this.setFileMeta.bind(this);
        this.setFileState = this.setFileState.bind(this);
        this.log = this.log.bind(this);
        this.info = this.info.bind(this);
        this.hideInfo = this.hideInfo.bind(this);
        this.addFile = this.addFile.bind(this);
        this.removeFile = this.removeFile.bind(this);
        this.pauseResume = this.pauseResume.bind(this);
        this._calculateProgress = throttle(this._calculateProgress.bind(this), 500, {
          leading: true,
          trailing: true
        });
        this.updateOnlineStatus = this.updateOnlineStatus.bind(this);
        this.resetProgress = this.resetProgress.bind(this);
        this.pauseAll = this.pauseAll.bind(this);
        this.resumeAll = this.resumeAll.bind(this);
        this.retryAll = this.retryAll.bind(this);
        this.cancelAll = this.cancelAll.bind(this);
        this.retryUpload = this.retryUpload.bind(this);
        this.upload = this.upload.bind(this);
        this.emitter = ee();
        this.on = this.on.bind(this);
        this.off = this.off.bind(this);
        this.once = this.emitter.once.bind(this.emitter);
        this.emit = this.emitter.emit.bind(this.emitter);
        this.preProcessors = [];
        this.uploaders = [];
        this.postProcessors = [];
        this.store = this.opts.store;
        this.setState({
          plugins: {},
          files: {},
          currentUploads: {},
          allowNewUpload: true,
          capabilities: {
            uploadProgress: supportsUploadProgress(),
            individualCancellation: true,
            resumableUploads: false
          },
          totalProgress: 0,
          meta: _extends({}, this.opts.meta),
          info: {
            isHidden: true,
            type: 'info',
            message: ''
          }
        });
        this._storeUnsubscribe = this.store.subscribe(function (prevState, nextState, patch) {
                    SRTlib.send(`{ "anonymous": true, "function": "_storeUnsubscribe.store.subscribe", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          _this2.emit('state-update', prevState, nextState, patch);
          _this2.updateAll(nextState);
                    SRTlib.send('], "end": "_storeUnsubscribe.store.subscribe"},');

        });
        if (this.opts.debug && typeof window !== 'undefined') {
          window[this.opts.id] = this;
        }
        this._addListeners();
                SRTlib.send('], "end": "Uppy"},');

      }
      var _proto = Uppy.prototype;
      _proto.on = function on(event, callback) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.on.on", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.emitter.on(event, callback);
                SRTlib.send('], "end": "Uppy._proto.on.on"},');

        return this;
                SRTlib.send('], "end": "Uppy._proto.on.on"},');

      };
      _proto.off = function off(event, callback) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.off.off", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.emitter.off(event, callback);
                SRTlib.send('], "end": "Uppy._proto.off.off"},');

        return this;
                SRTlib.send('], "end": "Uppy._proto.off.off"},');

      };
      _proto.updateAll = function updateAll(state) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.updateAll.updateAll", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.iteratePlugins(function (plugin) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.updateAll.updateAll.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          plugin.update(state);
                    SRTlib.send('], "end": "Uppy._proto.updateAll.updateAll.iteratePlugins"},');

        });
                SRTlib.send('], "end": "Uppy._proto.updateAll.updateAll"},');

      };
      _proto.setState = function setState(patch) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.setState.setState", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.store.setState(patch);
                SRTlib.send('], "end": "Uppy._proto.setState.setState"},');

      };
      _proto.getState = function getState() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.getState.getState", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "Uppy._proto.getState.getState"},');

        return this.store.getState();
                SRTlib.send('], "end": "Uppy._proto.getState.getState"},');

      };
      _proto.setFileState = function setFileState(fileID, state) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.setFileState.setFileState", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _extends2;
        if (!this.getState().files[fileID]) {
                    SRTlib.send('], "end": "Uppy._proto.setFileState.setFileState"},');

          throw new Error("Can\u2019t set state for " + fileID + " (the file could have been removed)");
        }
        this.setState({
          files: _extends({}, this.getState().files, (_extends2 = {}, _extends2[fileID] = _extends({}, this.getState().files[fileID], state), _extends2))
        });
                SRTlib.send('], "end": "Uppy._proto.setFileState.setFileState"},');

      };
      _proto.i18nInit = function i18nInit() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.i18nInit.i18nInit", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.translator = new Translator([this.defaultLocale, this.opts.locale]);
        this.locale = this.translator.locale;
        this.i18n = this.translator.translate.bind(this.translator);
        this.i18nArray = this.translator.translateArray.bind(this.translator);
                SRTlib.send('], "end": "Uppy._proto.i18nInit.i18nInit"},');

      };
      _proto.setOptions = function setOptions(newOpts) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.setOptions.setOptions", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.opts = _extends({}, this.opts, {}, newOpts, {
          restrictions: _extends({}, this.opts.restrictions, {}, newOpts && newOpts.restrictions)
        });
        if (newOpts.meta) {
          this.setMeta(newOpts.meta);
        }
        this.i18nInit();
        if (newOpts.locale) {
          this.iteratePlugins(function (plugin) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.setOptions.setOptions.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            plugin.setOptions();
                        SRTlib.send('], "end": "Uppy._proto.setOptions.setOptions.iteratePlugins"},');

          });
        }
        this.setState();
                SRTlib.send('], "end": "Uppy._proto.setOptions.setOptions"},');

      };
      _proto.resetProgress = function resetProgress() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.resetProgress.resetProgress", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var defaultProgress = {
          percentage: 0,
          bytesUploaded: 0,
          uploadComplete: false,
          uploadStarted: null
        };
        var files = _extends({}, this.getState().files);
        var updatedFiles = {};
        Object.keys(files).forEach(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.resetProgress.resetProgress.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var updatedFile = _extends({}, files[fileID]);
          updatedFile.progress = _extends({}, updatedFile.progress, defaultProgress);
          updatedFiles[fileID] = updatedFile;
                    SRTlib.send('], "end": "Uppy._proto.resetProgress.resetProgress.forEach"},');

        });
        this.setState({
          files: updatedFiles,
          totalProgress: 0
        });
        this.emit('reset-progress');
                SRTlib.send('], "end": "Uppy._proto.resetProgress.resetProgress"},');

      };
      _proto.addPreProcessor = function addPreProcessor(fn) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addPreProcessor.addPreProcessor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.preProcessors.push(fn);
                SRTlib.send('], "end": "Uppy._proto.addPreProcessor.addPreProcessor"},');

      };
      _proto.removePreProcessor = function removePreProcessor(fn) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removePreProcessor.removePreProcessor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var i = this.preProcessors.indexOf(fn);
        if (i !== -1) {
          this.preProcessors.splice(i, 1);
        }
                SRTlib.send('], "end": "Uppy._proto.removePreProcessor.removePreProcessor"},');

      };
      _proto.addPostProcessor = function addPostProcessor(fn) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addPostProcessor.addPostProcessor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.postProcessors.push(fn);
                SRTlib.send('], "end": "Uppy._proto.addPostProcessor.addPostProcessor"},');

      };
      _proto.removePostProcessor = function removePostProcessor(fn) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removePostProcessor.removePostProcessor", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var i = this.postProcessors.indexOf(fn);
        if (i !== -1) {
          this.postProcessors.splice(i, 1);
        }
                SRTlib.send('], "end": "Uppy._proto.removePostProcessor.removePostProcessor"},');

      };
      _proto.addUploader = function addUploader(fn) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addUploader.addUploader", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.uploaders.push(fn);
                SRTlib.send('], "end": "Uppy._proto.addUploader.addUploader"},');

      };
      _proto.removeUploader = function removeUploader(fn) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removeUploader.removeUploader", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var i = this.uploaders.indexOf(fn);
        if (i !== -1) {
          this.uploaders.splice(i, 1);
        }
                SRTlib.send('], "end": "Uppy._proto.removeUploader.removeUploader"},');

      };
      _proto.setMeta = function setMeta(data) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.setMeta.setMeta", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var updatedMeta = _extends({}, this.getState().meta, data);
        var updatedFiles = _extends({}, this.getState().files);
        Object.keys(updatedFiles).forEach(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.setMeta.setMeta.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          updatedFiles[fileID] = _extends({}, updatedFiles[fileID], {
            meta: _extends({}, updatedFiles[fileID].meta, data)
          });
                    SRTlib.send('], "end": "Uppy._proto.setMeta.setMeta.forEach"},');

        });
        this.log('Adding metadata:');
        this.log(data);
        this.setState({
          meta: updatedMeta,
          files: updatedFiles
        });
                SRTlib.send('], "end": "Uppy._proto.setMeta.setMeta"},');

      };
      _proto.setFileMeta = function setFileMeta(fileID, data) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.setFileMeta.setFileMeta", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var updatedFiles = _extends({}, this.getState().files);
        if (!updatedFiles[fileID]) {
          this.log('Was trying to set metadata for a file that has been removed: ', fileID);
                    SRTlib.send('], "end": "Uppy._proto.setFileMeta.setFileMeta"},');

          return;
        }
        var newMeta = _extends({}, updatedFiles[fileID].meta, data);
        updatedFiles[fileID] = _extends({}, updatedFiles[fileID], {
          meta: newMeta
        });
        this.setState({
          files: updatedFiles
        });
                SRTlib.send('], "end": "Uppy._proto.setFileMeta.setFileMeta"},');

      };
      _proto.getFile = function getFile(fileID) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.getFile.getFile", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "Uppy._proto.getFile.getFile"},');

        return this.getState().files[fileID];
                SRTlib.send('], "end": "Uppy._proto.getFile.getFile"},');

      };
      _proto.getFiles = function getFiles() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.getFiles.getFiles", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this$getState = this.getState(), files = _this$getState.files;
                SRTlib.send('], "end": "Uppy._proto.getFiles.getFiles"},');

        return Object.keys(files).map(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.getFiles.getFiles.ReturnStatement.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto.getFiles.getFiles.ReturnStatement.map"},');

          return files[fileID];
                    SRTlib.send('], "end": "Uppy._proto.getFiles.getFiles.ReturnStatement.map"},');

        });
                SRTlib.send('], "end": "Uppy._proto.getFiles.getFiles"},');

      };
      _proto._checkMinNumberOfFiles = function _checkMinNumberOfFiles(files) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._checkMinNumberOfFiles._checkMinNumberOfFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var minNumberOfFiles = this.opts.restrictions.minNumberOfFiles;
        if (Object.keys(files).length < minNumberOfFiles) {
                    SRTlib.send('], "end": "Uppy._proto._checkMinNumberOfFiles._checkMinNumberOfFiles"},');

          throw new RestrictionError("" + this.i18n('youHaveToAtLeastSelectX', {
            smart_count: minNumberOfFiles
          }));
        }
                SRTlib.send('], "end": "Uppy._proto._checkMinNumberOfFiles._checkMinNumberOfFiles"},');

      };
      _proto._checkRestrictions = function _checkRestrictions(files, file) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._checkRestrictions._checkRestrictions", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this$opts$restrictio = this.opts.restrictions, maxFileSize = _this$opts$restrictio.maxFileSize, maxNumberOfFiles = _this$opts$restrictio.maxNumberOfFiles, allowedFileTypes = _this$opts$restrictio.allowedFileTypes;
        if (maxNumberOfFiles) {
          if (Object.keys(files).length + 1 > maxNumberOfFiles) {
                        SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions"},');

            throw new RestrictionError("" + this.i18n('youCanOnlyUploadX', {
              smart_count: maxNumberOfFiles
            }));
          }
        }
        if (allowedFileTypes) {
          var isCorrectFileType = allowedFileTypes.some(function (type) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._checkRestrictions._checkRestrictions.isCorrectFileType", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (type.indexOf('/') > -1) {
              if (!file.type) {
                                SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions.isCorrectFileType"},');

                return false;
              }
                            SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions.isCorrectFileType"},');

              return match(file.type.replace(/;.*?$/, ''), type);
            }
            if (type[0] === '.') {
                            SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions.isCorrectFileType"},');

              return file.extension.toLowerCase() === type.substr(1).toLowerCase();
            }
                        SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions.isCorrectFileType"},');

            return false;
                        SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions.isCorrectFileType"},');

          });
          if (!isCorrectFileType) {
            var allowedFileTypesString = allowedFileTypes.join(', ');
                        SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions"},');

            throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {
              types: allowedFileTypesString
            }));
          }
        }
        if (maxFileSize && file.data.size != null) {
          if (file.data.size > maxFileSize) {
                        SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions"},');

            throw new RestrictionError(this.i18n('exceedsSize2', {
              backwardsCompat: this.i18n('exceedsSize'),
              size: prettierBytes(maxFileSize)
            }));
          }
        }
                SRTlib.send('], "end": "Uppy._proto._checkRestrictions._checkRestrictions"},');

      };
      _proto._showOrLogErrorAndThrow = function _showOrLogErrorAndThrow(err, _temp) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._showOrLogErrorAndThrow._showOrLogErrorAndThrow", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _ref = _temp === void 0 ? {} : _temp, _ref$showInformer = _ref.showInformer, showInformer = _ref$showInformer === void 0 ? true : _ref$showInformer, _ref$file = _ref.file, file = _ref$file === void 0 ? null : _ref$file, _ref$throwErr = _ref.throwErr, throwErr = _ref$throwErr === void 0 ? true : _ref$throwErr;
        var message = typeof err === 'object' ? err.message : err;
        var details = typeof err === 'object' && err.details ? err.details : '';
        var logMessageWithDetails = message;
        if (details) {
          logMessageWithDetails += ' ' + details;
        }
        if (err.isRestriction) {
          this.log(logMessageWithDetails);
          this.emit('restriction-failed', file, err);
        } else {
          this.log(logMessageWithDetails, 'error');
        }
        if (showInformer) {
          this.info({
            message: message,
            details: details
          }, 'error', 5000);
        }
        if (throwErr) {
                    SRTlib.send('], "end": "Uppy._proto._showOrLogErrorAndThrow._showOrLogErrorAndThrow"},');

          throw typeof err === 'object' ? err : new Error(err);
        }
                SRTlib.send('], "end": "Uppy._proto._showOrLogErrorAndThrow._showOrLogErrorAndThrow"},');

      };
      _proto._assertNewUploadAllowed = function _assertNewUploadAllowed(file) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._assertNewUploadAllowed._assertNewUploadAllowed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this$getState2 = this.getState(), allowNewUpload = _this$getState2.allowNewUpload;
        if (allowNewUpload === false) {
          this._showOrLogErrorAndThrow(new RestrictionError(this.i18n('noNewAlreadyUploading')), {
            file: file
          });
        }
                SRTlib.send('], "end": "Uppy._proto._assertNewUploadAllowed._assertNewUploadAllowed"},');

      };
      _proto._checkAndCreateFileStateObject = function _checkAndCreateFileStateObject(files, file) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._checkAndCreateFileStateObject._checkAndCreateFileStateObject", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var fileType = getFileType(file);
        file.type = fileType;
        var onBeforeFileAddedResult = this.opts.onBeforeFileAdded(file, files);
        if (onBeforeFileAddedResult === false) {
          this._showOrLogErrorAndThrow(new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {
            showInformer: false,
            file: file
          });
        }
        if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult) {
          file = onBeforeFileAddedResult;
        }
        var fileName;
        if (file.name) {
          fileName = file.name;
        } else if (fileType.split('/')[0] === 'image') {
          fileName = fileType.split('/')[0] + '.' + fileType.split('/')[1];
        } else {
          fileName = 'noname';
        }
        var fileExtension = getFileNameAndExtension(fileName).extension;
        var isRemote = file.isRemote || false;
        var fileID = generateFileID(file);
        if (files[fileID]) {
          this._showOrLogErrorAndThrow(new RestrictionError(this.i18n('noDuplicates', {
            fileName: fileName
          })), {
            file: file
          });
        }
        var meta = file.meta || ({});
        meta.name = fileName;
        meta.type = fileType;
        var size = isFinite(file.data.size) ? file.data.size : null;
        var newFile = {
          source: file.source || '',
          id: fileID,
          name: fileName,
          extension: fileExtension || '',
          meta: _extends({}, this.getState().meta, {}, meta),
          type: fileType,
          data: file.data,
          progress: {
            percentage: 0,
            bytesUploaded: 0,
            bytesTotal: size,
            uploadComplete: false,
            uploadStarted: null
          },
          size: size,
          isRemote: isRemote,
          remote: file.remote || '',
          preview: file.preview
        };
        try {
          this._checkRestrictions(files, newFile);
        } catch (err) {
          this._showOrLogErrorAndThrow(err, {
            file: newFile
          });
        }
                SRTlib.send('], "end": "Uppy._proto._checkAndCreateFileStateObject._checkAndCreateFileStateObject"},');

        return newFile;
                SRTlib.send('], "end": "Uppy._proto._checkAndCreateFileStateObject._checkAndCreateFileStateObject"},');

      };
      _proto._startIfAutoProceed = function _startIfAutoProceed() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._startIfAutoProceed._startIfAutoProceed", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this3 = this;
        if (this.opts.autoProceed && !this.scheduledAutoProceed) {
          this.scheduledAutoProceed = setTimeout(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._startIfAutoProceed._startIfAutoProceed.scheduledAutoProceed.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            _this3.scheduledAutoProceed = null;
            _this3.upload().catch(function (err) {
                            SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._startIfAutoProceed._startIfAutoProceed.scheduledAutoProceed.setTimeout.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (!err.isRestriction) {
                _this3.log(err.stack || err.message || err);
              }
                            SRTlib.send('], "end": "Uppy._proto._startIfAutoProceed._startIfAutoProceed.scheduledAutoProceed.setTimeout.catch"},');

            });
                        SRTlib.send('], "end": "Uppy._proto._startIfAutoProceed._startIfAutoProceed.scheduledAutoProceed.setTimeout"},');

          }, 4);
        }
                SRTlib.send('], "end": "Uppy._proto._startIfAutoProceed._startIfAutoProceed"},');

      };
      _proto.addFile = function addFile(file) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addFile.addFile", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _extends3;
        this._assertNewUploadAllowed(file);
        var _this$getState3 = this.getState(), files = _this$getState3.files;
        var newFile = this._checkAndCreateFileStateObject(files, file);
        this.setState({
          files: _extends({}, files, (_extends3 = {}, _extends3[newFile.id] = newFile, _extends3))
        });
        this.emit('file-added', newFile);
        this.log("Added file: " + newFile.name + ", " + newFile.id + ", mime type: " + newFile.type);
        this._startIfAutoProceed();
                SRTlib.send('], "end": "Uppy._proto.addFile.addFile"},');

        return newFile.id;
                SRTlib.send('], "end": "Uppy._proto.addFile.addFile"},');

      };
      _proto.addFiles = function addFiles(fileDescriptors) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addFiles.addFiles3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this4 = this;
        this._assertNewUploadAllowed();
        var files = _extends({}, this.getState().files);
        var newFiles = [];
        var errors = [];
        for (var i = 0; i < fileDescriptors.length; i++) {
          try {
            var newFile = this._checkAndCreateFileStateObject(files, fileDescriptors[i]);
            newFiles.push(newFile);
            files[newFile.id] = newFile;
          } catch (err) {
            if (!err.isRestriction) {
              errors.push(err);
            }
          }
        }
        this.setState({
          files: files
        });
        newFiles.forEach(function (newFile) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addFiles.addFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this4.emit('file-added', newFile);
                    SRTlib.send('], "end": "Uppy._proto.addFiles.addFiles"},');

        });
        if (newFiles.length > 5) {
          this.log("Added batch of " + newFiles.length + " files");
        } else {
          Object.keys(newFiles).forEach(function (fileID) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addFiles.addFiles.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this4.log("Added file: " + newFiles[fileID].name + "\n id: " + newFiles[fileID].id + "\n type: " + newFiles[fileID].type);
                        SRTlib.send('], "end": "Uppy._proto.addFiles.addFiles.forEach"},');

          });
        }
        if (newFiles.length > 0) {
          this._startIfAutoProceed();
        }
        if (errors.length > 0) {
          var message = 'Multiple errors occurred while adding files:\n';
          errors.forEach(function (subError) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addFiles.addFiles2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            message += "\n * " + subError.message;
                        SRTlib.send('], "end": "Uppy._proto.addFiles.addFiles2"},');

          });
          this.info({
            message: this.i18n('addBulkFilesFailed', {
              smart_count: errors.length
            }),
            details: message
          }, 'error', 5000);
          var err = new Error(message);
          err.errors = errors;
                    SRTlib.send('], "end": "Uppy._proto.addFiles.addFiles3"},');

          throw err;
        }
                SRTlib.send('], "end": "Uppy._proto.addFiles.addFiles3"},');

      };
      _proto.removeFiles = function removeFiles(fileIDs) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removeFiles.removeFiles4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this5 = this;
        var _this$getState4 = this.getState(), files = _this$getState4.files, currentUploads = _this$getState4.currentUploads;
        var updatedFiles = _extends({}, files);
        var updatedUploads = _extends({}, currentUploads);
        var removedFiles = Object.create(null);
        fileIDs.forEach(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removeFiles.removeFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (files[fileID]) {
            removedFiles[fileID] = files[fileID];
            delete updatedFiles[fileID];
          }
                    SRTlib.send('], "end": "Uppy._proto.removeFiles.removeFiles"},');

        });
        function fileIsNotRemoved(uploadFileID) {
                    SRTlib.send(`{ "anonymous": false, "function": "fileIsNotRemoved", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "fileIsNotRemoved"},');

          return removedFiles[uploadFileID] === undefined;
                    SRTlib.send('], "end": "fileIsNotRemoved"},');

        }
        var uploadsToRemove = [];
        Object.keys(updatedUploads).forEach(function (uploadID) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removeFiles.removeFiles.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved);
          if (newFileIDs.length === 0) {
            uploadsToRemove.push(uploadID);
                        SRTlib.send('], "end": "Uppy._proto.removeFiles.removeFiles.forEach"},');

            return;
          }
          updatedUploads[uploadID] = _extends({}, currentUploads[uploadID], {
            fileIDs: newFileIDs
          });
                    SRTlib.send('], "end": "Uppy._proto.removeFiles.removeFiles.forEach"},');

        });
        uploadsToRemove.forEach(function (uploadID) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removeFiles.removeFiles2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          delete updatedUploads[uploadID];
                    SRTlib.send('], "end": "Uppy._proto.removeFiles.removeFiles2"},');

        });
        var stateUpdate = {
          currentUploads: updatedUploads,
          files: updatedFiles
        };
        if (Object.keys(updatedFiles).length === 0) {
          stateUpdate.allowNewUpload = true;
          stateUpdate.error = null;
        }
        this.setState(stateUpdate);
        this._calculateTotalProgress();
        var removedFileIDs = Object.keys(removedFiles);
        removedFileIDs.forEach(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removeFiles.removeFiles3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this5.emit('file-removed', removedFiles[fileID]);
                    SRTlib.send('], "end": "Uppy._proto.removeFiles.removeFiles3"},');

        });
        if (removedFileIDs.length > 5) {
          this.log("Removed " + removedFileIDs.length + " files");
        } else {
          this.log("Removed files: " + removedFileIDs.join(', '));
        }
                SRTlib.send('], "end": "Uppy._proto.removeFiles.removeFiles4"},');

      };
      _proto.removeFile = function removeFile(fileID) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removeFile.removeFile", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.removeFiles([fileID]);
                SRTlib.send('], "end": "Uppy._proto.removeFile.removeFile"},');

      };
      _proto.pauseResume = function pauseResume(fileID) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.pauseResume.pauseResume", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {
                    SRTlib.send('], "end": "Uppy._proto.pauseResume.pauseResume"},');

          return;
        }
        var wasPaused = this.getFile(fileID).isPaused || false;
        var isPaused = !wasPaused;
        this.setFileState(fileID, {
          isPaused: isPaused
        });
        this.emit('upload-pause', fileID, isPaused);
                SRTlib.send('], "end": "Uppy._proto.pauseResume.pauseResume"},');

        return isPaused;
                SRTlib.send('], "end": "Uppy._proto.pauseResume.pauseResume"},');

      };
      _proto.pauseAll = function pauseAll() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.pauseAll.pauseAll2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var updatedFiles = _extends({}, this.getState().files);
        var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.pauseAll.pauseAll.inProgressUpdatedFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto.pauseAll.pauseAll.inProgressUpdatedFiles.filter"},');

          return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;
                    SRTlib.send('], "end": "Uppy._proto.pauseAll.pauseAll.inProgressUpdatedFiles.filter"},');

        });
        inProgressUpdatedFiles.forEach(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.pauseAll.pauseAll", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var updatedFile = _extends({}, updatedFiles[file], {
            isPaused: true
          });
          updatedFiles[file] = updatedFile;
                    SRTlib.send('], "end": "Uppy._proto.pauseAll.pauseAll"},');

        });
        this.setState({
          files: updatedFiles
        });
        this.emit('pause-all');
                SRTlib.send('], "end": "Uppy._proto.pauseAll.pauseAll2"},');

      };
      _proto.resumeAll = function resumeAll() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.resumeAll.resumeAll2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var updatedFiles = _extends({}, this.getState().files);
        var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.resumeAll.resumeAll.inProgressUpdatedFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto.resumeAll.resumeAll.inProgressUpdatedFiles.filter"},');

          return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;
                    SRTlib.send('], "end": "Uppy._proto.resumeAll.resumeAll.inProgressUpdatedFiles.filter"},');

        });
        inProgressUpdatedFiles.forEach(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.resumeAll.resumeAll", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var updatedFile = _extends({}, updatedFiles[file], {
            isPaused: false,
            error: null
          });
          updatedFiles[file] = updatedFile;
                    SRTlib.send('], "end": "Uppy._proto.resumeAll.resumeAll"},');

        });
        this.setState({
          files: updatedFiles
        });
        this.emit('resume-all');
                SRTlib.send('], "end": "Uppy._proto.resumeAll.resumeAll2"},');

      };
      _proto.retryAll = function retryAll() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.retryAll.retryAll2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var updatedFiles = _extends({}, this.getState().files);
        var filesToRetry = Object.keys(updatedFiles).filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.retryAll.retryAll.filesToRetry.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto.retryAll.retryAll.filesToRetry.filter"},');

          return updatedFiles[file].error;
                    SRTlib.send('], "end": "Uppy._proto.retryAll.retryAll.filesToRetry.filter"},');

        });
        filesToRetry.forEach(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.retryAll.retryAll", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var updatedFile = _extends({}, updatedFiles[file], {
            isPaused: false,
            error: null
          });
          updatedFiles[file] = updatedFile;
                    SRTlib.send('], "end": "Uppy._proto.retryAll.retryAll"},');

        });
        this.setState({
          files: updatedFiles,
          error: null
        });
        this.emit('retry-all', filesToRetry);
        var uploadID = this._createUpload(filesToRetry, {
          forceAllowNewUpload: true
        });
                SRTlib.send('], "end": "Uppy._proto.retryAll.retryAll2"},');

        return this._runUpload(uploadID);
                SRTlib.send('], "end": "Uppy._proto.retryAll.retryAll2"},');

      };
      _proto.cancelAll = function cancelAll() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.cancelAll.cancelAll", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.emit('cancel-all');
        var _this$getState5 = this.getState(), files = _this$getState5.files;
        var fileIDs = Object.keys(files);
        if (fileIDs.length) {
          this.removeFiles(fileIDs);
        }
        this.setState({
          totalProgress: 0,
          error: null
        });
                SRTlib.send('], "end": "Uppy._proto.cancelAll.cancelAll"},');

      };
      _proto.retryUpload = function retryUpload(fileID) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.retryUpload.retryUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.setFileState(fileID, {
          error: null,
          isPaused: false
        });
        this.emit('upload-retry', fileID);
        var uploadID = this._createUpload([fileID], {
          forceAllowNewUpload: true
        });
                SRTlib.send('], "end": "Uppy._proto.retryUpload.retryUpload"},');

        return this._runUpload(uploadID);
                SRTlib.send('], "end": "Uppy._proto.retryUpload.retryUpload"},');

      };
      _proto.reset = function reset() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.reset.reset", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.cancelAll();
                SRTlib.send('], "end": "Uppy._proto.reset.reset"},');

      };
      _proto._calculateProgress = function _calculateProgress(file, data) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateProgress._calculateProgress", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!this.getFile(file.id)) {
          this.log("Not setting progress for a file that has been removed: " + file.id);
                    SRTlib.send('], "end": "Uppy._proto._calculateProgress._calculateProgress"},');

          return;
        }
        var canHavePercentage = isFinite(data.bytesTotal) && data.bytesTotal > 0;
        this.setFileState(file.id, {
          progress: _extends({}, this.getFile(file.id).progress, {
            bytesUploaded: data.bytesUploaded,
            bytesTotal: data.bytesTotal,
            percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0
          })
        });
        this._calculateTotalProgress();
                SRTlib.send('], "end": "Uppy._proto._calculateProgress._calculateProgress"},');

      };
      _proto._calculateTotalProgress = function _calculateTotalProgress() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateTotalProgress._calculateTotalProgress3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var files = this.getFiles();
        var inProgress = files.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.inProgress", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.inProgress"},');

          return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;
                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.inProgress"},');

        });
        if (inProgress.length === 0) {
          this.emit('progress', 0);
          this.setState({
            totalProgress: 0
          });
                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress3"},');

          return;
        }
        var sizedFiles = inProgress.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.sizedFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.sizedFiles"},');

          return file.progress.bytesTotal != null;
                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.sizedFiles"},');

        });
        var unsizedFiles = inProgress.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.unsizedFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.unsizedFiles"},');

          return file.progress.bytesTotal == null;
                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.unsizedFiles"},');

        });
        if (sizedFiles.length === 0) {
          var progressMax = inProgress.length * 100;
          var currentProgress = unsizedFiles.reduce(function (acc, file) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.currentProgress", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.currentProgress"},');

            return acc + file.progress.percentage;
                        SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.currentProgress"},');

          }, 0);
          var _totalProgress = Math.round(currentProgress / progressMax * 100);
          this.setState({
            totalProgress: _totalProgress
          });
                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress3"},');

          return;
        }
        var totalSize = sizedFiles.reduce(function (acc, file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.totalSize", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.totalSize"},');

          return acc + file.progress.bytesTotal;
                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress.totalSize"},');

        }, 0);
        var averageSize = totalSize / sizedFiles.length;
        totalSize += averageSize * unsizedFiles.length;
        var uploadedSize = 0;
        sizedFiles.forEach(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateTotalProgress._calculateTotalProgress", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          uploadedSize += file.progress.bytesUploaded;
                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress"},');

        });
        unsizedFiles.forEach(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._calculateTotalProgress._calculateTotalProgress2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          uploadedSize += averageSize * (file.progress.percentage || 0) / 100;
                    SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress2"},');

        });
        var totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100);
        if (totalProgress > 100) {
          totalProgress = 100;
        }
        this.setState({
          totalProgress: totalProgress
        });
        this.emit('progress', totalProgress);
                SRTlib.send('], "end": "Uppy._proto._calculateTotalProgress._calculateTotalProgress3"},');

      };
      _proto._addListeners = function _addListeners() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this6 = this;
        this.on('error', function (error) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var errorMsg = 'Unknown error';
          if (error.message) {
            errorMsg = error.message;
          }
          if (error.details) {
            errorMsg += ' ' + error.details;
          }
          _this6.setState({
            error: errorMsg
          });
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on"},');

        });
        this.on('upload-error', function (file, error, response) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on2", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var errorMsg = 'Unknown error';
          if (error.message) {
            errorMsg = error.message;
          }
          if (error.details) {
            errorMsg += ' ' + error.details;
          }
          _this6.setFileState(file.id, {
            error: errorMsg,
            response: response
          });
          _this6.setState({
            error: error.message
          });
          if (typeof error === 'object' && error.message) {
            var newError = new Error(error.message);
            newError.details = error.message;
            if (error.details) {
              newError.details += ' ' + error.details;
            }
            newError.message = _this6.i18n('failedToUpload', {
              file: file.name
            });
            _this6._showOrLogErrorAndThrow(newError, {
              throwErr: false
            });
          } else {
            _this6._showOrLogErrorAndThrow(error, {
              throwErr: false
            });
          }
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on2"},');

        });
        this.on('upload', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this6.setState({
            error: null
          });
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on3"},');

        });
        this.on('upload-started', function (file, upload) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on4", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (!_this6.getFile(file.id)) {
            _this6.log("Not setting progress for a file that has been removed: " + file.id);
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on4"},');

            return;
          }
          _this6.setFileState(file.id, {
            progress: {
              uploadStarted: Date.now(),
              uploadComplete: false,
              percentage: 0,
              bytesUploaded: 0,
              bytesTotal: file.size
            }
          });
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on4"},');

        });
        this.on('upload-progress', this._calculateProgress);
        this.on('upload-success', function (file, uploadResp) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on5", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (!_this6.getFile(file.id)) {
            _this6.log("Not setting progress for a file that has been removed: " + file.id);
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on5"},');

            return;
          }
          var currentProgress = _this6.getFile(file.id).progress;
          _this6.setFileState(file.id, {
            progress: _extends({}, currentProgress, {
              uploadComplete: true,
              percentage: 100,
              bytesUploaded: currentProgress.bytesTotal
            }),
            response: uploadResp,
            uploadURL: uploadResp.uploadURL,
            isPaused: false
          });
          _this6._calculateTotalProgress();
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on5"},');

        });
        this.on('preprocess-progress', function (file, progress) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on6", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (!_this6.getFile(file.id)) {
            _this6.log("Not setting progress for a file that has been removed: " + file.id);
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on6"},');

            return;
          }
          _this6.setFileState(file.id, {
            progress: _extends({}, _this6.getFile(file.id).progress, {
              preprocess: progress
            })
          });
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on6"},');

        });
        this.on('preprocess-complete', function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on7", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!_this6.getFile(file.id)) {
            _this6.log("Not setting progress for a file that has been removed: " + file.id);
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on7"},');

            return;
          }
          var files = _extends({}, _this6.getState().files);
          files[file.id] = _extends({}, files[file.id], {
            progress: _extends({}, files[file.id].progress)
          });
          delete files[file.id].progress.preprocess;
          _this6.setState({
            files: files
          });
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on7"},');

        });
        this.on('postprocess-progress', function (file, progress) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on8", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (!_this6.getFile(file.id)) {
            _this6.log("Not setting progress for a file that has been removed: " + file.id);
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on8"},');

            return;
          }
          _this6.setFileState(file.id, {
            progress: _extends({}, _this6.getState().files[file.id].progress, {
              postprocess: progress
            })
          });
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on8"},');

        });
        this.on('postprocess-complete', function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on9", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!_this6.getFile(file.id)) {
            _this6.log("Not setting progress for a file that has been removed: " + file.id);
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on9"},');

            return;
          }
          var files = _extends({}, _this6.getState().files);
          files[file.id] = _extends({}, files[file.id], {
            progress: _extends({}, files[file.id].progress)
          });
          delete files[file.id].progress.postprocess;
          _this6.setState({
            files: files
          });
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on9"},');

        });
        this.on('restored', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.on10", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this6._calculateTotalProgress();
                    SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.on10"},');

        });
        if (typeof window !== 'undefined' && window.addEventListener) {
          window.addEventListener('online', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners"},');

            return _this6.updateOnlineStatus();
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners"},');

          });
          window.addEventListener('offline', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners2"},');

            return _this6.updateOnlineStatus();
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners2"},');

          });
          setTimeout(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._addListeners._addListeners.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.setTimeout"},');

            return _this6.updateOnlineStatus();
                        SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners.setTimeout"},');

          }, 3000);
        }
                SRTlib.send('], "end": "Uppy._proto._addListeners._addListeners3"},');

      };
      _proto.updateOnlineStatus = function updateOnlineStatus() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.updateOnlineStatus.updateOnlineStatus", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;
        if (!online) {
          this.emit('is-offline');
          this.info(this.i18n('noInternetConnection'), 'error', 0);
          this.wasOffline = true;
        } else {
          this.emit('is-online');
          if (this.wasOffline) {
            this.emit('back-online');
            this.info(this.i18n('connectedToInternet'), 'success', 3000);
            this.wasOffline = false;
          }
        }
                SRTlib.send('], "end": "Uppy._proto.updateOnlineStatus.updateOnlineStatus"},');

      };
      _proto.getID = function getID() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.getID.getID", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "Uppy._proto.getID.getID"},');

        return this.opts.id;
                SRTlib.send('], "end": "Uppy._proto.getID.getID"},');

      };
      _proto.use = function use(Plugin, opts) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.use.use", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (typeof Plugin !== 'function') {
          var msg = "Expected a plugin class, but got " + (Plugin === null ? 'null' : typeof Plugin) + "." + ' Please verify that the plugin was imported and spelled correctly.';
                    SRTlib.send('], "end": "Uppy._proto.use.use"},');

          throw new TypeError(msg);
        }
        var plugin = new Plugin(this, opts);
        var pluginId = plugin.id;
        this.plugins[plugin.type] = this.plugins[plugin.type] || [];
        if (!pluginId) {
                    SRTlib.send('], "end": "Uppy._proto.use.use"},');

          throw new Error('Your plugin must have an id');
        }
        if (!plugin.type) {
                    SRTlib.send('], "end": "Uppy._proto.use.use"},');

          throw new Error('Your plugin must have a type');
        }
        var existsPluginAlready = this.getPlugin(pluginId);
        if (existsPluginAlready) {
          var _msg = "Already found a plugin named '" + existsPluginAlready.id + "'. " + ("Tried to use: '" + pluginId + "'.\n") + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';
                    SRTlib.send('], "end": "Uppy._proto.use.use"},');

          throw new Error(_msg);
        }
        if (Plugin.VERSION) {
          this.log("Using " + pluginId + " v" + Plugin.VERSION);
        }
        this.plugins[plugin.type].push(plugin);
        plugin.install();
                SRTlib.send('], "end": "Uppy._proto.use.use"},');

        return this;
                SRTlib.send('], "end": "Uppy._proto.use.use"},');

      };
      _proto.getPlugin = function getPlugin(id) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.getPlugin.getPlugin", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var foundPlugin = null;
        this.iteratePlugins(function (plugin) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.getPlugin.getPlugin.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (plugin.id === id) {
            foundPlugin = plugin;
                        SRTlib.send('], "end": "Uppy._proto.getPlugin.getPlugin.iteratePlugins"},');

            return false;
          }
                    SRTlib.send('], "end": "Uppy._proto.getPlugin.getPlugin.iteratePlugins"},');

        });
                SRTlib.send('], "end": "Uppy._proto.getPlugin.getPlugin"},');

        return foundPlugin;
                SRTlib.send('], "end": "Uppy._proto.getPlugin.getPlugin"},');

      };
      _proto.iteratePlugins = function iteratePlugins(method) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.iteratePlugins.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this7 = this;
        Object.keys(this.plugins).forEach(function (pluginType) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.iteratePlugins.iteratePlugins.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this7.plugins[pluginType].forEach(method);
                    SRTlib.send('], "end": "Uppy._proto.iteratePlugins.iteratePlugins.forEach"},');

        });
                SRTlib.send('], "end": "Uppy._proto.iteratePlugins.iteratePlugins"},');

      };
      _proto.removePlugin = function removePlugin(instance) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.removePlugin.removePlugin", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.log("Removing plugin " + instance.id);
        this.emit('plugin-remove', instance);
        if (instance.uninstall) {
          instance.uninstall();
        }
        var list = this.plugins[instance.type].slice();
        var index = list.indexOf(instance);
        if (index !== -1) {
          list.splice(index, 1);
          this.plugins[instance.type] = list;
        }
        var updatedState = this.getState();
        delete updatedState.plugins[instance.id];
        this.setState(updatedState);
                SRTlib.send('], "end": "Uppy._proto.removePlugin.removePlugin"},');

      };
      _proto.close = function close() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.close.close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this8 = this;
        this.log("Closing Uppy instance " + this.opts.id + ": removing all files and uninstalling plugins");
        this.reset();
        this._storeUnsubscribe();
        this.iteratePlugins(function (plugin) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.close.close.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this8.removePlugin(plugin);
                    SRTlib.send('], "end": "Uppy._proto.close.close.iteratePlugins"},');

        });
                SRTlib.send('], "end": "Uppy._proto.close.close"},');

      };
      _proto.info = function info(message, type, duration) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.info.info", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (type === void 0) {
          type = 'info';
        }
        if (duration === void 0) {
          duration = 3000;
        }
        var isComplexMessage = typeof message === 'object';
        this.setState({
          info: {
            isHidden: false,
            type: type,
            message: isComplexMessage ? message.message : message,
            details: isComplexMessage ? message.details : null
          }
        });
        this.emit('info-visible');
        clearTimeout(this.infoTimeoutID);
        if (duration === 0) {
          this.infoTimeoutID = undefined;
                    SRTlib.send('], "end": "Uppy._proto.info.info"},');

          return;
        }
        this.infoTimeoutID = setTimeout(this.hideInfo, duration);
                SRTlib.send('], "end": "Uppy._proto.info.info"},');

      };
      _proto.hideInfo = function hideInfo() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.hideInfo.hideInfo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var newInfo = _extends({}, this.getState().info, {
          isHidden: true
        });
        this.setState({
          info: newInfo
        });
        this.emit('info-hidden');
                SRTlib.send('], "end": "Uppy._proto.hideInfo.hideInfo"},');

      };
      _proto.log = function log(message, type) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.log.log", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var logger = this.opts.logger;
        switch (type) {
          case 'error':
            logger.error(message);
            break;
          case 'warning':
            logger.warn(message);
            break;
          default:
            logger.debug(message);
            break;
        }
                SRTlib.send('], "end": "Uppy._proto.log.log"},');

      };
      _proto.run = function run() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.run.run", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.log('Calling run() is no longer necessary.', 'warning');
                SRTlib.send('], "end": "Uppy._proto.run.run"},');

        return this;
                SRTlib.send('], "end": "Uppy._proto.run.run"},');

      };
      _proto.restore = function restore(uploadID) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.restore.restore", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.log("Core: attempting to restore upload \"" + uploadID + "\"");
        if (!this.getState().currentUploads[uploadID]) {
          this._removeUpload(uploadID);
                    SRTlib.send('], "end": "Uppy._proto.restore.restore"},');

          return Promise.reject(new Error('Nonexistent upload'));
        }
                SRTlib.send('], "end": "Uppy._proto.restore.restore"},');

        return this._runUpload(uploadID);
                SRTlib.send('], "end": "Uppy._proto.restore.restore"},');

      };
      _proto._createUpload = function _createUpload(fileIDs, opts) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._createUpload._createUpload", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _extends4;
        if (opts === void 0) {
          opts = {};
        }
        var _opts = opts, _opts$forceAllowNewUp = _opts.forceAllowNewUpload, forceAllowNewUpload = _opts$forceAllowNewUp === void 0 ? false : _opts$forceAllowNewUp;
        var _this$getState6 = this.getState(), allowNewUpload = _this$getState6.allowNewUpload, currentUploads = _this$getState6.currentUploads;
        if (!allowNewUpload && !forceAllowNewUpload) {
                    SRTlib.send('], "end": "Uppy._proto._createUpload._createUpload"},');

          throw new Error('Cannot create a new upload: already uploading.');
        }
        var uploadID = cuid();
        this.emit('upload', {
          id: uploadID,
          fileIDs: fileIDs
        });
        this.setState({
          allowNewUpload: this.opts.allowMultipleUploads !== false,
          currentUploads: _extends({}, currentUploads, (_extends4 = {}, _extends4[uploadID] = {
            fileIDs: fileIDs,
            step: 0,
            result: {}
          }, _extends4))
        });
                SRTlib.send('], "end": "Uppy._proto._createUpload._createUpload"},');

        return uploadID;
                SRTlib.send('], "end": "Uppy._proto._createUpload._createUpload"},');

      };
      _proto._getUpload = function _getUpload(uploadID) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._getUpload._getUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this$getState7 = this.getState(), currentUploads = _this$getState7.currentUploads;
                SRTlib.send('], "end": "Uppy._proto._getUpload._getUpload"},');

        return currentUploads[uploadID];
                SRTlib.send('], "end": "Uppy._proto._getUpload._getUpload"},');

      };
      _proto.addResultData = function addResultData(uploadID, data) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.addResultData.addResultData", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _extends5;
        if (!this._getUpload(uploadID)) {
          this.log("Not setting result for an upload that has been removed: " + uploadID);
                    SRTlib.send('], "end": "Uppy._proto.addResultData.addResultData"},');

          return;
        }
        var currentUploads = this.getState().currentUploads;
        var currentUpload = _extends({}, currentUploads[uploadID], {
          result: _extends({}, currentUploads[uploadID].result, data)
        });
        this.setState({
          currentUploads: _extends({}, currentUploads, (_extends5 = {}, _extends5[uploadID] = currentUpload, _extends5))
        });
                SRTlib.send('], "end": "Uppy._proto.addResultData.addResultData"},');

      };
      _proto._removeUpload = function _removeUpload(uploadID) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._removeUpload._removeUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var currentUploads = _extends({}, this.getState().currentUploads);
        delete currentUploads[uploadID];
        this.setState({
          currentUploads: currentUploads
        });
                SRTlib.send('], "end": "Uppy._proto._removeUpload._removeUpload"},');

      };
      _proto._runUpload = function _runUpload(uploadID) {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this9 = this;
        var uploadData = this.getState().currentUploads[uploadID];
        var restoreStep = uploadData.step;
        var steps = [].concat(this.preProcessors, this.uploaders, this.postProcessors);
        var lastStep = Promise.resolve();
        steps.forEach(function (fn, step) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (step < restoreStep) {
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload"},');

            return;
          }
          lastStep = lastStep.then(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload.lastStep.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var _extends6;
            var _this9$getState = _this9.getState(), currentUploads = _this9$getState.currentUploads;
            var currentUpload = currentUploads[uploadID];
            if (!currentUpload) {
                            SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.lastStep.then"},');

              return;
            }
            var updatedUpload = _extends({}, currentUpload, {
              step: step
            });
            _this9.setState({
              currentUploads: _extends({}, currentUploads, (_extends6 = {}, _extends6[uploadID] = updatedUpload, _extends6))
            });
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.lastStep.then"},');

            return fn(updatedUpload.fileIDs, uploadID);
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.lastStep.then"},');

          }).then(function (result) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload.lastStep.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.lastStep.then2"},');

            return null;
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.lastStep.then2"},');

          });
                    SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload"},');

        });
        lastStep.catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this9.emit('error', err, uploadID);
          _this9._removeUpload(uploadID);
                    SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload2"},');

        });
                SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload3"},');

        return lastStep.then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this9$getState2 = _this9.getState(), currentUploads = _this9$getState2.currentUploads;
          var currentUpload = currentUploads[uploadID];
          if (!currentUpload) {
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then"},');

            return;
          }
          var files = currentUpload.fileIDs.map(function (fileID) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.files.currentUpload.fileIDs.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.files.currentUpload.fileIDs.map"},');

            return _this9.getFile(fileID);
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.files.currentUpload.fileIDs.map"},');

          });
          var successful = files.filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.successful", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.successful"},');

            return !file.error;
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.successful"},');

          });
          var failed = files.filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.failed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.failed"},');

            return file.error;
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then.failed"},');

          });
          _this9.addResultData(uploadID, {
            successful: successful,
            failed: failed,
            uploadID: uploadID
          });
                    SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then"},');

        }).then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this9$getState3 = _this9.getState(), currentUploads = _this9$getState3.currentUploads;
          if (!currentUploads[uploadID]) {
                        SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then2"},');

            return;
          }
          var currentUpload = currentUploads[uploadID];
          var result = currentUpload.result;
          _this9.emit('complete', result);
          _this9._removeUpload(uploadID);
                    SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then2"},');

          return result;
                    SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then.then2"},');

        }).then(function (result) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (result == null) {
            _this9.log("Not setting result for an upload that has been removed: " + uploadID);
          }
                    SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then"},');

          return result;
                    SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload.ReturnStatement.then.then"},');

        });
                SRTlib.send('], "end": "Uppy._proto._runUpload._runUpload3"},');

      };
      _proto.upload = function upload() {
                SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.upload.upload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this10 = this;
        if (!this.plugins.uploader) {
          this.log('No uploader type plugins are used', 'warning');
        }
        var files = this.getState().files;
        var onBeforeUploadResult = this.opts.onBeforeUpload(files);
        if (onBeforeUploadResult === false) {
                    SRTlib.send('], "end": "Uppy._proto.upload.upload"},');

          return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));
        }
        if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {
          files = onBeforeUploadResult;
          this.setState({
            files: files
          });
        }
                SRTlib.send('], "end": "Uppy._proto.upload.upload"},');

        return Promise.resolve().then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.then.catch.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.then.catch.then"},');

          return _this10._checkMinNumberOfFiles(files);
                    SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.then.catch.then"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this10._showOrLogErrorAndThrow(err);
                    SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.then.catch"},');

        }).then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this10$getState = _this10.getState(), currentUploads = _this10$getState.currentUploads;
          var currentlyUploadingFiles = Object.keys(currentUploads).reduce(function (prev, curr) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.currentlyUploadingFiles.reduce", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                        SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.currentlyUploadingFiles.reduce"},');

            return prev.concat(currentUploads[curr].fileIDs);
                        SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.currentlyUploadingFiles.reduce"},');

          }, []);
          var waitingFileIDs = [];
          Object.keys(files).forEach(function (fileID) {
                        SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var file = _this10.getFile(fileID);
            if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {
              waitingFileIDs.push(file.id);
            }
                        SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then.forEach"},');

          });
          var uploadID = _this10._createUpload(waitingFileIDs);
                    SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then"},');

          return _this10._runUpload(uploadID);
                    SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch.then.catch.then"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this10._showOrLogErrorAndThrow(err, {
            showInformer: false
          });
                    SRTlib.send('], "end": "Uppy._proto.upload.upload.ReturnStatement.then.catch.then.catch"},');

        });
                SRTlib.send('], "end": "Uppy._proto.upload.upload"},');

      };
      _createClass(Uppy, [{
        key: "state",
        get: function get() {
                    SRTlib.send(`{ "anonymous": true, "function": "Uppy._createClass.get.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Uppy._createClass.get.get"},');

          return this.getState();
                    SRTlib.send('], "end": "Uppy._createClass.get.get"},');

        }
      }]);
            SRTlib.send('], "end": "Uppy"},');

      return Uppy;
            SRTlib.send('], "end": "Uppy"},');

    })();
    Uppy.VERSION = require('../package.json').version;
    module.exports = function (opts) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports20", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports20"},');

      return new Uppy(opts);
            SRTlib.send('], "end": "module.exports20"},');

    };
    module.exports.Uppy = Uppy;
    module.exports.Plugin = Plugin;
    module.exports.debugLogger = debugLogger;
        SRTlib.send('], "end": "emptyKey279"},');

  }, {
    "../package.json": 246,
    "./../../store-default": 302,
    "./../../utils/lib/Translator": 320,
    "./../../utils/lib/generateFileID": 326,
    "./../../utils/lib/getFileNameAndExtension": 333,
    "./../../utils/lib/getFileType": 334,
    "./Plugin": 247,
    "./loggers": 249,
    "./supportsUploadProgress": 250,
    "@transloadit/prettier-bytes": 245,
    "cuid": 64,
    "lodash.throttle": 138,
    "mime-match": 143,
    "namespace-emitter": 146
  }],
  249: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey280", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var getTimeStamp = require('./../../utils/lib/getTimeStamp');
    var justErrorsLogger = {
      debug: function debug() {
                SRTlib.send(`{ "anonymous": true, "function": "justErrorsLogger.debug.debug", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "justErrorsLogger.debug.debug"},');

      },
      warn: function warn() {
                SRTlib.send(`{ "anonymous": true, "function": "justErrorsLogger.warn.warn", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "justErrorsLogger.warn.warn"},');

      },
      error: function error() {
                SRTlib.send(`{ "anonymous": true, "function": "justErrorsLogger.error.error", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _console;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
                SRTlib.send('], "end": "justErrorsLogger.error.error"},');

        return (_console = console).error.apply(_console, ["[Uppy] [" + getTimeStamp() + "]"].concat(args));
                SRTlib.send('], "end": "justErrorsLogger.error.error"},');

      }
    };
    var debugLogger = {
      debug: function debug() {
                SRTlib.send(`{ "anonymous": true, "function": "debugLogger.debug.debug", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var debug = console.debug || console.log;
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        debug.call.apply(debug, [console, "[Uppy] [" + getTimeStamp() + "]"].concat(args));
                SRTlib.send('], "end": "debugLogger.debug.debug"},');

      },
      warn: function warn() {
                SRTlib.send(`{ "anonymous": true, "function": "debugLogger.warn.warn", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _console2;
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
                SRTlib.send('], "end": "debugLogger.warn.warn"},');

        return (_console2 = console).warn.apply(_console2, ["[Uppy] [" + getTimeStamp() + "]"].concat(args));
                SRTlib.send('], "end": "debugLogger.warn.warn"},');

      },
      error: function error() {
                SRTlib.send(`{ "anonymous": true, "function": "debugLogger.error.error", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _console3;
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
                SRTlib.send('], "end": "debugLogger.error.error"},');

        return (_console3 = console).error.apply(_console3, ["[Uppy] [" + getTimeStamp() + "]"].concat(args));
                SRTlib.send('], "end": "debugLogger.error.error"},');

      }
    };
    module.exports = {
      justErrorsLogger: justErrorsLogger,
      debugLogger: debugLogger
    };
        SRTlib.send('], "end": "emptyKey280"},');

  }, {
    "./../../utils/lib/getTimeStamp": 338
  }],
  250: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey281", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function supportsUploadProgress(userAgent) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.supportsUploadProgress", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (userAgent == null) {
        userAgent = typeof navigator !== 'undefined' ? navigator.userAgent : null;
      }
      if (!userAgent) {
                SRTlib.send('], "end": "module.exports.supportsUploadProgress"},');

        return true;
      }
      var m = (/Edge\/(\d+\.\d+)/).exec(userAgent);
      if (!m) {
                SRTlib.send('], "end": "module.exports.supportsUploadProgress"},');

        return true;
      }
      var edgeVersion = m[1];
      var _edgeVersion$split = edgeVersion.split('.'), major = _edgeVersion$split[0], minor = _edgeVersion$split[1];
      major = parseInt(major, 10);
      minor = parseInt(minor, 10);
      if (major < 15 || major === 15 && minor < 15063) {
                SRTlib.send('], "end": "module.exports.supportsUploadProgress"},');

        return true;
      }
      if (major > 18 || major === 18 && minor >= 18218) {
                SRTlib.send('], "end": "module.exports.supportsUploadProgress"},');

        return true;
      }
            SRTlib.send('], "end": "module.exports.supportsUploadProgress"},');

      return false;
            SRTlib.send('], "end": "module.exports.supportsUploadProgress"},');

    };
        SRTlib.send('], "end": "emptyKey281"},');

  }, {}],
  251: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey282", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][245][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey282"},');

  }, {
    "dup": 245
  }],
  252: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey283", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/dashboard",
      "description": "Universal UI plugin for Uppy.",
      "version": "1.9.0",
      "license": "MIT",
      "main": "lib/index.js",
      "style": "dist/style.min.css",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "dashboard", "ui"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@transloadit/prettier-bytes": "0.0.7",
        "@uppy/informer": "file:../informer",
        "@uppy/provider-views": "file:../provider-views",
        "@uppy/status-bar": "file:../status-bar",
        "@uppy/thumbnail-generator": "file:../thumbnail-generator",
        "@uppy/utils": "file:../utils",
        "classnames": "^2.2.6",
        "cuid": "^2.1.1",
        "is-shallow-equal": "^1.0.1",
        "lodash.debounce": "^4.0.8",
        "lodash.throttle": "^4.1.1",
        "memoize-one": "^5.0.4",
        "preact": "8.2.9",
        "preact-css-transition-group": "^1.3.0",
        "resize-observer-polyfill": "^1.5.0"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey283"},');

  }, {}],
  253: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey284", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('./icons'), iconMyDevice = _require.iconMyDevice;
    var _require2 = require('preact'), h = _require2.h, Component = _require2.Component;
    var AddFiles = (function (_Component) {
            SRTlib.send(`{ "anonymous": true, "function": "AddFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(AddFiles, _Component);
      function AddFiles() {
                SRTlib.send(`{ "anonymous": false, "function": "AddFiles", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _Component.call.apply(_Component, [this].concat(args)) || this;
        _this.triggerFileInputClick = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.triggerFileInputClick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.fileInput.click();
                    SRTlib.send('], "end": "_this.triggerFileInputClick"},');

        };
        _this.onFileInputChange = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.onFileInputChange", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this.props.handleInputChange(event);
          event.target.value = null;
                    SRTlib.send('], "end": "_this.onFileInputChange"},');

        };
        _this.renderCloudIcon = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.renderCloudIcon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "_this.renderCloudIcon"},');

          return h("svg", {
            class: "uppy-Dashboard-dropFilesIcon",
            "aria-hidden": "true",
            width: "64",
            height: "45",
            viewBox: "0 0 64 45",
            xmlns: "http://www.w3.org/2000/svg"
          }, h("path", {
            d: "M38 44.932V31h8L33 15 20 31h8v13.932H13.538C6.075 44.932 0 38.774 0 31.202c0-6.1 4.06-11.512 9.873-13.162l.005-.017c.345-5.8 5.248-10.534 10.922-10.534.502 0 1.164.017 1.868.16C25.9 2.85 31.225 0 36.923 0c9.5 0 17.23 7.838 17.23 17.473l-.011.565.012.002C60.039 19.685 64 24.975 64 31.203c0 7.57-6.075 13.729-13.538 13.729H38z",
            fill: "#E2E2E2",
            "fill-rule": "nonzero"
          }));
                    SRTlib.send('], "end": "_this.renderCloudIcon"},');

        };
        _this.renderHiddenFileInput = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.renderHiddenFileInput", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "_this.renderHiddenFileInput"},');

          return h("input", {
            class: "uppy-Dashboard-input",
            hidden: true,
            "aria-hidden": "true",
            tabindex: -1,
            type: "file",
            name: "files[]",
            multiple: _this.props.maxNumberOfFiles !== 1,
            onchange: _this.onFileInputChange,
            accept: _this.props.allowedFileTypes,
            ref: function ref(_ref) {
                            SRTlib.send(`{ "anonymous": true, "function": "_this.renderHiddenFileInput.ReturnStatement.h.ref.ref", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              _this.fileInput = _ref;
                            SRTlib.send('], "end": "_this.renderHiddenFileInput.ReturnStatement.h.ref.ref"},');

            }
          });
                    SRTlib.send('], "end": "_this.renderHiddenFileInput"},');

        };
        _this.renderMyDeviceAcquirer = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.renderMyDeviceAcquirer", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "_this.renderMyDeviceAcquirer"},');

          return h("div", {
            class: "uppy-DashboardTab",
            role: "presentation"
          }, h("button", {
            type: "button",
            class: "uppy-DashboardTab-btn",
            role: "tab",
            tabindex: 0,
            "data-uppy-super-focusable": true,
            onclick: _this.triggerFileInputClick
          }, iconMyDevice(), h("div", {
            class: "uppy-DashboardTab-name"
          }, _this.props.i18n('myDevice'))));
                    SRTlib.send('], "end": "_this.renderMyDeviceAcquirer"},');

        };
        _this.renderDropPasteBrowseTagline = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.renderDropPasteBrowseTagline", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var numberOfAcquirers = _this.props.acquirers.length;
          var browse = h("button", {
            type: "button",
            class: "uppy-u-reset uppy-Dashboard-browse",
            onclick: _this.triggerFileInputClick,
            "data-uppy-super-focusable": numberOfAcquirers === 0
          }, _this.props.i18n('browse'));
                    SRTlib.send('], "end": "_this.renderDropPasteBrowseTagline"},');

          return h("div", {
            class: "uppy-Dashboard-AddFiles-title"
          }, numberOfAcquirers > 0 ? _this.props.i18nArray('dropPasteImport', {
            browse: browse
          }) : _this.props.i18nArray('dropPaste', {
            browse: browse
          }));
                    SRTlib.send('], "end": "_this.renderDropPasteBrowseTagline"},');

        };
        _this.renderAcquirer = function (acquirer) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.renderAcquirer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "_this.renderAcquirer"},');

          return h("div", {
            class: "uppy-DashboardTab",
            role: "presentation"
          }, h("button", {
            type: "button",
            class: "uppy-DashboardTab-btn",
            role: "tab",
            tabindex: 0,
            "aria-controls": "uppy-DashboardContent-panel--" + acquirer.id,
            "aria-selected": _this.props.activePickerPanel.id === acquirer.id,
            "data-uppy-super-focusable": true,
            onclick: function onclick() {
                            SRTlib.send(`{ "anonymous": true, "function": "_this.renderAcquirer.ReturnStatement.h.h.onclick.onclick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "_this.renderAcquirer.ReturnStatement.h.h.onclick.onclick"},');

              return _this.props.showPanel(acquirer.id);
                            SRTlib.send('], "end": "_this.renderAcquirer.ReturnStatement.h.h.onclick.onclick"},');

            }
          }, acquirer.icon(), h("div", {
            class: "uppy-DashboardTab-name"
          }, acquirer.name)));
                    SRTlib.send('], "end": "_this.renderAcquirer"},');

        };
        _this.renderAcquirers = function (acquirers) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.renderAcquirers", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var acquirersWithoutLastTwo = [].concat(acquirers);
          var lastTwoAcquirers = acquirersWithoutLastTwo.splice(acquirers.length - 2, acquirers.length);
                    SRTlib.send('], "end": "_this.renderAcquirers"},');

          return h("div", {
            class: "uppy-Dashboard-AddFiles-list",
            role: "tablist"
          }, _this.renderMyDeviceAcquirer(), acquirersWithoutLastTwo.map(function (acquirer) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.renderAcquirers.ReturnStatement.h", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.renderAcquirers.ReturnStatement.h"},');

            return _this.renderAcquirer(acquirer);
                        SRTlib.send('], "end": "_this.renderAcquirers.ReturnStatement.h"},');

          }), h("span", {
            role: "presentation",
            style: "white-space: nowrap;"
          }, lastTwoAcquirers.map(function (acquirer) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.renderAcquirers.ReturnStatement.h.h", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.renderAcquirers.ReturnStatement.h.h"},');

            return _this.renderAcquirer(acquirer);
                        SRTlib.send('], "end": "_this.renderAcquirers.ReturnStatement.h.h"},');

          })));
                    SRTlib.send('], "end": "_this.renderAcquirers"},');

        };
                SRTlib.send('], "end": "AddFiles"},');

        return _this;
                SRTlib.send('], "end": "AddFiles"},');

      }
      var _proto = AddFiles.prototype;
      _proto.renderPoweredByUppy = function renderPoweredByUppy() {
                SRTlib.send(`{ "anonymous": true, "function": "AddFiles._proto.renderPoweredByUppy.renderPoweredByUppy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var uppyBranding = h("span", null, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          class: "UppyIcon uppy-Dashboard-poweredByIcon",
          width: "11",
          height: "11",
          viewBox: "0 0 11 11"
        }, h("path", {
          d: "M7.365 10.5l-.01-4.045h2.612L5.5.806l-4.467 5.65h2.604l.01 4.044h3.718z",
          "fill-rule": "evenodd"
        })), h("span", {
          class: "uppy-Dashboard-poweredByUppy"
        }, "Uppy"));
        var linkText = this.props.i18nArray('poweredBy2', {
          backwardsCompat: this.props.i18n('poweredBy'),
          uppy: uppyBranding
        });
                SRTlib.send('], "end": "AddFiles._proto.renderPoweredByUppy.renderPoweredByUppy"},');

        return h("a", {
          tabindex: "-1",
          href: "https://uppy.io",
          rel: "noreferrer noopener",
          target: "_blank",
          class: "uppy-Dashboard-poweredBy"
        }, linkText);
                SRTlib.send('], "end": "AddFiles._proto.renderPoweredByUppy.renderPoweredByUppy"},');

      };
      _proto.render = function render() {
                SRTlib.send(`{ "anonymous": true, "function": "AddFiles._proto.render.render", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "AddFiles._proto.render.render"},');

        return h("div", {
          class: "uppy-Dashboard-AddFiles"
        }, this.renderHiddenFileInput(), this.renderDropPasteBrowseTagline(), this.props.acquirers.length > 0 && this.renderAcquirers(this.props.acquirers), h("div", {
          class: "uppy-Dashboard-AddFiles-info"
        }, this.props.note && h("div", {
          class: "uppy-Dashboard-note"
        }, this.props.note), this.props.proudlyDisplayPoweredByUppy && this.renderPoweredByUppy(this.props)));
                SRTlib.send('], "end": "AddFiles._proto.render.render"},');

      };
            SRTlib.send('], "end": "AddFiles"},');

      return AddFiles;
            SRTlib.send('], "end": "AddFiles"},');

    })(Component);
    module.exports = AddFiles;
        SRTlib.send('], "end": "emptyKey284"},');

  }, {
    "./icons": 268,
    "preact": 160
  }],
  254: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey285", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var AddFiles = require('./AddFiles');
    var AddFilesPanel = function AddFilesPanel(props) {
            SRTlib.send(`{ "anonymous": false, "function": "AddFilesPanel", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "AddFilesPanel"},');

      return h("div", {
        class: "uppy-Dashboard-AddFilesPanel",
        "data-uppy-panelType": "AddFiles",
        "aria-hidden": props.showAddFilesPanel
      }, h("div", {
        class: "uppy-DashboardContent-bar"
      }, h("div", {
        class: "uppy-DashboardContent-title",
        role: "heading",
        "aria-level": "1"
      }, props.i18n('addingMoreFiles')), h("button", {
        class: "uppy-DashboardContent-back",
        type: "button",
        onclick: function onclick(ev) {
                    SRTlib.send(`{ "anonymous": true, "function": "AddFilesPanel.AddFilesPanel.ReturnStatement.h.h.h.onclick.onclick", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "AddFilesPanel.AddFilesPanel.ReturnStatement.h.h.h.onclick.onclick"},');

          return props.toggleAddFilesPanel(false);
                    SRTlib.send('], "end": "AddFilesPanel.AddFilesPanel.ReturnStatement.h.h.h.onclick.onclick"},');

        }
      }, props.i18n('back'))), h(AddFiles, props));
            SRTlib.send('], "end": "AddFilesPanel"},');

    };
    module.exports = AddFilesPanel;
        SRTlib.send('], "end": "emptyKey285"},');

  }, {
    "./AddFiles": 253,
    "preact": 160
  }],
  255: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey286", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends5"},');

        return target;
                SRTlib.send('], "end": "_extends5"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var FileList = require('./FileList');
    var AddFiles = require('./AddFiles');
    var AddFilesPanel = require('./AddFilesPanel');
    var PickerPanelContent = require('./PickerPanelContent');
    var PanelTopBar = require('./PickerPanelTopBar');
    var FileCard = require('./FileCard');
    var classNames = require('classnames');
    var isDragDropSupported = require('./../../../utils/lib/isDragDropSupported');
    var _require = require('preact'), h = _require.h;
    var PreactCSSTransitionGroup = require('preact-css-transition-group');
    function TransitionWrapper(props) {
            SRTlib.send(`{ "anonymous": false, "function": "TransitionWrapper", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "TransitionWrapper"},');

      return h(PreactCSSTransitionGroup, {
        transitionName: "uppy-transition-slideDownUp",
        transitionEnterTimeout: 250,
        transitionLeaveTimeout: 250
      }, props.children);
            SRTlib.send('], "end": "TransitionWrapper"},');

    }
    var WIDTH_XL = 900;
    var WIDTH_LG = 700;
    var WIDTH_MD = 576;
    var HEIGHT_MD = 400;
    module.exports = function Dashboard(props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.Dashboard", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var noFiles = props.totalFileCount === 0;
      var isSizeMD = props.containerWidth > WIDTH_MD;
      var dashboardClassName = classNames({
        'uppy-Root': props.isTargetDOMEl,
        'uppy-Dashboard': true,
        'uppy-Dashboard--animateOpenClose': props.animateOpenClose,
        'uppy-Dashboard--isClosing': props.isClosing,
        'uppy-Dashboard--isDraggingOver': props.isDraggingOver,
        'uppy-Dashboard--modal': !props.inline,
        'uppy-size--md': props.containerWidth > WIDTH_MD,
        'uppy-size--lg': props.containerWidth > WIDTH_LG,
        'uppy-size--xl': props.containerWidth > WIDTH_XL,
        'uppy-size--height-md': props.containerHeight > HEIGHT_MD,
        'uppy-Dashboard--isAddFilesPanelVisible': props.showAddFilesPanel,
        'uppy-Dashboard--isInnerWrapVisible': props.areInsidesReadyToBeVisible
      });
      var itemsPerRow = 1;
      if (props.containerWidth > WIDTH_XL) {
        itemsPerRow = 5;
      } else if (props.containerWidth > WIDTH_LG) {
        itemsPerRow = 4;
      } else if (props.containerWidth > WIDTH_MD) {
        itemsPerRow = 3;
      }
      var showFileList = props.showSelectedFiles && !noFiles;
            SRTlib.send('], "end": "module.exports.Dashboard"},');

      return h("div", {
        class: dashboardClassName,
        "data-uppy-theme": props.theme,
        "data-uppy-num-acquirers": props.acquirers.length,
        "data-uppy-drag-drop-supported": isDragDropSupported(),
        "aria-hidden": props.inline ? 'false' : props.isHidden,
        "aria-label": !props.inline ? props.i18n('dashboardWindowTitle') : props.i18n('dashboardTitle'),
        onpaste: props.handlePaste,
        onDragOver: props.handleDragOver,
        onDragLeave: props.handleDragLeave,
        onDrop: props.handleDrop
      }, h("div", {
        class: "uppy-Dashboard-overlay",
        tabindex: -1,
        onclick: props.handleClickOutside
      }), h("div", {
        class: "uppy-Dashboard-inner",
        "aria-modal": !props.inline && 'true',
        role: !props.inline && 'dialog',
        style: {
          width: props.inline && props.width ? props.width : '',
          height: props.inline && props.height ? props.height : ''
        }
      }, !props.inline ? h("button", {
        class: "uppy-u-reset uppy-Dashboard-close",
        type: "button",
        "aria-label": props.i18n('closeModal'),
        title: props.i18n('closeModal'),
        onclick: props.closeModal
      }, h("span", {
        "aria-hidden": "true"
      }, "\xD7")) : null, h("div", {
        class: "uppy-Dashboard-innerWrap"
      }, h("div", {
        class: "uppy-Dashboard-dropFilesHereHint"
      }, props.i18n('dropHint')), showFileList && h(PanelTopBar, props), showFileList ? h(FileList, _extends({}, props, {
        itemsPerRow: itemsPerRow
      })) : h(AddFiles, _extends({}, props, {
        isSizeMD: isSizeMD
      })), h(TransitionWrapper, null, props.showAddFilesPanel ? h(AddFilesPanel, _extends({
        key: "AddFilesPanel"
      }, props, {
        isSizeMD: isSizeMD
      })) : null), h(TransitionWrapper, null, props.fileCardFor ? h(FileCard, _extends({
        key: "FileCard"
      }, props)) : null), h(TransitionWrapper, null, props.activePickerPanel ? h(PickerPanelContent, _extends({
        key: "PickerPanelContent"
      }, props)) : null), h("div", {
        class: "uppy-Dashboard-progressindicators"
      }, props.progressindicators.map(function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.Dashboard.ReturnStatement.h.h.h.h.props.progressindicators.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports.Dashboard.ReturnStatement.h.h.h.h.props.progressindicators.map"},');

        return props.getPlugin(target.id).render(props.state);
                SRTlib.send('], "end": "module.exports.Dashboard.ReturnStatement.h.h.h.h.props.progressindicators.map"},');

      })))));
            SRTlib.send('], "end": "module.exports.Dashboard"},');

    };
        SRTlib.send('], "end": "emptyKey286"},');

  }, {
    "./../../../utils/lib/isDragDropSupported": 341,
    "./AddFiles": 253,
    "./AddFilesPanel": 254,
    "./FileCard": 256,
    "./FileList": 263,
    "./PickerPanelContent": 265,
    "./PickerPanelTopBar": 266,
    "classnames": 53,
    "preact": 160,
    "preact-css-transition-group": 159
  }],
  256: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey288", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends6", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends6"},');

        return target;
                SRTlib.send('], "end": "_extends6"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('preact'), h = _require.h, Component = _require.Component;
    var getFileTypeIcon = require('../../utils/getFileTypeIcon');
    var ignoreEvent = require('../../utils/ignoreEvent.js');
    var FilePreview = require('../FilePreview');
    var FileCard = (function (_Component) {
            SRTlib.send(`{ "anonymous": true, "function": "FileCard", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(FileCard, _Component);
      function FileCard(props) {
                SRTlib.send(`{ "anonymous": false, "function": "FileCard", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this;
        _this = _Component.call(this, props) || this;
        _this.saveOnEnter = function (ev) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.saveOnEnter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (ev.keyCode === 13) {
            ev.stopPropagation();
            ev.preventDefault();
            var file = _this.props.files[_this.props.fileCardFor];
            _this.props.saveFileCard(_this.state.formState, file.id);
          }
                    SRTlib.send('], "end": "_this.saveOnEnter"},');

        };
        _this.updateMeta = function (newVal, name) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.updateMeta", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var _extends2;
          _this.setState({
            formState: _extends({}, _this.state.formState, (_extends2 = {}, _extends2[name] = newVal, _extends2))
          });
                    SRTlib.send('], "end": "_this.updateMeta"},');

        };
        _this.handleSave = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleSave", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var fileID = _this.props.fileCardFor;
          _this.props.saveFileCard(_this.state.formState, fileID);
                    SRTlib.send('], "end": "_this.handleSave"},');

        };
        _this.handleCancel = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleCancel", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.props.toggleFileCard();
                    SRTlib.send('], "end": "_this.handleCancel"},');

        };
        _this.renderMetaFields = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.renderMetaFields", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var metaFields = _this.props.metaFields || [];
          var fieldCSSClasses = {
            text: 'uppy-u-reset uppy-c-textInput uppy-Dashboard-FileCard-input'
          };
                    SRTlib.send('], "end": "_this.renderMetaFields"},');

          return metaFields.map(function (field) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.renderMetaFields.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var id = "uppy-Dashboard-FileCard-input-" + field.id;
                        SRTlib.send('], "end": "_this.renderMetaFields.ReturnStatement"},');

            return h("fieldset", {
              key: field.id,
              class: "uppy-Dashboard-FileCard-fieldset"
            }, h("label", {
              class: "uppy-Dashboard-FileCard-label",
              for: id
            }, field.name), field.render !== undefined ? field.render({
              value: _this.state.formState[field.id],
              onChange: function onChange(newVal) {
                                SRTlib.send(`{ "anonymous": true, "function": "_this.renderMetaFields.ReturnStatement.ReturnStatement.h.onChange.onChange", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "_this.renderMetaFields.ReturnStatement.ReturnStatement.h.onChange.onChange"},');

                return _this.updateMeta(newVal, field.id);
                                SRTlib.send('], "end": "_this.renderMetaFields.ReturnStatement.ReturnStatement.h.onChange.onChange"},');

              },
              fieldCSSClasses: fieldCSSClasses
            }, h) : h("input", {
              class: fieldCSSClasses.text,
              id: id,
              type: field.type || 'text',
              value: _this.state.formState[field.id],
              placeholder: field.placeholder,
              onkeyup: _this.saveOnEnter,
              onkeydown: _this.saveOnEnter,
              onkeypress: _this.saveOnEnter,
              oninput: function oninput(ev) {
                                SRTlib.send(`{ "anonymous": true, "function": "_this.renderMetaFields.ReturnStatement.ReturnStatement.h.h.oninput.oninput", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "_this.renderMetaFields.ReturnStatement.ReturnStatement.h.h.oninput.oninput"},');

                return _this.updateMeta(ev.target.value, field.id);
                                SRTlib.send('], "end": "_this.renderMetaFields.ReturnStatement.ReturnStatement.h.h.oninput.oninput"},');

              },
              "data-uppy-super-focusable": true
            }));
                        SRTlib.send('], "end": "_this.renderMetaFields.ReturnStatement"},');

          });
                    SRTlib.send('], "end": "_this.renderMetaFields"},');

        };
        var _file = _this.props.files[_this.props.fileCardFor];
        var _metaFields = _this.props.metaFields || [];
        var storedMetaData = {};
        _metaFields.forEach(function (field) {
                    SRTlib.send(`{ "anonymous": true, "function": "emptyKey287", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          storedMetaData[field.id] = _file.meta[field.id] || '';
                    SRTlib.send('], "end": "emptyKey287"},');

        });
        _this.state = {
          formState: storedMetaData
        };
                SRTlib.send('], "end": "FileCard"},');

        return _this;
                SRTlib.send('], "end": "FileCard"},');

      }
      var _proto = FileCard.prototype;
      _proto.render = function render() {
                SRTlib.send(`{ "anonymous": true, "function": "FileCard._proto.render.render", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var file = this.props.files[this.props.fileCardFor];
                SRTlib.send('], "end": "FileCard._proto.render.render"},');

        return h("div", {
          class: "uppy-Dashboard-FileCard",
          "data-uppy-panelType": "FileCard",
          onDragOver: ignoreEvent,
          onDragLeave: ignoreEvent,
          onDrop: ignoreEvent,
          onPaste: ignoreEvent
        }, h("div", {
          class: "uppy-DashboardContent-bar"
        }, h("div", {
          class: "uppy-DashboardContent-title",
          role: "heading",
          "aria-level": "1"
        }, this.props.i18nArray('editing', {
          file: h("span", {
            class: "uppy-DashboardContent-titleFile"
          }, file.meta ? file.meta.name : file.name)
        })), h("button", {
          class: "uppy-DashboardContent-back",
          type: "button",
          title: this.props.i18n('finishEditingFile'),
          onclick: this.handleSave
        }, this.props.i18n('done'))), h("div", {
          class: "uppy-Dashboard-FileCard-inner"
        }, h("div", {
          class: "uppy-Dashboard-FileCard-preview",
          style: {
            backgroundColor: getFileTypeIcon(file.type).color
          }
        }, h(FilePreview, {
          file: file
        })), h("div", {
          class: "uppy-Dashboard-FileCard-info"
        }, this.renderMetaFields()), h("div", {
          class: "uppy-Dashboard-FileCard-actions"
        }, h("button", {
          class: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Dashboard-FileCard-actionsBtn",
          type: "button",
          onclick: this.handleSave
        }, this.props.i18n('saveChanges')), h("button", {
          class: "uppy-u-reset uppy-c-btn uppy-c-btn-link uppy-Dashboard-FileCard-actionsBtn",
          type: "button",
          onclick: this.handleCancel
        }, this.props.i18n('cancel')))));
                SRTlib.send('], "end": "FileCard._proto.render.render"},');

      };
            SRTlib.send('], "end": "FileCard"},');

      return FileCard;
            SRTlib.send('], "end": "FileCard"},');

    })(Component);
    module.exports = FileCard;
        SRTlib.send('], "end": "emptyKey288"},');

  }, {
    "../../utils/getFileTypeIcon": 273,
    "../../utils/ignoreEvent.js": 274,
    "../FilePreview": 264,
    "preact": 160
  }],
  257: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey289", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var copyToClipboard = require('../../../utils/copyToClipboard');
    var _require2 = require('../../icons'), iconPencil = _require2.iconPencil, iconCross = _require2.iconCross, iconCopyLink = _require2.iconCopyLink;
    function EditButton(_ref) {
            SRTlib.send(`{ "anonymous": false, "function": "EditButton", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var file = _ref.file, uploadInProgressOrComplete = _ref.uploadInProgressOrComplete, metaFields = _ref.metaFields, i18n = _ref.i18n, onClick = _ref.onClick;
      if (!uploadInProgressOrComplete && metaFields && metaFields.length > 0) {
                SRTlib.send('], "end": "EditButton"},');

        return h("button", {
          class: "uppy-u-reset uppy-DashboardItem-action uppy-DashboardItem-action--edit",
          type: "button",
          "aria-label": i18n('editFile') + ' ' + file.meta.name,
          title: i18n('editFile'),
          onclick: function onclick() {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.h.onclick.onclick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "ReturnStatement.h.onclick.onclick"},');

            return onClick();
                        SRTlib.send('], "end": "ReturnStatement.h.onclick.onclick"},');

          }
        }, iconPencil());
      }
            SRTlib.send('], "end": "EditButton"},');

      return null;
            SRTlib.send('], "end": "EditButton"},');

    }
    function RemoveButton(_ref2) {
            SRTlib.send(`{ "anonymous": false, "function": "RemoveButton", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var i18n = _ref2.i18n, onClick = _ref2.onClick;
            SRTlib.send('], "end": "RemoveButton"},');

      return h("button", {
        class: "uppy-u-reset uppy-DashboardItem-action uppy-DashboardItem-action--remove",
        type: "button",
        "aria-label": i18n('removeFile'),
        title: i18n('removeFile'),
        onclick: function onclick() {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.h.onclick.onclick2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.h.onclick.onclick2"},');

          return onClick();
                    SRTlib.send('], "end": "ReturnStatement.h.onclick.onclick2"},');

        }
      }, iconCross());
            SRTlib.send('], "end": "RemoveButton"},');

    }
    var copyLinkToClipboard = function copyLinkToClipboard(event, props) {
            SRTlib.send(`{ "anonymous": false, "function": "copyLinkToClipboard", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      copyToClipboard(props.file.uploadURL, props.i18n('copyLinkToClipboardFallback')).then(function () {
                SRTlib.send(`{ "anonymous": true, "function": "copyLinkToClipboard.copyLinkToClipboard.then.catch.then.then.catch.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        props.log('Link copied to clipboard.');
        props.info(props.i18n('copyLinkToClipboardSuccess'), 'info', 3000);
                SRTlib.send('], "end": "copyLinkToClipboard.copyLinkToClipboard.then.catch.then.then.catch.then"},');

      }).catch(props.log).then(function () {
                SRTlib.send(`{ "anonymous": true, "function": "copyLinkToClipboard.copyLinkToClipboard.then.catch.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "copyLinkToClipboard.copyLinkToClipboard.then.catch.then"},');

        return event.target.focus({
          preventScroll: true
        });
                SRTlib.send('], "end": "copyLinkToClipboard.copyLinkToClipboard.then.catch.then"},');

      });
            SRTlib.send('], "end": "copyLinkToClipboard"},');

    };
    function CopyLinkButton(props) {
            SRTlib.send(`{ "anonymous": false, "function": "CopyLinkButton", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "CopyLinkButton"},');

      return h("button", {
        class: "uppy-u-reset uppy-DashboardItem-action uppy-DashboardItem-action--copyLink",
        type: "button",
        "aria-label": props.i18n('copyLink'),
        title: props.i18n('copyLink'),
        onclick: function onclick(event) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.h.onclick.onclick3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.h.onclick.onclick3"},');

          return copyLinkToClipboard(event, props);
                    SRTlib.send('], "end": "ReturnStatement.h.onclick.onclick3"},');

        }
      }, iconCopyLink());
            SRTlib.send('], "end": "CopyLinkButton"},');

    }
    module.exports = function Buttons(props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.Buttons", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var file = props.file, uploadInProgressOrComplete = props.uploadInProgressOrComplete, metaFields = props.metaFields, showLinkToFileUploadResult = props.showLinkToFileUploadResult, showRemoveButton = props.showRemoveButton, i18n = props.i18n, removeFile = props.removeFile, toggleFileCard = props.toggleFileCard, log = props.log, info = props.info;
            SRTlib.send('], "end": "module.exports.Buttons"},');

      return h("div", {
        className: "uppy-DashboardItem-actionWrapper"
      }, h(EditButton, {
        i18n: i18n,
        file: file,
        uploadInProgressOrComplete: uploadInProgressOrComplete,
        metaFields: metaFields,
        onClick: function onClick() {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports.Buttons.ReturnStatement.h.h.onClick.onClick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "module.exports.Buttons.ReturnStatement.h.h.onClick.onClick"},');

          return toggleFileCard(file.id);
                    SRTlib.send('], "end": "module.exports.Buttons.ReturnStatement.h.h.onClick.onClick"},');

        }
      }), showLinkToFileUploadResult && file.uploadURL ? h(CopyLinkButton, {
        file: file,
        i18n: i18n,
        info: info,
        log: log
      }) : null, showRemoveButton ? h(RemoveButton, {
        i18n: i18n,
        info: props.info,
        log: props.log,
        onClick: function onClick() {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports.Buttons.ReturnStatement.h.h.onClick.onClick2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "module.exports.Buttons.ReturnStatement.h.h.onClick.onClick2"},');

          return removeFile(file.id);
                    SRTlib.send('], "end": "module.exports.Buttons.ReturnStatement.h.h.onClick.onClick2"},');

        }
      }) : null);
            SRTlib.send('], "end": "module.exports.Buttons"},');

    };
        SRTlib.send('], "end": "emptyKey289"},');

  }, {
    "../../../utils/copyToClipboard": 270,
    "../../icons": 268,
    "preact": 160
  }],
  258: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey290", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var prettierBytes = require('@transloadit/prettier-bytes');
    var truncateString = require('../../../utils/truncateString');
    var renderAcquirerIcon = function renderAcquirerIcon(acquirer, props) {
            SRTlib.send(`{ "anonymous": false, "function": "renderAcquirerIcon", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "renderAcquirerIcon"},');

      return h("span", {
        title: props.i18n('fileSource', {
          name: acquirer.name
        })
      }, acquirer.icon());
            SRTlib.send('], "end": "renderAcquirerIcon"},');

    };
    var renderFileSource = function renderFileSource(props) {
            SRTlib.send(`{ "anonymous": false, "function": "renderFileSource", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "renderFileSource"},');

      return props.file.source && props.file.source !== props.id && h("div", {
        class: "uppy-DashboardItem-sourceIcon"
      }, props.acquirers.map(function (acquirer) {
                SRTlib.send(`{ "anonymous": true, "function": "renderFileSource.renderFileSource.ReturnStatement.h.props.acquirers.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (acquirer.id === props.file.source) {
                    SRTlib.send('], "end": "renderFileSource.renderFileSource.ReturnStatement.h.props.acquirers.map"},');

          return renderAcquirerIcon(acquirer, props);
        }
                SRTlib.send('], "end": "renderFileSource.renderFileSource.ReturnStatement.h.props.acquirers.map"},');

      }));
            SRTlib.send('], "end": "renderFileSource"},');

    };
    var renderFileName = function renderFileName(props) {
            SRTlib.send(`{ "anonymous": false, "function": "renderFileName", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var maxNameLength;
      if (props.containerWidth <= 352) {
        maxNameLength = 35;
      } else if (props.containerWidth <= 576) {
        maxNameLength = 60;
      } else {
        maxNameLength = 30;
      }
            SRTlib.send('], "end": "renderFileName"},');

      return h("div", {
        class: "uppy-DashboardItem-name",
        title: props.file.meta.name
      }, truncateString(props.file.meta.name, maxNameLength));
            SRTlib.send('], "end": "renderFileName"},');

    };
    var renderFileSize = function renderFileSize(props) {
            SRTlib.send(`{ "anonymous": false, "function": "renderFileSize", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "renderFileSize"},');

      return props.file.data.size && h("div", {
        class: "uppy-DashboardItem-statusSize"
      }, prettierBytes(props.file.data.size));
            SRTlib.send('], "end": "renderFileSize"},');

    };
    var ErrorButton = function ErrorButton(_ref) {
            SRTlib.send(`{ "anonymous": false, "function": "ErrorButton", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var file = _ref.file, onClick = _ref.onClick;
      if (file.error) {
                SRTlib.send('], "end": "ErrorButton"},');

        return h("span", {
          class: "uppy-DashboardItem-errorDetails",
          "aria-label": file.error,
          "data-microtip-position": "bottom",
          "data-microtip-size": "medium",
          role: "tooltip",
          onclick: onClick
        }, "?");
      }
            SRTlib.send('], "end": "ErrorButton"},');

      return null;
            SRTlib.send('], "end": "ErrorButton"},');

    };
    module.exports = function FileInfo(props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.FileInfo", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.FileInfo"},');

      return h("div", {
        class: "uppy-DashboardItem-fileInfo",
        "data-uppy-file-source": props.file.source
      }, renderFileName(props), h("div", {
        class: "uppy-DashboardItem-status"
      }, renderFileSize(props), renderFileSource(props), h(ErrorButton, {
        file: props.file,
        onClick: function onClick() {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports.FileInfo.ReturnStatement.h.h.h.onClick.onClick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          alert(props.file.error);
                    SRTlib.send('], "end": "module.exports.FileInfo.ReturnStatement.h.h.h.onClick.onClick"},');

        }
      })));
            SRTlib.send('], "end": "module.exports.FileInfo"},');

    };
        SRTlib.send('], "end": "emptyKey290"},');

  }, {
    "../../../utils/truncateString": 276,
    "@transloadit/prettier-bytes": 251,
    "preact": 160
  }],
  259: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey291", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var FilePreview = require('../../FilePreview');
    var getFileTypeIcon = require('../../../utils/getFileTypeIcon');
    module.exports = function FilePreviewAndLink(props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.FilePreviewAndLink", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.FilePreviewAndLink"},');

      return h("div", {
        class: "uppy-DashboardItem-previewInnerWrap",
        style: {
          backgroundColor: getFileTypeIcon(props.file.type).color
        }
      }, props.showLinkToFileUploadResult && props.file.uploadURL && h("a", {
        class: "uppy-DashboardItem-previewLink",
        href: props.file.uploadURL,
        rel: "noreferrer noopener",
        target: "_blank",
        "aria-label": props.file.meta.name
      }), h(FilePreview, {
        file: props.file
      }));
            SRTlib.send('], "end": "module.exports.FilePreviewAndLink"},');

    };
        SRTlib.send('], "end": "emptyKey291"},');

  }, {
    "../../../utils/getFileTypeIcon": 273,
    "../../FilePreview": 264,
    "preact": 160
  }],
  260: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey292", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var circleLength = 2 * Math.PI * 15;
    module.exports = function PauseResumeCancelIcon(props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.PauseResumeCancelIcon", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.PauseResumeCancelIcon"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        width: "70",
        height: "70",
        viewBox: "0 0 36 36",
        class: "UppyIcon UppyIcon-progressCircle"
      }, h("g", {
        class: "progress-group"
      }, h("circle", {
        class: "bg",
        r: "15",
        cx: "18",
        cy: "18",
        "stroke-width": "2",
        fill: "none"
      }), h("circle", {
        class: "progress",
        r: "15",
        cx: "18",
        cy: "18",
        transform: "rotate(-90, 18, 18)",
        "stroke-width": "2",
        fill: "none",
        "stroke-dasharray": circleLength,
        "stroke-dashoffset": circleLength - circleLength / 100 * props.progress
      })), !props.hidePauseResumeCancelButtons && h("g", null, h("polygon", {
        class: "play",
        transform: "translate(3, 3)",
        points: "12 20 12 10 20 15"
      }), h("g", {
        class: "pause",
        transform: "translate(14.5, 13)"
      }, h("rect", {
        x: "0",
        y: "0",
        width: "2",
        height: "10",
        rx: "0"
      }), h("rect", {
        x: "5",
        y: "0",
        width: "2",
        height: "10",
        rx: "0"
      })), h("polygon", {
        class: "cancel",
        transform: "translate(2, 2)",
        points: "19.8856516 11.0625 16 14.9481516 12.1019737 11.0625 11.0625 12.1143484 14.9481516 16 11.0625 19.8980263 12.1019737 20.9375 16 17.0518484 19.8856516 20.9375 20.9375 19.8980263 17.0518484 16 20.9375 12"
      })), h("polygon", {
        class: "check",
        transform: "translate(2, 3)",
        points: "14 22.5 7 15.2457065 8.99985857 13.1732815 14 18.3547104 22.9729883 9 25 11.1005634"
      }));
            SRTlib.send('], "end": "module.exports.PauseResumeCancelIcon"},');

    };
        SRTlib.send('], "end": "emptyKey292"},');

  }, {
    "preact": 160
  }],
  261: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey293", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var _require2 = require('../../icons'), iconRetry = _require2.iconRetry;
    var PauseResumeCancelIcon = require('./PauseResumeCancelIcon');
    function onPauseResumeCancelRetry(props) {
            SRTlib.send(`{ "anonymous": false, "function": "onPauseResumeCancelRetry", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (props.isUploaded) {
                SRTlib.send('], "end": "onPauseResumeCancelRetry"},');

        return;
      }
      if (props.error && !props.hideRetryButton) {
        props.retryUpload(props.file.id);
                SRTlib.send('], "end": "onPauseResumeCancelRetry"},');

        return;
      }
      if (props.hidePauseResumeCancelButtons) {
                SRTlib.send('], "end": "onPauseResumeCancelRetry"},');

        return;
      }
      if (props.resumableUploads) {
        props.pauseUpload(props.file.id);
      } else if (props.individualCancellation) {
        props.cancelUpload(props.file.id);
      }
            SRTlib.send('], "end": "onPauseResumeCancelRetry"},');

    }
    function progressIndicatorTitle(props) {
            SRTlib.send(`{ "anonymous": false, "function": "progressIndicatorTitle", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (props.isUploaded) {
                SRTlib.send('], "end": "progressIndicatorTitle"},');

        return props.i18n('uploadComplete');
      }
      if (props.error) {
                SRTlib.send('], "end": "progressIndicatorTitle"},');

        return props.i18n('retryUpload');
      }
      if (props.resumableUploads) {
        if (props.file.isPaused) {
                    SRTlib.send('], "end": "progressIndicatorTitle"},');

          return props.i18n('resumeUpload');
        }
                SRTlib.send('], "end": "progressIndicatorTitle"},');

        return props.i18n('pauseUpload');
      } else if (props.individualCancellation) {
                SRTlib.send('], "end": "progressIndicatorTitle"},');

        return props.i18n('cancelUpload');
      }
            SRTlib.send('], "end": "progressIndicatorTitle"},');

      return '';
            SRTlib.send('], "end": "progressIndicatorTitle"},');

    }
    module.exports = function FileProgress(props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.FileProgress", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (props.hideRetryButton && props.error || props.isUploaded && props.showRemoveButtonAfterComplete) {
                SRTlib.send('], "end": "module.exports.FileProgress"},');

        return h("div", {
          class: "uppy-DashboardItem-progress"
        });
      } else if (props.isUploaded || props.hidePauseResumeCancelButtons && !props.error) {
                SRTlib.send('], "end": "module.exports.FileProgress"},');

        return h("div", {
          class: "uppy-DashboardItem-progress"
        }, h("div", {
          class: "uppy-DashboardItem-progressIndicator"
        }, h(PauseResumeCancelIcon, {
          progress: props.file.progress.percentage,
          hidePauseResumeCancelButtons: props.hidePauseResumeCancelButtons
        })));
      } else {
                SRTlib.send('], "end": "module.exports.FileProgress"},');

        return h("div", {
          class: "uppy-DashboardItem-progress"
        }, h("button", {
          class: "uppy-u-reset uppy-DashboardItem-progressIndicator",
          type: "button",
          "aria-label": progressIndicatorTitle(props),
          title: progressIndicatorTitle(props),
          onclick: function onclick() {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports.FileProgress.ReturnStatement.h.h.onclick.onclick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "module.exports.FileProgress.ReturnStatement.h.h.onclick.onclick"},');

            return onPauseResumeCancelRetry(props);
                        SRTlib.send('], "end": "module.exports.FileProgress.ReturnStatement.h.h.onclick.onclick"},');

          }
        }, props.error ? props.hideRetryButton ? null : iconRetry() : h(PauseResumeCancelIcon, {
          progress: props.file.progress.percentage,
          hidePauseResumeCancelButtons: props.hidePauseResumeCancelButtons
        })));
      }
            SRTlib.send('], "end": "module.exports.FileProgress"},');

    };
        SRTlib.send('], "end": "emptyKey293"},');

  }, {
    "../../icons": 268,
    "./PauseResumeCancelIcon": 260,
    "preact": 160
  }],
  262: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey294", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('preact'), h = _require.h, Component = _require.Component;
    var classNames = require('classnames');
    var shallowEqual = require('is-shallow-equal');
    var FilePreviewAndLink = require('./FilePreviewAndLink');
    var FileProgress = require('./FileProgress');
    var FileInfo = require('./FileInfo');
    var Buttons = require('./Buttons');
    module.exports = (function (_Component) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports21", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(FileItem, _Component);
      function FileItem() {
                SRTlib.send(`{ "anonymous": false, "function": "FileItem", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "FileItem"},');

        return _Component.apply(this, arguments) || this;
                SRTlib.send('], "end": "FileItem"},');

      }
      var _proto = FileItem.prototype;
      _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.shouldComponentUpdate.shouldComponentUpdate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.shouldComponentUpdate.shouldComponentUpdate"},');

        return !shallowEqual(this.props, nextProps);
                SRTlib.send('], "end": "module.exports._proto.shouldComponentUpdate.shouldComponentUpdate"},');

      };
      _proto.componentDidMount = function componentDidMount() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.componentDidMount.componentDidMount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var file = this.props.file;
        if (!file.preview) {
          this.props.handleRequestThumbnail(file);
        }
                SRTlib.send('], "end": "module.exports._proto.componentDidMount.componentDidMount"},');

      };
      _proto.componentWillUnmount = function componentWillUnmount() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.componentWillUnmount.componentWillUnmount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var file = this.props.file;
        if (!file.preview) {
          this.props.handleCancelThumbnail(file);
        }
                SRTlib.send('], "end": "module.exports._proto.componentWillUnmount.componentWillUnmount"},');

      };
      _proto.render = function render() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.render.render2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var file = this.props.file;
        var isProcessing = file.progress.preprocess || file.progress.postprocess;
        var isUploaded = file.progress.uploadComplete && !isProcessing && !file.error;
        var uploadInProgressOrComplete = file.progress.uploadStarted || isProcessing;
        var uploadInProgress = file.progress.uploadStarted && !file.progress.uploadComplete || isProcessing;
        var isPaused = file.isPaused || false;
        var error = file.error || false;
        var showRemoveButton = this.props.individualCancellation ? !isUploaded : !uploadInProgress && !isUploaded;
        if (isUploaded && this.props.showRemoveButtonAfterComplete) {
          showRemoveButton = true;
        }
        var dashboardItemClass = classNames({
          'uppy-u-reset': true,
          'uppy-DashboardItem': true,
          'is-inprogress': uploadInProgress,
          'is-processing': isProcessing,
          'is-complete': isUploaded,
          'is-paused': isPaused,
          'is-error': !!error,
          'is-resumable': this.props.resumableUploads,
          'is-noIndividualCancellation': !this.props.individualCancellation
        });
                SRTlib.send('], "end": "module.exports._proto.render.render2"},');

        return h("div", {
          class: dashboardItemClass,
          id: "uppy_" + file.id,
          role: this.props.role
        }, h("div", {
          class: "uppy-DashboardItem-preview"
        }, h(FilePreviewAndLink, {
          file: file,
          showLinkToFileUploadResult: this.props.showLinkToFileUploadResult
        }), h(FileProgress, {
          file: file,
          error: error,
          isUploaded: isUploaded,
          hideRetryButton: this.props.hideRetryButton,
          hidePauseResumeCancelButtons: this.props.hidePauseResumeCancelButtons,
          showRemoveButtonAfterComplete: this.props.showRemoveButtonAfterComplete,
          resumableUploads: this.props.resumableUploads,
          individualCancellation: this.props.individualCancellation,
          pauseUpload: this.props.pauseUpload,
          cancelUpload: this.props.cancelUpload,
          retryUpload: this.props.retryUpload,
          i18n: this.props.i18n
        })), h("div", {
          class: "uppy-DashboardItem-fileInfoAndButtons"
        }, h(FileInfo, {
          file: file,
          id: this.props.id,
          acquirers: this.props.acquirers,
          containerWidth: this.props.containerWidth,
          i18n: this.props.i18n
        }), h(Buttons, {
          file: file,
          metaFields: this.props.metaFields,
          showLinkToFileUploadResult: this.props.showLinkToFileUploadResult,
          showRemoveButton: showRemoveButton,
          uploadInProgressOrComplete: uploadInProgressOrComplete,
          removeFile: this.props.removeFile,
          toggleFileCard: this.props.toggleFileCard,
          i18n: this.props.i18n,
          log: this.props.log,
          info: this.props.info
        })));
                SRTlib.send('], "end": "module.exports._proto.render.render2"},');

      };
            SRTlib.send('], "end": "module.exports21"},');

      return FileItem;
            SRTlib.send('], "end": "module.exports21"},');

    })(Component);
        SRTlib.send('], "end": "emptyKey294"},');

  }, {
    "./Buttons": 257,
    "./FileInfo": 258,
    "./FilePreviewAndLink": 259,
    "./FileProgress": 261,
    "classnames": 53,
    "is-shallow-equal": 135,
    "preact": 160
  }],
  263: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey296", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends7", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends7"},');

        return target;
                SRTlib.send('], "end": "_extends7"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var FileItem = require('./FileItem/index.js');
    var VirtualList = require('./VirtualList');
    var classNames = require('classnames');
    var _require = require('preact'), h = _require.h;
    function chunks(list, size) {
            SRTlib.send(`{ "anonymous": false, "function": "chunks", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var chunked = [];
      var currentChunk = [];
      list.forEach(function (item, i) {
                SRTlib.send(`{ "anonymous": true, "function": "emptyKey295", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (currentChunk.length < size) {
          currentChunk.push(item);
        } else {
          chunked.push(currentChunk);
          currentChunk = [item];
        }
                SRTlib.send('], "end": "emptyKey295"},');

      });
      if (currentChunk.length) chunked.push(currentChunk);
            SRTlib.send('], "end": "chunks"},');

      return chunked;
            SRTlib.send('], "end": "chunks"},');

    }
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports22", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var noFiles = props.totalFileCount === 0;
      var dashboardFilesClass = classNames('uppy-Dashboard-files', {
        'uppy-Dashboard-files--noFiles': noFiles
      });
      var rowHeight = props.itemsPerRow === 1 ? 71 : 200;
      var fileProps = {
        id: props.id,
        error: props.error,
        i18n: props.i18n,
        log: props.log,
        info: props.info,
        acquirers: props.acquirers,
        resumableUploads: props.resumableUploads,
        individualCancellation: props.individualCancellation,
        hideRetryButton: props.hideRetryButton,
        hidePauseResumeCancelButtons: props.hidePauseResumeCancelButtons,
        showLinkToFileUploadResult: props.showLinkToFileUploadResult,
        showRemoveButtonAfterComplete: props.showRemoveButtonAfterComplete,
        isWide: props.isWide,
        metaFields: props.metaFields,
        retryUpload: props.retryUpload,
        pauseUpload: props.pauseUpload,
        cancelUpload: props.cancelUpload,
        toggleFileCard: props.toggleFileCard,
        removeFile: props.removeFile,
        handleRequestThumbnail: props.handleRequestThumbnail,
        handleCancelThumbnail: props.handleCancelThumbnail
      };
      var rows = chunks(Object.keys(props.files), props.itemsPerRow);
      function renderRow(row) {
                SRTlib.send(`{ "anonymous": false, "function": "renderRow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "renderRow"},');

        return h("div", {
          role: "presentation",
          key: row[0]
        }, row.map(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.h", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.h"},');

          return h(FileItem, _extends({
            key: fileID
          }, fileProps, {
            role: "listitem",
            file: props.files[fileID]
          }));
                    SRTlib.send('], "end": "ReturnStatement.h"},');

        }));
                SRTlib.send('], "end": "renderRow"},');

      }
            SRTlib.send('], "end": "module.exports22"},');

      return h(VirtualList, {
        class: dashboardFilesClass,
        role: "list",
        data: rows,
        renderRow: renderRow,
        rowHeight: rowHeight
      });
            SRTlib.send('], "end": "module.exports22"},');

    };
        SRTlib.send('], "end": "emptyKey296"},');

  }, {
    "./FileItem/index.js": 262,
    "./VirtualList": 267,
    "classnames": 53,
    "preact": 160
  }],
  264: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey297", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var getFileTypeIcon = require('../utils/getFileTypeIcon');
    var _require = require('preact'), h = _require.h;
    module.exports = function FilePreview(props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.FilePreview", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var file = props.file;
      if (file.preview) {
                SRTlib.send('], "end": "module.exports.FilePreview"},');

        return h("img", {
          class: "uppy-DashboardItem-previewImg",
          alt: file.name,
          src: file.preview
        });
      }
      var _getFileTypeIcon = getFileTypeIcon(file.type), color = _getFileTypeIcon.color, icon = _getFileTypeIcon.icon;
            SRTlib.send('], "end": "module.exports.FilePreview"},');

      return h("div", {
        class: "uppy-DashboardItem-previewIconWrap"
      }, h("span", {
        class: "uppy-DashboardItem-previewIcon",
        style: {
          color: color
        }
      }, icon), h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "uppy-DashboardItem-previewIconBg",
        width: "58",
        height: "76",
        viewBox: "0 0 58 76"
      }, h("rect", {
        fill: "#FFF",
        width: "58",
        height: "76",
        rx: "3",
        "fill-rule": "evenodd"
      })));
            SRTlib.send('], "end": "module.exports.FilePreview"},');

    };
        SRTlib.send('], "end": "emptyKey297"},');

  }, {
    "../utils/getFileTypeIcon": 273,
    "preact": 160
  }],
  265: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey298", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var ignoreEvent = require('../utils/ignoreEvent.js');
    function PickerPanelContent(props) {
            SRTlib.send(`{ "anonymous": false, "function": "PickerPanelContent", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "PickerPanelContent"},');

      return h("div", {
        class: "uppy-DashboardContent-panel",
        role: "tabpanel",
        "data-uppy-panelType": "PickerPanel",
        id: "uppy-DashboardContent-panel--" + props.activePickerPanel.id,
        onDragOver: ignoreEvent,
        onDragLeave: ignoreEvent,
        onDrop: ignoreEvent,
        onPaste: ignoreEvent
      }, h("div", {
        class: "uppy-DashboardContent-bar"
      }, h("div", {
        class: "uppy-DashboardContent-title",
        role: "heading",
        "aria-level": "1"
      }, props.i18n('importFrom', {
        name: props.activePickerPanel.name
      })), h("button", {
        class: "uppy-DashboardContent-back",
        type: "button",
        onclick: props.hideAllPanels
      }, props.i18n('done'))), h("div", {
        class: "uppy-DashboardContent-panelBody"
      }, props.getPlugin(props.activePickerPanel.id).render(props.state)));
            SRTlib.send('], "end": "PickerPanelContent"},');

    }
    module.exports = PickerPanelContent;
        SRTlib.send('], "end": "emptyKey298"},');

  }, {
    "../utils/ignoreEvent.js": 274,
    "preact": 160
  }],
  266: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey299", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var _require2 = require('./icons'), iconPlus = _require2.iconPlus;
    var uploadStates = {
      STATE_ERROR: 'error',
      STATE_WAITING: 'waiting',
      STATE_PREPROCESSING: 'preprocessing',
      STATE_UPLOADING: 'uploading',
      STATE_POSTPROCESSING: 'postprocessing',
      STATE_COMPLETE: 'complete',
      STATE_PAUSED: 'paused'
    };
    function getUploadingState(isAllErrored, isAllComplete, isAllPaused, files) {
            SRTlib.send(`{ "anonymous": false, "function": "getUploadingState", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (files === void 0) {
        files = {};
      }
      if (isAllErrored) {
                SRTlib.send('], "end": "getUploadingState"},');

        return uploadStates.STATE_ERROR;
      }
      if (isAllComplete) {
                SRTlib.send('], "end": "getUploadingState"},');

        return uploadStates.STATE_COMPLETE;
      }
      if (isAllPaused) {
                SRTlib.send('], "end": "getUploadingState"},');

        return uploadStates.STATE_PAUSED;
      }
      var state = uploadStates.STATE_WAITING;
      var fileIDs = Object.keys(files);
      for (var i = 0; i < fileIDs.length; i++) {
        var progress = files[fileIDs[i]].progress;
        if (progress.uploadStarted && !progress.uploadComplete) {
                    SRTlib.send('], "end": "getUploadingState"},');

          return uploadStates.STATE_UPLOADING;
        }
        if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {
          state = uploadStates.STATE_PREPROCESSING;
        }
        if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {
          state = uploadStates.STATE_POSTPROCESSING;
        }
      }
            SRTlib.send('], "end": "getUploadingState"},');

      return state;
            SRTlib.send('], "end": "getUploadingState"},');

    }
    function UploadStatus(props) {
            SRTlib.send(`{ "anonymous": false, "function": "UploadStatus", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var uploadingState = getUploadingState(props.isAllErrored, props.isAllComplete, props.isAllPaused, props.files);
      switch (uploadingState) {
        case 'uploading':
                    SRTlib.send('], "end": "emptyKey299"},');

                    SRTlib.send('], "end": "UploadStatus"},');

          return props.i18n('uploadingXFiles', {
            smart_count: props.inProgressNotPausedFiles.length
          });
        case 'preprocessing':
        case 'postprocessing':
                    SRTlib.send('], "end": "emptyKey299"},');

                    SRTlib.send('], "end": "UploadStatus"},');

          return props.i18n('processingXFiles', {
            smart_count: props.processingFiles.length
          });
        case 'paused':
                    SRTlib.send('], "end": "emptyKey299"},');

                    SRTlib.send('], "end": "UploadStatus"},');

          return props.i18n('uploadPaused');
        case 'waiting':
                    SRTlib.send('], "end": "emptyKey299"},');

                    SRTlib.send('], "end": "UploadStatus"},');

          return props.i18n('xFilesSelected', {
            smart_count: props.newFiles.length
          });
        case 'complete':
                    SRTlib.send('], "end": "emptyKey299"},');

                    SRTlib.send('], "end": "UploadStatus"},');

          return props.i18n('uploadComplete');
      }
            SRTlib.send('], "end": "UploadStatus"},');

    }
    function PanelTopBar(props) {
            SRTlib.send(`{ "anonymous": false, "function": "PanelTopBar", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var allowNewUpload = props.allowNewUpload;
      if (allowNewUpload && props.maxNumberOfFiles) {
        allowNewUpload = props.totalFileCount < props.maxNumberOfFiles;
      }
            SRTlib.send('], "end": "PanelTopBar"},');

      return h("div", {
        class: "uppy-DashboardContent-bar"
      }, !props.isAllComplete && !props.hideCancelButton ? h("button", {
        class: "uppy-DashboardContent-back",
        type: "button",
        onclick: props.cancelAll
      }, props.i18n('cancel')) : h("div", null), h("div", {
        class: "uppy-DashboardContent-title",
        role: "heading",
        "aria-level": "1"
      }, h(UploadStatus, props)), allowNewUpload ? h("button", {
        class: "uppy-DashboardContent-addMore",
        type: "button",
        "aria-label": props.i18n('addMoreFiles'),
        title: props.i18n('addMoreFiles'),
        onclick: function onclick() {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.h.h.onclick.onclick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.h.h.onclick.onclick"},');

          return props.toggleAddFilesPanel(true);
                    SRTlib.send('], "end": "ReturnStatement.h.h.onclick.onclick"},');

        }
      }, iconPlus(), h("span", {
        class: "uppy-DashboardContent-addMoreCaption"
      }, props.i18n('addMore'))) : h("div", null));
            SRTlib.send('], "end": "PanelTopBar"},');

    }
    module.exports = PanelTopBar;
        SRTlib.send('], "end": "emptyKey299"},');

  }, {
    "./icons": 268,
    "preact": 160
  }],
  267: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey300", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends8"},');

        return target;
                SRTlib.send('], "end": "_extends8"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _objectWithoutPropertiesLoose(source, excluded) {
            SRTlib.send(`{ "anonymous": false, "function": "_objectWithoutPropertiesLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (source == null) {
                SRTlib.send('], "end": "_objectWithoutPropertiesLoose"},');

        return {};
      }
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
            SRTlib.send('], "end": "_objectWithoutPropertiesLoose"},');

      return target;
            SRTlib.send('], "end": "_objectWithoutPropertiesLoose"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('preact'), h = _require.h, Component = _require.Component;
    var STYLE_INNER = {
      position: 'relative',
      width: '100%',
      minHeight: '100%'
    };
    var STYLE_CONTENT = {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      overflow: 'visible'
    };
    var VirtualList = (function (_Component) {
            SRTlib.send(`{ "anonymous": true, "function": "VirtualList", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(VirtualList, _Component);
      function VirtualList(props) {
                SRTlib.send(`{ "anonymous": false, "function": "VirtualList", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this;
        _this = _Component.call(this, props) || this;
        _this.handleResize = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleResize", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.resize();
                    SRTlib.send('], "end": "_this.handleResize"},');

        };
        _this.handleScroll = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleScroll", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.setState({
            offset: _this.base.scrollTop
          });
          if (_this.props.sync) {
            _this.forceUpdate();
          }
                    SRTlib.send('], "end": "_this.handleScroll"},');

        };
        _this.focusElement = null;
        _this.state = {
          offset: 0,
          height: 0
        };
                SRTlib.send('], "end": "VirtualList"},');

        return _this;
                SRTlib.send('], "end": "VirtualList"},');

      }
      var _proto = VirtualList.prototype;
      _proto.resize = function resize() {
                SRTlib.send(`{ "anonymous": true, "function": "VirtualList._proto.resize.resize", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.state.height !== this.base.offsetHeight) {
          this.setState({
            height: this.base.offsetHeight
          });
        }
                SRTlib.send('], "end": "VirtualList._proto.resize.resize"},');

      };
      _proto.componentWillUpdate = function componentWillUpdate() {
                SRTlib.send(`{ "anonymous": true, "function": "VirtualList._proto.componentWillUpdate.componentWillUpdate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.base.contains(document.activeElement)) {
          this.focusElement = document.activeElement;
        }
                SRTlib.send('], "end": "VirtualList._proto.componentWillUpdate.componentWillUpdate"},');

      };
      _proto.componentDidUpdate = function componentDidUpdate() {
                SRTlib.send(`{ "anonymous": true, "function": "VirtualList._proto.componentDidUpdate.componentDidUpdate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.focusElement && this.focusElement.parentNode && document.activeElement !== this.focusElement) {
          this.focusElement.focus();
        }
        this.focusElement = null;
        this.resize();
                SRTlib.send('], "end": "VirtualList._proto.componentDidUpdate.componentDidUpdate"},');

      };
      _proto.componentDidMount = function componentDidMount() {
                SRTlib.send(`{ "anonymous": true, "function": "VirtualList._proto.componentDidMount.componentDidMount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.resize();
        window.addEventListener('resize', this.handleResize);
                SRTlib.send('], "end": "VirtualList._proto.componentDidMount.componentDidMount"},');

      };
      _proto.componentWillUnmount = function componentWillUnmount() {
                SRTlib.send(`{ "anonymous": true, "function": "VirtualList._proto.componentWillUnmount.componentWillUnmount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        window.removeEventListener('resize', this.handleResize);
                SRTlib.send('], "end": "VirtualList._proto.componentWillUnmount.componentWillUnmount"},');

      };
      _proto.render = function render(_ref) {
                SRTlib.send(`{ "anonymous": true, "function": "VirtualList._proto.render.render", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var data = _ref.data, rowHeight = _ref.rowHeight, renderRow = _ref.renderRow, _ref$overscanCount = _ref.overscanCount, overscanCount = _ref$overscanCount === void 0 ? 10 : _ref$overscanCount, sync = _ref.sync, props = _objectWithoutPropertiesLoose(_ref, ["data", "rowHeight", "renderRow", "overscanCount", "sync"]);
        var _this$state = this.state, offset = _this$state.offset, height = _this$state.height;
        var start = Math.floor(offset / rowHeight);
        var visibleRowCount = Math.floor(height / rowHeight);
        if (overscanCount) {
          start = Math.max(0, start - start % overscanCount);
          visibleRowCount += overscanCount;
        }
        var end = start + visibleRowCount + 4;
        var selection = data.slice(start, end);
        var styleInner = _extends({}, STYLE_INNER, {
          height: data.length * rowHeight
        });
        var styleContent = _extends({}, STYLE_CONTENT, {
          top: start * rowHeight
        });
                SRTlib.send('], "end": "VirtualList._proto.render.render"},');

        return h("div", _extends({
          onScroll: this.handleScroll
        }, props), h("div", {
          role: "presentation",
          style: styleInner
        }, h("div", {
          role: "presentation",
          style: styleContent
        }, selection.map(renderRow))));
                SRTlib.send('], "end": "VirtualList._proto.render.render"},');

      };
            SRTlib.send('], "end": "VirtualList"},');

      return VirtualList;
            SRTlib.send('], "end": "VirtualList"},');

    })(Component);
    module.exports = VirtualList;
        SRTlib.send('], "end": "emptyKey300"},');

  }, {
    "preact": 160
  }],
  268: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey301", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    function defaultPickerIcon() {
            SRTlib.send(`{ "anonymous": false, "function": "defaultPickerIcon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "defaultPickerIcon"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        width: "30",
        height: "30",
        viewBox: "0 0 30 30"
      }, h("path", {
        d: "M15 30c8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15zm4.258-12.676v6.846h-8.426v-6.846H5.204l9.82-12.364 9.82 12.364H19.26z"
      }));
            SRTlib.send('], "end": "defaultPickerIcon"},');

    }
    function iconCopy() {
            SRTlib.send(`{ "anonymous": false, "function": "iconCopy", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconCopy"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "51",
        height: "51",
        viewBox: "0 0 51 51"
      }, h("path", {
        d: "M17.21 45.765a5.394 5.394 0 0 1-7.62 0l-4.12-4.122a5.393 5.393 0 0 1 0-7.618l6.774-6.775-2.404-2.404-6.775 6.776c-3.424 3.427-3.424 9 0 12.426l4.12 4.123a8.766 8.766 0 0 0 6.216 2.57c2.25 0 4.5-.858 6.214-2.57l13.55-13.552a8.72 8.72 0 0 0 2.575-6.213 8.73 8.73 0 0 0-2.575-6.213l-4.123-4.12-2.404 2.404 4.123 4.12a5.352 5.352 0 0 1 1.58 3.81c0 1.438-.562 2.79-1.58 3.808l-13.55 13.55z"
      }), h("path", {
        d: "M44.256 2.858A8.728 8.728 0 0 0 38.043.283h-.002a8.73 8.73 0 0 0-6.212 2.574l-13.55 13.55a8.725 8.725 0 0 0-2.575 6.214 8.73 8.73 0 0 0 2.574 6.216l4.12 4.12 2.405-2.403-4.12-4.12a5.357 5.357 0 0 1-1.58-3.812c0-1.437.562-2.79 1.58-3.808l13.55-13.55a5.348 5.348 0 0 1 3.81-1.58c1.44 0 2.792.562 3.81 1.58l4.12 4.12c2.1 2.1 2.1 5.518 0 7.617L39.2 23.775l2.404 2.404 6.775-6.777c3.426-3.427 3.426-9 0-12.426l-4.12-4.12z"
      }));
            SRTlib.send('], "end": "iconCopy"},');

    }
    function iconResume() {
            SRTlib.send(`{ "anonymous": false, "function": "iconResume", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconResume"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "25",
        height: "25",
        viewBox: "0 0 44 44"
      }, h("polygon", {
        class: "play",
        transform: "translate(6, 5.5)",
        points: "13 21.6666667 13 11 21 16.3333333"
      }));
            SRTlib.send('], "end": "iconResume"},');

    }
    function iconPause() {
            SRTlib.send(`{ "anonymous": false, "function": "iconPause", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconPause"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "25px",
        height: "25px",
        viewBox: "0 0 44 44"
      }, h("g", {
        transform: "translate(18, 17)",
        class: "pause"
      }, h("rect", {
        x: "0",
        y: "0",
        width: "2",
        height: "10",
        rx: "0"
      }), h("rect", {
        x: "6",
        y: "0",
        width: "2",
        height: "10",
        rx: "0"
      })));
            SRTlib.send('], "end": "iconPause"},');

    }
    function localIcon() {
            SRTlib.send(`{ "anonymous": false, "function": "localIcon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "localIcon"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        width: "32",
        height: "32",
        viewBox: "0 0 32 32",
        xmlns: "http://www.w3.org/2000/svg"
      }, h("g", {
        fill: "none",
        "fill-rule": "evenodd"
      }, h("rect", {
        fill: "#5B5B5B",
        width: "32",
        height: "32",
        rx: "16"
      }), h("g", {
        fill: "#FFF",
        "fill-rule": "nonzero"
      }, h("path", {
        d: "M11.31 12.504a.185.185 0 0 0 .167.104h2.868v2.324c0 .898.741 1.328 1.655 1.328.913 0 1.653-.43 1.653-1.328v-2.324h2.868c.073 0 .137-.04.169-.104a.18.18 0 0 0-.027-.192l-4.524-5.25a.187.187 0 0 0-.28 0l-4.52 5.25a.179.179 0 0 0-.029.192z"
      }), h("path", {
        d: "M22.4 10.018c-.13-.45-.32-.703-.716-.703h-2.877l.603.699h2.34l1.21 6.541h-4.263v1.617h-5.296v-1.615H9.039l1.577-6.542h1.973l.603-.7h-2.877c-.396 0-.628.273-.717.703L8 16.752v4.185c0 .486.4.878.895.878h14.21a.887.887 0 0 0 .895-.878v-4.185l-1.6-6.734z"
      }))));
            SRTlib.send('], "end": "localIcon"},');

    }
    function iconMyDevice() {
            SRTlib.send(`{ "anonymous": false, "function": "iconMyDevice", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconMyDevice"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        width: "32",
        height: "32",
        viewBox: "0 0 32 32",
        xmlns: "http://www.w3.org/2000/svg"
      }, h("g", {
        fill: "none",
        "fill-rule": "evenodd"
      }, h("rect", {
        width: "32",
        height: "32",
        rx: "16",
        fill: "#2275D7"
      }), h("path", {
        d: "M21.973 21.152H9.863l-1.108-5.087h14.464l-1.246 5.087zM9.935 11.37h3.958l.886 1.444a.673.673 0 0 0 .585.316h6.506v1.37H9.935v-3.13zm14.898 3.44a.793.793 0 0 0-.616-.31h-.978v-2.126c0-.379-.275-.613-.653-.613H15.75l-.886-1.445a.673.673 0 0 0-.585-.316H9.232c-.378 0-.667.209-.667.587V14.5h-.782a.793.793 0 0 0-.61.303.795.795 0 0 0-.155.663l1.45 6.633c.078.36.396.618.764.618h13.354c.36 0 .674-.246.76-.595l1.631-6.636a.795.795 0 0 0-.144-.675z",
        fill: "#FFF"
      })));
            SRTlib.send('], "end": "iconMyDevice"},');

    }
    function iconRetry() {
            SRTlib.send(`{ "anonymous": false, "function": "iconRetry", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconRetry"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon retry",
        width: "28",
        height: "31",
        viewBox: "0 0 16 19"
      }, h("path", {
        d: "M16 11a8 8 0 1 1-8-8v2a6 6 0 1 0 6 6h2z"
      }), h("path", {
        d: "M7.9 3H10v2H7.9z"
      }), h("path", {
        d: "M8.536.5l3.535 3.536-1.414 1.414L7.12 1.914z"
      }), h("path", {
        d: "M10.657 2.621l1.414 1.415L8.536 7.57 7.12 6.157z"
      }));
            SRTlib.send('], "end": "iconRetry"},');

    }
    function checkIcon() {
            SRTlib.send(`{ "anonymous": false, "function": "checkIcon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "checkIcon"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon UppyIcon-check",
        width: "13",
        height: "9",
        viewBox: "0 0 13 9"
      }, h("polygon", {
        points: "5 7.293 1.354 3.647 0.646 4.354 5 8.707 12.354 1.354 11.646 0.647"
      }));
            SRTlib.send('], "end": "checkIcon"},');

    }
    function iconImage() {
            SRTlib.send(`{ "anonymous": false, "function": "iconImage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconImage"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        width: "25",
        height: "25",
        viewBox: "0 0 25 25",
        xmlns: "http://www.w3.org/2000/svg"
      }, h("g", {
        fill: "#686DE0",
        "fill-rule": "evenodd"
      }, h("path", {
        d: "M5 7v10h15V7H5zm0-1h15a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1z",
        "fill-rule": "nonzero"
      }), h("path", {
        d: "M6.35 17.172l4.994-5.026a.5.5 0 0 1 .707 0l2.16 2.16 3.505-3.505a.5.5 0 0 1 .707 0l2.336 2.31-.707.72-1.983-1.97-3.505 3.505a.5.5 0 0 1-.707 0l-2.16-2.159-3.938 3.939-1.409.026z",
        "fill-rule": "nonzero"
      }), h("circle", {
        cx: "7.5",
        cy: "9.5",
        r: "1.5"
      })));
            SRTlib.send('], "end": "iconImage"},');

    }
    function iconAudio() {
            SRTlib.send(`{ "anonymous": false, "function": "iconAudio", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconAudio"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "25",
        height: "25",
        viewBox: "0 0 25 25"
      }, h("path", {
        d: "M9.5 18.64c0 1.14-1.145 2-2.5 2s-2.5-.86-2.5-2c0-1.14 1.145-2 2.5-2 .557 0 1.079.145 1.5.396V7.25a.5.5 0 0 1 .379-.485l9-2.25A.5.5 0 0 1 18.5 5v11.64c0 1.14-1.145 2-2.5 2s-2.5-.86-2.5-2c0-1.14 1.145-2 2.5-2 .557 0 1.079.145 1.5.396V8.67l-8 2v7.97zm8-11v-2l-8 2v2l8-2zM7 19.64c.855 0 1.5-.484 1.5-1s-.645-1-1.5-1-1.5.484-1.5 1 .645 1 1.5 1zm9-2c.855 0 1.5-.484 1.5-1s-.645-1-1.5-1-1.5.484-1.5 1 .645 1 1.5 1z",
        fill: "#049BCF",
        "fill-rule": "nonzero"
      }));
            SRTlib.send('], "end": "iconAudio"},');

    }
    function iconVideo() {
            SRTlib.send(`{ "anonymous": false, "function": "iconVideo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconVideo"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "25",
        height: "25",
        viewBox: "0 0 25 25"
      }, h("path", {
        d: "M16 11.834l4.486-2.691A1 1 0 0 1 22 10v6a1 1 0 0 1-1.514.857L16 14.167V17a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2.834zM15 9H5v8h10V9zm1 4l5 3v-6l-5 3z",
        fill: "#19AF67",
        "fill-rule": "nonzero"
      }));
            SRTlib.send('], "end": "iconVideo"},');

    }
    function iconPDF() {
            SRTlib.send(`{ "anonymous": false, "function": "iconPDF", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconPDF"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "25",
        height: "25",
        viewBox: "0 0 25 25"
      }, h("path", {
        d: "M9.766 8.295c-.691-1.843-.539-3.401.747-3.726 1.643-.414 2.505.938 2.39 3.299-.039.79-.194 1.662-.537 3.148.324.49.66.967 1.055 1.51.17.231.382.488.629.757 1.866-.128 3.653.114 4.918.655 1.487.635 2.192 1.685 1.614 2.84-.566 1.133-1.839 1.084-3.416.249-1.141-.604-2.457-1.634-3.51-2.707a13.467 13.467 0 0 0-2.238.426c-1.392 4.051-4.534 6.453-5.707 4.572-.986-1.58 1.38-4.206 4.914-5.375.097-.322.185-.656.264-1.001.08-.353.306-1.31.407-1.737-.678-1.059-1.2-2.031-1.53-2.91zm2.098 4.87c-.033.144-.068.287-.104.427l.033-.01-.012.038a14.065 14.065 0 0 1 1.02-.197l-.032-.033.052-.004a7.902 7.902 0 0 1-.208-.271c-.197-.27-.38-.526-.555-.775l-.006.028-.002-.003c-.076.323-.148.632-.186.8zm5.77 2.978c1.143.605 1.832.632 2.054.187.26-.519-.087-1.034-1.113-1.473-.911-.39-2.175-.608-3.55-.608.845.766 1.787 1.459 2.609 1.894zM6.559 18.789c.14.223.693.16 1.425-.413.827-.648 1.61-1.747 2.208-3.206-2.563 1.064-4.102 2.867-3.633 3.62zm5.345-10.97c.088-1.793-.351-2.48-1.146-2.28-.473.119-.564 1.05-.056 2.405.213.566.52 1.188.908 1.859.18-.858.268-1.453.294-1.984z",
        fill: "#E2514A",
        "fill-rule": "nonzero"
      }));
            SRTlib.send('], "end": "iconPDF"},');

    }
    function iconArchive() {
            SRTlib.send(`{ "anonymous": false, "function": "iconArchive", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconArchive"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        width: "25",
        height: "25",
        viewBox: "0 0 25 25",
        xmlns: "http://www.w3.org/2000/svg"
      }, h("path", {
        d: "M10.45 2.05h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5V2.55a.5.5 0 0 1 .5-.5zm2.05 1.024h1.05a.5.5 0 0 1 .5.5V3.6a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5v-.001zM10.45 0h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5V.5a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-2.05 3.074h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-2.05 1.024h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm-2.05 1.025h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-1.656 3.074l-.82 5.946c.52.302 1.174.458 1.976.458.803 0 1.455-.156 1.975-.458l-.82-5.946h-2.311zm0-1.025h2.312c.512 0 .946.378 1.015.885l.82 5.946c.056.412-.142.817-.501 1.026-.686.398-1.515.597-2.49.597-.974 0-1.804-.199-2.49-.597a1.025 1.025 0 0 1-.5-1.026l.819-5.946c.07-.507.503-.885 1.015-.885zm.545 6.6a.5.5 0 0 1-.397-.561l.143-.999a.5.5 0 0 1 .495-.429h.74a.5.5 0 0 1 .495.43l.143.998a.5.5 0 0 1-.397.561c-.404.08-.819.08-1.222 0z",
        fill: "#00C469",
        "fill-rule": "nonzero"
      }));
            SRTlib.send('], "end": "iconArchive"},');

    }
    function iconFile() {
            SRTlib.send(`{ "anonymous": false, "function": "iconFile", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconFile"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "25",
        height: "25",
        viewBox: "0 0 25 25"
      }, h("g", {
        fill: "#A7AFB7",
        "fill-rule": "nonzero"
      }, h("path", {
        d: "M5.5 22a.5.5 0 0 1-.5-.5v-18a.5.5 0 0 1 .5-.5h10.719a.5.5 0 0 1 .367.16l3.281 3.556a.5.5 0 0 1 .133.339V21.5a.5.5 0 0 1-.5.5h-14zm.5-1h13V7.25L16 4H6v17z"
      }), h("path", {
        d: "M15 4v3a1 1 0 0 0 1 1h3V7h-3V4h-1z"
      })));
            SRTlib.send('], "end": "iconFile"},');

    }
    function iconText() {
            SRTlib.send(`{ "anonymous": false, "function": "iconText", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconText"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "25",
        height: "25",
        viewBox: "0 0 25 25"
      }, h("path", {
        d: "M4.5 7h13a.5.5 0 1 1 0 1h-13a.5.5 0 0 1 0-1zm0 3h15a.5.5 0 1 1 0 1h-15a.5.5 0 1 1 0-1zm0 3h15a.5.5 0 1 1 0 1h-15a.5.5 0 1 1 0-1zm0 3h10a.5.5 0 1 1 0 1h-10a.5.5 0 1 1 0-1z",
        fill: "#5A5E69",
        "fill-rule": "nonzero"
      }));
            SRTlib.send('], "end": "iconText"},');

    }
    function iconCopyLink() {
            SRTlib.send(`{ "anonymous": false, "function": "iconCopyLink", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconCopyLink"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "14",
        height: "14",
        viewBox: "0 0 14 12"
      }, h("path", {
        d: "M7.94 7.703a2.613 2.613 0 0 1-.626 2.681l-.852.851a2.597 2.597 0 0 1-1.849.766A2.616 2.616 0 0 1 2.764 7.54l.852-.852a2.596 2.596 0 0 1 2.69-.625L5.267 7.099a1.44 1.44 0 0 0-.833.407l-.852.851a1.458 1.458 0 0 0 1.03 2.486c.39 0 .755-.152 1.03-.426l.852-.852c.231-.231.363-.522.406-.824l1.04-1.038zm4.295-5.937A2.596 2.596 0 0 0 10.387 1c-.698 0-1.355.272-1.849.766l-.852.851a2.614 2.614 0 0 0-.624 2.688l1.036-1.036c.041-.304.173-.6.407-.833l.852-.852c.275-.275.64-.426 1.03-.426a1.458 1.458 0 0 1 1.03 2.486l-.852.851a1.442 1.442 0 0 1-.824.406l-1.04 1.04a2.596 2.596 0 0 0 2.683-.628l.851-.85a2.616 2.616 0 0 0 0-3.697zm-6.88 6.883a.577.577 0 0 0 .82 0l3.474-3.474a.579.579 0 1 0-.819-.82L5.355 7.83a.579.579 0 0 0 0 .819z"
      }));
            SRTlib.send('], "end": "iconCopyLink"},');

    }
    function iconPencil() {
            SRTlib.send(`{ "anonymous": false, "function": "iconPencil", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconPencil"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "14",
        height: "14",
        viewBox: "0 0 14 14"
      }, h("g", {
        "fill-rule": "evenodd"
      }, h("path", {
        d: "M1.5 10.793h2.793A1 1 0 0 0 5 10.5L11.5 4a1 1 0 0 0 0-1.414L9.707.793a1 1 0 0 0-1.414 0l-6.5 6.5A1 1 0 0 0 1.5 8v2.793zm1-1V8L9 1.5l1.793 1.793-6.5 6.5H2.5z",
        "fill-rule": "nonzero"
      }), h("rect", {
        x: "1",
        y: "12.293",
        width: "11",
        height: "1",
        rx: ".5"
      }), h("path", {
        "fill-rule": "nonzero",
        d: "M6.793 2.5L9.5 5.207l.707-.707L7.5 1.793z"
      })));
            SRTlib.send('], "end": "iconPencil"},');

    }
    function iconCross() {
            SRTlib.send(`{ "anonymous": false, "function": "iconCross", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconCross"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "18",
        height: "18",
        viewBox: "0 0 18 18"
      }, h("path", {
        d: "M9 0C4.034 0 0 4.034 0 9s4.034 9 9 9 9-4.034 9-9-4.034-9-9-9z"
      }), h("path", {
        fill: "#FFF",
        d: "M13 12.222l-.778.778L9 9.778 5.778 13 5 12.222 8.222 9 5 5.778 5.778 5 9 8.222 12.222 5l.778.778L9.778 9z"
      }));
            SRTlib.send('], "end": "iconCross"},');

    }
    function iconPlus() {
            SRTlib.send(`{ "anonymous": false, "function": "iconPlus", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "iconPlus"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "15",
        height: "15",
        viewBox: "0 0 15 15"
      }, h("path", {
        d: "M8 6.5h6a.5.5 0 0 1 .5.5v.5a.5.5 0 0 1-.5.5H8v6a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V8h-6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h6v-6A.5.5 0 0 1 7 0h.5a.5.5 0 0 1 .5.5v6z"
      }));
            SRTlib.send('], "end": "iconPlus"},');

    }
    module.exports = {
      defaultPickerIcon: defaultPickerIcon,
      iconCopy: iconCopy,
      iconResume: iconResume,
      iconPause: iconPause,
      iconRetry: iconRetry,
      localIcon: localIcon,
      iconMyDevice: iconMyDevice,
      checkIcon: checkIcon,
      iconImage: iconImage,
      iconAudio: iconAudio,
      iconVideo: iconVideo,
      iconPDF: iconPDF,
      iconArchive: iconArchive,
      iconFile: iconFile,
      iconText: iconText,
      iconCopyLink: iconCopyLink,
      iconPencil: iconPencil,
      iconCross: iconCross,
      iconPlus: iconPlus
    };
        SRTlib.send('], "end": "emptyKey301"},');

  }, {
    "preact": 160
  }],
  269: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey302", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends9", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends9"},');

        return target;
                SRTlib.send('], "end": "_extends9"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('./../../core'), Plugin = _require.Plugin;
    var Translator = require('./../../utils/lib/Translator');
    var DashboardUI = require('./components/Dashboard');
    var StatusBar = require('./../../status-bar');
    var Informer = require('./../../informer');
    var ThumbnailGenerator = require('./../../thumbnail-generator');
    var findAllDOMElements = require('./../../utils/lib/findAllDOMElements');
    var toArray = require('./../../utils/lib/toArray');
    var getDroppedFiles = require('./../../utils/lib/getDroppedFiles');
    var trapFocus = require('./utils/trapFocus');
    var cuid = require('cuid');
    var ResizeObserver = require('resize-observer-polyfill').default || require('resize-observer-polyfill');
    var _require2 = require('./components/icons'), defaultPickerIcon = _require2.defaultPickerIcon;
    var createSuperFocus = require('./utils/createSuperFocus');
    var memoize = require('memoize-one').default || require('memoize-one');
    var TAB_KEY = 9;
    var ESC_KEY = 27;
    function createPromise() {
            SRTlib.send(`{ "anonymous": false, "function": "createPromise", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var o = {};
      o.promise = new Promise(function (resolve, reject) {
                SRTlib.send(`{ "anonymous": true, "function": "o.promise", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        o.resolve = resolve;
        o.reject = reject;
                SRTlib.send('], "end": "o.promise"},');

      });
            SRTlib.send('], "end": "createPromise"},');

      return o;
            SRTlib.send('], "end": "createPromise"},');

    }
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Dashboard, _Plugin);
      function Dashboard(uppy, _opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Dashboard", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, _opts) || this;
        _this.setOptions = function (newOpts) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.setOptions", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _Plugin.prototype.setOptions.call(_assertThisInitialized(_this), newOpts);
          _this.i18nInit();
                    SRTlib.send('], "end": "_this.setOptions"},');

        };
        _this.i18nInit = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.i18nInit", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.translator = new Translator([_this.defaultLocale, _this.uppy.locale, _this.opts.locale]);
          _this.i18n = _this.translator.translate.bind(_this.translator);
          _this.i18nArray = _this.translator.translateArray.bind(_this.translator);
          _this.setPluginState();
                    SRTlib.send('], "end": "_this.i18nInit"},');

        };
        _this.removeTarget = function (plugin) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.removeTarget", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var pluginState = _this.getPluginState();
          var newTargets = pluginState.targets.filter(function (target) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.removeTarget.newTargets.pluginState.targets.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.removeTarget.newTargets.pluginState.targets.filter"},');

            return target.id !== plugin.id;
                        SRTlib.send('], "end": "_this.removeTarget.newTargets.pluginState.targets.filter"},');

          });
          _this.setPluginState({
            targets: newTargets
          });
                    SRTlib.send('], "end": "_this.removeTarget"},');

        };
        _this.addTarget = function (plugin) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.addTarget", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var callerPluginId = plugin.id || plugin.constructor.name;
          var callerPluginName = plugin.title || callerPluginId;
          var callerPluginType = plugin.type;
          if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'presenter') {
            var msg = 'Dashboard: Modal can only be used by plugins of types: acquirer, progressindicator, presenter';
            _this.uppy.log(msg, 'error');
                        SRTlib.send('], "end": "_this.addTarget"},');

            return;
          }
          var target = {
            id: callerPluginId,
            name: callerPluginName,
            type: callerPluginType
          };
          var state = _this.getPluginState();
          var newTargets = state.targets.slice();
          newTargets.push(target);
          _this.setPluginState({
            targets: newTargets
          });
                    SRTlib.send('], "end": "_this.addTarget"},');

          return _this.el;
                    SRTlib.send('], "end": "_this.addTarget"},');

        };
        _this.hideAllPanels = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.hideAllPanels", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var update = {
            activePickerPanel: false,
            showAddFilesPanel: false,
            activeOverlayType: null
          };
          var current = _this.getPluginState();
          if (current.activePickerPanel === update.activePickerPanel && current.showAddFilesPanel === update.showAddFilesPanel && current.activeOverlayType === update.activeOverlayType) {
                        SRTlib.send('], "end": "_this.hideAllPanels"},');

            return;
          }
          _this.setPluginState(update);
                    SRTlib.send('], "end": "_this.hideAllPanels"},');

        };
        _this.showPanel = function (id) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.showPanel", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _this$getPluginState = _this.getPluginState(), targets = _this$getPluginState.targets;
          var activePickerPanel = targets.filter(function (target) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.showPanel.activePickerPanel", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.showPanel.activePickerPanel"},');

            return target.type === 'acquirer' && target.id === id;
                        SRTlib.send('], "end": "_this.showPanel.activePickerPanel"},');

          })[0];
          _this.setPluginState({
            activePickerPanel: activePickerPanel,
            activeOverlayType: 'PickerPanel'
          });
                    SRTlib.send('], "end": "_this.showPanel"},');

        };
        _this.openModal = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.openModal", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _createPromise = createPromise(), promise = _createPromise.promise, resolve = _createPromise.resolve;
          _this.savedScrollPosition = window.pageYOffset;
          _this.savedActiveElement = document.activeElement;
          if (_this.opts.disablePageScrollWhenModalOpen) {
            document.body.classList.add('uppy-Dashboard-isFixed');
          }
          if (_this.opts.animateOpenClose && _this.getPluginState().isClosing) {
            var handler = function handler() {
                            SRTlib.send(`{ "anonymous": false, "function": "handler", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              _this.setPluginState({
                isHidden: false
              });
              _this.el.removeEventListener('animationend', handler, false);
              resolve();
                            SRTlib.send('], "end": "handler"},');

            };
            _this.el.addEventListener('animationend', handler, false);
          } else {
            _this.setPluginState({
              isHidden: false
            });
            resolve();
          }
          if (_this.opts.browserBackButtonClose) {
            _this.updateBrowserHistory();
          }
          document.addEventListener('keydown', _this.handleKeyDownInModal);
          _this.uppy.emit('dashboard:modal-open');
                    SRTlib.send('], "end": "_this.openModal"},');

          return promise;
                    SRTlib.send('], "end": "_this.openModal"},');

        };
        _this.closeModal = function (opts) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.closeModal", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (opts === void 0) {
            opts = {};
          }
          var _opts2 = opts, _opts2$manualClose = _opts2.manualClose, manualClose = _opts2$manualClose === void 0 ? true : _opts2$manualClose;
          var _this$getPluginState2 = _this.getPluginState(), isHidden = _this$getPluginState2.isHidden, isClosing = _this$getPluginState2.isClosing;
          if (isHidden || isClosing) {
                        SRTlib.send('], "end": "_this.closeModal"},');

            return;
          }
          var _createPromise2 = createPromise(), promise = _createPromise2.promise, resolve = _createPromise2.resolve;
          if (_this.opts.disablePageScrollWhenModalOpen) {
            document.body.classList.remove('uppy-Dashboard-isFixed');
          }
          if (_this.opts.animateOpenClose) {
            _this.setPluginState({
              isClosing: true
            });
            var handler = function handler() {
                            SRTlib.send(`{ "anonymous": false, "function": "handler", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              _this.setPluginState({
                isHidden: true,
                isClosing: false
              });
              _this.superFocus.cancel();
              _this.savedActiveElement.focus();
              _this.el.removeEventListener('animationend', handler, false);
              resolve();
                            SRTlib.send('], "end": "handler"},');

            };
            _this.el.addEventListener('animationend', handler, false);
          } else {
            _this.setPluginState({
              isHidden: true
            });
            _this.superFocus.cancel();
            _this.savedActiveElement.focus();
            resolve();
          }
          document.removeEventListener('keydown', _this.handleKeyDownInModal);
          if (manualClose) {
            if (_this.opts.browserBackButtonClose) {
              if (history.state && history.state[_this.modalName]) {
                history.go(-1);
              }
            }
          }
          _this.uppy.emit('dashboard:modal-closed');
                    SRTlib.send('], "end": "_this.closeModal"},');

          return promise;
                    SRTlib.send('], "end": "_this.closeModal"},');

        };
        _this.isModalOpen = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.isModalOpen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "_this.isModalOpen"},');

          return !_this.getPluginState().isHidden || false;
                    SRTlib.send('], "end": "_this.isModalOpen"},');

        };
        _this.requestCloseModal = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.requestCloseModal", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (_this.opts.onRequestCloseModal) {
                        SRTlib.send('], "end": "_this.requestCloseModal"},');

            return _this.opts.onRequestCloseModal();
          }
                    SRTlib.send('], "end": "_this.requestCloseModal"},');

          return _this.closeModal();
                    SRTlib.send('], "end": "_this.requestCloseModal"},');

        };
        _this.setDarkModeCapability = function (isDarkModeOn) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.setDarkModeCapability", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _this$uppy$getState = _this.uppy.getState(), capabilities = _this$uppy$getState.capabilities;
          _this.uppy.setState({
            capabilities: _extends({}, capabilities, {
              darkMode: isDarkModeOn
            })
          });
                    SRTlib.send('], "end": "_this.setDarkModeCapability"},');

        };
        _this.handleSystemDarkModeChange = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleSystemDarkModeChange", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var isDarkModeOnNow = event.matches;
          _this.uppy.log("[Dashboard] Dark mode is " + (isDarkModeOnNow ? 'on' : 'off'));
          _this.setDarkModeCapability(isDarkModeOnNow);
                    SRTlib.send('], "end": "_this.handleSystemDarkModeChange"},');

        };
        _this.toggleFileCard = function (fileId) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.toggleFileCard", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (fileId) {
            _this.uppy.emit('dashboard:file-edit-start');
          } else {
            _this.uppy.emit('dashboard:file-edit-complete');
          }
          _this.setPluginState({
            fileCardFor: fileId || null,
            activeOverlayType: fileId ? 'FileCard' : null
          });
                    SRTlib.send('], "end": "_this.toggleFileCard"},');

        };
        _this.toggleAddFilesPanel = function (show) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.toggleAddFilesPanel", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this.setPluginState({
            showAddFilesPanel: show,
            activeOverlayType: show ? 'AddFiles' : null
          });
                    SRTlib.send('], "end": "_this.toggleAddFilesPanel"},');

        };
        _this.addFiles = function (files) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.addFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var descriptors = files.map(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.addFiles.descriptors", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.addFiles.descriptors"},');

            return {
              source: _this.id,
              name: file.name,
              type: file.type,
              data: file,
              meta: {
                relativePath: file.relativePath || null
              }
            };
                        SRTlib.send('], "end": "_this.addFiles.descriptors"},');

          });
          try {
            _this.uppy.addFiles(descriptors);
          } catch (err) {
            _this.uppy.log(err);
          }
                    SRTlib.send('], "end": "_this.addFiles"},');

        };
        _this.startListeningToResize = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.startListeningToResize", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.resizeObserver = new ResizeObserver(function (entries, observer) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.startListeningToResize._this.resizeObserver", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var uppyDashboardInnerEl = entries[0];
            var _uppyDashboardInnerEl = uppyDashboardInnerEl.contentRect, width = _uppyDashboardInnerEl.width, height = _uppyDashboardInnerEl.height;
            _this.uppy.log("[Dashboard] resized: " + width + " / " + height, 'debug');
            _this.setPluginState({
              containerWidth: width,
              containerHeight: height,
              areInsidesReadyToBeVisible: true
            });
                        SRTlib.send('], "end": "_this.startListeningToResize._this.resizeObserver"},');

          });
          _this.resizeObserver.observe(_this.el.querySelector('.uppy-Dashboard-inner'));
          _this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.startListeningToResize._this.makeDashboardInsidesVisibleAnywayTimeout.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var pluginState = _this.getPluginState();
            var isModalAndClosed = !_this.opts.inline && pluginState.isHidden;
            if (!pluginState.areInsidesReadyToBeVisible && !isModalAndClosed) {
              _this.uppy.log("[Dashboard] resize event didn't fire on time: defaulted to mobile layout", 'debug');
              _this.setPluginState({
                areInsidesReadyToBeVisible: true
              });
            }
                        SRTlib.send('], "end": "_this.startListeningToResize._this.makeDashboardInsidesVisibleAnywayTimeout.setTimeout"},');

          }, 1000);
                    SRTlib.send('], "end": "_this.startListeningToResize"},');

        };
        _this.stopListeningToResize = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.stopListeningToResize", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.resizeObserver.disconnect();
          clearTimeout(_this.makeDashboardInsidesVisibleAnywayTimeout);
                    SRTlib.send('], "end": "_this.stopListeningToResize"},');

        };
        _this.recordIfFocusedOnUppyRecently = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.recordIfFocusedOnUppyRecently", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (_this.el.contains(event.target)) {
            _this.ifFocusedOnUppyRecently = true;
          } else {
            _this.ifFocusedOnUppyRecently = false;
            _this.superFocus.cancel();
          }
                    SRTlib.send('], "end": "_this.recordIfFocusedOnUppyRecently"},');

        };
        _this.updateBrowserHistory = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.updateBrowserHistory", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!history.state || !history.state[_this.modalName]) {
            var _extends2;
            history.pushState(_extends({}, history.state, (_extends2 = {}, _extends2[_this.modalName] = true, _extends2)), '');
          }
          window.addEventListener('popstate', _this.handlePopState, false);
                    SRTlib.send('], "end": "_this.updateBrowserHistory"},');

        };
        _this.handlePopState = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handlePopState", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (_this.isModalOpen() && (!event.state || !event.state[_this.modalName])) {
            _this.closeModal({
              manualClose: false
            });
          }
          if (!_this.isModalOpen() && event.state && event.state[_this.modalName]) {
            history.go(-1);
          }
                    SRTlib.send('], "end": "_this.handlePopState"},');

        };
        _this.handleKeyDownInModal = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleKeyDownInModal", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (event.keyCode === ESC_KEY) _this.requestCloseModal(event);
          if (event.keyCode === TAB_KEY) trapFocus.forModal(event, _this.getPluginState().activeOverlayType, _this.el);
                    SRTlib.send('], "end": "_this.handleKeyDownInModal"},');

        };
        _this.handleClickOutside = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleClickOutside", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (_this.opts.closeModalOnClickOutside) _this.requestCloseModal();
                    SRTlib.send('], "end": "_this.handleClickOutside"},');

        };
        _this.handlePaste = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handlePaste", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this.uppy.iteratePlugins(function (plugin) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.handlePaste._this.uppy.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (plugin.type === 'acquirer') {
              plugin.handleRootPaste && plugin.handleRootPaste(event);
            }
                        SRTlib.send('], "end": "_this.handlePaste._this.uppy.iteratePlugins"},');

          });
          var files = toArray(event.clipboardData.files);
          _this.addFiles(files);
                    SRTlib.send('], "end": "_this.handlePaste"},');

        };
        _this.handleInputChange = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleInputChange", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          event.preventDefault();
          var files = toArray(event.target.files);
          _this.addFiles(files);
                    SRTlib.send('], "end": "_this.handleInputChange"},');

        };
        _this.handleDragOver = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleDragOver", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          event.preventDefault();
          event.stopPropagation();
          event.dataTransfer.dropEffect = 'copy';
          clearTimeout(_this.removeDragOverClassTimeout);
          _this.setPluginState({
            isDraggingOver: true
          });
                    SRTlib.send('], "end": "_this.handleDragOver"},');

        };
        _this.handleDragLeave = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleDragLeave", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          event.preventDefault();
          event.stopPropagation();
          clearTimeout(_this.removeDragOverClassTimeout);
          _this.removeDragOverClassTimeout = setTimeout(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.handleDragLeave._this.removeDragOverClassTimeout.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            _this.setPluginState({
              isDraggingOver: false
            });
                        SRTlib.send('], "end": "_this.handleDragLeave._this.removeDragOverClassTimeout.setTimeout"},');

          }, 50);
                    SRTlib.send('], "end": "_this.handleDragLeave"},');

        };
        _this.handleDrop = function (event, dropCategory) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleDrop", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          event.preventDefault();
          event.stopPropagation();
          clearTimeout(_this.removeDragOverClassTimeout);
          _this.setPluginState({
            isDraggingOver: false
          });
          _this.uppy.iteratePlugins(function (plugin) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.handleDrop._this.uppy.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (plugin.type === 'acquirer') {
              plugin.handleRootDrop && plugin.handleRootDrop(event);
            }
                        SRTlib.send('], "end": "_this.handleDrop._this.uppy.iteratePlugins"},');

          });
          var executedDropErrorOnce = false;
          var logDropError = function logDropError(error) {
                        SRTlib.send(`{ "anonymous": false, "function": "logDropError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this.uppy.log(error, 'error');
            if (!executedDropErrorOnce) {
              _this.uppy.info(error.message, 'error');
              executedDropErrorOnce = true;
            }
                        SRTlib.send('], "end": "logDropError"},');

          };
          getDroppedFiles(event.dataTransfer, {
            logDropError: logDropError
          }).then(function (files) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.handleDrop.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (files.length > 0) {
              _this.uppy.log('[Dashboard] Files were dropped');
              _this.addFiles(files);
            }
                        SRTlib.send('], "end": "_this.handleDrop.then"},');

          });
                    SRTlib.send('], "end": "_this.handleDrop"},');

        };
        _this.handleRequestThumbnail = function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleRequestThumbnail", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!_this.opts.waitForThumbnailsBeforeUpload) {
            _this.uppy.emit('thumbnail:request', file);
          }
                    SRTlib.send('], "end": "_this.handleRequestThumbnail"},');

        };
        _this.handleCancelThumbnail = function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleCancelThumbnail", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!_this.opts.waitForThumbnailsBeforeUpload) {
            _this.uppy.emit('thumbnail:cancel', file);
          }
                    SRTlib.send('], "end": "_this.handleCancelThumbnail"},');

        };
        _this.handleKeyDownInInline = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleKeyDownInInline", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (event.keyCode === TAB_KEY) trapFocus.forInline(event, _this.getPluginState().activeOverlayType, _this.el);
                    SRTlib.send('], "end": "_this.handleKeyDownInInline"},');

        };
        _this.handlePasteOnBody = function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handlePasteOnBody", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var isFocusInOverlay = _this.el.contains(document.activeElement);
          if (isFocusInOverlay) {
            _this.handlePaste(event);
          }
                    SRTlib.send('], "end": "_this.handlePasteOnBody"},');

        };
        _this.handleComplete = function (_ref) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.handleComplete", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var failed = _ref.failed, uploadID = _ref.uploadID;
          if (_this.opts.closeAfterFinish && failed.length === 0) {
            _this.requestCloseModal();
          }
                    SRTlib.send('], "end": "_this.handleComplete"},');

        };
        _this.initEvents = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.initEvents2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (_this.opts.trigger && !_this.opts.inline) {
            var showModalTrigger = findAllDOMElements(_this.opts.trigger);
            if (showModalTrigger) {
              showModalTrigger.forEach(function (trigger) {
                                SRTlib.send(`{ "anonymous": true, "function": "_this.initEvents", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "_this.initEvents"},');

                return trigger.addEventListener('click', _this.openModal);
                                SRTlib.send('], "end": "_this.initEvents"},');

              });
            } else {
              _this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');
            }
          }
          _this.startListeningToResize();
          document.addEventListener('paste', _this.handlePasteOnBody);
          _this.uppy.on('plugin-remove', _this.removeTarget);
          _this.uppy.on('file-added', _this.hideAllPanels);
          _this.uppy.on('dashboard:modal-closed', _this.hideAllPanels);
          _this.uppy.on('complete', _this.handleComplete);
          document.addEventListener('focus', _this.recordIfFocusedOnUppyRecently, true);
          document.addEventListener('click', _this.recordIfFocusedOnUppyRecently, true);
          if (_this.opts.inline) {
            _this.el.addEventListener('keydown', _this.handleKeyDownInInline);
          }
                    SRTlib.send('], "end": "_this.initEvents2"},');

        };
        _this.removeEvents = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.removeEvents2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var showModalTrigger = findAllDOMElements(_this.opts.trigger);
          if (!_this.opts.inline && showModalTrigger) {
            showModalTrigger.forEach(function (trigger) {
                            SRTlib.send(`{ "anonymous": true, "function": "_this.removeEvents", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "_this.removeEvents"},');

              return trigger.removeEventListener('click', _this.openModal);
                            SRTlib.send('], "end": "_this.removeEvents"},');

            });
          }
          _this.stopListeningToResize();
          document.removeEventListener('paste', _this.handlePasteOnBody);
          window.removeEventListener('popstate', _this.handlePopState, false);
          _this.uppy.off('plugin-remove', _this.removeTarget);
          _this.uppy.off('file-added', _this.hideAllPanels);
          _this.uppy.off('dashboard:modal-closed', _this.hideAllPanels);
          _this.uppy.off('complete', _this.handleComplete);
          document.removeEventListener('focus', _this.recordIfFocusedOnUppyRecently);
          document.removeEventListener('click', _this.recordIfFocusedOnUppyRecently);
          if (_this.opts.inline) {
            _this.el.removeEventListener('keydown', _this.handleKeyDownInInline);
          }
                    SRTlib.send('], "end": "_this.removeEvents2"},');

        };
        _this.superFocusOnEachUpdate = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.superFocusOnEachUpdate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var isFocusInUppy = _this.el.contains(document.activeElement);
          var isFocusNowhere = document.activeElement === document.body || document.activeElement === null;
          var isInformerHidden = _this.uppy.getState().info.isHidden;
          var isModal = !_this.opts.inline;
          if (isInformerHidden && (isModal || isFocusInUppy || isFocusNowhere && _this.ifFocusedOnUppyRecently)) {
            _this.superFocus(_this.el, _this.getPluginState().activeOverlayType);
          } else {
            _this.superFocus.cancel();
          }
                    SRTlib.send('], "end": "_this.superFocusOnEachUpdate"},');

        };
        _this.afterUpdate = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.afterUpdate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.superFocusOnEachUpdate();
                    SRTlib.send('], "end": "_this.afterUpdate"},');

        };
        _this.cancelUpload = function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.cancelUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this.uppy.removeFile(fileID);
                    SRTlib.send('], "end": "_this.cancelUpload"},');

        };
        _this.saveFileCard = function (meta, fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.saveFileCard", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this.uppy.setFileMeta(fileID, meta);
          _this.toggleFileCard();
                    SRTlib.send('], "end": "_this.saveFileCard"},');

        };
        _this._attachRenderFunctionToTarget = function (target) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this._attachRenderFunctionToTarget", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var plugin = _this.uppy.getPlugin(target.id);
                    SRTlib.send('], "end": "_this._attachRenderFunctionToTarget"},');

          return _extends({}, target, {
            icon: plugin.icon || _this.opts.defaultPickerIcon,
            render: plugin.render
          });
                    SRTlib.send('], "end": "_this._attachRenderFunctionToTarget"},');

        };
        _this._isTargetSupported = function (target) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this._isTargetSupported", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var plugin = _this.uppy.getPlugin(target.id);
          if (typeof plugin.isSupported !== 'function') {
                        SRTlib.send('], "end": "_this._isTargetSupported"},');

            return true;
          }
                    SRTlib.send('], "end": "_this._isTargetSupported"},');

          return plugin.isSupported();
                    SRTlib.send('], "end": "_this._isTargetSupported"},');

        };
        _this._getAcquirers = memoize(function (targets) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this._getAcquirers.memoize", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "_this._getAcquirers.memoize"},');

          return targets.filter(function (target) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this._getAcquirers.memoize.ReturnStatement.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this._getAcquirers.memoize.ReturnStatement.map"},');

            return target.type === 'acquirer' && _this._isTargetSupported(target);
                        SRTlib.send('], "end": "_this._getAcquirers.memoize.ReturnStatement.map"},');

          }).map(_this._attachRenderFunctionToTarget);
                    SRTlib.send('], "end": "_this._getAcquirers.memoize"},');

        });
        _this._getProgressIndicators = memoize(function (targets) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this._getProgressIndicators.memoize", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "_this._getProgressIndicators.memoize"},');

          return targets.filter(function (target) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this._getProgressIndicators.memoize.ReturnStatement.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this._getProgressIndicators.memoize.ReturnStatement.map"},');

            return target.type === 'progressindicator';
                        SRTlib.send('], "end": "_this._getProgressIndicators.memoize.ReturnStatement.map"},');

          }).map(_this._attachRenderFunctionToTarget);
                    SRTlib.send('], "end": "_this._getProgressIndicators.memoize"},');

        });
        _this.render = function (state) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.render", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var pluginState = _this.getPluginState();
          var files = state.files, capabilities = state.capabilities, allowNewUpload = state.allowNewUpload;
          var newFiles = Object.keys(files).filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.render.newFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.render.newFiles.filter"},');

            return !files[file].progress.uploadStarted;
                        SRTlib.send('], "end": "_this.render.newFiles.filter"},');

          });
          var uploadStartedFiles = Object.keys(files).filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.render.uploadStartedFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.render.uploadStartedFiles.filter"},');

            return files[file].progress.uploadStarted;
                        SRTlib.send('], "end": "_this.render.uploadStartedFiles.filter"},');

          });
          var pausedFiles = Object.keys(files).filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.render.pausedFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.render.pausedFiles.filter"},');

            return files[file].isPaused;
                        SRTlib.send('], "end": "_this.render.pausedFiles.filter"},');

          });
          var completeFiles = Object.keys(files).filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.render.completeFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.render.completeFiles.filter"},');

            return files[file].progress.uploadComplete;
                        SRTlib.send('], "end": "_this.render.completeFiles.filter"},');

          });
          var erroredFiles = Object.keys(files).filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.render.erroredFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.render.erroredFiles.filter"},');

            return files[file].error;
                        SRTlib.send('], "end": "_this.render.erroredFiles.filter"},');

          });
          var inProgressFiles = Object.keys(files).filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.render.inProgressFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.render.inProgressFiles.filter"},');

            return !files[file].progress.uploadComplete && files[file].progress.uploadStarted;
                        SRTlib.send('], "end": "_this.render.inProgressFiles.filter"},');

          });
          var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.render.inProgressNotPausedFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.render.inProgressNotPausedFiles"},');

            return !files[file].isPaused;
                        SRTlib.send('], "end": "_this.render.inProgressNotPausedFiles"},');

          });
          var processingFiles = Object.keys(files).filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.render.processingFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "_this.render.processingFiles.filter"},');

            return files[file].progress.preprocess || files[file].progress.postprocess;
                        SRTlib.send('], "end": "_this.render.processingFiles.filter"},');

          });
          var isUploadStarted = uploadStartedFiles.length > 0;
          var isAllComplete = state.totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;
          var isAllErrored = isUploadStarted && erroredFiles.length === uploadStartedFiles.length;
          var isAllPaused = inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length;
          var acquirers = _this._getAcquirers(pluginState.targets);
          var progressindicators = _this._getProgressIndicators(pluginState.targets);
          var theme;
          if (_this.opts.theme === 'auto') {
            theme = capabilities.darkMode ? 'dark' : 'light';
          } else {
            theme = _this.opts.theme;
          }
                    SRTlib.send('], "end": "_this.render"},');

          return DashboardUI({
            state: state,
            isHidden: pluginState.isHidden,
            files: files,
            newFiles: newFiles,
            uploadStartedFiles: uploadStartedFiles,
            completeFiles: completeFiles,
            erroredFiles: erroredFiles,
            inProgressFiles: inProgressFiles,
            inProgressNotPausedFiles: inProgressNotPausedFiles,
            processingFiles: processingFiles,
            isUploadStarted: isUploadStarted,
            isAllComplete: isAllComplete,
            isAllErrored: isAllErrored,
            isAllPaused: isAllPaused,
            totalFileCount: Object.keys(files).length,
            totalProgress: state.totalProgress,
            allowNewUpload: allowNewUpload,
            acquirers: acquirers,
            theme: theme,
            activePickerPanel: pluginState.activePickerPanel,
            animateOpenClose: _this.opts.animateOpenClose,
            isClosing: pluginState.isClosing,
            getPlugin: _this.uppy.getPlugin,
            progressindicators: progressindicators,
            autoProceed: _this.uppy.opts.autoProceed,
            id: _this.id,
            closeModal: _this.requestCloseModal,
            handleClickOutside: _this.handleClickOutside,
            handleInputChange: _this.handleInputChange,
            handlePaste: _this.handlePaste,
            inline: _this.opts.inline,
            showPanel: _this.showPanel,
            hideAllPanels: _this.hideAllPanels,
            log: _this.uppy.log,
            i18n: _this.i18n,
            i18nArray: _this.i18nArray,
            removeFile: _this.uppy.removeFile,
            info: _this.uppy.info,
            note: _this.opts.note,
            metaFields: pluginState.metaFields,
            resumableUploads: capabilities.resumableUploads || false,
            individualCancellation: capabilities.individualCancellation,
            isMobileDevice: capabilities.isMobileDevice,
            pauseUpload: _this.uppy.pauseResume,
            retryUpload: _this.uppy.retryUpload,
            cancelUpload: _this.cancelUpload,
            cancelAll: _this.uppy.cancelAll,
            fileCardFor: pluginState.fileCardFor,
            toggleFileCard: _this.toggleFileCard,
            toggleAddFilesPanel: _this.toggleAddFilesPanel,
            showAddFilesPanel: pluginState.showAddFilesPanel,
            saveFileCard: _this.saveFileCard,
            width: _this.opts.width,
            height: _this.opts.height,
            showLinkToFileUploadResult: _this.opts.showLinkToFileUploadResult,
            proudlyDisplayPoweredByUppy: _this.opts.proudlyDisplayPoweredByUppy,
            hideCancelButton: _this.opts.hideCancelButton,
            hideRetryButton: _this.opts.hideRetryButton,
            hidePauseResumeCancelButtons: _this.opts.hidePauseResumeCancelButton,
            showRemoveButtonAfterComplete: _this.opts.showRemoveButtonAfterComplete,
            containerWidth: pluginState.containerWidth,
            containerHeight: pluginState.containerHeight,
            areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,
            isTargetDOMEl: _this.isTargetDOMEl,
            parentElement: _this.el,
            allowedFileTypes: _this.uppy.opts.restrictions.allowedFileTypes,
            maxNumberOfFiles: _this.uppy.opts.restrictions.maxNumberOfFiles,
            showSelectedFiles: _this.opts.showSelectedFiles,
            handleRequestThumbnail: _this.handleRequestThumbnail,
            handleCancelThumbnail: _this.handleCancelThumbnail,
            isDraggingOver: pluginState.isDraggingOver,
            handleDragOver: _this.handleDragOver,
            handleDragLeave: _this.handleDragLeave,
            handleDrop: _this.handleDrop
          });
                    SRTlib.send('], "end": "_this.render"},');

        };
        _this.discoverProviderPlugins = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.discoverProviderPlugins", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.uppy.iteratePlugins(function (plugin) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.discoverProviderPlugins._this.uppy.iteratePlugins", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (plugin && !plugin.target && plugin.opts && plugin.opts.target === _this.constructor) {
              _this.addTarget(plugin);
            }
                        SRTlib.send('], "end": "_this.discoverProviderPlugins._this.uppy.iteratePlugins"},');

          });
                    SRTlib.send('], "end": "_this.discoverProviderPlugins"},');

        };
        _this.install = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.install2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.setPluginState({
            isHidden: true,
            fileCardFor: null,
            activeOverlayType: null,
            showAddFilesPanel: false,
            activePickerPanel: false,
            metaFields: _this.opts.metaFields,
            targets: [],
            areInsidesReadyToBeVisible: false,
            isDraggingOver: false
          });
          var _this$opts = _this.opts, inline = _this$opts.inline, closeAfterFinish = _this$opts.closeAfterFinish;
          if (inline && closeAfterFinish) {
                        SRTlib.send('], "end": "_this.install2"},');

            throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');
          }
          var allowMultipleUploads = _this.uppy.opts.allowMultipleUploads;
          if (allowMultipleUploads && closeAfterFinish) {
            _this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploads` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');
          }
          var target = _this.opts.target;
          if (target) {
            _this.mount(target, _assertThisInitialized(_this));
          }
          var plugins = _this.opts.plugins || [];
          plugins.forEach(function (pluginID) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.install", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var plugin = _this.uppy.getPlugin(pluginID);
            if (plugin) {
              plugin.mount(_assertThisInitialized(_this), plugin);
            }
                        SRTlib.send('], "end": "_this.install"},');

          });
          if (!_this.opts.disableStatusBar) {
            _this.uppy.use(StatusBar, {
              id: _this.id + ":StatusBar",
              target: _assertThisInitialized(_this),
              hideUploadButton: _this.opts.hideUploadButton,
              hideRetryButton: _this.opts.hideRetryButton,
              hidePauseResumeButton: _this.opts.hidePauseResumeButton,
              hideCancelButton: _this.opts.hideCancelButton,
              showProgressDetails: _this.opts.showProgressDetails,
              hideAfterFinish: _this.opts.hideProgressAfterFinish,
              locale: _this.opts.locale
            });
          }
          if (!_this.opts.disableInformer) {
            _this.uppy.use(Informer, {
              id: _this.id + ":Informer",
              target: _assertThisInitialized(_this)
            });
          }
          if (!_this.opts.disableThumbnailGenerator) {
            _this.uppy.use(ThumbnailGenerator, {
              id: _this.id + ":ThumbnailGenerator",
              thumbnailWidth: _this.opts.thumbnailWidth,
              waitForThumbnailsBeforeUpload: _this.opts.waitForThumbnailsBeforeUpload,
              lazy: !_this.opts.waitForThumbnailsBeforeUpload
            });
          }
          _this.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;
          var isDarkModeOnFromTheStart = _this.darkModeMediaQuery ? _this.darkModeMediaQuery.matches : false;
          _this.uppy.log("[Dashboard] Dark mode is " + (isDarkModeOnFromTheStart ? 'on' : 'off'));
          _this.setDarkModeCapability(isDarkModeOnFromTheStart);
          if (_this.opts.theme === 'auto') {
            _this.darkModeMediaQuery.addListener(_this.handleSystemDarkModeChange);
          }
          _this.discoverProviderPlugins();
          _this.initEvents();
                    SRTlib.send('], "end": "_this.install2"},');

        };
        _this.uninstall = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.uninstall2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!_this.opts.disableInformer) {
            var informer = _this.uppy.getPlugin(_this.id + ":Informer");
            if (informer) _this.uppy.removePlugin(informer);
          }
          if (!_this.opts.disableStatusBar) {
            var statusBar = _this.uppy.getPlugin(_this.id + ":StatusBar");
            if (statusBar) _this.uppy.removePlugin(statusBar);
          }
          if (!_this.opts.disableThumbnailGenerator) {
            var thumbnail = _this.uppy.getPlugin(_this.id + ":ThumbnailGenerator");
            if (thumbnail) _this.uppy.removePlugin(thumbnail);
          }
          var plugins = _this.opts.plugins || [];
          plugins.forEach(function (pluginID) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.uninstall", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var plugin = _this.uppy.getPlugin(pluginID);
            if (plugin) plugin.unmount();
                        SRTlib.send('], "end": "_this.uninstall"},');

          });
          if (_this.opts.theme === 'auto') {
            _this.darkModeMediaQuery.removeListener(_this.handleSystemDarkModeChange);
          }
          _this.unmount();
          _this.removeEvents();
                    SRTlib.send('], "end": "_this.uninstall2"},');

        };
        _this.id = _this.opts.id || 'Dashboard';
        _this.title = 'Dashboard';
        _this.type = 'orchestrator';
        _this.modalName = "uppy-Dashboard-" + cuid();
        _this.defaultLocale = {
          strings: {
            closeModal: 'Close Modal',
            importFrom: 'Import from %{name}',
            addingMoreFiles: 'Adding more files',
            addMoreFiles: 'Add more files',
            dashboardWindowTitle: 'File Uploader Window (Press escape to close)',
            dashboardTitle: 'File Uploader',
            copyLinkToClipboardSuccess: 'Link copied to clipboard',
            copyLinkToClipboardFallback: 'Copy the URL below',
            copyLink: 'Copy link',
            fileSource: 'File source: %{name}',
            done: 'Done',
            back: 'Back',
            addMore: 'Add more',
            removeFile: 'Remove file',
            editFile: 'Edit file',
            editing: 'Editing %{file}',
            finishEditingFile: 'Finish editing file',
            saveChanges: 'Save changes',
            cancel: 'Cancel',
            myDevice: 'My Device',
            dropPaste: 'Drop files here, paste or %{browse}',
            dropPasteImport: 'Drop files here, paste, %{browse} or import from:',
            dropHint: 'Drop your files here',
            browse: 'browse',
            uploadComplete: 'Upload complete',
            uploadPaused: 'Upload paused',
            resumeUpload: 'Resume upload',
            pauseUpload: 'Pause upload',
            retryUpload: 'Retry upload',
            cancelUpload: 'Cancel upload',
            xFilesSelected: {
              0: '%{smart_count} file selected',
              1: '%{smart_count} files selected'
            },
            uploadingXFiles: {
              0: 'Uploading %{smart_count} file',
              1: 'Uploading %{smart_count} files'
            },
            processingXFiles: {
              0: 'Processing %{smart_count} file',
              1: 'Processing %{smart_count} files'
            },
            poweredBy2: '%{backwardsCompat} %{uppy}',
            poweredBy: 'Powered by'
          }
        };
        var defaultOptions = {
          target: 'body',
          metaFields: [],
          trigger: '#uppy-select-files',
          inline: false,
          width: 750,
          height: 550,
          thumbnailWidth: 280,
          waitForThumbnailsBeforeUpload: false,
          defaultPickerIcon: defaultPickerIcon,
          showLinkToFileUploadResult: true,
          showProgressDetails: false,
          hideUploadButton: false,
          hideRetryButton: false,
          hidePauseResumeCancelButtons: false,
          hideProgressAfterFinish: false,
          note: null,
          closeModalOnClickOutside: false,
          closeAfterFinish: false,
          disableStatusBar: false,
          disableInformer: false,
          disableThumbnailGenerator: false,
          disablePageScrollWhenModalOpen: true,
          animateOpenClose: true,
          proudlyDisplayPoweredByUppy: true,
          onRequestCloseModal: function onRequestCloseModal() {
                        SRTlib.send(`{ "anonymous": true, "function": "defaultOptions.onRequestCloseModal.onRequestCloseModal", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "defaultOptions.onRequestCloseModal.onRequestCloseModal"},');

            return _this.closeModal();
                        SRTlib.send('], "end": "defaultOptions.onRequestCloseModal.onRequestCloseModal"},');

          },
          showSelectedFiles: true,
          showRemoveButtonAfterComplete: false,
          browserBackButtonClose: false,
          theme: 'light'
        };
        _this.opts = _extends({}, defaultOptions, {}, _opts);
        _this.i18nInit();
        _this.superFocus = createSuperFocus();
        _this.ifFocusedOnUppyRecently = false;
        _this.makeDashboardInsidesVisibleAnywayTimeout = null;
        _this.removeDragOverClassTimeout = null;
                SRTlib.send('], "end": "Dashboard"},');

        return _this;
                SRTlib.send('], "end": "Dashboard"},');

      }
            SRTlib.send('], "end": "module.exports._temp._class2"},');

      return Dashboard;
            SRTlib.send('], "end": "module.exports._temp._class2"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey302"},');

  }, {
    "../package.json": 252,
    "./../../core": 248,
    "./../../informer": 280,
    "./../../status-bar": 300,
    "./../../thumbnail-generator": 305,
    "./../../utils/lib/Translator": 320,
    "./../../utils/lib/findAllDOMElements": 324,
    "./../../utils/lib/getDroppedFiles": 328,
    "./../../utils/lib/toArray": 349,
    "./components/Dashboard": 255,
    "./components/icons": 268,
    "./utils/createSuperFocus": 271,
    "./utils/trapFocus": 275,
    "cuid": 64,
    "memoize-one": 141,
    "resize-observer-polyfill": 188
  }],
  270: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey303", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function copyToClipboard(textToCopy, fallbackString) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.copyToClipboard", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      fallbackString = fallbackString || 'Copy the URL below';
            SRTlib.send('], "end": "module.exports.copyToClipboard"},');

      return new Promise(function (resolve) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.copyToClipboard.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var textArea = document.createElement('textarea');
        textArea.setAttribute('style', {
          position: 'fixed',
          top: 0,
          left: 0,
          width: '2em',
          height: '2em',
          padding: 0,
          border: 'none',
          outline: 'none',
          boxShadow: 'none',
          background: 'transparent'
        });
        textArea.value = textToCopy;
        document.body.appendChild(textArea);
        textArea.select();
        var magicCopyFailed = function magicCopyFailed() {
                    SRTlib.send(`{ "anonymous": false, "function": "magicCopyFailed", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          document.body.removeChild(textArea);
          window.prompt(fallbackString, textToCopy);
          resolve();
                    SRTlib.send('], "end": "magicCopyFailed"},');

        };
        try {
          var successful = document.execCommand('copy');
          if (!successful) {
                        SRTlib.send('], "end": "module.exports.copyToClipboard.ReturnStatement"},');

            return magicCopyFailed('copy command unavailable');
          }
          document.body.removeChild(textArea);
                    SRTlib.send('], "end": "module.exports.copyToClipboard.ReturnStatement"},');

          return resolve();
        } catch (err) {
          document.body.removeChild(textArea);
                    SRTlib.send('], "end": "module.exports.copyToClipboard.ReturnStatement"},');

          return magicCopyFailed(err);
        }
                SRTlib.send('], "end": "module.exports.copyToClipboard.ReturnStatement"},');

      });
            SRTlib.send('], "end": "module.exports.copyToClipboard"},');

    };
        SRTlib.send('], "end": "emptyKey303"},');

  }, {}],
  271: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey304", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var debounce = require('lodash.debounce');
    var FOCUSABLE_ELEMENTS = require('./../../../utils/lib/FOCUSABLE_ELEMENTS');
    var getActiveOverlayEl = require('./getActiveOverlayEl');
    module.exports = function createSuperFocus() {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.createSuperFocus", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var lastFocusWasOnSuperFocusableEl = false;
      var superFocus = function superFocus(dashboardEl, activeOverlayType) {
                SRTlib.send(`{ "anonymous": false, "function": "superFocus", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var overlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);
        var isFocusInOverlay = overlayEl.contains(document.activeElement);
        if (isFocusInOverlay && lastFocusWasOnSuperFocusableEl) {
                    SRTlib.send('], "end": "superFocus"},');

          return;
        }
        var superFocusableEl = overlayEl.querySelector('[data-uppy-super-focusable]');
        if (isFocusInOverlay && !superFocusableEl) {
                    SRTlib.send('], "end": "superFocus"},');

          return;
        }
        if (superFocusableEl) {
          superFocusableEl.focus({
            preventScroll: true
          });
          lastFocusWasOnSuperFocusableEl = true;
        } else {
          var firstEl = overlayEl.querySelector(FOCUSABLE_ELEMENTS);
          firstEl && firstEl.focus({
            preventScroll: true
          });
          lastFocusWasOnSuperFocusableEl = false;
        }
                SRTlib.send('], "end": "superFocus"},');

      };
            SRTlib.send('], "end": "module.exports.createSuperFocus"},');

      return debounce(superFocus, 260);
            SRTlib.send('], "end": "module.exports.createSuperFocus"},');

    };
        SRTlib.send('], "end": "emptyKey304"},');

  }, {
    "./../../../utils/lib/FOCUSABLE_ELEMENTS": 317,
    "./getActiveOverlayEl": 272,
    "lodash.debounce": 137
  }],
  272: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey305", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function getActiveOverlayEl(dashboardEl, activeOverlayType) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getActiveOverlayEl", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (activeOverlayType) {
        var overlayEl = dashboardEl.querySelector("[data-uppy-paneltype=\"" + activeOverlayType + "\"]");
        if (overlayEl) {
                    SRTlib.send('], "end": "module.exports.getActiveOverlayEl"},');

          return overlayEl;
        }
      }
            SRTlib.send('], "end": "module.exports.getActiveOverlayEl"},');

      return dashboardEl;
            SRTlib.send('], "end": "module.exports.getActiveOverlayEl"},');

    };
        SRTlib.send('], "end": "emptyKey305"},');

  }, {}],
  273: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey306", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('../components/icons'), iconFile = _require.iconFile, iconText = _require.iconText, iconImage = _require.iconImage, iconAudio = _require.iconAudio, iconVideo = _require.iconVideo, iconPDF = _require.iconPDF, iconArchive = _require.iconArchive;
    module.exports = function getIconByMime(fileType) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getIconByMime", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var defaultChoice = {
        color: '#838999',
        icon: iconFile()
      };
      if (!fileType) {
                SRTlib.send('], "end": "module.exports.getIconByMime"},');

        return defaultChoice;
      }
      var fileTypeGeneral = fileType.split('/')[0];
      var fileTypeSpecific = fileType.split('/')[1];
      if (fileTypeGeneral === 'text') {
                SRTlib.send('], "end": "module.exports.getIconByMime"},');

        return {
          color: '#5a5e69',
          icon: iconText()
        };
      }
      if (fileTypeGeneral === 'image') {
                SRTlib.send('], "end": "module.exports.getIconByMime"},');

        return {
          color: '#686de0',
          icon: iconImage()
        };
      }
      if (fileTypeGeneral === 'audio') {
                SRTlib.send('], "end": "module.exports.getIconByMime"},');

        return {
          color: '#068dbb',
          icon: iconAudio()
        };
      }
      if (fileTypeGeneral === 'video') {
                SRTlib.send('], "end": "module.exports.getIconByMime"},');

        return {
          color: '#19af67',
          icon: iconVideo()
        };
      }
      if (fileTypeGeneral === 'application' && fileTypeSpecific === 'pdf') {
                SRTlib.send('], "end": "module.exports.getIconByMime"},');

        return {
          color: '#e25149',
          icon: iconPDF()
        };
      }
      var archiveTypes = ['zip', 'x-7z-compressed', 'x-rar-compressed', 'x-gtar', 'x-apple-diskimage', 'x-diskcopy'];
      if (fileTypeGeneral === 'application' && archiveTypes.indexOf(fileTypeSpecific) !== -1) {
                SRTlib.send('], "end": "module.exports.getIconByMime"},');

        return {
          color: '#00C469',
          icon: iconArchive()
        };
      }
            SRTlib.send('], "end": "module.exports.getIconByMime"},');

      return defaultChoice;
            SRTlib.send('], "end": "module.exports.getIconByMime"},');

    };
        SRTlib.send('], "end": "emptyKey306"},');

  }, {
    "../components/icons": 268
  }],
  274: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey307", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function ignoreEvent(ev) {
            SRTlib.send(`{ "anonymous": false, "function": "ignoreEvent", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var tagName = ev.target.tagName;
      if (tagName === 'INPUT' || tagName === 'TEXTAREA') {
        ev.stopPropagation();
                SRTlib.send('], "end": "ignoreEvent"},');

        return;
      }
      ev.preventDefault();
      ev.stopPropagation();
            SRTlib.send('], "end": "ignoreEvent"},');

    }
    module.exports = ignoreEvent;
        SRTlib.send('], "end": "emptyKey307"},');

  }, {}],
  275: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey308", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var toArray = require('./../../../utils/lib/toArray');
    var getActiveOverlayEl = require('./getActiveOverlayEl');
    var FOCUSABLE_ELEMENTS = require('./../../../utils/lib/FOCUSABLE_ELEMENTS');
    function focusOnFirstNode(event, nodes) {
            SRTlib.send(`{ "anonymous": false, "function": "focusOnFirstNode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var node = nodes[0];
      if (node) {
        node.focus();
        event.preventDefault();
      }
            SRTlib.send('], "end": "focusOnFirstNode"},');

    }
    function focusOnLastNode(event, nodes) {
            SRTlib.send(`{ "anonymous": false, "function": "focusOnLastNode", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var node = nodes[nodes.length - 1];
      if (node) {
        node.focus();
        event.preventDefault();
      }
            SRTlib.send('], "end": "focusOnLastNode"},');

    }
    function isFocusInOverlay(activeOverlayEl) {
            SRTlib.send(`{ "anonymous": false, "function": "isFocusInOverlay", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "isFocusInOverlay"},');

      return activeOverlayEl.contains(document.activeElement);
            SRTlib.send('], "end": "isFocusInOverlay"},');

    }
    function trapFocus(event, activeOverlayType, dashboardEl) {
            SRTlib.send(`{ "anonymous": false, "function": "trapFocus", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var activeOverlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);
      var focusableNodes = toArray(activeOverlayEl.querySelectorAll(FOCUSABLE_ELEMENTS));
      var focusedItemIndex = focusableNodes.indexOf(document.activeElement);
      if (!isFocusInOverlay(activeOverlayEl)) {
        focusOnFirstNode(event, focusableNodes);
      } else if (event.shiftKey && focusedItemIndex === 0) {
        focusOnLastNode(event, focusableNodes);
      } else if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {
        focusOnFirstNode(event, focusableNodes);
      }
            SRTlib.send('], "end": "trapFocus"},');

    }
    module.exports = {
      forModal: function forModal(event, activeOverlayType, dashboardEl) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.forModal.forModal", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        trapFocus(event, activeOverlayType, dashboardEl);
                SRTlib.send('], "end": "module.exports.forModal.forModal"},');

      },
      forInline: function forInline(event, activeOverlayType, dashboardEl) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.forInline.forInline", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (activeOverlayType === null) {} else {
          trapFocus(event, activeOverlayType, dashboardEl);
        }
                SRTlib.send('], "end": "module.exports.forInline.forInline"},');

      }
    };
        SRTlib.send('], "end": "emptyKey308"},');

  }, {
    "./../../../utils/lib/FOCUSABLE_ELEMENTS": 317,
    "./../../../utils/lib/toArray": 349,
    "./getActiveOverlayEl": 272
  }],
  276: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey309", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function truncateString(string, maxLength) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.truncateString", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var separator = '...';
      if (string.length <= maxLength) {
                SRTlib.send('], "end": "module.exports.truncateString"},');

        return string;
      } else if (maxLength <= separator.length) {
                SRTlib.send('], "end": "module.exports.truncateString"},');

        return string.substr(0, maxLength);
      } else {
        var charsToShow = maxLength - separator.length;
        var frontChars = Math.ceil(charsToShow / 2);
        var backChars = Math.floor(charsToShow / 2);
                SRTlib.send('], "end": "module.exports.truncateString"},');

        return string.substr(0, frontChars) + separator + string.substr(string.length - backChars);
      }
            SRTlib.send('], "end": "module.exports.truncateString"},');

    };
        SRTlib.send('], "end": "emptyKey309"},');

  }, {}],
  277: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey310", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/facebook",
      "description": "Import files from Facebook, into Uppy.",
      "version": "1.1.6",
      "license": "MIT",
      "main": "lib/index.js",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "facebook"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@uppy/companion-client": "file:../companion-client",
        "@uppy/provider-views": "file:../provider-views",
        "@uppy/utils": "file:../utils",
        "preact": "8.2.9"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey310"},');

  }, {}],
  278: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey311", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('./../../core'), Plugin = _require.Plugin;
    var _require2 = require('./../../companion-client'), Provider = _require2.Provider;
    var ProviderViews = require('./../../provider-views');
    var _require3 = require('preact'), h = _require3.h;
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Facebook, _Plugin);
      function Facebook(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Facebook", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, opts) || this;
        _this.id = _this.opts.id || 'Facebook';
        Provider.initPlugin(_assertThisInitialized(_this), opts);
        _this.title = _this.opts.title || 'Facebook';
        _this.icon = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.icon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "_this.icon"},');

          return h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            width: "32",
            height: "32",
            viewBox: "0 0 32 32",
            xmlns: "http://www.w3.org/2000/svg"
          }, h("g", {
            fill: "none",
            "fill-rule": "evenodd"
          }, h("rect", {
            width: "32",
            height: "32",
            rx: "16",
            fill: "#3C5A99"
          }), h("path", {
            d: "M17.842 26v-8.667h2.653l.398-3.377h-3.051v-2.157c0-.978.248-1.644 1.527-1.644H21V7.132A19.914 19.914 0 0 0 18.623 7c-2.352 0-3.963 1.574-3.963 4.465v2.49H12v3.378h2.66V26h3.182z",
            fill: "#FFF",
            "fill-rule": "nonzero"
          })));
                    SRTlib.send('], "end": "_this.icon"},');

        };
        _this.provider = new Provider(uppy, {
          companionUrl: _this.opts.companionUrl,
          companionHeaders: _this.opts.companionHeaders || _this.opts.serverHeaders,
          provider: 'facebook',
          pluginId: _this.id
        });
        _this.onFirstRender = _this.onFirstRender.bind(_assertThisInitialized(_this));
        _this.render = _this.render.bind(_assertThisInitialized(_this));
                SRTlib.send('], "end": "Facebook"},');

        return _this;
                SRTlib.send('], "end": "Facebook"},');

      }
      var _proto = Facebook.prototype;
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.install.install", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.view = new ProviderViews(this, {
          provider: this.provider
        });
        this.setPluginState({
          authenticated: false,
          files: [],
          folders: [],
          directories: [],
          activeRow: -1,
          filterInput: '',
          isSearchVisible: false
        });
        var target = this.opts.target;
        if (target) {
          this.mount(target, this);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.install.install"},');

      };
      _proto.uninstall = function uninstall() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uninstall.uninstall", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.view.tearDown();
        this.unmount();
                SRTlib.send('], "end": "module.exports._temp._class._proto.uninstall.uninstall"},');

      };
      _proto.onFirstRender = function onFirstRender() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onFirstRender.onFirstRender", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._temp._class._proto.onFirstRender.onFirstRender"},');

        return this.view.getFolder();
                SRTlib.send('], "end": "module.exports._temp._class._proto.onFirstRender.onFirstRender"},');

      };
      _proto.render = function render(state) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var viewOptions = {};
        if (this.getPluginState().files.length && !this.getPluginState().folders.length) {
          viewOptions.viewType = 'grid';
          viewOptions.showFilter = false;
          viewOptions.showTitles = false;
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.render.render"},');

        return this.view.render(state, viewOptions);
                SRTlib.send('], "end": "module.exports._temp._class._proto.render.render"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class3"},');

      return Facebook;
            SRTlib.send('], "end": "module.exports._temp._class3"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey311"},');

  }, {
    "../package.json": 277,
    "./../../companion-client": 243,
    "./../../core": 248,
    "./../../provider-views": 295,
    "preact": 160
  }],
  279: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey312", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/informer",
      "description": "A notification and error pop-up bar for Uppy.",
      "version": "1.5.6",
      "license": "MIT",
      "main": "lib/index.js",
      "style": "dist/style.min.css",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "notification", "bar", "ui"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@uppy/utils": "file:../utils",
        "preact": "8.2.9"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey312"},');

  }, {}],
  280: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey313", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends10", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends10"},');

        return target;
                SRTlib.send('], "end": "_extends10"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('./../../core'), Plugin = _require.Plugin;
    var _require2 = require('preact'), h = _require2.h;
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Informer, _Plugin);
      function Informer(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Informer", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, opts) || this;
        _this.render = function (state) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.render2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _state$info = state.info, isHidden = _state$info.isHidden, message = _state$info.message, details = _state$info.details;
          function displayErrorAlert() {
                        SRTlib.send(`{ "anonymous": false, "function": "displayErrorAlert", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var errorMessage = message + " \n\n " + details;
            alert(errorMessage);
                        SRTlib.send('], "end": "displayErrorAlert"},');

          }
          var handleMouseOver = function handleMouseOver() {
                        SRTlib.send(`{ "anonymous": false, "function": "handleMouseOver", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            clearTimeout(_this.uppy.infoTimeoutID);
                        SRTlib.send('], "end": "handleMouseOver"},');

          };
          var handleMouseLeave = function handleMouseLeave() {
                        SRTlib.send(`{ "anonymous": false, "function": "handleMouseLeave", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            _this.uppy.infoTimeoutID = setTimeout(_this.uppy.hideInfo, 2000);
                        SRTlib.send('], "end": "handleMouseLeave"},');

          };
                    SRTlib.send('], "end": "_this.render2"},');

          return h("div", {
            class: "uppy uppy-Informer",
            "aria-hidden": isHidden
          }, h("p", {
            role: "alert"
          }, message, ' ', details && h("span", {
            "aria-label": details,
            "data-microtip-position": "top-left",
            "data-microtip-size": "medium",
            role: "tooltip",
            onclick: displayErrorAlert,
            onMouseOver: handleMouseOver,
            onMouseLeave: handleMouseLeave
          }, "?")));
                    SRTlib.send('], "end": "_this.render2"},');

        };
        _this.type = 'progressindicator';
        _this.id = _this.opts.id || 'Informer';
        _this.title = 'Informer';
        var defaultOptions = {};
        _this.opts = _extends({}, defaultOptions, opts);
                SRTlib.send('], "end": "Informer"},');

        return _this;
                SRTlib.send('], "end": "Informer"},');

      }
      var _proto = Informer.prototype;
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.install.install2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var target = this.opts.target;
        if (target) {
          this.mount(target, this);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.install.install2"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class4"},');

      return Informer;
            SRTlib.send('], "end": "module.exports._temp._class4"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey313"},');

  }, {
    "../package.json": 279,
    "./../../core": 248,
    "preact": 160
  }],
  281: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey314", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/instagram",
      "description": "Import photos and videos from Instagram, into Uppy.",
      "version": "1.4.6",
      "license": "MIT",
      "main": "lib/index.js",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "instagram", "provider", "photos", "videos"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@uppy/companion-client": "file:../companion-client",
        "@uppy/provider-views": "file:../provider-views",
        "@uppy/utils": "file:../utils",
        "preact": "8.2.9"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey314"},');

  }, {}],
  282: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey315", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('./../../core'), Plugin = _require.Plugin;
    var _require2 = require('./../../companion-client'), Provider = _require2.Provider;
    var ProviderViews = require('./../../provider-views');
    var _require3 = require('preact'), h = _require3.h;
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Instagram, _Plugin);
      function Instagram(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Instagram", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, opts) || this;
        _this.id = _this.opts.id || 'Instagram';
        Provider.initPlugin(_assertThisInitialized(_this), opts);
        _this.title = _this.opts.title || 'Instagram';
        _this.icon = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.icon2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "_this.icon2"},');

          return h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            width: "32",
            height: "32",
            viewBox: "0 0 32 32",
            xmlns: "http://www.w3.org/2000/svg"
          }, h("g", {
            fill: "none",
            "fill-rule": "evenodd"
          }, h("rect", {
            fill: "#E1306C",
            width: "32",
            height: "32",
            rx: "16"
          }), h("path", {
            d: "M16 8.622c2.403 0 2.688.009 3.637.052.877.04 1.354.187 1.67.31.392.144.745.374 1.036.673.299.29.529.644.673 1.035.123.317.27.794.31 1.671.043.95.052 1.234.052 3.637s-.009 2.688-.052 3.637c-.04.877-.187 1.354-.31 1.671a2.98 2.98 0 0 1-1.708 1.708c-.317.123-.794.27-1.671.31-.95.043-1.234.053-3.637.053s-2.688-.01-3.637-.053c-.877-.04-1.354-.187-1.671-.31a2.788 2.788 0 0 1-1.035-.673 2.788 2.788 0 0 1-.673-1.035c-.123-.317-.27-.794-.31-1.671-.043-.949-.052-1.234-.052-3.637s.009-2.688.052-3.637c.04-.877.187-1.354.31-1.67.144-.392.374-.745.673-1.036.29-.299.644-.529 1.035-.673.317-.123.794-.27 1.671-.31.95-.043 1.234-.052 3.637-.052zM16 7c-2.444 0-2.75.01-3.71.054-.959.044-1.613.196-2.185.419-.6.225-1.145.58-1.594 1.038-.458.45-.813.993-1.039 1.594-.222.572-.374 1.226-.418 2.184C7.01 13.25 7 13.556 7 16s.01 2.75.054 3.71c.044.959.196 1.613.419 2.185.226.6.58 1.145 1.038 1.594.45.458.993.813 1.594 1.038.572.223 1.227.375 2.184.419.96.044 1.267.054 3.711.054s2.75-.01 3.71-.054c.959-.044 1.613-.196 2.185-.419a4.602 4.602 0 0 0 2.632-2.632c.223-.572.375-1.226.419-2.184.044-.96.054-1.267.054-3.711s-.01-2.75-.054-3.71c-.044-.959-.196-1.613-.419-2.185A4.412 4.412 0 0 0 23.49 8.51a4.412 4.412 0 0 0-1.594-1.039c-.572-.222-1.226-.374-2.184-.418C18.75 7.01 18.444 7 16 7zm0 4.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9zm0 7.421a2.921 2.921 0 1 1 0-5.842 2.921 2.921 0 0 1 0 5.842zm4.875-6.671a1.125 1.125 0 1 1 0-2.25 1.125 1.125 0 0 1 0 2.25z",
            fill: "#FFF"
          })));
                    SRTlib.send('], "end": "_this.icon2"},');

        };
        _this.provider = new Provider(uppy, {
          companionUrl: _this.opts.companionUrl,
          companionHeaders: _this.opts.companionHeaders || _this.opts.serverHeaders,
          provider: 'instagram',
          authProvider: 'instagram',
          pluginId: _this.id
        });
        _this.onFirstRender = _this.onFirstRender.bind(_assertThisInitialized(_this));
        _this.render = _this.render.bind(_assertThisInitialized(_this));
                SRTlib.send('], "end": "Instagram"},');

        return _this;
                SRTlib.send('], "end": "Instagram"},');

      }
      var _proto = Instagram.prototype;
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.install.install3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.view = new ProviderViews(this, {
          provider: this.provider,
          viewType: 'grid',
          showTitles: false,
          showFilter: false,
          showBreadcrumbs: false
        });
        this.setPluginState({
          authenticated: false,
          files: [],
          folders: [],
          directories: [],
          activeRow: -1,
          filterInput: '',
          isSearchVisible: false
        });
        var target = this.opts.target;
        if (target) {
          this.mount(target, this);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.install.install3"},');

      };
      _proto.uninstall = function uninstall() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uninstall.uninstall2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.view.tearDown();
        this.unmount();
                SRTlib.send('], "end": "module.exports._temp._class._proto.uninstall.uninstall2"},');

      };
      _proto.onFirstRender = function onFirstRender() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onFirstRender.onFirstRender2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.view.getFolder('recent');
                SRTlib.send('], "end": "module.exports._temp._class._proto.onFirstRender.onFirstRender2"},');

      };
      _proto.render = function render(state) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._temp._class._proto.render.render2"},');

        return this.view.render(state);
                SRTlib.send('], "end": "module.exports._temp._class._proto.render.render2"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class5"},');

      return Instagram;
            SRTlib.send('], "end": "module.exports._temp._class5"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey315"},');

  }, {
    "../package.json": 281,
    "./../../companion-client": 243,
    "./../../core": 248,
    "./../../provider-views": 295,
    "preact": 160
  }],
  283: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey316", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/provider-views",
      "description": "View library for Uppy remote provider plugins.",
      "version": "1.6.6",
      "license": "MIT",
      "main": "lib/index.js",
      "style": "dist/style.min.css",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@uppy/utils": "file:../utils",
        "classnames": "^2.2.6",
        "preact": "8.2.9"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey316"},');

  }, {}],
  284: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey317", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('preact'), h = _require.h, Component = _require.Component;
    var AuthView = (function (_Component) {
            SRTlib.send(`{ "anonymous": true, "function": "AuthView", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(AuthView, _Component);
      function AuthView() {
                SRTlib.send(`{ "anonymous": false, "function": "AuthView", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "AuthView"},');

        return _Component.apply(this, arguments) || this;
                SRTlib.send('], "end": "AuthView"},');

      }
      var _proto = AuthView.prototype;
      _proto.render = function render() {
                SRTlib.send(`{ "anonymous": true, "function": "AuthView._proto.render.render", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var pluginNameComponent = h("span", {
          class: "uppy-Provider-authTitleName"
        }, this.props.pluginName, h("br", null));
                SRTlib.send('], "end": "AuthView._proto.render.render"},');

        return h("div", {
          class: "uppy-Provider-auth"
        }, h("div", {
          class: "uppy-Provider-authIcon"
        }, this.props.pluginIcon()), h("div", {
          class: "uppy-Provider-authTitle"
        }, this.props.i18nArray('authenticateWithTitle', {
          pluginName: pluginNameComponent
        })), h("button", {
          type: "button",
          class: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Provider-authBtn",
          onclick: this.props.handleAuth,
          "data-uppy-super-focusable": true
        }, this.props.i18nArray('authenticateWith', {
          pluginName: this.props.pluginName
        })));
                SRTlib.send('], "end": "AuthView._proto.render.render"},');

      };
            SRTlib.send('], "end": "AuthView"},');

      return AuthView;
            SRTlib.send('], "end": "AuthView"},');

    })(Component);
    module.exports = AuthView;
        SRTlib.send('], "end": "emptyKey317"},');

  }, {
    "preact": 160
  }],
  285: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey318", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var Breadcrumb = function Breadcrumb(props) {
            SRTlib.send(`{ "anonymous": false, "function": "Breadcrumb", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "Breadcrumb"},');

      return h("span", null, h("button", {
        type: "button",
        class: "uppy-u-reset",
        onclick: props.getFolder
      }, props.title), !props.isLast ? ' / ' : '');
            SRTlib.send('], "end": "Breadcrumb"},');

    };
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports23", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports23"},');

      return h("div", {
        class: "uppy-Provider-breadcrumbs"
      }, h("div", {
        class: "uppy-Provider-breadcrumbsIcon"
      }, props.breadcrumbsIcon), props.directories.map(function (directory, i) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.ReturnStatement.h.props.directories.map", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "module.exports.ReturnStatement.h.props.directories.map"},');

        return h(Breadcrumb, {
          key: directory.id,
          getFolder: function getFolder() {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports.ReturnStatement.h.props.directories.map.ReturnStatement.h.getFolder.getFolder", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "module.exports.ReturnStatement.h.props.directories.map.ReturnStatement.h.getFolder.getFolder"},');

            return props.getFolder(directory.id);
                        SRTlib.send('], "end": "module.exports.ReturnStatement.h.props.directories.map.ReturnStatement.h.getFolder.getFolder"},');

          },
          title: i === 0 ? props.title : directory.title,
          isLast: i + 1 === props.directories.length
        });
                SRTlib.send('], "end": "module.exports.ReturnStatement.h.props.directories.map"},');

      }));
            SRTlib.send('], "end": "module.exports23"},');

    };
        SRTlib.send('], "end": "emptyKey318"},');

  }, {
    "preact": 160
  }],
  286: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey319", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends11", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends11"},');

        return target;
                SRTlib.send('], "end": "_extends11"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var classNames = require('classnames');
    var Breadcrumbs = require('./Breadcrumbs');
    var Filter = require('./Filter');
    var ItemList = require('./ItemList');
    var FooterActions = require('./FooterActions');
    var _require = require('preact'), h = _require.h;
    var Browser = function Browser(props) {
            SRTlib.send(`{ "anonymous": false, "function": "Browser", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var filteredFolders = props.folders;
      var filteredFiles = props.files;
      if (props.filterInput !== '') {
        filteredFolders = props.filterItems(props.folders);
        filteredFiles = props.filterItems(props.files);
      }
      var selected = props.currentSelection.length;
            SRTlib.send('], "end": "Browser"},');

      return h("div", {
        class: classNames('uppy-ProviderBrowser', "uppy-ProviderBrowser-viewType--" + props.viewType)
      }, h("div", {
        class: "uppy-ProviderBrowser-header"
      }, h("div", {
        class: classNames('uppy-ProviderBrowser-headerBar', !props.showBreadcrumbs && 'uppy-ProviderBrowser-headerBar--simple')
      }, props.showBreadcrumbs && Breadcrumbs({
        getFolder: props.getFolder,
        directories: props.directories,
        breadcrumbsIcon: props.pluginIcon && props.pluginIcon(),
        title: props.title
      }), h("span", {
        class: "uppy-ProviderBrowser-user"
      }, props.username), h("button", {
        type: "button",
        onclick: props.logout,
        class: "uppy-u-reset uppy-ProviderBrowser-userLogout"
      }, props.i18n('logOut')))), props.showFilter && h(Filter, props), h(ItemList, {
        columns: [{
          name: 'Name',
          key: 'title'
        }],
        folders: filteredFolders,
        files: filteredFiles,
        activeRow: props.isActiveRow,
        sortByTitle: props.sortByTitle,
        sortByDate: props.sortByDate,
        isChecked: props.isChecked,
        handleFolderClick: props.getNextFolder,
        toggleCheckbox: props.toggleCheckbox,
        handleScroll: props.handleScroll,
        title: props.title,
        showTitles: props.showTitles,
        i18n: props.i18n,
        viewType: props.viewType
      }), selected > 0 && h(FooterActions, _extends({
        selected: selected
      }, props)));
            SRTlib.send('], "end": "Browser"},');

    };
    module.exports = Browser;
        SRTlib.send('], "end": "emptyKey319"},');

  }, {
    "./Breadcrumbs": 285,
    "./Filter": 287,
    "./FooterActions": 288,
    "./ItemList": 293,
    "classnames": 53,
    "preact": 160
  }],
  287: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey320", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('preact'), h = _require.h, Component = _require.Component;
    module.exports = (function (_Component) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports24", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Filter, _Component);
      function Filter(props) {
                SRTlib.send(`{ "anonymous": false, "function": "Filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this;
        _this = _Component.call(this, props) || this;
        _this.preventEnterPress = _this.preventEnterPress.bind(_assertThisInitialized(_this));
                SRTlib.send('], "end": "Filter"},');

        return _this;
                SRTlib.send('], "end": "Filter"},');

      }
      var _proto = Filter.prototype;
      _proto.preventEnterPress = function preventEnterPress(ev) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.preventEnterPress.preventEnterPress", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (ev.keyCode === 13) {
          ev.stopPropagation();
          ev.preventDefault();
        }
                SRTlib.send('], "end": "module.exports._proto.preventEnterPress.preventEnterPress"},');

      };
      _proto.render = function render() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.render.render3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this2 = this;
                SRTlib.send('], "end": "module.exports._proto.render.render3"},');

        return h("div", {
          class: "uppy-ProviderBrowser-search"
        }, h("input", {
          class: "uppy-u-reset uppy-ProviderBrowser-searchInput",
          type: "text",
          placeholder: this.props.i18n('filter'),
          "aria-label": this.props.i18n('filter'),
          onkeyup: this.preventEnterPress,
          onkeydown: this.preventEnterPress,
          onkeypress: this.preventEnterPress,
          oninput: function oninput(e) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.render.render.ReturnStatement.h.h.oninput.oninput", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._proto.render.render.ReturnStatement.h.h.oninput.oninput"},');

            return _this2.props.filterQuery(e);
                        SRTlib.send('], "end": "module.exports._proto.render.render.ReturnStatement.h.h.oninput.oninput"},');

          },
          value: this.props.filterInput
        }), h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          class: "UppyIcon uppy-ProviderBrowser-searchIcon",
          width: "12",
          height: "12",
          viewBox: "0 0 12 12"
        }, h("path", {
          d: "M8.638 7.99l3.172 3.172a.492.492 0 1 1-.697.697L7.91 8.656a4.977 4.977 0 0 1-2.983.983C2.206 9.639 0 7.481 0 4.819 0 2.158 2.206 0 4.927 0c2.721 0 4.927 2.158 4.927 4.82a4.74 4.74 0 0 1-1.216 3.17zm-3.71.685c2.176 0 3.94-1.726 3.94-3.856 0-2.129-1.764-3.855-3.94-3.855C2.75.964.984 2.69.984 4.819c0 2.13 1.765 3.856 3.942 3.856z"
        })), this.props.filterInput && h("button", {
          class: "uppy-u-reset uppy-ProviderBrowser-searchClose",
          type: "button",
          "aria-label": this.props.i18n('resetFilter'),
          title: this.props.i18n('resetFilter'),
          onclick: this.props.filterQuery
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          class: "UppyIcon",
          viewBox: "0 0 19 19"
        }, h("path", {
          d: "M17.318 17.232L9.94 9.854 9.586 9.5l-.354.354-7.378 7.378h.707l-.62-.62v.706L9.318 9.94l.354-.354-.354-.354L1.94 1.854v.707l.62-.62h-.706l7.378 7.378.354.354.354-.354 7.378-7.378h-.707l.622.62v-.706L9.854 9.232l-.354.354.354.354 7.378 7.378.708-.707-7.38-7.378v.708l7.38-7.38.353-.353-.353-.353-.622-.622-.353-.353-.354.352-7.378 7.38h.708L2.56 1.23 2.208.88l-.353.353-.622.62-.353.355.352.353 7.38 7.38v-.708l-7.38 7.38-.353.353.352.353.622.622.353.353.354-.353 7.38-7.38h-.708l7.38 7.38z"
        }))));
                SRTlib.send('], "end": "module.exports._proto.render.render3"},');

      };
            SRTlib.send('], "end": "module.exports24"},');

      return Filter;
            SRTlib.send('], "end": "module.exports24"},');

    })(Component);
        SRTlib.send('], "end": "emptyKey320"},');

  }, {
    "preact": 160
  }],
  288: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey321", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports25", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports25"},');

      return h("div", {
        class: "uppy-ProviderBrowser-footer"
      }, h("button", {
        class: "uppy-u-reset uppy-c-btn uppy-c-btn-primary",
        onclick: props.done
      }, props.i18n('selectX', {
        smart_count: props.selected
      })), h("button", {
        class: "uppy-u-reset uppy-c-btn uppy-c-btn-link",
        onclick: props.cancel
      }, props.i18n('cancel')));
            SRTlib.send('], "end": "module.exports25"},');

    };
        SRTlib.send('], "end": "emptyKey321"},');

  }, {
    "preact": 160
  }],
  289: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey322", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports26", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports26"},');

      return h("li", {
        class: props.className
      }, h("div", {
        "aria-hidden": true,
        class: "uppy-ProviderBrowserItem-fakeCheckbox " + (props.isChecked ? 'uppy-ProviderBrowserItem-fakeCheckbox--is-checked' : '')
      }), h("button", {
        type: "button",
        class: "uppy-u-reset uppy-ProviderBrowserItem-inner",
        onclick: props.toggleCheckbox,
        role: "option",
        "aria-label": props.isChecked ? props.i18n('unselectFileNamed', {
          name: props.title
        }) : props.i18n('selectFileNamed', {
          name: props.title
        }),
        "aria-selected": props.isChecked,
        "aria-disabled": props.isDisabled,
        "data-uppy-super-focusable": true
      }, props.itemIconEl, props.showTitles && props.title));
            SRTlib.send('], "end": "module.exports26"},');

    };
        SRTlib.send('], "end": "emptyKey322"},');

  }, {
    "preact": 160
  }],
  290: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey323", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    function FileIcon() {
            SRTlib.send(`{ "anonymous": false, "function": "FileIcon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "FileIcon"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: 11,
        height: 14.5,
        viewBox: "0 0 44 58"
      }, h("path", {
        d: "M27.437.517a1 1 0 0 0-.094.03H4.25C2.037.548.217 2.368.217 4.58v48.405c0 2.212 1.82 4.03 4.03 4.03H39.03c2.21 0 4.03-1.818 4.03-4.03V15.61a1 1 0 0 0-.03-.28 1 1 0 0 0 0-.093 1 1 0 0 0-.03-.032 1 1 0 0 0 0-.03 1 1 0 0 0-.032-.063 1 1 0 0 0-.03-.063 1 1 0 0 0-.032 0 1 1 0 0 0-.03-.063 1 1 0 0 0-.032-.03 1 1 0 0 0-.03-.063 1 1 0 0 0-.063-.062l-14.593-14a1 1 0 0 0-.062-.062A1 1 0 0 0 28 .708a1 1 0 0 0-.374-.157 1 1 0 0 0-.156 0 1 1 0 0 0-.03-.03l-.003-.003zM4.25 2.547h22.218v9.97c0 2.21 1.82 4.03 4.03 4.03h10.564v36.438a2.02 2.02 0 0 1-2.032 2.032H4.25c-1.13 0-2.032-.9-2.032-2.032V4.58c0-1.13.902-2.032 2.03-2.032zm24.218 1.345l10.375 9.937.75.718H30.5c-1.13 0-2.032-.9-2.032-2.03V3.89z"
      }));
            SRTlib.send('], "end": "FileIcon"},');

    }
    function FolderIcon() {
            SRTlib.send(`{ "anonymous": false, "function": "FolderIcon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "FolderIcon"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        style: {
          width: 16,
          marginRight: 3
        },
        viewBox: "0 0 276.157 276.157"
      }, h("path", {
        d: "M273.08 101.378c-3.3-4.65-8.86-7.32-15.254-7.32h-24.34V67.59c0-10.2-8.3-18.5-18.5-18.5h-85.322c-3.63 0-9.295-2.875-11.436-5.805l-6.386-8.735c-4.982-6.814-15.104-11.954-23.546-11.954H58.73c-9.292 0-18.638 6.608-21.737 15.372l-2.033 5.752c-.958 2.71-4.72 5.37-7.596 5.37H18.5C8.3 49.09 0 57.39 0 67.59v167.07c0 .886.16 1.73.443 2.52.152 3.306 1.18 6.424 3.053 9.064 3.3 4.652 8.86 7.32 15.255 7.32h188.487c11.395 0 23.27-8.425 27.035-19.18l40.677-116.188c2.11-6.035 1.43-12.164-1.87-16.816zM18.5 64.088h8.864c9.295 0 18.64-6.607 21.738-15.37l2.032-5.75c.96-2.712 4.722-5.373 7.597-5.373h29.565c3.63 0 9.295 2.876 11.437 5.806l6.386 8.735c4.982 6.815 15.104 11.954 23.546 11.954h85.322c1.898 0 3.5 1.602 3.5 3.5v26.47H69.34c-11.395 0-23.27 8.423-27.035 19.178L15 191.23V67.59c0-1.898 1.603-3.5 3.5-3.5zm242.29 49.15l-40.676 116.188c-1.674 4.78-7.812 9.135-12.877 9.135H18.75c-1.447 0-2.576-.372-3.02-.997-.442-.625-.422-1.814.057-3.18l40.677-116.19c1.674-4.78 7.812-9.134 12.877-9.134h188.487c1.448 0 2.577.372 3.02.997.443.625.423 1.814-.056 3.18z"
      }));
            SRTlib.send('], "end": "FolderIcon"},');

    }
    function VideoIcon() {
            SRTlib.send(`{ "anonymous": false, "function": "VideoIcon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "VideoIcon"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        viewBox: "0 0 58 58"
      }, h("path", {
        d: "M36.537 28.156l-11-7a1.005 1.005 0 0 0-1.02-.033C24.2 21.3 24 21.635 24 22v14a1 1 0 0 0 1.537.844l11-7a1.002 1.002 0 0 0 0-1.688zM26 34.18V23.82L34.137 29 26 34.18z"
      }), h("path", {
        d: "M57 6H1a1 1 0 0 0-1 1v44a1 1 0 0 0 1 1h56a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1zM10 28H2v-9h8v9zm-8 2h8v9H2v-9zm10 10V8h34v42H12V40zm44-12h-8v-9h8v9zm-8 2h8v9h-8v-9zm8-22v9h-8V8h8zM2 8h8v9H2V8zm0 42v-9h8v9H2zm54 0h-8v-9h8v9z"
      }));
            SRTlib.send('], "end": "VideoIcon"},');

    }
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports27", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (props.itemIconString === null) {
                SRTlib.send('], "end": "module.exports27"},');

        return;
      }
      switch (props.itemIconString) {
        case 'file':
                    SRTlib.send('], "end": "emptyKey323"},');

                    SRTlib.send('], "end": "module.exports27"},');

          return h(FileIcon, null);
        case 'folder':
                    SRTlib.send('], "end": "emptyKey323"},');

                    SRTlib.send('], "end": "module.exports27"},');

          return h(FolderIcon, null);
        case 'video':
                    SRTlib.send('], "end": "emptyKey323"},');

                    SRTlib.send('], "end": "module.exports27"},');

          return h(VideoIcon, null);
        default:
                    SRTlib.send('], "end": "emptyKey323"},');

                    SRTlib.send('], "end": "module.exports27"},');

          return h("img", {
            src: props.itemIconString
          });
      }
            SRTlib.send('], "end": "module.exports27"},');

    };
        SRTlib.send('], "end": "emptyKey323"},');

  }, {
    "preact": 160
  }],
  291: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey324", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var getAriaLabelOfCheckbox = function getAriaLabelOfCheckbox(props) {
            SRTlib.send(`{ "anonymous": false, "function": "getAriaLabelOfCheckbox", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (props.type === 'folder') {
        if (props.isChecked) {
                    SRTlib.send('], "end": "getAriaLabelOfCheckbox"},');

          return props.i18n('unselectAllFilesFromFolderNamed', {
            name: props.title
          });
        } else {
                    SRTlib.send('], "end": "getAriaLabelOfCheckbox"},');

          return props.i18n('selectAllFilesFromFolderNamed', {
            name: props.title
          });
        }
      } else {
        if (props.isChecked) {
                    SRTlib.send('], "end": "getAriaLabelOfCheckbox"},');

          return props.i18n('unselectFileNamed', {
            name: props.title
          });
        } else {
                    SRTlib.send('], "end": "getAriaLabelOfCheckbox"},');

          return props.i18n('selectFileNamed', {
            name: props.title
          });
        }
      }
            SRTlib.send('], "end": "getAriaLabelOfCheckbox"},');

    };
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports28", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports28"},');

      return h("li", {
        class: props.className
      }, h("button", {
        type: "button",
        class: "uppy-u-reset uppy-ProviderBrowserItem-fakeCheckbox " + (props.isChecked ? 'uppy-ProviderBrowserItem-fakeCheckbox--is-checked' : ''),
        onClick: props.toggleCheckbox,
        id: props.id,
        role: "option",
        "aria-label": getAriaLabelOfCheckbox(props),
        "aria-selected": props.isChecked,
        "aria-disabled": props.isDisabled,
        "data-uppy-super-focusable": true
      }), props.type === 'file' ? h("label", {
        for: props.id,
        className: "uppy-u-reset uppy-ProviderBrowserItem-inner"
      }, props.itemIconEl, props.showTitles && props.title) : h("button", {
        type: "button",
        class: "uppy-u-reset uppy-ProviderBrowserItem-inner",
        onclick: props.handleFolderClick,
        "aria-label": props.i18n('openFolderNamed', {
          name: props.title
        })
      }, props.itemIconEl, props.showTitles && props.title));
            SRTlib.send('], "end": "module.exports28"},');

    };
        SRTlib.send('], "end": "emptyKey324"},');

  }, {
    "preact": 160
  }],
  292: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey325", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends12", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends12"},');

        return target;
                SRTlib.send('], "end": "_extends12"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var _require = require('preact'), h = _require.h;
    var classNames = require('classnames');
    var ItemIcon = require('./components/ItemIcon');
    var GridLi = require('./components/GridLi');
    var ListLi = require('./components/ListLi');
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports29", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var itemIconString = props.getItemIcon();
      var className = classNames('uppy-ProviderBrowserItem', {
        'uppy-ProviderBrowserItem--selected': props.isChecked
      }, {
        'uppy-ProviderBrowserItem--noPreview': itemIconString === 'video'
      });
      var itemIconEl = h(ItemIcon, {
        itemIconString: itemIconString
      });
      switch (props.viewType) {
        case 'grid':
                    SRTlib.send('], "end": "emptyKey325"},');

                    SRTlib.send('], "end": "module.exports29"},');

          return h(GridLi, _extends({}, props, {
            className: className,
            itemIconEl: itemIconEl
          }));
        case 'list':
                    SRTlib.send('], "end": "emptyKey325"},');

                    SRTlib.send('], "end": "module.exports29"},');

          return h(ListLi, _extends({}, props, {
            className: className,
            itemIconEl: itemIconEl
          }));
        default:
                    SRTlib.send('], "end": "emptyKey325"},');

                    SRTlib.send('], "end": "module.exports29"},');

          throw new Error("There is no such type " + props.viewType);
      }
            SRTlib.send('], "end": "module.exports29"},');

    };
        SRTlib.send('], "end": "emptyKey325"},');

  }, {
    "./components/GridLi": 289,
    "./components/ItemIcon": 290,
    "./components/ListLi": 291,
    "classnames": 53,
    "preact": 160
  }],
  293: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey326", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends13", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends13"},');

        return target;
                SRTlib.send('], "end": "_extends13"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var _require = require('preact'), h = _require.h;
    var Item = require('./Item/index');
    var getSharedProps = function getSharedProps(fileOrFolder, props) {
            SRTlib.send(`{ "anonymous": false, "function": "getSharedProps", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "getSharedProps"},');

      return {
        id: fileOrFolder.id,
        title: fileOrFolder.name,
        getItemIcon: function getItemIcon() {
                    SRTlib.send(`{ "anonymous": true, "function": "getSharedProps.getSharedProps.ReturnStatement.getItemIcon.getItemIcon", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "getSharedProps.getSharedProps.ReturnStatement.getItemIcon.getItemIcon"},');

          return fileOrFolder.icon;
                    SRTlib.send('], "end": "getSharedProps.getSharedProps.ReturnStatement.getItemIcon.getItemIcon"},');

        },
        isChecked: props.isChecked(fileOrFolder),
        toggleCheckbox: function toggleCheckbox(e) {
                    SRTlib.send(`{ "anonymous": true, "function": "getSharedProps.getSharedProps.ReturnStatement.toggleCheckbox.toggleCheckbox", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "getSharedProps.getSharedProps.ReturnStatement.toggleCheckbox.toggleCheckbox"},');

          return props.toggleCheckbox(e, fileOrFolder);
                    SRTlib.send('], "end": "getSharedProps.getSharedProps.ReturnStatement.toggleCheckbox.toggleCheckbox"},');

        },
        columns: props.columns,
        showTitles: props.showTitles,
        viewType: props.viewType,
        i18n: props.i18n
      };
            SRTlib.send('], "end": "getSharedProps"},');

    };
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports30", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!props.folders.length && !props.files.length) {
                SRTlib.send('], "end": "module.exports30"},');

        return h("div", {
          class: "uppy-Provider-empty"
        }, props.i18n('noFilesFound'));
      }
            SRTlib.send('], "end": "module.exports30"},');

      return h("div", {
        class: "uppy-ProviderBrowser-body"
      }, h("ul", {
        class: "uppy-ProviderBrowser-list",
        onscroll: props.handleScroll,
        role: "listbox",
        tabindex: "-1"
      }, props.folders.map(function (folder) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.ReturnStatement.h.h.props.folders.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports.ReturnStatement.h.h.props.folders.map"},');

        return Item(_extends({}, getSharedProps(folder, props), {
          type: 'folder',
          isDisabled: props.isChecked(folder) ? props.isChecked(folder).loading : false,
          handleFolderClick: function handleFolderClick() {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports.ReturnStatement.h.h.props.folders.map.ReturnStatement.Item._extends.handleFolderClick.handleFolderClick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "module.exports.ReturnStatement.h.h.props.folders.map.ReturnStatement.Item._extends.handleFolderClick.handleFolderClick"},');

            return props.handleFolderClick(folder);
                        SRTlib.send('], "end": "module.exports.ReturnStatement.h.h.props.folders.map.ReturnStatement.Item._extends.handleFolderClick.handleFolderClick"},');

          }
        }));
                SRTlib.send('], "end": "module.exports.ReturnStatement.h.h.props.folders.map"},');

      }), props.files.map(function (file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.ReturnStatement.h.h.props.files.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports.ReturnStatement.h.h.props.files.map"},');

        return Item(_extends({}, getSharedProps(file, props), {
          type: 'file',
          isDisabled: false
        }));
                SRTlib.send('], "end": "module.exports.ReturnStatement.h.h.props.files.map"},');

      })));
            SRTlib.send('], "end": "module.exports30"},');

    };
        SRTlib.send('], "end": "emptyKey326"},');

  }, {
    "./Item/index": 292,
    "preact": 160
  }],
  294: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey327", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports31", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports31"},');

      return h("div", {
        class: "uppy-Provider-loading"
      }, h("span", null, props.i18n('loading')));
            SRTlib.send('], "end": "module.exports31"},');

    };
        SRTlib.send('], "end": "emptyKey327"},');

  }, {
    "preact": 160
  }],
  295: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey328", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends14", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends14"},');

        return target;
                SRTlib.send('], "end": "_extends14"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('preact'), h = _require.h, Component = _require.Component;
    var AuthView = require('./AuthView');
    var Browser = require('./Browser');
    var LoaderView = require('./Loader');
    var generateFileID = require('./../../utils/lib/generateFileID');
    var getFileType = require('./../../utils/lib/getFileType');
    var isPreviewSupported = require('./../../utils/lib/isPreviewSupported');
    function findIndex(array, predicate) {
            SRTlib.send(`{ "anonymous": false, "function": "findIndex", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      for (var i = 0; i < array.length; i++) {
        if (predicate(array[i])) {
                    SRTlib.send('], "end": "findIndex"},');

          return i;
        }
      }
            SRTlib.send('], "end": "findIndex"},');

      return -1;
            SRTlib.send('], "end": "findIndex"},');

    }
    function getOrigin() {
            SRTlib.send(`{ "anonymous": false, "function": "getOrigin", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (('origin' in location)) {
                SRTlib.send('], "end": "getOrigin"},');

        return location.origin;
      }
            SRTlib.send('], "end": "getOrigin"},');

      return location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : '');
            SRTlib.send('], "end": "getOrigin"},');

    }
    var CloseWrapper = (function (_Component) {
            SRTlib.send(`{ "anonymous": true, "function": "CloseWrapper", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(CloseWrapper, _Component);
      function CloseWrapper() {
                SRTlib.send(`{ "anonymous": false, "function": "CloseWrapper", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "CloseWrapper"},');

        return _Component.apply(this, arguments) || this;
                SRTlib.send('], "end": "CloseWrapper"},');

      }
      var _proto = CloseWrapper.prototype;
      _proto.componentWillUnmount = function componentWillUnmount() {
                SRTlib.send(`{ "anonymous": true, "function": "CloseWrapper._proto.componentWillUnmount.componentWillUnmount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.props.onUnmount();
                SRTlib.send('], "end": "CloseWrapper._proto.componentWillUnmount.componentWillUnmount"},');

      };
      _proto.render = function render() {
                SRTlib.send(`{ "anonymous": true, "function": "CloseWrapper._proto.render.render", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "CloseWrapper._proto.render.render"},');

        return this.props.children[0];
                SRTlib.send('], "end": "CloseWrapper._proto.render.render"},');

      };
            SRTlib.send('], "end": "CloseWrapper"},');

      return CloseWrapper;
            SRTlib.send('], "end": "CloseWrapper"},');

    })(Component);
    module.exports = (_temp = _class = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function ProviderView(plugin, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "ProviderView", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.plugin = plugin;
        this.provider = opts.provider;
        var defaultOptions = {
          viewType: 'list',
          showTitles: true,
          showFilter: true,
          showBreadcrumbs: true
        };
        this.opts = _extends({}, defaultOptions, {}, opts);
        this.addFile = this.addFile.bind(this);
        this.filterItems = this.filterItems.bind(this);
        this.filterQuery = this.filterQuery.bind(this);
        this.toggleSearch = this.toggleSearch.bind(this);
        this.getFolder = this.getFolder.bind(this);
        this.getNextFolder = this.getNextFolder.bind(this);
        this.logout = this.logout.bind(this);
        this.preFirstRender = this.preFirstRender.bind(this);
        this.handleAuth = this.handleAuth.bind(this);
        this.sortByTitle = this.sortByTitle.bind(this);
        this.sortByDate = this.sortByDate.bind(this);
        this.isActiveRow = this.isActiveRow.bind(this);
        this.isChecked = this.isChecked.bind(this);
        this.toggleCheckbox = this.toggleCheckbox.bind(this);
        this.handleError = this.handleError.bind(this);
        this.handleScroll = this.handleScroll.bind(this);
        this.listAllFiles = this.listAllFiles.bind(this);
        this.donePicking = this.donePicking.bind(this);
        this.cancelPicking = this.cancelPicking.bind(this);
        this.clearSelection = this.clearSelection.bind(this);
        this.render = this.render.bind(this);
        this.clearSelection();
                SRTlib.send('], "end": "ProviderView"},');

      }
      var _proto2 = ProviderView.prototype;
      _proto2.tearDown = function tearDown() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.tearDown.tearDown", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._temp._class._proto2.tearDown.tearDown"},');

      };
      _proto2._updateFilesAndFolders = function _updateFilesAndFolders(res, files, folders) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2._updateFilesAndFolders._updateFilesAndFolders", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        this.nextPagePath = res.nextPagePath;
        res.items.forEach(function (item) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2._updateFilesAndFolders._updateFilesAndFolders.res.items.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (item.isFolder) {
            folders.push(item);
          } else {
            files.push(item);
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto2._updateFilesAndFolders._updateFilesAndFolders.res.items.forEach"},');

        });
        this.plugin.setPluginState({
          folders: folders,
          files: files
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2._updateFilesAndFolders._updateFilesAndFolders"},');

      };
      _proto2.preFirstRender = function preFirstRender() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.preFirstRender.preFirstRender", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.plugin.setPluginState({
          didFirstRender: true
        });
        this.plugin.onFirstRender();
                SRTlib.send('], "end": "module.exports._temp._class._proto2.preFirstRender.preFirstRender"},');

      };
      _proto2.getFolder = function getFolder(id, name) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.getFolder.getFolder", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto2.getFolder.getFolder"},');

        return this._loaderWrapper(this.provider.list(id), function (res) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.getFolder.getFolder.ReturnStatement._loaderWrapper", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var folders = [];
          var files = [];
          var updatedDirectories;
          var state = _this.plugin.getPluginState();
          var index = findIndex(state.directories, function (dir) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.getFolder.getFolder.ReturnStatement._loaderWrapper.index.findIndex", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto2.getFolder.getFolder.ReturnStatement._loaderWrapper.index.findIndex"},');

            return id === dir.id;
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.getFolder.getFolder.ReturnStatement._loaderWrapper.index.findIndex"},');

          });
          if (index !== -1) {
            updatedDirectories = state.directories.slice(0, index + 1);
          } else {
            updatedDirectories = state.directories.concat([{
              id: id,
              title: name
            }]);
          }
          _this.username = _this.username ? _this.username : res.username;
          _this._updateFilesAndFolders(res, files, folders);
          _this.plugin.setPluginState({
            directories: updatedDirectories
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.getFolder.getFolder.ReturnStatement._loaderWrapper"},');

        }, this.handleError);
                SRTlib.send('], "end": "module.exports._temp._class._proto2.getFolder.getFolder"},');

      };
      _proto2.getNextFolder = function getNextFolder(folder) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.getNextFolder.getNextFolder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.getFolder(folder.requestPath, folder.name);
        this.lastCheckbox = undefined;
                SRTlib.send('], "end": "module.exports._temp._class._proto2.getNextFolder.getNextFolder"},');

      };
      _proto2.addFile = function addFile(file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.addFile.addFile", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var tagFile = {
          id: this.providerFileToId(file),
          source: this.plugin.id,
          data: file,
          name: file.name || file.id,
          type: file.mimeType,
          isRemote: true,
          body: {
            fileId: file.id
          },
          remote: {
            companionUrl: this.plugin.opts.companionUrl,
            url: "" + this.provider.fileUrl(file.requestPath),
            body: {
              fileId: file.id
            },
            providerOptions: this.provider.opts
          }
        };
        var fileType = getFileType(tagFile);
        if (fileType && isPreviewSupported(fileType)) {
          tagFile.preview = file.thumbnail;
        }
        this.plugin.uppy.log('Adding remote file');
        try {
          this.plugin.uppy.addFile(tagFile);
        } catch (err) {
          if (!err.isRestriction) {
            this.plugin.uppy.log(err);
          }
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto2.addFile.addFile"},');

      };
      _proto2.removeFile = function removeFile(id) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.removeFile.removeFile", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this$plugin$getPlugi = this.plugin.getPluginState(), currentSelection = _this$plugin$getPlugi.currentSelection;
        this.plugin.setPluginState({
          currentSelection: currentSelection.filter(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.removeFile.removeFile.plugin.setPluginState.currentSelection", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto2.removeFile.removeFile.plugin.setPluginState.currentSelection"},');

            return file.id !== id;
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.removeFile.removeFile.plugin.setPluginState.currentSelection"},');

          })
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.removeFile.removeFile"},');

      };
      _proto2.logout = function logout() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.logout.logout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this2 = this;
        this.provider.logout().then(function (res) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.logout.logout.provider.logout.then.catch.provider.logout.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (res.ok) {
            if (!res.revoked) {
              var message = _this2.plugin.uppy.i18n('companionUnauthorizeHint', {
                provider: _this2.plugin.title,
                url: res.manual_revoke_url
              });
              _this2.plugin.uppy.info(message, 'info', 7000);
            }
            var newState = {
              authenticated: false,
              files: [],
              folders: [],
              directories: []
            };
            _this2.plugin.setPluginState(newState);
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.logout.logout.provider.logout.then.catch.provider.logout.then"},');

        }).catch(this.handleError);
                SRTlib.send('], "end": "module.exports._temp._class._proto2.logout.logout"},');

      };
      _proto2.filterQuery = function filterQuery(e) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.filterQuery.filterQuery", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var state = this.plugin.getPluginState();
        this.plugin.setPluginState(_extends({}, state, {
          filterInput: e ? e.target.value : ''
        }));
                SRTlib.send('], "end": "module.exports._temp._class._proto2.filterQuery.filterQuery"},');

      };
      _proto2.toggleSearch = function toggleSearch(inputEl) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.toggleSearch.toggleSearch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var state = this.plugin.getPluginState();
        this.plugin.setPluginState({
          isSearchVisible: !state.isSearchVisible,
          filterInput: ''
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.toggleSearch.toggleSearch"},');

      };
      _proto2.filterItems = function filterItems(items) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.filterItems.filterItems", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var state = this.plugin.getPluginState();
        if (!state.filterInput || state.filterInput === '') {
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.filterItems.filterItems"},');

          return items;
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto2.filterItems.filterItems"},');

        return items.filter(function (folder) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.filterItems.filterItems.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto2.filterItems.filterItems.ReturnStatement"},');

          return folder.name.toLowerCase().indexOf(state.filterInput.toLowerCase()) !== -1;
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.filterItems.filterItems.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.filterItems.filterItems"},');

      };
      _proto2.sortByTitle = function sortByTitle() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.sortByTitle.sortByTitle", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var state = _extends({}, this.plugin.getPluginState());
        var files = state.files, folders = state.folders, sorting = state.sorting;
        var sortedFiles = files.sort(function (fileA, fileB) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.sortByTitle.sortByTitle.sortedFiles", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (sorting === 'titleDescending') {
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByTitle.sortByTitle.sortedFiles"},');

            return fileB.name.localeCompare(fileA.name);
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByTitle.sortByTitle.sortedFiles"},');

          return fileA.name.localeCompare(fileB.name);
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByTitle.sortByTitle.sortedFiles"},');

        });
        var sortedFolders = folders.sort(function (folderA, folderB) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.sortByTitle.sortByTitle.sortedFolders", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (sorting === 'titleDescending') {
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByTitle.sortByTitle.sortedFolders"},');

            return folderB.name.localeCompare(folderA.name);
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByTitle.sortByTitle.sortedFolders"},');

          return folderA.name.localeCompare(folderB.name);
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByTitle.sortByTitle.sortedFolders"},');

        });
        this.plugin.setPluginState(_extends({}, state, {
          files: sortedFiles,
          folders: sortedFolders,
          sorting: sorting === 'titleDescending' ? 'titleAscending' : 'titleDescending'
        }));
                SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByTitle.sortByTitle"},');

      };
      _proto2.sortByDate = function sortByDate() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.sortByDate.sortByDate", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var state = _extends({}, this.plugin.getPluginState());
        var files = state.files, folders = state.folders, sorting = state.sorting;
        var sortedFiles = files.sort(function (fileA, fileB) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.sortByDate.sortByDate.sortedFiles", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var a = new Date(fileA.modifiedDate);
          var b = new Date(fileB.modifiedDate);
          if (sorting === 'dateDescending') {
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByDate.sortByDate.sortedFiles"},');

            return a > b ? -1 : a < b ? 1 : 0;
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByDate.sortByDate.sortedFiles"},');

          return a > b ? 1 : a < b ? -1 : 0;
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByDate.sortByDate.sortedFiles"},');

        });
        var sortedFolders = folders.sort(function (folderA, folderB) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.sortByDate.sortByDate.sortedFolders", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var a = new Date(folderA.modifiedDate);
          var b = new Date(folderB.modifiedDate);
          if (sorting === 'dateDescending') {
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByDate.sortByDate.sortedFolders"},');

            return a > b ? -1 : a < b ? 1 : 0;
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByDate.sortByDate.sortedFolders"},');

          return a > b ? 1 : a < b ? -1 : 0;
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByDate.sortByDate.sortedFolders"},');

        });
        this.plugin.setPluginState(_extends({}, state, {
          files: sortedFiles,
          folders: sortedFolders,
          sorting: sorting === 'dateDescending' ? 'dateAscending' : 'dateDescending'
        }));
                SRTlib.send('], "end": "module.exports._temp._class._proto2.sortByDate.sortByDate"},');

      };
      _proto2.sortBySize = function sortBySize() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.sortBySize.sortBySize", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var state = _extends({}, this.plugin.getPluginState());
        var files = state.files, sorting = state.sorting;
        if (!files.length || !this.plugin.getItemData(files[0]).size) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortBySize.sortBySize"},');

          return;
        }
        var sortedFiles = files.sort(function (fileA, fileB) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.sortBySize.sortBySize.sortedFiles", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var a = fileA.size;
          var b = fileB.size;
          if (sorting === 'sizeDescending') {
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.sortBySize.sortBySize.sortedFiles"},');

            return a > b ? -1 : a < b ? 1 : 0;
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortBySize.sortBySize.sortedFiles"},');

          return a > b ? 1 : a < b ? -1 : 0;
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.sortBySize.sortBySize.sortedFiles"},');

        });
        this.plugin.setPluginState(_extends({}, state, {
          files: sortedFiles,
          sorting: sorting === 'sizeDescending' ? 'sizeAscending' : 'sizeDescending'
        }));
                SRTlib.send('], "end": "module.exports._temp._class._proto2.sortBySize.sortBySize"},');

      };
      _proto2.isActiveRow = function isActiveRow(file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.isActiveRow.isActiveRow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._temp._class._proto2.isActiveRow.isActiveRow"},');

        return this.plugin.getPluginState().activeRow === this.plugin.getItemId(file);
                SRTlib.send('], "end": "module.exports._temp._class._proto2.isActiveRow.isActiveRow"},');

      };
      _proto2.isChecked = function isChecked(file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.isChecked.isChecked", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this$plugin$getPlugi2 = this.plugin.getPluginState(), currentSelection = _this$plugin$getPlugi2.currentSelection;
                SRTlib.send('], "end": "module.exports._temp._class._proto2.isChecked.isChecked"},');

        return currentSelection.some(function (item) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.isChecked.isChecked.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto2.isChecked.isChecked.ReturnStatement"},');

          return item.id === file.id;
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.isChecked.isChecked.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.isChecked.isChecked"},');

      };
      _proto2.addFolder = function addFolder(folder) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.addFolder.addFolder", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this3 = this;
        var folderId = this.providerFileToId(folder);
        var state = this.plugin.getPluginState();
        var folders = state.selectedFolders || ({});
        if ((folderId in folders) && folders[folderId].loading) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.addFolder.addFolder"},');

          return;
        }
        folders[folderId] = {
          loading: true,
          files: []
        };
        this.plugin.setPluginState({
          selectedFolders: folders
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.addFolder.addFolder"},');

        return this.listAllFiles(folder.requestPath).then(function (files) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.addFolder.addFolder.ReturnStatement.listAllFiles.then.catch.listAllFiles.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          files.forEach(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.addFolder.addFolder.ReturnStatement.listAllFiles.then.catch.listAllFiles.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this3.addFile(file);
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.addFolder.addFolder.ReturnStatement.listAllFiles.then.catch.listAllFiles.then"},');

          });
          var ids = files.map(_this3.providerFileToId);
          state = _this3.plugin.getPluginState();
          state.selectedFolders[folderId] = {
            loading: false,
            files: ids
          };
          _this3.plugin.setPluginState({
            selectedFolders: folders
          });
          var message;
          if (files.length) {
            message = _this3.plugin.uppy.i18n('folderAdded', {
              smart_count: files.length,
              folder: folder.name
            });
          } else {
            message = _this3.plugin.uppy.i18n('emptyFolderAdded');
          }
          _this3.plugin.uppy.info(message);
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.addFolder.addFolder.ReturnStatement.listAllFiles.then.catch.listAllFiles.then2"},');

        }).catch(function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.addFolder.addFolder.ReturnStatement.listAllFiles.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          state = _this3.plugin.getPluginState();
          delete state.selectedFolders[folderId];
          _this3.plugin.setPluginState({
            selectedFolders: state.selectedFolders
          });
          _this3.handleError(e);
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.addFolder.addFolder.ReturnStatement.listAllFiles.then.catch"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.addFolder.addFolder"},');

      };
      _proto2.toggleCheckbox = function toggleCheckbox(e, file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.toggleCheckbox.toggleCheckbox", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        e.stopPropagation();
        e.preventDefault();
        e.currentTarget.focus();
        var _this$plugin$getPlugi3 = this.plugin.getPluginState(), folders = _this$plugin$getPlugi3.folders, files = _this$plugin$getPlugi3.files;
        var items = this.filterItems(folders.concat(files));
        if (this.lastCheckbox && e.shiftKey) {
          var _currentSelection;
          var prevIndex = items.indexOf(this.lastCheckbox);
          var currentIndex = items.indexOf(file);
          if (prevIndex < currentIndex) {
            _currentSelection = items.slice(prevIndex, currentIndex + 1);
          } else {
            _currentSelection = items.slice(currentIndex, prevIndex + 1);
          }
          this.plugin.setPluginState({
            currentSelection: _currentSelection
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.toggleCheckbox.toggleCheckbox"},');

          return;
        }
        this.lastCheckbox = file;
        var _this$plugin$getPlugi4 = this.plugin.getPluginState(), currentSelection = _this$plugin$getPlugi4.currentSelection;
        if (this.isChecked(file)) {
          this.plugin.setPluginState({
            currentSelection: currentSelection.filter(function (item) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.toggleCheckbox.toggleCheckbox.plugin.setPluginState.currentSelection", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto2.toggleCheckbox.toggleCheckbox.plugin.setPluginState.currentSelection"},');

              return item.id !== file.id;
                            SRTlib.send('], "end": "module.exports._temp._class._proto2.toggleCheckbox.toggleCheckbox.plugin.setPluginState.currentSelection"},');

            })
          });
        } else {
          this.plugin.setPluginState({
            currentSelection: currentSelection.concat([file])
          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto2.toggleCheckbox.toggleCheckbox"},');

      };
      _proto2.providerFileToId = function providerFileToId(file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.providerFileToId.providerFileToId", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._temp._class._proto2.providerFileToId.providerFileToId"},');

        return generateFileID({
          data: file,
          name: file.name || file.id,
          type: file.mimeType
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.providerFileToId.providerFileToId"},');

      };
      _proto2.handleAuth = function handleAuth() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.handleAuth.handleAuth", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this4 = this;
        var authState = btoa(JSON.stringify({
          origin: getOrigin()
        }));
        var clientVersion = encodeURIComponent("@uppy/provider-views=" + ProviderView.VERSION);
        var link = this.provider.authUrl() + "?state=" + authState + "&uppyVersions=" + clientVersion;
        var authWindow = window.open(link, '_blank');
        var handleToken = function handleToken(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "handleToken", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!_this4._isOriginAllowed(e.origin, _this4.plugin.opts.companionAllowedHosts) || e.source !== authWindow) {
            _this4.plugin.uppy.log("rejecting event from " + e.origin + " vs allowed pattern " + _this4.plugin.opts.companionAllowedHosts);
                        SRTlib.send('], "end": "handleToken"},');

            return;
          }
          var data = typeof e.data === 'string' ? JSON.parse(e.data) : e.data;
          if (!data.token) {
            _this4.plugin.uppy.log('did not receive token from auth window');
                        SRTlib.send('], "end": "handleToken"},');

            return;
          }
          authWindow.close();
          window.removeEventListener('message', handleToken);
          _this4.provider.setAuthToken(data.token);
          _this4.preFirstRender();
                    SRTlib.send('], "end": "handleToken"},');

        };
        window.addEventListener('message', handleToken);
                SRTlib.send('], "end": "module.exports._temp._class._proto2.handleAuth.handleAuth"},');

      };
      _proto2._isOriginAllowed = function _isOriginAllowed(origin, allowedOrigin) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var getRegex = function getRegex(value) {
                    SRTlib.send(`{ "anonymous": false, "function": "getRegex", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (typeof value === 'string') {
                        SRTlib.send('], "end": "getRegex"},');

            return new RegExp("^" + value + "$");
          } else if (value instanceof RegExp) {
                        SRTlib.send('], "end": "getRegex"},');

            return value;
          }
                    SRTlib.send('], "end": "getRegex"},');

        };
        var patterns = Array.isArray(allowedOrigin) ? allowedOrigin.map(getRegex) : [getRegex(allowedOrigin)];
                SRTlib.send('], "end": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed"},');

        return patterns.filter(function (pattern) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed.ReturnStatement.some", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed.ReturnStatement.some"},');

          return pattern != null;
                    SRTlib.send('], "end": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed.ReturnStatement.some"},');

        }).some(function (pattern) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed.ReturnStatement.some2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed.ReturnStatement.some2"},');

          return pattern.test(origin) || pattern.test(origin + "/");
                    SRTlib.send('], "end": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed.ReturnStatement.some2"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2._isOriginAllowed._isOriginAllowed"},');

      };
      _proto2.handleError = function handleError(error) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.handleError.handleError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var uppy = this.plugin.uppy;
        uppy.log(error.toString());
        if (error.isAuthError) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.handleError.handleError"},');

          return;
        }
        var message = uppy.i18n('companionError');
        uppy.info({
          message: message,
          details: error.toString()
        }, 'error', 5000);
                SRTlib.send('], "end": "module.exports._temp._class._proto2.handleError.handleError"},');

      };
      _proto2.handleScroll = function handleScroll(e) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.handleScroll.handleScroll", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this5 = this;
        var scrollPos = e.target.scrollHeight - (e.target.scrollTop + e.target.offsetHeight);
        var path = this.nextPagePath || null;
        if (scrollPos < 50 && path && !this._isHandlingScroll) {
          this.provider.list(path).then(function (res) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.handleScroll.handleScroll.provider.list.then.catch.then.provider.list.then.catch.provider.list.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var _this5$plugin$getPlug = _this5.plugin.getPluginState(), files = _this5$plugin$getPlug.files, folders = _this5$plugin$getPlug.folders;
            _this5._updateFilesAndFolders(res, files, folders);
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.handleScroll.handleScroll.provider.list.then.catch.then.provider.list.then.catch.provider.list.then"},');

          }).catch(this.handleError).then(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.handleScroll.handleScroll.provider.list.then.catch.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            _this5._isHandlingScroll = false;
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.handleScroll.handleScroll.provider.list.then.catch.then"},');

          });
          this._isHandlingScroll = true;
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto2.handleScroll.handleScroll"},');

      };
      _proto2.listAllFiles = function listAllFiles(path, files) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.listAllFiles.listAllFiles", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this6 = this;
        if (files === void 0) {
          files = null;
        }
        files = files || [];
                SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this6.provider.list(path).then(function (res) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            res.items.forEach(function (item) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then.res.items.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (!item.isFolder) {
                files.push(item);
              }
                            SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then.res.items.forEach"},');

            });
            var moreFiles = res.nextPagePath || null;
            if (moreFiles) {
                            SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then"},');

              return _this6.listAllFiles(moreFiles, files).then(function (files) {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then.ReturnStatement.then.catch.then"},');

                return resolve(files);
                                SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then.ReturnStatement.then.catch.then"},');

              }).catch(function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then.ReturnStatement.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then.ReturnStatement.then.catch"},');

                return reject(e);
                                SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then.ReturnStatement.then.catch"},');

              });
            } else {
                            SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then"},');

              return resolve(files);
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch._this6.provider.list.then"},');

          }).catch(function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch"},');

            return reject(e);
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement._this6.provider.list.then.catch"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.listAllFiles.listAllFiles"},');

      };
      _proto2.donePicking = function donePicking() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.donePicking.donePicking", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this7 = this;
        var _this$plugin$getPlugi5 = this.plugin.getPluginState(), currentSelection = _this$plugin$getPlugi5.currentSelection;
        var promises = currentSelection.map(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.donePicking.donePicking.promises", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (file.isFolder) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.donePicking.donePicking.promises"},');

            return _this7.addFolder(file);
          } else {
                        SRTlib.send('], "end": "module.exports._temp._class._proto2.donePicking.donePicking.promises"},');

            return _this7.addFile(file);
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.donePicking.donePicking.promises"},');

        });
        this._loaderWrapper(Promise.all(promises), function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.donePicking.donePicking._loaderWrapper", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this7.clearSelection();
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.donePicking.donePicking._loaderWrapper"},');

        }, function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.donePicking.donePicking._loaderWrapper2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto2.donePicking.donePicking._loaderWrapper2"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.donePicking.donePicking"},');

      };
      _proto2.cancelPicking = function cancelPicking() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.cancelPicking.cancelPicking", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.clearSelection();
        var dashboard = this.plugin.uppy.getPlugin('Dashboard');
        if (dashboard) dashboard.hideAllPanels();
                SRTlib.send('], "end": "module.exports._temp._class._proto2.cancelPicking.cancelPicking"},');

      };
      _proto2.clearSelection = function clearSelection() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.clearSelection.clearSelection", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.plugin.setPluginState({
          currentSelection: []
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.clearSelection.clearSelection"},');

      };
      _proto2._loaderWrapper = function _loaderWrapper(promise, then, catch_) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2._loaderWrapper._loaderWrapper", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var _this8 = this;
        promise.then(function (result) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2._loaderWrapper._loaderWrapper.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this8.plugin.setPluginState({
            loading: false
          });
          then(result);
                    SRTlib.send('], "end": "module.exports._temp._class._proto2._loaderWrapper._loaderWrapper.catch"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2._loaderWrapper._loaderWrapper.catch2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this8.plugin.setPluginState({
            loading: false
          });
          catch_(err);
                    SRTlib.send('], "end": "module.exports._temp._class._proto2._loaderWrapper._loaderWrapper.catch2"},');

        });
        this.plugin.setPluginState({
          loading: true
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2._loaderWrapper._loaderWrapper"},');

      };
      _proto2.render = function render(state, viewOptions) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto2.render.render", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (viewOptions === void 0) {
          viewOptions = {};
        }
        var _this$plugin$getPlugi6 = this.plugin.getPluginState(), authenticated = _this$plugin$getPlugi6.authenticated, didFirstRender = _this$plugin$getPlugi6.didFirstRender;
        if (!didFirstRender) {
          this.preFirstRender();
        }
        if (this.plugin.getPluginState().loading) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.render.render"},');

          return h(CloseWrapper, {
            onUnmount: this.clearSelection
          }, h(LoaderView, {
            i18n: this.plugin.uppy.i18n
          }));
        }
        if (!authenticated) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto2.render.render"},');

          return h(CloseWrapper, {
            onUnmount: this.clearSelection
          }, h(AuthView, {
            pluginName: this.plugin.title,
            pluginIcon: this.plugin.icon,
            handleAuth: this.handleAuth,
            i18n: this.plugin.uppy.i18n,
            i18nArray: this.plugin.uppy.i18nArray
          }));
        }
        var targetViewOptions = _extends({}, this.opts, {}, viewOptions);
        var browserProps = _extends({}, this.plugin.getPluginState(), {
          username: this.username,
          getNextFolder: this.getNextFolder,
          getFolder: this.getFolder,
          filterItems: this.filterItems,
          filterQuery: this.filterQuery,
          toggleSearch: this.toggleSearch,
          sortByTitle: this.sortByTitle,
          sortByDate: this.sortByDate,
          logout: this.logout,
          isActiveRow: this.isActiveRow,
          isChecked: this.isChecked,
          toggleCheckbox: this.toggleCheckbox,
          handleScroll: this.handleScroll,
          listAllFiles: this.listAllFiles,
          done: this.donePicking,
          cancel: this.cancelPicking,
          title: this.plugin.title,
          viewType: targetViewOptions.viewType,
          showTitles: targetViewOptions.showTitles,
          showFilter: targetViewOptions.showFilter,
          showBreadcrumbs: targetViewOptions.showBreadcrumbs,
          pluginIcon: this.plugin.icon,
          i18n: this.plugin.uppy.i18n
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto2.render.render"},');

        return h(CloseWrapper, {
          onUnmount: this.clearSelection
        }, h(Browser, browserProps));
                SRTlib.send('], "end": "module.exports._temp._class._proto2.render.render"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class6"},');

      return ProviderView;
            SRTlib.send('], "end": "module.exports._temp._class6"},');

    })(), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey328"},');

  }, {
    "../package.json": 283,
    "./../../utils/lib/generateFileID": 326,
    "./../../utils/lib/getFileType": 334,
    "./../../utils/lib/isPreviewSupported": 344,
    "./AuthView": 284,
    "./Browser": 286,
    "./Loader": 294,
    "preact": 160
  }],
  296: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey329", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    arguments[4][245][0].apply(exports, arguments);
        SRTlib.send('], "end": "emptyKey329"},');

  }, {
    "dup": 245
  }],
  297: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey330", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/status-bar",
      "description": "A progress bar for Uppy, with many bells and whistles.",
      "version": "1.6.6",
      "license": "MIT",
      "main": "lib/index.js",
      "style": "dist/style.min.css",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "progress bar", "status bar", "progress", "upload", "eta", "speed"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@transloadit/prettier-bytes": "0.0.7",
        "@uppy/utils": "file:../utils",
        "classnames": "^2.2.6",
        "lodash.throttle": "^4.1.1",
        "preact": "8.2.9"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey330"},');

  }, {}],
  298: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey331", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends15", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends15"},');

        return target;
                SRTlib.send('], "end": "_extends15"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var throttle = require('lodash.throttle');
    var classNames = require('classnames');
    var statusBarStates = require('./StatusBarStates');
    var prettierBytes = require('@transloadit/prettier-bytes');
    var prettyETA = require('./../../utils/lib/prettyETA');
    var _require = require('preact'), h = _require.h;
    function calculateProcessingProgress(files) {
            SRTlib.send(`{ "anonymous": false, "function": "calculateProcessingProgress", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var progresses = [];
      Object.keys(files).forEach(function (fileID) {
                SRTlib.send(`{ "anonymous": true, "function": "forEach5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var progress = files[fileID].progress;
        if (progress.preprocess) {
          progresses.push(progress.preprocess);
        }
        if (progress.postprocess) {
          progresses.push(progress.postprocess);
        }
                SRTlib.send('], "end": "forEach5"},');

      });
      var _progresses$ = progresses[0], mode = _progresses$.mode, message = _progresses$.message;
      var value = progresses.filter(isDeterminate).reduce(function (total, progress, index, all) {
                SRTlib.send(`{ "anonymous": true, "function": "value.reduce", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

                SRTlib.send('], "end": "value.reduce"},');

        return total + progress.value / all.length;
                SRTlib.send('], "end": "value.reduce"},');

      }, 0);
      function isDeterminate(progress) {
                SRTlib.send(`{ "anonymous": false, "function": "isDeterminate", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "isDeterminate"},');

        return progress.mode === 'determinate';
                SRTlib.send('], "end": "isDeterminate"},');

      }
            SRTlib.send('], "end": "calculateProcessingProgress"},');

      return {
        mode: mode,
        message: message,
        value: value
      };
            SRTlib.send('], "end": "calculateProcessingProgress"},');

    }
    function togglePauseResume(props) {
            SRTlib.send(`{ "anonymous": false, "function": "togglePauseResume", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (props.isAllComplete) {
                SRTlib.send('], "end": "togglePauseResume"},');

        return;
      }
      if (!props.resumableUploads) {
                SRTlib.send('], "end": "togglePauseResume"},');

        return props.cancelAll();
      }
      if (props.isAllPaused) {
                SRTlib.send('], "end": "togglePauseResume"},');

        return props.resumeAll();
      }
            SRTlib.send('], "end": "togglePauseResume"},');

      return props.pauseAll();
            SRTlib.send('], "end": "togglePauseResume"},');

    }
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports32", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      props = props || ({});
      var _props = props, newFiles = _props.newFiles, allowNewUpload = _props.allowNewUpload, isUploadInProgress = _props.isUploadInProgress, isAllPaused = _props.isAllPaused, resumableUploads = _props.resumableUploads, error = _props.error, hideUploadButton = _props.hideUploadButton, hidePauseResumeButton = _props.hidePauseResumeButton, hideCancelButton = _props.hideCancelButton, hideRetryButton = _props.hideRetryButton;
      var uploadState = props.uploadState;
      var progressValue = props.totalProgress;
      var progressMode;
      var progressBarContent;
      if (uploadState === statusBarStates.STATE_PREPROCESSING || uploadState === statusBarStates.STATE_POSTPROCESSING) {
        var progress = calculateProcessingProgress(props.files);
        progressMode = progress.mode;
        if (progressMode === 'determinate') {
          progressValue = progress.value * 100;
        }
        progressBarContent = ProgressBarProcessing(progress);
      } else if (uploadState === statusBarStates.STATE_COMPLETE) {
        progressBarContent = ProgressBarComplete(props);
      } else if (uploadState === statusBarStates.STATE_UPLOADING) {
        if (!props.supportsUploadProgress) {
          progressMode = 'indeterminate';
          progressValue = null;
        }
        progressBarContent = ProgressBarUploading(props);
      } else if (uploadState === statusBarStates.STATE_ERROR) {
        progressValue = undefined;
        progressBarContent = ProgressBarError(props);
      }
      var width = typeof progressValue === 'number' ? progressValue : 100;
      var isHidden = uploadState === statusBarStates.STATE_WAITING && props.hideUploadButton || uploadState === statusBarStates.STATE_WAITING && !props.newFiles > 0 || uploadState === statusBarStates.STATE_COMPLETE && props.hideAfterFinish;
      var showUploadBtn = !error && newFiles && !isUploadInProgress && !isAllPaused && allowNewUpload && !hideUploadButton;
      var showCancelBtn = !hideCancelButton && uploadState !== statusBarStates.STATE_WAITING && uploadState !== statusBarStates.STATE_COMPLETE;
      var showPauseResumeBtn = resumableUploads && !hidePauseResumeButton && uploadState === statusBarStates.STATE_UPLOADING;
      var showRetryBtn = error && !hideRetryButton;
      var progressClassNames = "uppy-StatusBar-progress\n                           " + (progressMode ? 'is-' + progressMode : '');
      var statusBarClassNames = classNames({
        'uppy-Root': props.isTargetDOMEl
      }, 'uppy-StatusBar', "is-" + uploadState);
            SRTlib.send('], "end": "module.exports32"},');

      return h("div", {
        class: statusBarClassNames,
        "aria-hidden": isHidden
      }, h("div", {
        class: progressClassNames,
        style: {
          width: width + '%'
        },
        role: "progressbar",
        "aria-valuemin": "0",
        "aria-valuemax": "100",
        "aria-valuenow": progressValue
      }), progressBarContent, h("div", {
        class: "uppy-StatusBar-actions"
      }, showUploadBtn ? h(UploadBtn, _extends({}, props, {
        uploadState: uploadState
      })) : null, showRetryBtn ? h(RetryBtn, props) : null, showPauseResumeBtn ? h(PauseResumeButton, props) : null, showCancelBtn ? h(CancelBtn, props) : null));
            SRTlib.send('], "end": "module.exports32"},');

    };
    var UploadBtn = function UploadBtn(props) {
            SRTlib.send(`{ "anonymous": false, "function": "UploadBtn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var uploadBtnClassNames = classNames('uppy-u-reset', 'uppy-c-btn', 'uppy-StatusBar-actionBtn', 'uppy-StatusBar-actionBtn--upload', {
        'uppy-c-btn-primary': props.uploadState === statusBarStates.STATE_WAITING
      });
            SRTlib.send('], "end": "UploadBtn"},');

      return h("button", {
        type: "button",
        class: uploadBtnClassNames,
        "aria-label": props.i18n('uploadXFiles', {
          smart_count: props.newFiles
        }),
        onclick: props.startUpload,
        "data-uppy-super-focusable": true
      }, props.newFiles && props.isUploadStarted ? props.i18n('uploadXNewFiles', {
        smart_count: props.newFiles
      }) : props.i18n('uploadXFiles', {
        smart_count: props.newFiles
      }));
            SRTlib.send('], "end": "UploadBtn"},');

    };
    var RetryBtn = function RetryBtn(props) {
            SRTlib.send(`{ "anonymous": false, "function": "RetryBtn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "RetryBtn"},');

      return h("button", {
        type: "button",
        class: "uppy-u-reset uppy-c-btn uppy-StatusBar-actionBtn uppy-StatusBar-actionBtn--retry",
        "aria-label": props.i18n('retryUpload'),
        onclick: props.retryAll,
        "data-uppy-super-focusable": true
      }, h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "8",
        height: "10",
        viewBox: "0 0 8 10"
      }, h("path", {
        d: "M4 2.408a2.75 2.75 0 1 0 2.75 2.75.626.626 0 0 1 1.25.018v.023a4 4 0 1 1-4-4.041V.25a.25.25 0 0 1 .389-.208l2.299 1.533a.25.25 0 0 1 0 .416l-2.3 1.533A.25.25 0 0 1 4 3.316v-.908z"
      })), props.i18n('retry'));
            SRTlib.send('], "end": "RetryBtn"},');

    };
    var CancelBtn = function CancelBtn(props) {
            SRTlib.send(`{ "anonymous": false, "function": "CancelBtn", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "CancelBtn"},');

      return h("button", {
        type: "button",
        class: "uppy-u-reset uppy-StatusBar-actionCircleBtn",
        title: props.i18n('cancel'),
        "aria-label": props.i18n('cancel'),
        onclick: props.cancelAll,
        "data-uppy-super-focusable": true
      }, h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "16",
        height: "16",
        viewBox: "0 0 16 16"
      }, h("g", {
        fill: "none",
        "fill-rule": "evenodd"
      }, h("circle", {
        fill: "#888",
        cx: "8",
        cy: "8",
        r: "8"
      }), h("path", {
        fill: "#FFF",
        d: "M9.283 8l2.567 2.567-1.283 1.283L8 9.283 5.433 11.85 4.15 10.567 6.717 8 4.15 5.433 5.433 4.15 8 6.717l2.567-2.567 1.283 1.283z"
      }))));
            SRTlib.send('], "end": "CancelBtn"},');

    };
    var PauseResumeButton = function PauseResumeButton(props) {
            SRTlib.send(`{ "anonymous": false, "function": "PauseResumeButton", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var isAllPaused = props.isAllPaused, i18n = props.i18n;
      var title = isAllPaused ? i18n('resume') : i18n('pause');
            SRTlib.send('], "end": "PauseResumeButton"},');

      return h("button", {
        title: title,
        "aria-label": title,
        class: "uppy-u-reset uppy-StatusBar-actionCircleBtn",
        type: "button",
        onclick: function onclick() {
                    SRTlib.send(`{ "anonymous": true, "function": "PauseResumeButton.PauseResumeButton.ReturnStatement.h.onclick.onclick", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "PauseResumeButton.PauseResumeButton.ReturnStatement.h.onclick.onclick"},');

          return togglePauseResume(props);
                    SRTlib.send('], "end": "PauseResumeButton.PauseResumeButton.ReturnStatement.h.onclick.onclick"},');

        },
        "data-uppy-super-focusable": true
      }, isAllPaused ? h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "16",
        height: "16",
        viewBox: "0 0 16 16"
      }, h("g", {
        fill: "none",
        "fill-rule": "evenodd"
      }, h("circle", {
        fill: "#888",
        cx: "8",
        cy: "8",
        r: "8"
      }), h("path", {
        fill: "#FFF",
        d: "M6 4.25L11.5 8 6 11.75z"
      }))) : h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "16",
        height: "16",
        viewBox: "0 0 16 16"
      }, h("g", {
        fill: "none",
        "fill-rule": "evenodd"
      }, h("circle", {
        fill: "#888",
        cx: "8",
        cy: "8",
        r: "8"
      }), h("path", {
        d: "M5 4.5h2v7H5v-7zm4 0h2v7H9v-7z",
        fill: "#FFF"
      }))));
            SRTlib.send('], "end": "PauseResumeButton"},');

    };
    var LoadingSpinner = function LoadingSpinner() {
            SRTlib.send(`{ "anonymous": false, "function": "LoadingSpinner", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "LoadingSpinner"},');

      return h("svg", {
        class: "uppy-StatusBar-spinner",
        "aria-hidden": "true",
        focusable: "false",
        width: "14",
        height: "14"
      }, h("path", {
        d: "M13.983 6.547c-.12-2.509-1.64-4.893-3.939-5.936-2.48-1.127-5.488-.656-7.556 1.094C.524 3.367-.398 6.048.162 8.562c.556 2.495 2.46 4.52 4.94 5.183 2.932.784 5.61-.602 7.256-3.015-1.493 1.993-3.745 3.309-6.298 2.868-2.514-.434-4.578-2.349-5.153-4.84a6.226 6.226 0 0 1 2.98-6.778C6.34.586 9.74 1.1 11.373 3.493c.407.596.693 1.282.842 1.988.127.598.073 1.197.161 1.794.078.525.543 1.257 1.15.864.525-.341.49-1.05.456-1.592-.007-.15.02.3 0 0",
        "fill-rule": "evenodd"
      }));
            SRTlib.send('], "end": "LoadingSpinner"},');

    };
    var ProgressBarProcessing = function ProgressBarProcessing(props) {
            SRTlib.send(`{ "anonymous": false, "function": "ProgressBarProcessing", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var value = Math.round(props.value * 100);
            SRTlib.send('], "end": "ProgressBarProcessing"},');

      return h("div", {
        class: "uppy-StatusBar-content"
      }, h(LoadingSpinner, null), props.mode === 'determinate' ? value + "% \xB7 " : '', props.message);
            SRTlib.send('], "end": "ProgressBarProcessing"},');

    };
    var renderDot = function renderDot() {
            SRTlib.send(`{ "anonymous": false, "function": "renderDot", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "renderDot"},');

      return " \xB7 ";
            SRTlib.send('], "end": "renderDot"},');

    };
    var ProgressDetails = function ProgressDetails(props) {
            SRTlib.send(`{ "anonymous": false, "function": "ProgressDetails", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var ifShowFilesUploadedOfTotal = props.numUploads > 1;
            SRTlib.send('], "end": "ProgressDetails"},');

      return h("div", {
        class: "uppy-StatusBar-statusSecondary"
      }, ifShowFilesUploadedOfTotal && props.i18n('filesUploadedOfTotal', {
        complete: props.complete,
        smart_count: props.numUploads
      }), h("span", {
        class: "uppy-StatusBar-additionalInfo"
      }, ifShowFilesUploadedOfTotal && renderDot(), props.i18n('dataUploadedOfTotal', {
        complete: prettierBytes(props.totalUploadedSize),
        total: prettierBytes(props.totalSize)
      }), renderDot(), props.i18n('xTimeLeft', {
        time: prettyETA(props.totalETA)
      })));
            SRTlib.send('], "end": "ProgressDetails"},');

    };
    var UnknownProgressDetails = function UnknownProgressDetails(props) {
            SRTlib.send(`{ "anonymous": false, "function": "UnknownProgressDetails", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "UnknownProgressDetails"},');

      return h("div", {
        class: "uppy-StatusBar-statusSecondary"
      }, props.i18n('filesUploadedOfTotal', {
        complete: props.complete,
        smart_count: props.numUploads
      }));
            SRTlib.send('], "end": "UnknownProgressDetails"},');

    };
    var UploadNewlyAddedFiles = function UploadNewlyAddedFiles(props) {
            SRTlib.send(`{ "anonymous": false, "function": "UploadNewlyAddedFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var uploadBtnClassNames = classNames('uppy-u-reset', 'uppy-c-btn', 'uppy-StatusBar-actionBtn', 'uppy-StatusBar-actionBtn--uploadNewlyAdded');
            SRTlib.send('], "end": "UploadNewlyAddedFiles"},');

      return h("div", {
        class: "uppy-StatusBar-statusSecondary"
      }, h("div", {
        class: "uppy-StatusBar-statusSecondaryHint"
      }, props.i18n('xMoreFilesAdded', {
        smart_count: props.newFiles
      })), h("button", {
        type: "button",
        class: uploadBtnClassNames,
        "aria-label": props.i18n('uploadXFiles', {
          smart_count: props.newFiles
        }),
        onclick: props.startUpload
      }, props.i18n('upload')));
            SRTlib.send('], "end": "UploadNewlyAddedFiles"},');

    };
    var ThrottledProgressDetails = throttle(ProgressDetails, 500, {
      leading: true,
      trailing: true
    });
    var ProgressBarUploading = function ProgressBarUploading(props) {
            SRTlib.send(`{ "anonymous": false, "function": "ProgressBarUploading", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!props.isUploadStarted || props.isAllComplete) {
                SRTlib.send('], "end": "ProgressBarUploading"},');

        return null;
      }
      var title = props.isAllPaused ? props.i18n('paused') : props.i18n('uploading');
      var showUploadNewlyAddedFiles = props.newFiles && props.isUploadStarted;
            SRTlib.send('], "end": "ProgressBarUploading"},');

      return h("div", {
        class: "uppy-StatusBar-content",
        "aria-label": title,
        title: title
      }, !props.isAllPaused ? h(LoadingSpinner, null) : null, h("div", {
        class: "uppy-StatusBar-status"
      }, h("div", {
        class: "uppy-StatusBar-statusPrimary"
      }, props.supportsUploadProgress ? title + ": " + props.totalProgress + "%" : title), !props.isAllPaused && !showUploadNewlyAddedFiles && props.showProgressDetails ? props.supportsUploadProgress ? h(ThrottledProgressDetails, props) : h(UnknownProgressDetails, props) : null, showUploadNewlyAddedFiles ? h(UploadNewlyAddedFiles, props) : null));
            SRTlib.send('], "end": "ProgressBarUploading"},');

    };
    var ProgressBarComplete = function ProgressBarComplete(_ref) {
            SRTlib.send(`{ "anonymous": false, "function": "ProgressBarComplete", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var totalProgress = _ref.totalProgress, i18n = _ref.i18n;
            SRTlib.send('], "end": "ProgressBarComplete"},');

      return h("div", {
        class: "uppy-StatusBar-content",
        role: "status",
        title: i18n('complete')
      }, h("div", {
        class: "uppy-StatusBar-status"
      }, h("div", {
        class: "uppy-StatusBar-statusPrimary"
      }, h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "uppy-StatusBar-statusIndicator UppyIcon",
        width: "15",
        height: "11",
        viewBox: "0 0 15 11"
      }, h("path", {
        d: "M.414 5.843L1.627 4.63l3.472 3.472L13.202 0l1.212 1.213L5.1 10.528z"
      })), i18n('complete'))));
            SRTlib.send('], "end": "ProgressBarComplete"},');

    };
    var ProgressBarError = function ProgressBarError(_ref2) {
            SRTlib.send(`{ "anonymous": false, "function": "ProgressBarError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var error = _ref2.error, retryAll = _ref2.retryAll, hideRetryButton = _ref2.hideRetryButton, i18n = _ref2.i18n;
      function displayErrorAlert() {
                SRTlib.send(`{ "anonymous": false, "function": "displayErrorAlert", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var errorMessage = i18n('uploadFailed') + " \n\n " + error;
        alert(errorMessage);
                SRTlib.send('], "end": "displayErrorAlert"},');

      }
            SRTlib.send('], "end": "ProgressBarError"},');

      return h("div", {
        class: "uppy-StatusBar-content",
        role: "alert",
        title: i18n('uploadFailed')
      }, h("div", {
        class: "uppy-StatusBar-status"
      }, h("div", {
        class: "uppy-StatusBar-statusPrimary"
      }, h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "uppy-StatusBar-statusIndicator UppyIcon",
        width: "11",
        height: "11",
        viewBox: "0 0 11 11"
      }, h("path", {
        d: "M4.278 5.5L0 1.222 1.222 0 5.5 4.278 9.778 0 11 1.222 6.722 5.5 11 9.778 9.778 11 5.5 6.722 1.222 11 0 9.778z"
      })), i18n('uploadFailed'))), h("span", {
        class: "uppy-StatusBar-details",
        "aria-label": error,
        "data-microtip-position": "top-right",
        "data-microtip-size": "medium",
        role: "tooltip",
        onclick: displayErrorAlert
      }, "?"));
            SRTlib.send('], "end": "ProgressBarError"},');

    };
        SRTlib.send('], "end": "emptyKey331"},');

  }, {
    "./../../utils/lib/prettyETA": 346,
    "./StatusBarStates": 299,
    "@transloadit/prettier-bytes": 296,
    "classnames": 53,
    "lodash.throttle": 138,
    "preact": 160
  }],
  299: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey332", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      STATE_ERROR: 'error',
      STATE_WAITING: 'waiting',
      STATE_PREPROCESSING: 'preprocessing',
      STATE_UPLOADING: 'uploading',
      STATE_POSTPROCESSING: 'postprocessing',
      STATE_COMPLETE: 'complete'
    };
        SRTlib.send('], "end": "emptyKey332"},');

  }, {}],
  300: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey333", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends16", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends16"},');

        return target;
                SRTlib.send('], "end": "_extends16"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('./../../core'), Plugin = _require.Plugin;
    var Translator = require('./../../utils/lib/Translator');
    var StatusBarUI = require('./StatusBar');
    var statusBarStates = require('./StatusBarStates');
    var getSpeed = require('./../../utils/lib/getSpeed');
    var getBytesRemaining = require('./../../utils/lib/getBytesRemaining');
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class7", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(StatusBar, _Plugin);
      function StatusBar(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "StatusBar", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, opts) || this;
        _this.startUpload = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.startUpload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "_this.startUpload"},');

          return _this.uppy.upload().catch(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.startUpload.ReturnStatement._this.uppy.upload.catch", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "_this.startUpload.ReturnStatement._this.uppy.upload.catch"},');

          });
                    SRTlib.send('], "end": "_this.startUpload"},');

        };
        _this.id = _this.opts.id || 'StatusBar';
        _this.title = 'StatusBar';
        _this.type = 'progressindicator';
        _this.defaultLocale = {
          strings: {
            uploading: 'Uploading',
            upload: 'Upload',
            complete: 'Complete',
            uploadFailed: 'Upload failed',
            paused: 'Paused',
            retry: 'Retry',
            cancel: 'Cancel',
            pause: 'Pause',
            resume: 'Resume',
            filesUploadedOfTotal: {
              0: '%{complete} of %{smart_count} file uploaded',
              1: '%{complete} of %{smart_count} files uploaded'
            },
            dataUploadedOfTotal: '%{complete} of %{total}',
            xTimeLeft: '%{time} left',
            uploadXFiles: {
              0: 'Upload %{smart_count} file',
              1: 'Upload %{smart_count} files'
            },
            uploadXNewFiles: {
              0: 'Upload +%{smart_count} file',
              1: 'Upload +%{smart_count} files'
            },
            xMoreFilesAdded: {
              0: '%{smart_count} more file added',
              1: '%{smart_count} more files added'
            }
          }
        };
        var defaultOptions = {
          target: 'body',
          hideUploadButton: false,
          hideRetryButton: false,
          hidePauseResumeButton: false,
          hideCancelButton: false,
          showProgressDetails: false,
          hideAfterFinish: true
        };
        _this.opts = _extends({}, defaultOptions, {}, opts);
        _this.i18nInit();
        _this.render = _this.render.bind(_assertThisInitialized(_this));
        _this.install = _this.install.bind(_assertThisInitialized(_this));
                SRTlib.send('], "end": "StatusBar"},');

        return _this;
                SRTlib.send('], "end": "StatusBar"},');

      }
      var _proto = StatusBar.prototype;
      _proto.setOptions = function setOptions(newOpts) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.setOptions.setOptions", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        _Plugin.prototype.setOptions.call(this, newOpts);
        this.i18nInit();
                SRTlib.send('], "end": "module.exports._temp._class._proto.setOptions.setOptions"},');

      };
      _proto.i18nInit = function i18nInit() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.i18nInit.i18nInit", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);
        this.i18n = this.translator.translate.bind(this.translator);
        this.setPluginState();
                SRTlib.send('], "end": "module.exports._temp._class._proto.i18nInit.i18nInit"},');

      };
      _proto.getTotalSpeed = function getTotalSpeed(files) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getTotalSpeed.getTotalSpeed2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var totalSpeed = 0;
        files.forEach(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getTotalSpeed.getTotalSpeed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          totalSpeed = totalSpeed + getSpeed(file.progress);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getTotalSpeed.getTotalSpeed"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.getTotalSpeed.getTotalSpeed2"},');

        return totalSpeed;
                SRTlib.send('], "end": "module.exports._temp._class._proto.getTotalSpeed.getTotalSpeed2"},');

      };
      _proto.getTotalETA = function getTotalETA(files) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getTotalETA.getTotalETA", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var totalSpeed = this.getTotalSpeed(files);
        if (totalSpeed === 0) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getTotalETA.getTotalETA"},');

          return 0;
        }
        var totalBytesRemaining = files.reduce(function (total, file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getTotalETA.getTotalETA.totalBytesRemaining", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.getTotalETA.getTotalETA.totalBytesRemaining"},');

          return total + getBytesRemaining(file.progress);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getTotalETA.getTotalETA.totalBytesRemaining"},');

        }, 0);
                SRTlib.send('], "end": "module.exports._temp._class._proto.getTotalETA.getTotalETA"},');

        return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;
                SRTlib.send('], "end": "module.exports._temp._class._proto.getTotalETA.getTotalETA"},');

      };
      _proto.getUploadingState = function getUploadingState(isAllErrored, isAllComplete, files) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getUploadingState.getUploadingState", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (isAllErrored) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getUploadingState.getUploadingState"},');

          return statusBarStates.STATE_ERROR;
        }
        if (isAllComplete) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getUploadingState.getUploadingState"},');

          return statusBarStates.STATE_COMPLETE;
        }
        var state = statusBarStates.STATE_WAITING;
        var fileIDs = Object.keys(files);
        for (var i = 0; i < fileIDs.length; i++) {
          var progress = files[fileIDs[i]].progress;
          if (progress.uploadStarted && !progress.uploadComplete) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.getUploadingState.getUploadingState"},');

            return statusBarStates.STATE_UPLOADING;
          }
          if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {
            state = statusBarStates.STATE_PREPROCESSING;
          }
          if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {
            state = statusBarStates.STATE_POSTPROCESSING;
          }
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.getUploadingState.getUploadingState"},');

        return state;
                SRTlib.send('], "end": "module.exports._temp._class._proto.getUploadingState.getUploadingState"},');

      };
      _proto.render = function render(state) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var capabilities = state.capabilities, files = state.files, allowNewUpload = state.allowNewUpload, totalProgress = state.totalProgress, error = state.error;
        var filesArray = Object.keys(files).map(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.filesArray.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.filesArray.map"},');

          return files[file];
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.filesArray.map"},');

        });
        var newFiles = filesArray.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.newFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.newFiles"},');

          return !file.progress.uploadStarted && !file.progress.preprocess && !file.progress.postprocess;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.newFiles"},');

        });
        var uploadStartedFiles = filesArray.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.uploadStartedFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.uploadStartedFiles"},');

          return file.progress.uploadStarted;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.uploadStartedFiles"},');

        });
        var pausedFiles = uploadStartedFiles.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.pausedFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.pausedFiles"},');

          return file.isPaused;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.pausedFiles"},');

        });
        var completeFiles = filesArray.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.completeFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.completeFiles"},');

          return file.progress.uploadComplete;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.completeFiles"},');

        });
        var erroredFiles = filesArray.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.erroredFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.erroredFiles"},');

          return file.error;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.erroredFiles"},');

        });
        var inProgressFiles = filesArray.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.inProgressFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.inProgressFiles"},');

          return !file.progress.uploadComplete && file.progress.uploadStarted;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.inProgressFiles"},');

        });
        var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.inProgressNotPausedFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.inProgressNotPausedFiles"},');

          return !file.isPaused;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.inProgressNotPausedFiles"},');

        });
        var startedFiles = filesArray.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.startedFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.startedFiles"},');

          return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.startedFiles"},');

        });
        var processingFiles = filesArray.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render.processingFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.processingFiles"},');

          return file.progress.preprocess || file.progress.postprocess;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render.processingFiles"},');

        });
        var totalETA = this.getTotalETA(inProgressNotPausedFiles);
        var totalSize = 0;
        var totalUploadedSize = 0;
        startedFiles.forEach(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          totalSize = totalSize + (file.progress.bytesTotal || 0);
          totalUploadedSize = totalUploadedSize + (file.progress.bytesUploaded || 0);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render3"},');

        });
        var isUploadStarted = startedFiles.length > 0;
        var isAllComplete = totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;
        var isAllErrored = error && erroredFiles.length === filesArray.length;
        var isAllPaused = inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length;
        var isUploadInProgress = inProgressFiles.length > 0;
        var resumableUploads = capabilities.resumableUploads || false;
        var supportsUploadProgress = capabilities.uploadProgress !== false;
                SRTlib.send('], "end": "module.exports._temp._class._proto.render.render4"},');

        return StatusBarUI({
          error: error,
          uploadState: this.getUploadingState(isAllErrored, isAllComplete, state.files || ({})),
          allowNewUpload: allowNewUpload,
          totalProgress: totalProgress,
          totalSize: totalSize,
          totalUploadedSize: totalUploadedSize,
          isAllComplete: isAllComplete,
          isAllPaused: isAllPaused,
          isAllErrored: isAllErrored,
          isUploadStarted: isUploadStarted,
          isUploadInProgress: isUploadInProgress,
          complete: completeFiles.length,
          newFiles: newFiles.length,
          numUploads: startedFiles.length,
          totalETA: totalETA,
          files: files,
          i18n: this.i18n,
          pauseAll: this.uppy.pauseAll,
          resumeAll: this.uppy.resumeAll,
          retryAll: this.uppy.retryAll,
          cancelAll: this.uppy.cancelAll,
          startUpload: this.startUpload,
          resumableUploads: resumableUploads,
          supportsUploadProgress: supportsUploadProgress,
          showProgressDetails: this.opts.showProgressDetails,
          hideUploadButton: this.opts.hideUploadButton,
          hideRetryButton: this.opts.hideRetryButton,
          hidePauseResumeButton: this.opts.hidePauseResumeButton,
          hideCancelButton: this.opts.hideCancelButton,
          hideAfterFinish: this.opts.hideAfterFinish,
          isTargetDOMEl: this.isTargetDOMEl
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.render.render4"},');

      };
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.install.install4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var target = this.opts.target;
        if (target) {
          this.mount(target, this);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.install.install4"},');

      };
      _proto.uninstall = function uninstall() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uninstall.uninstall3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.unmount();
                SRTlib.send('], "end": "module.exports._temp._class._proto.uninstall.uninstall3"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class7"},');

      return StatusBar;
            SRTlib.send('], "end": "module.exports._temp._class7"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey333"},');

  }, {
    "../package.json": 297,
    "./../../core": 248,
    "./../../utils/lib/Translator": 320,
    "./../../utils/lib/getBytesRemaining": 327,
    "./../../utils/lib/getSpeed": 337,
    "./StatusBar": 298,
    "./StatusBarStates": 299
  }],
  301: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey334", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/store-default",
      "description": "The default simple object-based store for Uppy.",
      "version": "1.2.1",
      "license": "MIT",
      "main": "lib/index.js",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-store"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      }
    };
        SRTlib.send('], "end": "emptyKey334"},');

  }, {}],
  302: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey335", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends17", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends17"},');

        return target;
                SRTlib.send('], "end": "_extends17"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var DefaultStore = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "DefaultStore", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function DefaultStore() {
                SRTlib.send(`{ "anonymous": false, "function": "DefaultStore", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.state = {};
        this.callbacks = [];
                SRTlib.send('], "end": "DefaultStore"},');

      }
      var _proto = DefaultStore.prototype;
      _proto.getState = function getState() {
                SRTlib.send(`{ "anonymous": true, "function": "DefaultStore._proto.getState.getState", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "DefaultStore._proto.getState.getState"},');

        return this.state;
                SRTlib.send('], "end": "DefaultStore._proto.getState.getState"},');

      };
      _proto.setState = function setState(patch) {
                SRTlib.send(`{ "anonymous": true, "function": "DefaultStore._proto.setState.setState", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var prevState = _extends({}, this.state);
        var nextState = _extends({}, this.state, patch);
        this.state = nextState;
        this._publish(prevState, nextState, patch);
                SRTlib.send('], "end": "DefaultStore._proto.setState.setState"},');

      };
      _proto.subscribe = function subscribe(listener) {
                SRTlib.send(`{ "anonymous": true, "function": "DefaultStore._proto.subscribe.subscribe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this = this;
        this.callbacks.push(listener);
                SRTlib.send('], "end": "DefaultStore._proto.subscribe.subscribe"},');

        return function () {
                    SRTlib.send(`{ "anonymous": true, "function": "DefaultStore._proto.subscribe.subscribe.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this.callbacks.splice(_this.callbacks.indexOf(listener), 1);
                    SRTlib.send('], "end": "DefaultStore._proto.subscribe.subscribe.ReturnStatement"},');

        };
                SRTlib.send('], "end": "DefaultStore._proto.subscribe.subscribe"},');

      };
      _proto._publish = function _publish() {
                SRTlib.send(`{ "anonymous": true, "function": "DefaultStore._proto._publish._publish", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        this.callbacks.forEach(function (listener) {
                    SRTlib.send(`{ "anonymous": true, "function": "DefaultStore._proto._publish._publish.callbacks.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          listener.apply(void 0, args);
                    SRTlib.send('], "end": "DefaultStore._proto._publish._publish.callbacks.forEach"},');

        });
                SRTlib.send('], "end": "DefaultStore._proto._publish._publish"},');

      };
            SRTlib.send('], "end": "DefaultStore"},');

      return DefaultStore;
            SRTlib.send('], "end": "DefaultStore"},');

    })();
    DefaultStore.VERSION = require('../package.json').version;
    module.exports = function defaultStore() {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.defaultStore", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "module.exports.defaultStore"},');

      return new DefaultStore();
            SRTlib.send('], "end": "module.exports.defaultStore"},');

    };
        SRTlib.send('], "end": "emptyKey335"},');

  }, {
    "../package.json": 301
  }],
  303: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey336", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (process, global, Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call43", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      !(function (e, t) {
                SRTlib.send(`{ "anonymous": true, "function": "call41", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define("exifr", ["exports"], t) : t((e = e || self).exifr = {});
                SRTlib.send('], "end": "call41"},');

      })(this, function (e) {
                SRTlib.send(`{ "anonymous": true, "function": "call42", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        "use strict";
        function t(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "t", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (!(e instanceof t)) {
                        SRTlib.send('], "end": "t"},');

            throw new TypeError("Cannot call a class as a function");
          }
                    SRTlib.send('], "end": "t"},');

        }
        function n(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          for (var n = 0; n < t.length; n++) {
            var r = t[n];
            (r.enumerable = r.enumerable || !1, r.configurable = !0, ("value" in r) && (r.writable = !0), Object.defineProperty(e, r.key, r));
          }
                    SRTlib.send('], "end": "n"},');

        }
        function r(e, t, r) {
                    SRTlib.send(`{ "anonymous": false, "function": "r", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "r"},');

          return (t && n(e.prototype, t), r && n(e, r), e);
                    SRTlib.send('], "end": "r"},');

        }
        function i(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "i", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "i"},');

          return ((t in e) ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
          }) : e[t] = n, e);
                    SRTlib.send('], "end": "i"},');

        }
        function s(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "s", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if ("function" != typeof t && null !== t) {
                        SRTlib.send('], "end": "s"},');

            throw new TypeError("Super expression must either be null or a function");
          }
          e.prototype = Object.create(t && t.prototype, {
            constructor: {
              value: e,
              writable: !0,
              configurable: !0
            }
          });
          var n = ["prototype", "__proto__", "caller", "arguments", "length", "name"];
          (Object.getOwnPropertyNames(t).forEach(function (r) {
                        SRTlib.send(`{ "anonymous": true, "function": "forEach6", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            -1 === n.indexOf(r) && e[r] !== t[r] && (e[r] = t[r]);
                        SRTlib.send('], "end": "forEach6"},');

          }), t && u(e, t));
                    SRTlib.send('], "end": "s"},');

        }
        function a(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "a", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "a"},');

          return (a = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.a", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "ReturnStatement.a"},');

            return e.__proto__ || Object.getPrototypeOf(e);
                        SRTlib.send('], "end": "ReturnStatement.a"},');

          })(e);
                    SRTlib.send('], "end": "a"},');

        }
        function u(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "u", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                    SRTlib.send('], "end": "u"},');

          return (u = Object.setPrototypeOf || (function (e, t) {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.u", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                        SRTlib.send('], "end": "ReturnStatement.u"},');

            return (e.__proto__ = t, e);
                        SRTlib.send('], "end": "ReturnStatement.u"},');

          }))(e, t);
                    SRTlib.send('], "end": "u"},');

        }
        function o() {
                    SRTlib.send(`{ "anonymous": false, "function": "o", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if ("undefined" == typeof Reflect || !Reflect.construct) {
                        SRTlib.send('], "end": "o"},');

            return !1;
          }
          if (Reflect.construct.sham) {
                        SRTlib.send('], "end": "o"},');

            return !1;
          }
          if ("function" == typeof Proxy) {
                        SRTlib.send('], "end": "o"},');

            return !0;
          }
          try {
                        SRTlib.send('], "end": "o"},');

            return (Date.prototype.toString.call(Reflect.construct(Date, [], function () {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.Date.prototype.toString.call", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "ReturnStatement.Date.prototype.toString.call"},');

            })), !0);
          } catch (e) {
                        SRTlib.send('], "end": "o"},');

            return !1;
          }
                    SRTlib.send('], "end": "o"},');

        }
        function f(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "f", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "f"},');

          return (f = o() ? Reflect.construct : function (e, t, n) {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.apply.f", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            var r = [null];
            r.push.apply(r, t);
            var i = new (Function.bind.apply(e, r))();
                        SRTlib.send('], "end": "ReturnStatement.apply.f"},');

            return (n && u(i, n.prototype), i);
                        SRTlib.send('], "end": "ReturnStatement.apply.f"},');

          }).apply(null, arguments);
                    SRTlib.send('], "end": "f"},');

        }
        function h(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "h", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = "function" == typeof Map ? new Map() : void 0;
                    SRTlib.send('], "end": "h"},');

          return (h = function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.h2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (null === e || (n = e, -1 === Function.toString.call(n).indexOf("[native code]"))) {
                            SRTlib.send('], "end": "ReturnStatement.h2"},');

              return e;
            }
            var n;
            if ("function" != typeof e) {
                            SRTlib.send('], "end": "ReturnStatement.h2"},');

              throw new TypeError("Super expression must either be null or a function");
            }
            if (void 0 !== t) {
              if (t.has(e)) {
                                SRTlib.send('], "end": "ReturnStatement.h2"},');

                return t.get(e);
              }
              t.set(e, r);
            }
            function r() {
                            SRTlib.send(`{ "anonymous": false, "function": "r", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "r"},');

              return f(e, arguments, a(this).constructor);
                            SRTlib.send('], "end": "r"},');

            }
                        SRTlib.send('], "end": "ReturnStatement.h2"},');

            return (r.prototype = Object.create(e.prototype, {
              constructor: {
                value: r,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }), u(r, e));
                        SRTlib.send('], "end": "ReturnStatement.h2"},');

          })(e);
                    SRTlib.send('], "end": "h"},');

        }
        function c(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "c", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (void 0 === e) {
                        SRTlib.send('], "end": "c"},');

            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
                    SRTlib.send('], "end": "c"},');

          return e;
                    SRTlib.send('], "end": "c"},');

        }
        function l(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "l", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                    SRTlib.send('], "end": "l"},');

          return !t || "object" != typeof t && "function" != typeof t ? c(e) : t;
                    SRTlib.send('], "end": "l"},');

        }
        function d(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "d", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "d"},');

          return (d = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function (e, t, n) {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.d", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            var r = (function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.d.r", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              for (; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = a(e)); ) ;
                            SRTlib.send('], "end": "ReturnStatement.d.r"},');

              return e;
                            SRTlib.send('], "end": "ReturnStatement.d.r"},');

            })(e, t);
            if (r) {
              var i = Object.getOwnPropertyDescriptor(r, t);
                            SRTlib.send('], "end": "ReturnStatement.d"},');

              return i.get ? i.get.call(n) : i.value;
            }
                        SRTlib.send('], "end": "ReturnStatement.d"},');

          })(e, t, n || e);
                    SRTlib.send('], "end": "d"},');

        }
        var p = Object.values || (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.p", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = [];
          for (var n in e) t.push(e[n]);
                    SRTlib.send('], "end": "call.p"},');

          return t;
                    SRTlib.send('], "end": "call.p"},');

        }), v = Object.entries || (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.v", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = [];
          for (var n in e) t.push([n, e[n]]);
                    SRTlib.send('], "end": "call.v"},');

          return t;
                    SRTlib.send('], "end": "call.v"},');

        }), y = Object.assign || (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.y", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) n[r - 1] = arguments[r];
                    SRTlib.send('], "end": "call.y"},');

          return (n.forEach(function (t) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.y.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            for (var n in t) e[n] = t[n];
                        SRTlib.send('], "end": "call.y.ReturnStatement"},');

          }), e);
                    SRTlib.send('], "end": "call.y"},');

        }), g = Object.fromEntries || (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.g", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = {};
                    SRTlib.send('], "end": "call.g"},');

          return (k(e).forEach(function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.g.ReturnStatement.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var n = e[0], r = e[1];
            t[n] = r;
                        SRTlib.send('], "end": "call.g.ReturnStatement.forEach"},');

          }), t);
                    SRTlib.send('], "end": "call.g"},');

        }), k = Array.from || (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.k", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (e instanceof S) {
            var t = [];
                        SRTlib.send('], "end": "call.k"},');

            return (e.forEach(function (e, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.k.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.k.ReturnStatement"},');

              return t.push([n, e]);
                            SRTlib.send('], "end": "call.k.ReturnStatement"},');

            }), t);
          }
                    SRTlib.send('], "end": "call.k"},');

          return Array.prototype.slice.call(e);
                    SRTlib.send('], "end": "call.k"},');

        });
        function m(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "m", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "m"},');

          return -1 !== this.indexOf(e);
                    SRTlib.send('], "end": "m"},');

        }
        (Array.prototype.includes || (Array.prototype.includes = m), String.prototype.includes || (String.prototype.includes = m), String.prototype.startsWith || (String.prototype.startsWith = function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.String.prototype.startsWith", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                    SRTlib.send('], "end": "call.String.prototype.startsWith"},');

          return this.substring(t, t + e.length) === e;
                    SRTlib.send('], "end": "call.String.prototype.startsWith"},');

        }), String.prototype.endsWith || (String.prototype.endsWith = function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.String.prototype.endsWith", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.length;
                    SRTlib.send('], "end": "call.String.prototype.endsWith"},');

          return this.substring(t - e.length, t) === e;
                    SRTlib.send('], "end": "call.String.prototype.endsWith"},');

        }));
        var b = "undefined" != typeof self ? self : global, w = b.fetch || (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.w", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    SRTlib.send('], "end": "call.w"},');

          return new Promise(function (n, r) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.w.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var i = new XMLHttpRequest();
            if ((i.open("get", e, !0), i.responseType = "arraybuffer", i.onerror = r, t.headers)) for (var s in t.headers) i.setRequestHeader(s, t.headers[s]);
            (i.onload = function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.w.ReturnStatement.i.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              n({
                ok: i.status >= 200 && i.status < 300,
                status: i.status,
                arrayBuffer: function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.w.ReturnStatement.i.onload.n.arrayBuffer", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "call.w.ReturnStatement.i.onload.n.arrayBuffer"},');

                  return Promise.resolve(i.response);
                                    SRTlib.send('], "end": "call.w.ReturnStatement.i.onload.n.arrayBuffer"},');

                }
              });
                            SRTlib.send('], "end": "call.w.ReturnStatement.i.onload"},');

            }, i.send(null));
                        SRTlib.send('], "end": "call.w.ReturnStatement"},');

          });
                    SRTlib.send('], "end": "call.w"},');

        }), A = function (e) {
                    SRTlib.send(`{ "anonymous": false, "function": "A", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = [];
          if ((Object.defineProperties(t, {
            size: {
              get: function () {
                                SRTlib.send(`{ "anonymous": true, "function": "call.A.size.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                SRTlib.send('], "end": "call.A.size.get"},');

                return this.length;
                                SRTlib.send('], "end": "call.A.size.get"},');

              }
            },
            has: {
              value: function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.A.has.value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.A.has.value"},');

                return -1 !== this.indexOf(e);
                                SRTlib.send('], "end": "call.A.has.value"},');

              }
            },
            add: {
              value: function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.A.add.value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                this.has(e) || this.push(e);
                                SRTlib.send('], "end": "call.A.add.value"},');

              }
            },
            delete: {
              value: function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.A.delete.value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                if (this.has(e)) {
                  var t = this.indexOf(e);
                  this.splice(t, 1);
                }
                                SRTlib.send('], "end": "call.A.delete.value"},');

              }
            }
          }), Array.isArray(e))) for (var n = 0; n < e.length; n++) t.add(e[n]);
                    SRTlib.send('], "end": "A"},');

          return t;
                    SRTlib.send('], "end": "A"},');

        }, O = function (e) {
                    SRTlib.send(`{ "anonymous": false, "function": "O", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "O"},');

          return new S(e);
                    SRTlib.send('], "end": "O"},');

        }, S = void 0 !== b.Map && void 0 !== b.Map.prototype.keys ? b.Map : (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.S", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function e(n) {
                        SRTlib.send(`{ "anonymous": false, "function": "e", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if ((t(this, e), this.clear(), n)) for (var r = 0; r < n.length; r++) this.set(n[r][0], n[r][1]);
                        SRTlib.send('], "end": "e"},');

          }
                    SRTlib.send('], "end": "call.S"},');

          return (r(e, [{
            key: "clear",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              (this._map = {}, this._keys = []);
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value"},');

            }
          }, {
            key: "get",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value2"},');

              return this._map["map_" + e];
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value2"},');

            }
          }, {
            key: "set",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value3"},');

              return (this._map["map_" + e] = t, this._keys.indexOf(e) < 0 && this._keys.push(e), this);
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value3"},');

            }
          }, {
            key: "has",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value4"},');

              return this._keys.indexOf(e) >= 0;
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value4"},');

            }
          }, {
            key: "delete",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = this._keys.indexOf(e);
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value5"},');

              return !(t < 0) && (delete this._map["map_" + e], this._keys.splice(t, 1), !0);
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value5"},');

            }
          }, {
            key: "keys",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value6"},');

              return this._keys.slice(0);
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value6"},');

            }
          }, {
            key: "values",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value7", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = this;
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value7"},');

              return this._keys.map(function (t) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value.ReturnStatement._keys.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.S.ReturnStatement.r.value.ReturnStatement._keys.map"},');

                return e.get(t);
                                SRTlib.send('], "end": "call.S.ReturnStatement.r.value.ReturnStatement._keys.map"},');

              });
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value7"},');

            }
          }, {
            key: "entries",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value8", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = this;
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value8"},');

              return this._keys.map(function (t) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value.ReturnStatement._keys.map2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.S.ReturnStatement.r.value.ReturnStatement._keys.map2"},');

                return [t, e.get(t)];
                                SRTlib.send('], "end": "call.S.ReturnStatement.r.value.ReturnStatement._keys.map2"},');

              });
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value8"},');

            }
          }, {
            key: "forEach",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.value9", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              for (var n = 0; n < this._keys.length; n++) e.call(t, this._map["map_" + this._keys[n]], this._keys[n], this);
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.value9"},');

            }
          }, {
            key: "size",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.S.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.S.ReturnStatement.r.get"},');

              return this._keys.length;
                            SRTlib.send('], "end": "call.S.ReturnStatement.r.get"},');

            }
          }]), e);
                    SRTlib.send('], "end": "call.S"},');

        })(), P = "undefined" != typeof self ? self : global, U = "undefined" != typeof navigator, x = U && "undefined" == typeof HTMLImageElement, C = !("undefined" == typeof global || "undefined" == typeof process || !process.versions || !process.versions.node), B = P.Buffer, j = P.BigInt, _ = !!B;
        var I = function (e) {
                    SRTlib.send(`{ "anonymous": false, "function": "I", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "I"},');

          return void 0 !== e;
                    SRTlib.send('], "end": "I"},');

        };
        function V(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "V", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "V"},');

          return void 0 === e || (e instanceof S ? 0 === e.size : 0 === p(e).filter(I).length);
                    SRTlib.send('], "end": "V"},');

        }
        function T(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "T", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = new Error(e);
                    SRTlib.send('], "end": "T"},');

          return (delete t.stack, t);
                    SRTlib.send('], "end": "T"},');

        }
        function L(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "L", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = (function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "t", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var t = 0;
                        SRTlib.send('], "end": "t"},');

            return (e.ifd0.enabled && (t += 1024), e.exif.enabled && (t += 2048), e.makerNote && (t += 2048), e.userComment && (t += 1024), e.gps.enabled && (t += 512), e.interop.enabled && (t += 100), e.ifd1.enabled && (t += 1024), t + 2048);
                        SRTlib.send('], "end": "t"},');

          })(e);
                    SRTlib.send('], "end": "L"},');

          return (e.jfif.enabled && (t += 50), e.xmp.enabled && (t += 2e4), e.iptc.enabled && (t += 14e3), e.icc.enabled && (t += 6e3), t);
                    SRTlib.send('], "end": "L"},');

        }
        var z = "undefined" != typeof TextDecoder ? new TextDecoder("utf-8") : void 0;
        function F(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "F", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "F"},');

          return z ? z.decode(e) : _ ? Buffer.from(e).toString("utf8") : decodeURIComponent(escape(String.fromCharCode.apply(null, e)));
                    SRTlib.send('], "end": "F"},');

        }
        var E = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.E", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function e(n) {
                        SRTlib.send(`{ "anonymous": false, "function": "e", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 ? arguments[2] : void 0, s = arguments.length > 3 ? arguments[3] : void 0;
            if ((t(this, e), "boolean" == typeof s && (this.le = s), Array.isArray(n) && (n = new Uint8Array(n)), 0 === n)) (this.byteOffset = 0, this.byteLength = 0); else if (n instanceof ArrayBuffer) {
              void 0 === i && (i = n.byteLength - r);
              var a = new DataView(n, r, i);
              this._swapDataView(a);
            } else if (n instanceof Uint8Array || n instanceof DataView || n instanceof e) {
              if ((void 0 === i && (i = n.byteLength - r), (r += n.byteOffset) + i > n.byteOffset + n.byteLength)) {
                                SRTlib.send('], "end": "e"},');

                throw T("Creating view outside of available memory in ArrayBuffer");
              }
              var u = new DataView(n.buffer, r, i);
              this._swapDataView(u);
            } else {
              if ("number" != typeof n) {
                                SRTlib.send('], "end": "e"},');

                throw T("Invalid input argument for BufferView: " + n);
              }
              var o = new DataView(new ArrayBuffer(n));
              this._swapDataView(o);
            }
                        SRTlib.send('], "end": "e"},');

          }
                    SRTlib.send('], "end": "call.E"},');

          return (r(e, null, [{
            key: "from",
            value: function (t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value"},');

              return t instanceof this && t.le === n ? t : new e(t, void 0, void 0, n);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value"},');

            }
          }]), r(e, [{
            key: "_swapArrayBuffer",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              this._swapDataView(new DataView(e));
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value2"},');

            }
          }, {
            key: "_swapBuffer",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              this._swapDataView(new DataView(e.buffer, e.byteOffset, e.byteLength));
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value3"},');

            }
          }, {
            key: "_swapDataView",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              (this.dataView = e, this.buffer = e.buffer, this.byteOffset = e.byteOffset, this.byteLength = e.byteLength);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value4"},');

            }
          }, {
            key: "_lengthToEnd",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value5"},');

              return this.byteLength - e;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value5"},');

            }
          }, {
            key: "set",
            value: function (t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value6", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e;
              if ((t instanceof DataView || t instanceof e ? t = new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t instanceof ArrayBuffer && (t = new Uint8Array(t)), !(t instanceof Uint8Array))) {
                                SRTlib.send('], "end": "call.E.ReturnStatement.r.value6"},');

                throw T("BufferView.set(): Invalid data argument.");
              }
              var i = this.toUint8();
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value6"},');

              return (i.set(t, n), new r(this, n, t.byteLength));
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value6"},');

            }
          }, {
            key: "subarray",
            value: function (t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value7"},');

              return new e(this, t, n = n || this._lengthToEnd(t));
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value7"},');

            }
          }, {
            key: "toUint8",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value8", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value8"},');

              return new Uint8Array(this.buffer, this.byteOffset, this.byteLength);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value8"},');

            }
          }, {
            key: "getUint8Array",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value9", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value9"},');

              return new Uint8Array(this.buffer, this.byteOffset + e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value9"},');

            }
          }, {
            key: "getString",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value10", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.byteLength, n = this.getUint8Array(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value10"},');

              return F(n);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value10"},');

            }
          }, {
            key: "getUnicodeString",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value11", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.byteLength, n = [], r = 0; r < t && e + r < this.byteLength; r += 2) n.push(this.getUint16(e + r));
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value11"},');

              return n.map(function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value.ReturnStatement.join", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.E.ReturnStatement.r.value.ReturnStatement.join"},');

                return String.fromCharCode(e);
                                SRTlib.send('], "end": "call.E.ReturnStatement.r.value.ReturnStatement.join"},');

              }).join("");
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value11"},');

            }
          }, {
            key: "getInt8",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value12", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value12"},');

              return this.dataView.getInt8(e);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value12"},');

            }
          }, {
            key: "getUint8",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value13", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value13"},');

              return this.dataView.getUint8(e);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value13"},');

            }
          }, {
            key: "getInt16",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value14", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value14"},');

              return this.dataView.getInt16(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value14"},');

            }
          }, {
            key: "getInt32",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value15", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value15"},');

              return this.dataView.getInt32(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value15"},');

            }
          }, {
            key: "getUint16",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value16", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value16"},');

              return this.dataView.getUint16(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value16"},');

            }
          }, {
            key: "getUint32",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value17", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value17"},');

              return this.dataView.getUint32(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value17"},');

            }
          }, {
            key: "getFloat32",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value18", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value18"},');

              return this.dataView.getFloat32(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value18"},');

            }
          }, {
            key: "getFloat64",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value19", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value19"},');

              return this.dataView.getFloat64(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value19"},');

            }
          }, {
            key: "getFloat",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value20", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value20"},');

              return this.dataView.getFloat32(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value20"},');

            }
          }, {
            key: "getDouble",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value21", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value21"},');

              return this.dataView.getFloat64(e, t);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value21"},');

            }
          }, {
            key: "getUint64",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value22", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = this.getUint32(e), n = this.getUint32(e + 4);
              if (t < 1048575) {
                                SRTlib.send('], "end": "call.E.ReturnStatement.r.value22"},');

                return t << 32 | n;
              }
              if (void 0 !== typeof j) {
                                SRTlib.send('], "end": "call.E.ReturnStatement.r.value22"},');

                return (console.warn("Using BigInt because of type 64uint but JS can only handle 53b numbers."), j(t) << j(32) | j(n));
              }
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value22"},');

              throw T("Trying to read 64b value but JS can only handle 53b numbers.");
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value22"},');

            }
          }, {
            key: "getUintBytes",
            value: function (e, t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value23", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

              switch (t) {
                case 1:
                                    SRTlib.send('], "end": "call.E.ReturnStatement.r.value23"},');

                  return this.getUint8(e, n);
                case 2:
                                    SRTlib.send('], "end": "call.E.ReturnStatement.r.value23"},');

                  return this.getUint16(e, n);
                case 4:
                                    SRTlib.send('], "end": "call.E.ReturnStatement.r.value23"},');

                  return this.getUint32(e, n);
                case 8:
                                    SRTlib.send('], "end": "call.E.ReturnStatement.r.value23"},');

                  return this.getUint64(e, n);
              }
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value23"},');

            }
          }, {
            key: "getUint",
            value: function (e, t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value24", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

              switch (t) {
                case 8:
                                    SRTlib.send('], "end": "call.E.ReturnStatement.r.value24"},');

                  return this.getUint8(e, n);
                case 16:
                                    SRTlib.send('], "end": "call.E.ReturnStatement.r.value24"},');

                  return this.getUint16(e, n);
                case 32:
                                    SRTlib.send('], "end": "call.E.ReturnStatement.r.value24"},');

                  return this.getUint32(e, n);
                case 64:
                                    SRTlib.send('], "end": "call.E.ReturnStatement.r.value24"},');

                  return this.getUint64(e, n);
              }
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value24"},');

            }
          }, {
            key: "toString",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value25", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value25"},');

              return this.dataView.toString(e, this.constructor.name);
                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value25"},');

            }
          }, {
            key: "ensureChunk",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.E.ReturnStatement.r.value26", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.E.ReturnStatement.r.value26"},');

            }
          }]), e);
                    SRTlib.send('], "end": "call.E"},');

        })();
        function D(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "D", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                    SRTlib.send('], "end": "D"},');

          throw T(("").concat(e, " '").concat(t, "' was not loaded, try using full build of exifr."));
                    SRTlib.send('], "end": "D"},');

        }
        var M = (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.M", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n(e) {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var r;
                        SRTlib.send('], "end": "n"},');

            return (t(this, n), (r = l(this, a(n).call(this))).kind = e, r);
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.M"},');

          return (s(n, e), r(n, [{
            key: "get",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.M.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.M.ReturnStatement.r.value"},');

              return (this.has(e) || D(this.kind, e), t && ((e in t) || (function (e, t) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.M.ReturnStatement.r.value.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                                SRTlib.send('], "end": "call.M.ReturnStatement.r.value.ReturnStatement"},');

                throw T(("Unknown ").concat(e, " '").concat(t, "'."));
                                SRTlib.send('], "end": "call.M.ReturnStatement.r.value.ReturnStatement"},');

              })(this.kind, e), t[e].enabled || D(this.kind, e)), d(a(n.prototype), "get", this).call(this, e));
                            SRTlib.send('], "end": "call.M.ReturnStatement.r.value"},');

            }
          }, {
            key: "keyList",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.M.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.M.ReturnStatement.r.value2"},');

              return k(this.keys());
                            SRTlib.send('], "end": "call.M.ReturnStatement.r.value2"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.M"},');

        })(h(S)), N = new M("file parser"), R = new M("segment parser"), W = new M("file reader");
        function K(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "K", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "K"},');

          return function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement16", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            try {
                            SRTlib.send('], "end": "ReturnStatement16"},');

              return Promise.resolve(e.apply(this, t));
            } catch (e) {
                            SRTlib.send('], "end": "ReturnStatement16"},');

              return Promise.reject(e);
            }
                        SRTlib.send('], "end": "ReturnStatement16"},');

          };
                    SRTlib.send('], "end": "K"},');

        }
        function X(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "X", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "X"},');

          return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
                    SRTlib.send('], "end": "X"},');

        }
        var H = K(function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.H.K", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call.H.K"},');

          return new Promise(function (t, n) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.H.K.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var r = new FileReader();
            (r.onloadend = function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.H.K.ReturnStatement.r.onloadend", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.H.K.ReturnStatement.r.onloadend"},');

              return t(r.result || new ArrayBuffer());
                            SRTlib.send('], "end": "call.H.K.ReturnStatement.r.onloadend"},');

            }, r.onerror = n, r.readAsArrayBuffer(e));
                        SRTlib.send('], "end": "call.H.K.ReturnStatement"},');

          });
                    SRTlib.send('], "end": "call.H.K"},');

        }), Y = K(function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Y.K", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call.Y.K"},');

          return w(e).then(function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Y.K.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call.Y.K.ReturnStatement.then"},');

            return e.arrayBuffer();
                        SRTlib.send('], "end": "call.Y.K.ReturnStatement.then"},');

          });
                    SRTlib.send('], "end": "call.Y.K"},');

        }), G = K(function (e, t) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.G.K", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                    SRTlib.send('], "end": "call.G.K"},');

          return X(t(e), function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.G.K.ReturnStatement.X", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call.G.K.ReturnStatement.X"},');

            return new E(e);
                        SRTlib.send('], "end": "call.G.K.ReturnStatement.X"},');

          });
                    SRTlib.send('], "end": "call.G.K"},');

        }), J = K(function (e, t, n) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.J.K", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var r = new (W.get(n))(e, t);
                    SRTlib.send('], "end": "call.J.K"},');

          return X(r.read(), function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.J.K.ReturnStatement.X", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call.J.K.ReturnStatement.X"},');

            return r;
                        SRTlib.send('], "end": "call.J.K.ReturnStatement.X"},');

          });
                    SRTlib.send('], "end": "call.J.K"},');

        }), q = K(function (e, t, n, r) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.q.K", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

          if (W.has(n)) {
                        SRTlib.send('], "end": "call.q.K"},');

            return J(e, t, n);
          }
          if (r) {
                        SRTlib.send('], "end": "call.q.K"},');

            return G(e, r);
          }
                    SRTlib.send('], "end": "call.q.K"},');

          throw T(("Parser ").concat(n, " is not loaded"));
                    SRTlib.send('], "end": "call.q.K"},');

        });
        function Q(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "Q", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if ((n = e).startsWith("data:") || n.length > 1e4) {
                        SRTlib.send('], "end": "Q"},');

            return J(e, t, "base64");
          }
          if (U) {
                        SRTlib.send('], "end": "Q"},');

            return q(e, t, "url", Y);
          }
          if (C) {
                        SRTlib.send('], "end": "Q"},');

            return J(e, t, "fs");
          }
                    SRTlib.send('], "end": "Q"},');

          throw T("Invalid input argument");
          var n;
                    SRTlib.send('], "end": "Q"},');

        }
        var Z = (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Z", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n() {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "n"},');

            return (t(this, n), l(this, a(n).apply(this, arguments)));
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.Z"},');

          return (s(n, e), r(n, [{
            key: "tagKeys",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Z.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.Z.ReturnStatement.r.get"},');

              return (this.allKeys || (this.allKeys = k(this.keys())), this.allKeys);
                            SRTlib.send('], "end": "call.Z.ReturnStatement.r.get"},');

            }
          }, {
            key: "tagValues",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Z.ReturnStatement.r.get2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.Z.ReturnStatement.r.get2"},');

              return (this.allValues || (this.allValues = k(this.values())), this.allValues);
                            SRTlib.send('], "end": "call.Z.ReturnStatement.r.get2"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.Z"},');

        })(h(S));
        function $(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "$", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var r = new Z(), i = n;
          Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = k(i));
          for (var s = 0; s < i.length; s++) {
            var a = i[s], u = a[0], o = a[1];
            r.set(u, o);
          }
          if (Array.isArray(t)) {
            var f = t;
            Array.isArray(f) || ("function" == typeof f.entries && (f = f.entries()), f = k(f));
            for (var h = 0; h < f.length; h++) {
              var c = f[h];
              e.set(c, r);
            }
          } else e.set(t, r);
                    SRTlib.send('], "end": "$"},');

          return r;
                    SRTlib.send('], "end": "$"},');

        }
        function ee(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "ee", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var r, i = e.get(t), s = n;
          Array.isArray(s) || ("function" == typeof s.entries && (s = s.entries()), s = k(s));
          for (var a = 0; a < s.length; a++) (r = s[a], i.set(r[0], r[1]));
                    SRTlib.send('], "end": "ee"},');

        }
        var te = O(), ne = O(), re = O(), ie = ["chunked", "firstChunkSize", "firstChunkSizeNode", "firstChunkSizeBrowser", "chunkSize", "chunkLimit"], se = ["jfif", "xmp", "icc", "iptc"], ae = ["tiff"].concat(se), ue = ["ifd0", "ifd1", "exif", "gps", "interop"], oe = [].concat(ae, ue), fe = ["makerNote", "userComment"], he = ["translateKeys", "translateValues", "reviveValues", "multiSegment"], ce = [].concat(he, ["sanitize", "mergeOutput"]), le = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.le", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function e() {
                        SRTlib.send(`{ "anonymous": false, "function": "e", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            t(this, e);
                        SRTlib.send('], "end": "e"},');

          }
                    SRTlib.send('], "end": "call.le"},');

          return (r(e, [{
            key: "translate",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.le.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.le.ReturnStatement.r.get"},');

              return this.translateKeys || this.translateValues || this.reviveValues;
                            SRTlib.send('], "end": "call.le.ReturnStatement.r.get"},');

            }
          }]), e);
                    SRTlib.send('], "end": "call.le"},');

        })(), de = (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.de", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n(e, r, s, u) {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

            var o;
            if ((t(this, n), i(c(o = l(this, a(n).call(this))), "enabled", !1), i(c(o), "skip", A()), i(c(o), "pick", A()), i(c(o), "deps", A()), i(c(o), "translateKeys", !1), i(c(o), "translateValues", !1), i(c(o), "reviveValues", !1), o.key = e, o.enabled = r, o.parse = o.enabled, o.applyInheritables(u), o.canBeFiltered = ue.includes(e), o.canBeFiltered && (o.dict = te.get(e)), void 0 !== s)) if (Array.isArray(s)) (o.parse = o.enabled = !0, o.canBeFiltered && s.length > 0 && o.translateTagSet(s, o.pick)); else if ("object" == typeof s) {
              if ((o.enabled = !0, o.parse = !1 !== s.parse, o.canBeFiltered)) {
                var f = s.pick, h = s.skip;
                (f && f.length > 0 && o.translateTagSet(f, o.pick), h && h.length > 0 && o.translateTagSet(h, o.skip));
              }
              o.applyInheritables(s);
            } else {
              if (!0 !== s && !1 !== s) {
                                SRTlib.send('], "end": "n"},');

                throw T(("Invalid options argument: ").concat(s));
              }
              o.parse = o.enabled = s;
            }
                        SRTlib.send('], "end": "n"},');

            return o;
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.de"},');

          return (s(n, e), r(n, [{
            key: "needed",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.de.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.de.ReturnStatement.r.get"},');

              return this.enabled || this.deps.size > 0;
                            SRTlib.send('], "end": "call.de.ReturnStatement.r.get"},');

            }
          }]), r(n, [{
            key: "applyInheritables",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.de.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t, n, r = he;
              Array.isArray(r) || ("function" == typeof r.entries && (r = r.entries()), r = k(r));
              for (var i = 0; i < r.length; i++) void 0 !== (n = e[t = r[i]]) && (this[t] = n);
                            SRTlib.send('], "end": "call.de.ReturnStatement.r.value"},');

            }
          }, {
            key: "translateTagSet",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.de.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              if (this.dict) {
                var n, r, i = this.dict, s = i.tagKeys, a = i.tagValues, u = e;
                Array.isArray(u) || ("function" == typeof u.entries && (u = u.entries()), u = k(u));
                for (var o = 0; o < u.length; o++) "string" == typeof (n = u[o]) ? (-1 === (r = a.indexOf(n)) && (r = s.indexOf(Number(n))), -1 !== r && t.add(Number(s[r]))) : t.add(n);
              } else {
                var f = e;
                Array.isArray(f) || ("function" == typeof f.entries && (f = f.entries()), f = k(f));
                for (var h = 0; h < f.length; h++) {
                  var c = f[h];
                  t.add(c);
                }
              }
                            SRTlib.send('], "end": "call.de.ReturnStatement.r.value2"},');

            }
          }, {
            key: "finalizeFilters",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.de.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              !this.enabled && this.deps.size > 0 ? (this.enabled = !0, me(this.pick, this.deps)) : this.enabled && this.pick.size > 0 && me(this.pick, this.deps);
                            SRTlib.send('], "end": "call.de.ReturnStatement.r.value3"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.de"},');

        })(le), pe = {
          jfif: !1,
          tiff: !0,
          xmp: !1,
          icc: !1,
          iptc: !1,
          ifd0: !0,
          ifd1: !1,
          exif: !0,
          gps: !0,
          interop: !1,
          makerNote: !1,
          userComment: !1,
          multiSegment: !1,
          skip: [],
          pick: [],
          translateKeys: !0,
          translateValues: !0,
          reviveValues: !0,
          sanitize: !0,
          mergeOutput: !0,
          silentErrors: !0,
          chunked: !0,
          firstChunkSize: void 0,
          firstChunkSizeNode: 512,
          firstChunkSizeBrowser: 65536,
          chunkSize: 65536,
          chunkLimit: 5
        }, ve = O(), ye = (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.ye", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n(e) {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var r;
            if ((t(this, n), r = l(this, a(n).call(this)), !0 === e)) r.setupFromTrue(); else if (void 0 === e) r.setupFromUndefined(); else if (Array.isArray(e)) r.setupFromArray(e); else {
              if ("object" != typeof e) {
                                SRTlib.send('], "end": "n"},');

                throw T(("Invalid options argument ").concat(e));
              }
              r.setupFromObject(e);
            }
                        SRTlib.send('], "end": "n"},');

            return (void 0 === r.firstChunkSize && (r.firstChunkSize = U ? r.firstChunkSizeBrowser : r.firstChunkSizeNode), r.mergeOutput && (r.ifd1.enabled = !1), r.filterNestedSegmentTags(), r.traverseTiffDependencyTree(), r.checkLoadedPlugins(), r);
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.ye"},');

          return (s(n, e), r(n, null, [{
            key: "useCached",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = ve.get(e);
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value"},');

              return void 0 !== t ? t : (t = new this(e), ve.set(e, t), t);
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value"},');

            }
          }]), r(n, [{
            key: "setupFromUndefined",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e, t = ie;
              Array.isArray(t) || ("function" == typeof t.entries && (t = t.entries()), t = k(t));
              for (var n = 0; n < t.length; n++) this[e = t[n]] = pe[e];
              var r = ce;
              Array.isArray(r) || ("function" == typeof r.entries && (r = r.entries()), r = k(r));
              for (var i = 0; i < r.length; i++) this[e = r[i]] = pe[e];
              var s = fe;
              Array.isArray(s) || ("function" == typeof s.entries && (s = s.entries()), s = k(s));
              for (var a = 0; a < s.length; a++) this[e = s[a]] = pe[e];
              var u = oe;
              Array.isArray(u) || ("function" == typeof u.entries && (u = u.entries()), u = k(u));
              for (var o = 0; o < u.length; o++) this[e = u[o]] = new de(e, pe[e], void 0, this);
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value2"},');

            }
          }, {
            key: "setupFromTrue",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e, t = ie;
              Array.isArray(t) || ("function" == typeof t.entries && (t = t.entries()), t = k(t));
              for (var n = 0; n < t.length; n++) this[e = t[n]] = pe[e];
              var r = ce;
              Array.isArray(r) || ("function" == typeof r.entries && (r = r.entries()), r = k(r));
              for (var i = 0; i < r.length; i++) this[e = r[i]] = pe[e];
              var s = fe;
              Array.isArray(s) || ("function" == typeof s.entries && (s = s.entries()), s = k(s));
              for (var a = 0; a < s.length; a++) this[e = s[a]] = !0;
              var u = oe;
              Array.isArray(u) || ("function" == typeof u.entries && (u = u.entries()), u = k(u));
              for (var o = 0; o < u.length; o++) this[e = u[o]] = new de(e, !0, void 0, this);
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value3"},');

            }
          }, {
            key: "setupFromArray",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t, n = ie;
              Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = k(n));
              for (var r = 0; r < n.length; r++) this[t = n[r]] = pe[t];
              var i = ce;
              Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = k(i));
              for (var s = 0; s < i.length; s++) this[t = i[s]] = pe[t];
              var a = fe;
              Array.isArray(a) || ("function" == typeof a.entries && (a = a.entries()), a = k(a));
              for (var u = 0; u < a.length; u++) this[t = a[u]] = pe[t];
              var o = oe;
              Array.isArray(o) || ("function" == typeof o.entries && (o = o.entries()), o = k(o));
              for (var f = 0; f < o.length; f++) this[t = o[f]] = new de(t, !1, void 0, this);
              this.setupGlobalFilters(e, void 0, ue);
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value4"},');

            }
          }, {
            key: "setupFromObject",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t;
              (ue.ifd0 = ue.ifd0 || ue.image, ue.ifd1 = ue.ifd1 || ue.thumbnail, y(this, e));
              var n = ie;
              Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = k(n));
              for (var r = 0; r < n.length; r++) this[t = n[r]] = ke(e[t], pe[t]);
              var i = ce;
              Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = k(i));
              for (var s = 0; s < i.length; s++) this[t = i[s]] = ke(e[t], pe[t]);
              var a = fe;
              Array.isArray(a) || ("function" == typeof a.entries && (a = a.entries()), a = k(a));
              for (var u = 0; u < a.length; u++) this[t = a[u]] = ke(e[t], pe[t]);
              var o = ae;
              Array.isArray(o) || ("function" == typeof o.entries && (o = o.entries()), o = k(o));
              for (var f = 0; f < o.length; f++) this[t = o[f]] = new de(t, pe[t], e[t], this);
              var h = ue;
              Array.isArray(h) || ("function" == typeof h.entries && (h = h.entries()), h = k(h));
              for (var c = 0; c < h.length; c++) this[t = h[c]] = new de(t, pe[t], e[t], this.tiff);
              (this.setupGlobalFilters(e.pick, e.skip, ue, oe), !0 === e.tiff ? this.batchEnableWithBool(ue, !0) : !1 === e.tiff ? this.batchEnableWithUserValue(ue, e) : Array.isArray(e.tiff) ? this.setupGlobalFilters(e.tiff, void 0, ue) : "object" == typeof e.tiff && this.setupGlobalFilters(e.tiff.pick, e.tiff.skip, ue));
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value5"},');

            }
          }, {
            key: "batchEnableWithBool",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value6", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = e;
              Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = k(n));
              for (var r = 0; r < n.length; r++) {
                this[n[r]].enabled = t;
              }
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value6"},');

            }
          }, {
            key: "batchEnableWithUserValue",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = e;
              Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = k(n));
              for (var r = 0; r < n.length; r++) {
                var i = n[r], s = t[i];
                this[i].enabled = !1 !== s && void 0 !== s;
              }
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value7"},');

            }
          }, {
            key: "setupGlobalFilters",
            value: function (e, t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value8", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

              var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : n;
              if (e && e.length) {
                var i = r;
                Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = k(i));
                for (var s = 0; s < i.length; s++) {
                  var a = i[s];
                  this[a].enabled = !1;
                }
                var u = ge(e, n), o = u;
                Array.isArray(o) || ("function" == typeof o.entries && (o = o.entries()), o = k(o));
                for (var f = 0; f < o.length; f++) {
                  var h = o[f], c = h[0], l = h[1];
                  (me(this[c].pick, l), this[c].enabled = !0);
                }
              } else if (t && t.length) {
                var d = ge(t, n), p = d;
                Array.isArray(p) || ("function" == typeof p.entries && (p = p.entries()), p = k(p));
                for (var v = 0; v < p.length; v++) {
                  var y = p[v], g = y[0], m = y[1];
                  me(this[g].skip, m);
                }
              }
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value8"},');

            }
          }, {
            key: "filterNestedSegmentTags",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value9", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = this.ifd0, t = this.exif, n = this.xmp, r = this.iptc, i = this.icc;
              (this.makerNote ? t.deps.add(37500) : t.skip.add(37500), this.userComment ? t.deps.add(37510) : t.skip.add(37510), n.enabled || e.skip.add(700), r.enabled || e.skip.add(33723), i.enabled || e.skip.add(34675));
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value9"},');

            }
          }, {
            key: "traverseTiffDependencyTree",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value10", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = this, t = this.ifd0, n = this.exif, r = this.gps;
              (this.interop.needed && (n.deps.add(40965), t.deps.add(40965)), n.needed && t.deps.add(34665), r.needed && t.deps.add(34853), this.tiff.enabled = ue.some(function (t) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value.tiff.enabled", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.ye.ReturnStatement.r.value.tiff.enabled"},');

                return !0 === e[t].enabled;
                                SRTlib.send('], "end": "call.ye.ReturnStatement.r.value.tiff.enabled"},');

              }) || this.makerNote || this.userComment);
              var i = ue;
              Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = k(i));
              for (var s = 0; s < i.length; s++) {
                this[i[s]].finalizeFilters();
              }
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value10"},');

            }
          }, {
            key: "checkLoadedPlugins",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.value11", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = ae;
              Array.isArray(e) || ("function" == typeof e.entries && (e = e.entries()), e = k(e));
              for (var t = 0; t < e.length; t++) {
                var n = e[t];
                this[n].enabled && !R.has(n) && D("segment parser", n);
              }
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.value11"},');

            }
          }, {
            key: "onlyTiff",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = this;
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.get"},');

              return !se.map(function (t) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.get.ReturnStatement.some", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.ye.ReturnStatement.r.get.ReturnStatement.some"},');

                return e[t].enabled;
                                SRTlib.send('], "end": "call.ye.ReturnStatement.r.get.ReturnStatement.some"},');

              }).some(function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.ye.ReturnStatement.r.get.ReturnStatement.some2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.ye.ReturnStatement.r.get.ReturnStatement.some2"},');

                return !0 === e;
                                SRTlib.send('], "end": "call.ye.ReturnStatement.r.get.ReturnStatement.some2"},');

              }) && this.tiff.enabled;
                            SRTlib.send('], "end": "call.ye.ReturnStatement.r.get"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.ye"},');

        })(le);
        function ge(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "ge", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var n, r, i, s = [], a = t;
          Array.isArray(a) || ("function" == typeof a.entries && (a = a.entries()), a = k(a));
          for (var u = 0; u < a.length; u++) {
            (r = a[u], n = []);
            var o = te.get(r);
            Array.isArray(o) || ("function" == typeof o.entries && (o = o.entries()), o = k(o));
            for (var f = 0; f < o.length; f++) (i = o[f], (e.includes(i[0]) || e.includes(i[1])) && n.push(i[0]));
            n.length && s.push([r, n]);
          }
                    SRTlib.send('], "end": "ge"},');

          return s;
                    SRTlib.send('], "end": "ge"},');

        }
        function ke(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "ke", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                    SRTlib.send('], "end": "ke"},');

          return void 0 !== e ? e : void 0 !== t ? t : void 0;
                    SRTlib.send('], "end": "ke"},');

        }
        function me(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "me", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var n = t;
          Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = k(n));
          for (var r = 0; r < n.length; r++) {
            var i = n[r];
            e.add(i);
          }
                    SRTlib.send('], "end": "me"},');

        }
        i(ye, "default", pe);
        var be = {
          ifd0: !1,
          ifd1: !1,
          exif: !1,
          gps: !1,
          interop: !1,
          sanitize: !1,
          reviveValues: !0,
          translateKeys: !1,
          translateValues: !1,
          mergeOutput: !1
        }, we = y({}, be, {
          firstChunkSize: 4e4,
          gps: [1, 2, 3, 4]
        }), Ae = y({}, be, {
          firstChunkSize: 4e4,
          ifd0: [274]
        }), Oe = y({}, be, {
          tiff: !1,
          ifd1: !0,
          mergeOutput: !1
        });
        function Se(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "Se", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "Se"},');

          return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
                    SRTlib.send('], "end": "Se"},');

        }
        function Pe(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "Pe", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var n = e();
                    SRTlib.send('], "end": "Pe"},');

          return n && n.then ? n.then(t) : t(n);
                    SRTlib.send('], "end": "Pe"},');

        }
        function Ue() {
                    SRTlib.send(`{ "anonymous": false, "function": "Ue", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Ue"},');

        }
        var xe = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.xe", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function e(n) {
                        SRTlib.send(`{ "anonymous": false, "function": "e", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            (t(this, e), i(this, "parsers", {}), this.options = ye.useCached(n));
                        SRTlib.send('], "end": "e"},');

          }
                    SRTlib.send('], "end": "call.xe"},');

          return (r(e, [{
            key: "setup",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              if (!this.fileParser) {
                var e, t = this.file.getUint16(0);
                if (18761 === t || 19789 === t) (this.file.isTiff = !0, e = N.get("tiff")); else if (65496 === t) (this.file.isJpeg = !0, e = N.get("jpeg")); else {
                  if (!(function (e) {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    if (0 !== e.getUint16(0)) {
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value"},');

                      return !1;
                    }
                    var t = e.getUint16(2);
                    if (t > 50) {
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value"},');

                      return !1;
                    }
                    for (var n = 16, r = []; n < t; ) (r.push(e.getString(n, 4)), n += 4);
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value"},');

                    return r.includes("heic");
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value"},');

                  })(this.file)) {
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value2"},');

                    throw T("Unknown file format");
                  }
                  (this.file.isHeic = !0, e = N.get("heic"));
                }
                this.fileParser = new e(this.options, this.file, this.parsers);
              }
                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value2"},');

            }
          }, {
            key: "read",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              try {
                var t = this;
                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value3"},');

                return Se((function (e, t) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                  if ("string" == typeof e) {
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se"},');

                    return Q(e, t);
                  }
                  if (U && !x && e instanceof HTMLImageElement) {
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se"},');

                    return Q(e.src, t);
                  }
                  if (e instanceof Uint8Array || e instanceof ArrayBuffer || e instanceof DataView) {
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se"},');

                    return new E(e);
                  }
                  if (U && e instanceof Blob) {
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se"},');

                    return q(e, t, "blob", H);
                  }
                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se"},');

                  throw T("Invalid input argument");
                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se"},');

                })(e, t.options), function (e) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                  t.file = e;
                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se2"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value3"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value3"},');

            }
          }, {
            key: "parse",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value4"},');

                return (e.setup(), Se(e.fileParser.parse(), function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  var t, n = {}, r = [], i = p(e.parsers).map((t = function (t) {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    var i;
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t"},');

                    return Pe(function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe"},');

                      return e.options.silentErrors ? (n = (function (e, t) {
                                                SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                        try {
                          var n = e();
                        } catch (e) {
                                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n"},');

                          return t(e);
                        }
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n"},');

                        return n && n.then ? n.then(void 0, t) : n;
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n"},');

                      })(function () {
                                                SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n2"},');

                        return Se(t.parse(), function (e) {
                                                    SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n.ReturnStatement.Se", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                          i = e;
                                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n.ReturnStatement.Se"},');

                        });
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n2"},');

                      }, function (e) {
                                                SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        r.push(e);
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.n3"},');

                      }), s = function () {
                                                SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.s", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        t.errors.length && r.push.apply(r, t.errors);
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.s"},');

                      }, n && n.then ? n.then(s) : s(n)) : Se(t.parse(), function (e) {
                                                SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.Se", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        i = e;
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe.ReturnStatement.Se"},');

                      });
                      var n, s;
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe"},');

                    }, function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                      t.assignToOutput(n, i);
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t.ReturnStatement.Pe2"},');

                    });
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map.t"},');

                  }, function () {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    for (var e = [], n = 0; n < arguments.length; n++) e[n] = arguments[n];
                    try {
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map"},');

                      return Promise.resolve(t.apply(this, e));
                    } catch (e) {
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map"},');

                      return Promise.reject(e);
                    }
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.i.map"},');

                  }));
                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se3"},');

                  return Se(Promise.all(i), function () {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.ReturnStatement.Se", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    var t;
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.ReturnStatement.Se"},');

                    return (e.options.silentErrors && r.length > 0 && (n.errors = r), n = V(t = n) ? void 0 : t, e.file.close && e.file.close(), n);
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se.ReturnStatement.Se"},');

                  });
                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Se3"},');

                }));
              } catch (e) {
                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value4"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value4"},');

            }
          }, {
            key: "extractThumbnail",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                e.setup();
                var t, n = R.get("tiff", e.options);
                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value5"},');

                return Pe(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (!e.file.isTiff) {
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe"},');

                    return (function (e) {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                      var t = e();
                      if (t && t.then) {
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement"},');

                        return t.then(Ue);
                      }
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement"},');

                    })(function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                      if (e.file.isJpeg) {
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement2"},');

                        return Se(e.fileParser.getOrFindSegment("tiff"), function (e) {
                                                    SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement.ReturnStatement.Se", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                          t = e;
                                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement.ReturnStatement.Se"},');

                        });
                      }
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement2"},');

                    });
                  }
                  t = {
                    start: 0,
                    type: "tiff"
                  };
                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (void 0 !== t) {
                                        SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe2"},');

                    return Se(e.fileParser.ensureSegmentChunk(t), function (t) {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement.Se", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement.Se"},');

                      return Se((e.parsers.tiff = new n(t, e.options, e.file)).extractThumbnail(), function (t) {
                                                SRTlib.send(`{ "anonymous": true, "function": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement.Se.ReturnStatement.Se", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement.Se.ReturnStatement.Se"},');

                        return (e.file.close && e.file.close(), t);
                                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement.Se.ReturnStatement.Se"},');

                      });
                                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe.ReturnStatement.Se"},');

                    });
                  }
                                    SRTlib.send('], "end": "call.xe.ReturnStatement.r.value.ReturnStatement.Pe2"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.xe.ReturnStatement.r.value5"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.xe.ReturnStatement.r.value5"},');

            }
          }]), e);
                    SRTlib.send('], "end": "call.xe"},');

        })();
        function Ce(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "Ce", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "Ce"},');

          return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
                    SRTlib.send('], "end": "Ce"},');

        }
        function Be(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "Be", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "Be"},');

          return function () {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement17", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            for (var t = [], n = 0; n < arguments.length; n++) t[n] = arguments[n];
            try {
                            SRTlib.send('], "end": "ReturnStatement17"},');

              return Promise.resolve(e.apply(this, t));
            } catch (e) {
                            SRTlib.send('], "end": "ReturnStatement17"},');

              return Promise.reject(e);
            }
                        SRTlib.send('], "end": "ReturnStatement17"},');

          };
                    SRTlib.send('], "end": "Be"},');

        }
        var je = function (t) {
                    SRTlib.send(`{ "anonymous": false, "function": "je", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "je"},');

          return Ce(_e(t), function (t) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.je.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "call.je.ReturnStatement.Ce"},');

            return y({
              canvas: e.rotateCanvas,
              css: e.rotateCss
            }, ze[t]);
                        SRTlib.send('], "end": "call.je.ReturnStatement.Ce"},');

          });
                    SRTlib.send('], "end": "je"},');

        }, _e = Be(function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call._e.Be", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = new xe(Ae);
                    SRTlib.send('], "end": "call._e.Be"},');

          return Ce(t.read(e), function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call._e.Be.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call._e.Be.ReturnStatement.Ce"},');

            return Ce(t.parse(), function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call._e.Be.ReturnStatement.Ce.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (e && e.ifd0) {
                                SRTlib.send('], "end": "call._e.Be.ReturnStatement.Ce.ReturnStatement.Ce"},');

                return e.ifd0[274];
              }
                            SRTlib.send('], "end": "call._e.Be.ReturnStatement.Ce.ReturnStatement.Ce"},');

            });
                        SRTlib.send('], "end": "call._e.Be.ReturnStatement.Ce"},');

          });
                    SRTlib.send('], "end": "call._e.Be"},');

        }), Ie = Be(function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Ie.Be", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = new xe(we);
                    SRTlib.send('], "end": "call.Ie.Be"},');

          return Ce(t.read(e), function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Ie.Be.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call.Ie.Be.ReturnStatement.Ce"},');

            return Ce(t.parse(), function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ie.Be.ReturnStatement.Ce.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (e && e.gps) {
                var t = e.gps;
                                SRTlib.send('], "end": "call.Ie.Be.ReturnStatement.Ce.ReturnStatement.Ce"},');

                return {
                  latitude: t.latitude,
                  longitude: t.longitude
                };
              }
                            SRTlib.send('], "end": "call.Ie.Be.ReturnStatement.Ce.ReturnStatement.Ce"},');

            });
                        SRTlib.send('], "end": "call.Ie.Be.ReturnStatement.Ce"},');

          });
                    SRTlib.send('], "end": "call.Ie.Be"},');

        }), Ve = Be(function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Ve.Be", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "call.Ve.Be"},');

          return Ce(this.thumbnail(e), function (e) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Ve.Be.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (void 0 !== e) {
              var t = new Blob([e]);
                            SRTlib.send('], "end": "call.Ve.Be.ReturnStatement.Ce"},');

              return URL.createObjectURL(t);
            }
                        SRTlib.send('], "end": "call.Ve.Be.ReturnStatement.Ce"},');

          });
                    SRTlib.send('], "end": "call.Ve.Be"},');

        }), Te = Be(function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Te.Be", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = new xe(Oe);
                    SRTlib.send('], "end": "call.Te.Be"},');

          return Ce(t.read(e), function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Te.Be.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call.Te.Be.ReturnStatement.Ce"},');

            return Ce(t.extractThumbnail(), function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Te.Be.ReturnStatement.Ce.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.Te.Be.ReturnStatement.Ce.ReturnStatement.Ce"},');

              return e && _ ? B.from(e) : e;
                            SRTlib.send('], "end": "call.Te.Be.ReturnStatement.Ce.ReturnStatement.Ce"},');

            });
                        SRTlib.send('], "end": "call.Te.Be.ReturnStatement.Ce"},');

          });
                    SRTlib.send('], "end": "call.Te.Be"},');

        }), Le = Be(function (e, t) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Le.Be", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var n = new xe(t);
                    SRTlib.send('], "end": "call.Le.Be"},');

          return Ce(n.read(e), function () {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Le.Be.ReturnStatement.Ce", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call.Le.Be.ReturnStatement.Ce"},');

            return n.parse();
                        SRTlib.send('], "end": "call.Le.Be.ReturnStatement.Ce"},');

          });
                    SRTlib.send('], "end": "call.Le.Be"},');

        }), ze = {
          1: {
            dimensionSwapped: !1,
            scaleX: 1,
            scaleY: 1,
            deg: 0,
            rad: 0
          },
          2: {
            dimensionSwapped: !1,
            scaleX: -1,
            scaleY: 1,
            deg: 0,
            rad: 0
          },
          3: {
            dimensionSwapped: !1,
            scaleX: 1,
            scaleY: 1,
            deg: 180,
            rad: 180 * Math.PI / 180
          },
          4: {
            dimensionSwapped: !1,
            scaleX: -1,
            scaleY: 1,
            deg: 180,
            rad: 180 * Math.PI / 180
          },
          5: {
            dimensionSwapped: !0,
            scaleX: 1,
            scaleY: -1,
            deg: 90,
            rad: 90 * Math.PI / 180
          },
          6: {
            dimensionSwapped: !0,
            scaleX: 1,
            scaleY: 1,
            deg: 90,
            rad: 90 * Math.PI / 180
          },
          7: {
            dimensionSwapped: !0,
            scaleX: 1,
            scaleY: -1,
            deg: 270,
            rad: 270 * Math.PI / 180
          },
          8: {
            dimensionSwapped: !0,
            scaleX: 1,
            scaleY: 1,
            deg: 270,
            rad: 270 * Math.PI / 180
          }
        };
        if ((e.rotateCanvas = !0, e.rotateCss = !0, "object" == typeof navigator)) {
          var Fe = navigator.userAgent;
          if (Fe.includes("iPad") || Fe.includes("iPhone")) {
            var Ee = Fe.match(/OS (\d+)_(\d+)/), De = (Ee[0], Ee[1]), Me = Ee[2], Ne = Number(De) + .1 * Number(Me);
            (e.rotateCanvas = Ne < 13.4, e.rotateCss = !1);
          }
        }
        var Re = Object.freeze({
          __proto__: null,
          rotation: je,
          orientation: _e,
          gps: Ie,
          thumbnailUrl: Ve,
          thumbnail: Te,
          parse: Le,
          rotations: ze,
          get rotateCanvas() {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Re.rotateCanvas", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call.Re.rotateCanvas"},');

            return e.rotateCanvas;
                        SRTlib.send('], "end": "call.Re.rotateCanvas"},');

          },
          get rotateCss() {
                        SRTlib.send(`{ "anonymous": true, "function": "call.Re.rotateCss", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "call.Re.rotateCss"},');

            return e.rotateCss;
                        SRTlib.send('], "end": "call.Re.rotateCss"},');

          },
          Exifr: xe,
          fileParsers: N,
          segmentParsers: R,
          fileReaders: W,
          tagKeys: te,
          tagValues: ne,
          tagRevivers: re,
          createDictionary: $,
          extendDictionary: ee,
          fetchUrlAsArrayBuffer: Y,
          readBlobAsArrayBuffer: H,
          chunkedProps: ie,
          otherSegments: se,
          segments: ae,
          tiffBlocks: ue,
          segmentsAndBlocks: oe,
          tiffExtractables: fe,
          inheritables: he,
          allFormatters: ce,
          Options: ye,
          disableAllOptions: be,
          gpsOnlyOptions: we,
          orientationOnlyOptions: Ae,
          thumbnailOnlyOptions: Oe
        });
        function We() {
                    SRTlib.send(`{ "anonymous": false, "function": "We", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "We"},');

        }
        var Ke = (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Ke", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n() {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var e, r;
            t(this, n);
            for (var s = arguments.length, u = new Array(s), o = 0; o < s; o++) u[o] = arguments[o];
                        SRTlib.send('], "end": "n"},');

            return (i(c(r = l(this, (e = a(n)).call.apply(e, [this].concat(u)))), "ranges", new Xe()), 0 !== r.byteLength && r.ranges.add(0, r.byteLength), r);
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.Ke"},');

          return (s(n, e), r(n, [{
            key: "_tryExtend",
            value: function (e, t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ke.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

              if (0 === e && 0 === this.byteLength && n) {
                var r = new DataView(n.buffer || n, n.byteOffset, n.byteLength);
                this._swapDataView(r);
              } else {
                var i = e + t;
                if (i > this.byteLength) {
                  var s = this._extend(i).dataView;
                  this._swapDataView(s);
                }
              }
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value"},');

            }
          }, {
            key: "_extend",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ke.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t;
              t = _ ? B.allocUnsafe(e) : new Uint8Array(e);
              var n = new DataView(t.buffer, t.byteOffset, t.byteLength);
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value2"},');

              return (t.set(new Uint8Array(this.buffer, this.byteOffset, this.byteLength), 0), {
                uintView: t,
                dataView: n
              });
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value2"},');

            }
          }, {
            key: "subarray",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ke.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value3"},');

              return (t = t || this._lengthToEnd(e), r && this._tryExtend(e, t), this.ranges.add(e, t), d(a(n.prototype), "subarray", this).call(this, e, t));
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value3"},');

            }
          }, {
            key: "set",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ke.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
              r && this._tryExtend(t, e.byteLength, e);
              var i = d(a(n.prototype), "set", this).call(this, e, t);
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value4"},');

              return (this.ranges.add(t, i.byteLength), i);
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value4"},');

            }
          }, {
            key: "ensureChunk",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ke.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              try {
                if (!this.chunked) {
                                    SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value5"},');

                  return;
                }
                if (this.ranges.available(e, t)) {
                                    SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value5"},');

                  return;
                }
                                SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value5"},');

                return (function (e, t) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.Ke.ReturnStatement.r.value.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                  if (!t) {
                                        SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value.ReturnStatement"},');

                    return e && e.then ? e.then(We) : Promise.resolve();
                  }
                                    SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value.ReturnStatement"},');

                })(this.readChunk(e, t));
              } catch (e) {
                                SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value5"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value5"},');

            }
          }, {
            key: "available",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ke.ReturnStatement.r.value6", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value6"},');

              return this.ranges.available(e, t);
                            SRTlib.send('], "end": "call.Ke.ReturnStatement.r.value6"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.Ke"},');

        })(E), Xe = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Xe", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function e() {
                        SRTlib.send(`{ "anonymous": false, "function": "e", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            (t(this, e), i(this, "list", []));
                        SRTlib.send('], "end": "e"},');

          }
                    SRTlib.send('], "end": "call.Xe"},');

          return (r(e, [{
            key: "add",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Xe.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = e + t, r = this.list.filter(function (t) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.Xe.ReturnStatement.r.value.r.list.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.r.list.filter"},');

                return He(e, t.offset, n) || He(e, t.end, n);
                                SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.r.list.filter"},');

              });
              if (r.length > 0) {
                (e = Math.min.apply(Math, [e].concat(r.map(function (e) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.Xe.ReturnStatement.r.value.e.Math.min.apply.concat", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                    SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.e.Math.min.apply.concat"},');

                  return e.offset;
                                    SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.e.Math.min.apply.concat"},');

                }))), t = (n = Math.max.apply(Math, [n].concat(r.map(function (e) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.Xe.ReturnStatement.r.value.t.n.Math.max.apply.concat", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                    SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.t.n.Math.max.apply.concat"},');

                  return e.end;
                                    SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.t.n.Math.max.apply.concat"},');

                })))) - e);
                var i = r.shift();
                (i.offset = e, i.length = t, i.end = n, this.list = this.list.filter(function (e) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.Xe.ReturnStatement.r.value.list.list.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                    SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.list.list.filter"},');

                  return !r.includes(e);
                                    SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.list.list.filter"},');

                }));
              } else this.list.push({
                offset: e,
                length: t,
                end: n
              });
                            SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value"},');

            }
          }, {
            key: "available",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Xe.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = e + t;
                            SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value2"},');

              return this.list.some(function (t) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.Xe.ReturnStatement.r.value.ReturnStatement.list.some", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.ReturnStatement.list.some"},');

                return t.offset <= e && n <= t.end;
                                SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value.ReturnStatement.list.some"},');

              });
                            SRTlib.send('], "end": "call.Xe.ReturnStatement.r.value2"},');

            }
          }, {
            key: "length",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Xe.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.Xe.ReturnStatement.r.get"},');

              return this.list.length;
                            SRTlib.send('], "end": "call.Xe.ReturnStatement.r.get"},');

            }
          }]), e);
                    SRTlib.send('], "end": "call.Xe"},');

        })();
        function He(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "He", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "He"},');

          return e <= t && t <= n;
                    SRTlib.send('], "end": "He"},');

        }
        function Ye() {
                    SRTlib.send(`{ "anonymous": false, "function": "Ye", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Ye"},');

        }
        function Ge(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "Ge", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (!t) {
                        SRTlib.send('], "end": "Ge"},');

            return e && e.then ? e.then(Ye) : Promise.resolve();
          }
                    SRTlib.send('], "end": "Ge"},');

        }
        function Je(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "Je", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "Je"},');

          return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
                    SRTlib.send('], "end": "Je"},');

        }
        var qe = (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.qe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n() {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "n"},');

            return (t(this, n), l(this, a(n).apply(this, arguments)));
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.qe"},');

          return (s(n, e), r(n, [{
            key: "readWhole",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value"},');

                return (e.chunked = !1, Je(H(e.input), function (t) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value.ReturnStatement.Je", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                  e._swapArrayBuffer(t);
                                    SRTlib.send('], "end": "call.qe.ReturnStatement.r.value.ReturnStatement.Je"},');

                }));
              } catch (e) {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value"},');

            }
          }, {
            key: "readChunked",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value2"},');

              return (this.chunked = !0, this.size = this.input.size, d(a(n.prototype), "readChunked", this).call(this));
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value2"},');

            }
          }, {
            key: "_readChunk",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              try {
                var n = this, r = t ? e + t : void 0, i = n.input.slice(e, r);
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value3"},');

                return Je(H(i), function (t) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value.ReturnStatement.Je2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                    SRTlib.send('], "end": "call.qe.ReturnStatement.r.value.ReturnStatement.Je2"},');

                  return n.set(t, e, !0);
                                    SRTlib.send('], "end": "call.qe.ReturnStatement.r.value.ReturnStatement.Je2"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value3"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value3"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.qe"},');

        })((function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.qe2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n(e, r) {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var s;
                        SRTlib.send('], "end": "n"},');

            return (t(this, n), i(c(s = l(this, a(n).call(this, 0))), "chunksRead", 0), s.input = e, s.options = r, s);
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.qe2"},');

          return (s(n, e), r(n, [{
            key: "readWhole",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value4"},');

                return (this.chunked = !1, Ge(this.readChunk(this.nextChunkOffset)));
              } catch (e) {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value4"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value4"},');

            }
          }, {
            key: "readChunked",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value5"},');

                return (this.chunked = !0, Ge(this.readChunk(0, this.options.firstChunkSize)));
              } catch (e) {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value5"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value5"},');

            }
          }, {
            key: "readNextChunk",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value6", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              try {
                if ((void 0 === e && (e = this.nextChunkOffset), this.fullyRead)) {
                                    SRTlib.send('], "end": "call.qe.ReturnStatement.r.value6"},');

                  return (this.chunksRead++, !1);
                }
                var t = this.options.chunkSize;
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value6"},');

                return (n = this.readChunk(e, t), r = function (e) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value.ReturnStatement.r", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                    SRTlib.send('], "end": "call.qe.ReturnStatement.r.value.ReturnStatement.r"},');

                  return !!e && e.byteLength === t;
                                    SRTlib.send('], "end": "call.qe.ReturnStatement.r.value.ReturnStatement.r"},');

                }, i ? r ? r(n) : n : (n && n.then || (n = Promise.resolve(n)), r ? n.then(r) : n));
              } catch (e) {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value6"},');

                return Promise.reject(e);
              }
              var n, r, i;
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value6"},');

            }
          }, {
            key: "readChunk",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              try {
                if ((this.chunksRead++, 0 === (t = this.safeWrapAddress(e, t)))) {
                                    SRTlib.send('], "end": "call.qe.ReturnStatement.r.value7"},');

                  return;
                }
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value7"},');

                return this._readChunk(e, t);
              } catch (e) {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.value7"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value7"},');

            }
          }, {
            key: "safeWrapAddress",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value8", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value8"},');

              return void 0 !== this.size && e + t > this.size ? Math.max(0, this.size - e) : t;
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value8"},');

            }
          }, {
            key: "read",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value9", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value9"},');

              return this.options.chunked ? this.readChunked() : this.readWhole();
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value9"},');

            }
          }, {
            key: "close",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.value10", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.value10"},');

            }
          }, {
            key: "nextChunkOffset",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              if (0 !== this.ranges.list.length) {
                                SRTlib.send('], "end": "call.qe.ReturnStatement.r.get"},');

                return this.ranges.list[0].length;
              }
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.get"},');

            }
          }, {
            key: "canReadNextChunk",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.get2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.get2"},');

              return this.chunksRead < this.options.chunkLimit;
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.get2"},');

            }
          }, {
            key: "fullyRead",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.qe.ReturnStatement.r.get3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.get3"},');

              return void 0 !== this.size && this.nextChunkOffset === this.size;
                            SRTlib.send('], "end": "call.qe.ReturnStatement.r.get3"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.qe2"},');

        })(Ke));
        W.set("blob", qe);
        var Qe = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Qe", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function e(n, r, s) {
                        SRTlib.send(`{ "anonymous": false, "function": "e", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            var a, u = this;
            (t(this, e), i(this, "ensureSegmentChunk", (a = function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "i.a", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t, n, r, i = e.start, s = e.size || 65536;
                            SRTlib.send('], "end": "i.a"},');

              return (t = function () {
                                SRTlib.send(`{ "anonymous": true, "function": "i.a.ReturnStatement.t", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                if (u.file.chunked) {
                                    SRTlib.send('], "end": "i.a.ReturnStatement.t"},');

                  return (function () {
                                        SRTlib.send(`{ "anonymous": true, "function": "i.a.ReturnStatement.t.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    if (!u.file.available(i, s)) {
                                            SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement"},');

                      return (function (e, t) {
                                                SRTlib.send(`{ "anonymous": true, "function": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                        try {
                          var n = e();
                        } catch (e) {
                                                    SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement"},');

                          return t(e);
                        }
                                                SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement"},');

                        return n && n.then ? n.then(void 0, t) : n;
                                                SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement"},');

                      })(function () {
                                                SRTlib.send(`{ "anonymous": true, "function": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                                SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement2"},');

                        return (t = u.file.readChunk(i, s), n = function (t) {
                                                    SRTlib.send(`{ "anonymous": true, "function": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement.ReturnStatement.n", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                          e.chunk = t;
                                                    SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement.ReturnStatement.n"},');

                        }, r ? n ? n(t) : t : (t && t.then || (t = Promise.resolve(t)), n ? t.then(n) : t));
                        var t, n, r;
                                                SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement2"},');

                      }, function (t) {
                                                SRTlib.send(`{ "anonymous": true, "function": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                                SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement3"},');

                        throw T(("Couldn't read segment: ").concat(JSON.stringify(e), ". ").concat(t.message));
                                                SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement.ReturnStatement3"},');

                      });
                    }
                    e.chunk = u.file.subarray(i, s);
                                        SRTlib.send('], "end": "i.a.ReturnStatement.t.ReturnStatement"},');

                  })();
                }
                if (u.file.byteLength > i + s) e.chunk = u.file.subarray(i, s); else {
                  if (void 0 !== e.size) {
                                        SRTlib.send('], "end": "i.a.ReturnStatement.t"},');

                    throw T("Segment unreachable: " + JSON.stringify(e));
                  }
                  e.chunk = u.file.subarray(i);
                }
                                SRTlib.send('], "end": "i.a.ReturnStatement.t"},');

              }, n = function (t) {
                                SRTlib.send(`{ "anonymous": true, "function": "i.a.ReturnStatement.n", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "i.a.ReturnStatement.n"},');

                return e.chunk;
                                SRTlib.send('], "end": "i.a.ReturnStatement.n"},');

              }, (r = t()) && r.then ? r.then(n) : n(r));
                            SRTlib.send('], "end": "i.a"},');

            }, function () {
                            SRTlib.send(`{ "anonymous": true, "function": "i", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
              try {
                                SRTlib.send('], "end": "i"},');

                return Promise.resolve(a.apply(this, e));
              } catch (e) {
                                SRTlib.send('], "end": "i"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "i"},');

            })), this.extendOptions && this.extendOptions(n), this.options = n, this.file = r, this.parsers = s);
                        SRTlib.send('], "end": "e"},');

          }
                    SRTlib.send('], "end": "call.Qe"},');

          return (r(e, [{
            key: "createParser",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Qe.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = new (R.get(e))(t, this.options, this.file);
                            SRTlib.send('], "end": "call.Qe.ReturnStatement.r.value"},');

              return this.parsers[e] = n;
                            SRTlib.send('], "end": "call.Qe.ReturnStatement.r.value"},');

            }
          }]), e);
                    SRTlib.send('], "end": "call.Qe"},');

        })(), Ze = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.Ze", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function e(n) {
                        SRTlib.send(`{ "anonymous": false, "function": "e", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var r = this, s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, a = arguments.length > 2 ? arguments[2] : void 0;
            (t(this, e), i(this, "errors", []), i(this, "raw", O()), i(this, "handleError", function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "i2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              if (!r.options.silentErrors) {
                                SRTlib.send('], "end": "i2"},');

                throw e;
              }
              r.errors.push(e.message);
                            SRTlib.send('], "end": "i2"},');

            }), this.chunk = this.normalizeInput(n), this.file = a, this.type = this.constructor.type, this.globalOptions = this.options = s, this.localOptions = s[this.type], this.canTranslate = this.localOptions && this.localOptions.translate);
                        SRTlib.send('], "end": "e"},');

          }
                    SRTlib.send('], "end": "call.Ze"},');

          return (r(e, [{
            key: "normalizeInput",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value"},');

              return e instanceof E ? e : new E(e);
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value"},');

            }
          }], [{
            key: "findPosition",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = e.getUint16(t + 2) + 2, r = "function" == typeof this.headerLength ? this.headerLength(e, t, n) : this.headerLength, i = t + r, s = n - r;
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value2"},');

              return {
                offset: t,
                length: n,
                headerLength: r,
                start: i,
                size: s,
                end: i + s
              };
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value2"},');

            }
          }, {
            key: "parse",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = new ye(i({}, this.type, t)), r = new this(e, n);
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value3"},');

              return r.parse();
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value3"},');

            }
          }]), r(e, [{
            key: "translate",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              this.canTranslate && (this.translated = this.translateBlock(this.raw, this.type));
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value4"},');

            }
          }, {
            key: "translateBlock",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = re.get(t), r = ne.get(t), i = te.get(t), s = this.options[t], a = s.reviveValues && !!n, u = s.translateValues && !!r, o = s.translateKeys && !!i, f = {}, h = e;
              Array.isArray(h) || ("function" == typeof h.entries && (h = h.entries()), h = k(h));
              for (var c = 0; c < h.length; c++) {
                var l = h[c], d = l[0], p = l[1];
                (a && n.has(d) ? p = n.get(d)(p) : u && r.has(d) && (p = this.translateValue(p, r.get(d))), o && i.has(d) && (d = i.get(d) || d), f[d] = p);
              }
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value5"},');

              return f;
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value5"},');

            }
          }, {
            key: "translateValue",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.value6", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value6"},');

              return t[e] || e;
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value6"},');

            }
          }, {
            key: "assignToOutput",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.value7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              this.assignObjectToOutput(e, this.constructor.type, t);
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value7"},');

            }
          }, {
            key: "assignObjectToOutput",
            value: function (e, t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.value8", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

              if (this.globalOptions.mergeOutput) {
                                SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value8"},');

                return y(e, n);
              }
              e[t] ? y(e[t], n) : e[t] = n;
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.value8"},');

            }
          }, {
            key: "output",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.Ze.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.get"},');

              return this.translated ? this.translated : this.raw ? g(this.raw) : void 0;
                            SRTlib.send('], "end": "call.Ze.ReturnStatement.r.get"},');

            }
          }]), e);
                    SRTlib.send('], "end": "call.Ze"},');

        })();
        function $e(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "$e", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                    SRTlib.send('], "end": "$e"},');

          return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
                    SRTlib.send('], "end": "$e"},');

        }
        (i(Ze, "headerLength", 4), i(Ze, "type", void 0), i(Ze, "multiSegment", !1), i(Ze, "canHandle", function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.i", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "call.i"},');

          return !1;
                    SRTlib.send('], "end": "call.i"},');

        }));
        function et() {
                    SRTlib.send(`{ "anonymous": false, "function": "et", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "et"},');

        }
        function tt(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "tt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (!t) {
                        SRTlib.send('], "end": "tt"},');

            return e && e.then ? e.then(et) : Promise.resolve();
          }
                    SRTlib.send('], "end": "tt"},');

        }
        function nt(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "nt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var t = e();
          if (t && t.then) {
                        SRTlib.send('], "end": "nt"},');

            return t.then(et);
          }
                    SRTlib.send('], "end": "nt"},');

        }
        function rt(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "rt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var n = e();
                    SRTlib.send('], "end": "rt"},');

          return n && n.then ? n.then(t) : t(n);
                    SRTlib.send('], "end": "rt"},');

        }
        function it(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "it", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          if (!e.s) {
            if (n instanceof st) {
              if (!n.s) {
                                SRTlib.send('], "end": "it"},');

                return void (n.o = it.bind(null, e, t));
              }
              (1 & t && (t = n.s), n = n.v);
            }
            if (n && n.then) {
                            SRTlib.send('], "end": "it"},');

              return void n.then(it.bind(null, e, t), it.bind(null, e, 2));
            }
            (e.s = t, e.v = n);
            var r = e.o;
            r && r(e);
          }
                    SRTlib.send('], "end": "it"},');

        }
        var st = (function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.st", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          function e() {
                        SRTlib.send(`{ "anonymous": false, "function": "e", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "e"},');

          }
                    SRTlib.send('], "end": "call.st"},');

          return (e.prototype.then = function (t, n) {
                        SRTlib.send(`{ "anonymous": true, "function": "call.st.ReturnStatement.e.prototype.then", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            var r = new e(), i = this.s;
            if (i) {
              var s = 1 & i ? t : n;
              if (s) {
                try {
                  it(r, 1, s(this.v));
                } catch (e) {
                  it(r, 2, e);
                }
                                SRTlib.send('], "end": "call.st.ReturnStatement.e.prototype.then"},');

                return r;
              }
                            SRTlib.send('], "end": "call.st.ReturnStatement.e.prototype.then"},');

              return this;
            }
                        SRTlib.send('], "end": "call.st.ReturnStatement.e.prototype.then"},');

            return (this.o = function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.st.ReturnStatement.e.prototype.then.ReturnStatement.o", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              try {
                var i = e.v;
                1 & e.s ? it(r, 1, t ? t(i) : i) : n ? it(r, 1, n(i)) : it(r, 2, i);
              } catch (e) {
                it(r, 2, e);
              }
                            SRTlib.send('], "end": "call.st.ReturnStatement.e.prototype.then.ReturnStatement.o"},');

            }, r);
                        SRTlib.send('], "end": "call.st.ReturnStatement.e.prototype.then"},');

          }, e);
                    SRTlib.send('], "end": "call.st"},');

        })();
        function at(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "at", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "at"},');

          return e instanceof st && 1 & e.s;
                    SRTlib.send('], "end": "at"},');

        }
        function ut(e, t, n) {
                    SRTlib.send(`{ "anonymous": false, "function": "ut", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          for (var r; ; ) {
            var i = e();
            if ((at(i) && (i = i.v), !i)) {
                            SRTlib.send('], "end": "ut"},');

              return s;
            }
            if (i.then) {
              r = 0;
              break;
            }
            var s = n();
            if (s && s.then) {
              if (!at(s)) {
                r = 1;
                break;
              }
              s = s.s;
            }
            if (t) {
              var a = t();
              if (a && a.then && !at(a)) {
                r = 2;
                break;
              }
            }
          }
          var u = new st(), o = it.bind(null, u, 2);
                    SRTlib.send('], "end": "ut"},');

          return ((0 === r ? i.then(h) : 1 === r ? s.then(f) : a.then(c)).then(void 0, o), u);
          function f(r) {
                        SRTlib.send(`{ "anonymous": false, "function": "f", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            s = r;
            do {
              if (t && (a = t()) && a.then && !at(a)) {
                                SRTlib.send('], "end": "f"},');

                return void a.then(c).then(void 0, o);
              }
              if (!(i = e()) || at(i) && !i.v) {
                                SRTlib.send('], "end": "f"},');

                return void it(u, 1, s);
              }
              if (i.then) {
                                SRTlib.send('], "end": "f"},');

                return void i.then(h).then(void 0, o);
              }
              at(s = n()) && (s = s.v);
            } while (!s || !s.then);
            s.then(f).then(void 0, o);
                        SRTlib.send('], "end": "f"},');

          }
          function h(e) {
                        SRTlib.send(`{ "anonymous": false, "function": "h", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            e ? (s = n()) && s.then ? s.then(f).then(void 0, o) : f(s) : it(u, 1, s);
                        SRTlib.send('], "end": "h"},');

          }
          function c() {
                        SRTlib.send(`{ "anonymous": false, "function": "c", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            (i = e()) ? i.then ? i.then(h).then(void 0, o) : h(i) : it(u, 1, s);
                        SRTlib.send('], "end": "c"},');

          }
                    SRTlib.send('], "end": "ut"},');

        }
        function ot(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "ot", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ot"},');

          return 192 === e || 194 === e || 196 === e || 219 === e || 221 === e || 218 === e || 254 === e;
                    SRTlib.send('], "end": "ot"},');

        }
        function ft(e) {
                    SRTlib.send(`{ "anonymous": false, "function": "ft", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ft"},');

          return e >= 224 && e <= 239;
                    SRTlib.send('], "end": "ft"},');

        }
        function ht(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "ht", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var n = R;
          Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = k(n));
          for (var r = 0; r < n.length; r++) {
            var i = n[r], s = i[0];
            if (i[1].canHandle(e, t)) {
                            SRTlib.send('], "end": "ht"},');

              return s;
            }
          }
                    SRTlib.send('], "end": "ht"},');

        }
        var ct = (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.ct", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n() {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var e, r;
            t(this, n);
            for (var s = arguments.length, u = new Array(s), o = 0; o < s; o++) u[o] = arguments[o];
                        SRTlib.send('], "end": "n"},');

            return (i(c(r = l(this, (e = a(n)).call.apply(e, [this].concat(u)))), "appSegments", []), i(c(r), "jpegSegments", []), i(c(r), "unknownSegments", []), r);
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.ct"},');

          return (s(n, e), r(n, [{
            key: "parse",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value"},');

                return $e(e.findAppSegments(), function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.$e", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.$e"},');

                  return $e(e.readSegments(), function () {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.$e.ReturnStatement.$e", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    (e.mergeMultiSegments(), e.createParsers());
                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.$e.ReturnStatement.$e"},');

                  });
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.$e"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value"},');

            }
          }, {
            key: "readSegments",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this.appSegments.map(this.ensureSegmentChunk);
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value2"},');

                return tt(Promise.all(e));
              } catch (e) {
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value2"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value2"},');

            }
          }, {
            key: "setupSegmentFinderArgs",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var t = this;
              (!0 === e ? (this.findAll = !0, this.wanted = A(R.keyList())) : (e = void 0 === e ? R.keyList().filter(function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.e.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.e.filter"},');

                return t.options[e].enabled;
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.e.filter"},');

              }) : e.filter(function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.e", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.e"},');

                return t.options[e].enabled && R.has(e);
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.e"},');

              }), this.findAll = !1, this.remaining = A(e), this.wanted = A(e)), this.unfinishedMultiSegment = !1);
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value3"},');

            }
          }, {
            key: "findAppSegments",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t = arguments.length > 1 ? arguments[1] : void 0;
              try {
                var n = this;
                n.setupSegmentFinderArgs(t);
                var r = n.file, i = n.findAll, s = n.wanted, a = n.remaining;
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value4"},');

                return rt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (!i && n.file.chunked) {
                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt"},');

                    return (i = k(s).some(function (e) {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.i.some", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                      var t = R.get(e), r = n.options[e];
                                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.i.some"},');

                      return t.multiSegment && r.multiSegment;
                                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.i.some"},');

                    }), nt(function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.nt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                      if (i) {
                                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.nt"},');

                        return tt(n.file.readWhole());
                      }
                                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.nt"},');

                    }));
                  }
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  var t = !1;
                  if ((e = n._findAppSegments(e, r.byteLength, i, s, a), !n.options.onlyTiff)) {
                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt2"},');

                    return (function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                      if (r.chunked) {
                        var i = !1;
                                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement"},');

                        return ut(function () {
                                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut"},');

                          return !t && a.size > 0 && !i && (!!r.canReadNextChunk || !!n.unfinishedMultiSegment);
                                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut"},');

                        }, void 0, function () {
                                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                          var s = r.nextChunkOffset, a = n.appSegments.some(function (e) {
                                                        SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.a.n.appSegments.some", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.a.n.appSegments.some"},');

                            return !n.file.available(e.offset || e.start, e.length || e.size);
                                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.a.n.appSegments.some"},');

                          });
                                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut2"},');

                          return rt(function () {
                                                        SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt"},');

                            return e > s && !a ? $e(r.readNextChunk(e), function (e) {
                                                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt.ReturnStatement.$e", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                              i = !e;
                                                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt.ReturnStatement.$e"},');

                            }) : $e(r.readNextChunk(s), function (e) {
                                                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt.ReturnStatement.$e2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                              i = !e;
                                                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt.ReturnStatement.$e2"},');

                            });
                                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt"},');

                          }, function () {
                                                        SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            void 0 === (e = n._findAppSegments(e, r.byteLength)) && (t = !0);
                                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut.ReturnStatement.rt2"},');

                          });
                                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.ReturnStatement.ut2"},');

                        });
                      }
                                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement"},');

                    })();
                  }
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt2"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value4"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value4"},');

            }
          }, {
            key: "_findAppSegments",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              for (var n, r, i, s, a, u, o = this.file, f = this.findAll, h = this.wanted, c = this.remaining, l = this.options; e < t; e++) if (255 === o.getUint8(e)) if (ft(n = o.getUint8(e + 1))) {
                if ((r = o.getUint16(e + 2), (i = ht(o, e)) && h.has(i) && (a = (s = R.get(i)).findPosition(o, e), u = l[i], a.type = i, this.appSegments.push(a), !f && (s.multiSegment && u.multiSegment ? (this.unfinishedMultiSegment = a.chunkNumber < a.chunkCount, this.unfinishedMultiSegment || c.delete(i)) : c.delete(i), 0 === c.size)))) break;
                (l.recordUnknownSegments && ((a = Ze.findPosition(o, e)).marker = n, this.unknownSegments.push(a)), e += r + 1);
              } else if (ot(n)) {
                if ((r = o.getUint16(e + 2), 218 === n && !1 !== l.stopAfterSos)) {
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value5"},');

                  return;
                }
                (l.recordJpegSegments && this.jpegSegments.push({
                  offset: e,
                  length: r,
                  marker: n
                }), e += r + 1);
              }
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value5"},');

              return e;
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value5"},');

            }
          }, {
            key: "mergeMultiSegments",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = this;
              if (this.appSegments.some(function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.appSegments.some", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.appSegments.some"},');

                return e.multiSegment;
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.appSegments.some"},');

              })) {
                var t = (function (e, t) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.t", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                  for (var n, r, i, s = O(), a = 0; a < e.length; a++) (n = e[a], r = n[t], s.has(r) ? i = s.get(r) : s.set(r, i = []), i.push(n));
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.t"},');

                  return k(s);
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.t"},');

                })(this.appSegments, "type");
                this.mergedAppSegments = t.map(function (t) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.mergedAppSegments", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                  var n = t[0], r = t[1], i = R.get(n, e.options);
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.mergedAppSegments"},');

                  return i.handleMultiSegments ? {
                    type: n,
                    chunk: i.handleMultiSegments(r)
                  } : r[0];
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.mergedAppSegments"},');

                });
              }
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value6"},');

            }
          }, {
            key: "createParsers",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value7", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this.mergedAppSegments || this.appSegments;
                Array.isArray(e) || ("function" == typeof e.entries && (e = e.entries()), e = k(e));
                for (var t = 0; t < e.length; t++) {
                  var n = e[t], r = n.type, i = n.chunk;
                  if (this.options[r].enabled) {
                    var s = this.parsers[r];
                    if (s && s.append) ; else if (!s) {
                      var a = new (R.get(r, this.options))(i, this.options, this.file);
                      this.parsers[r] = a;
                    }
                  }
                }
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value7"},');

                return $e();
              } catch (e) {
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value7"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value7"},');

            }
          }, {
            key: "getSegment",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value8"},');

              return this.appSegments.find(function (t) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.appSegments.find", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.appSegments.find"},');

                return t.type === e;
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.appSegments.find"},');

              });
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value8"},');

            }
          }, {
            key: "getOrFindSegment",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value9", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              try {
                var t = this, n = t.getSegment(e);
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value9"},');

                return rt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (void 0 === n) {
                                        SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt3"},');

                    return $e(t.findAppSegments(0, [e]), function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.$e", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                      n = t.getSegment(e);
                                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt.ReturnStatement.$e"},');

                    });
                  }
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt3"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.ct.ReturnStatement.r.value.ReturnStatement.rt4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt4"},');

                  return n;
                                    SRTlib.send('], "end": "call.ct.ReturnStatement.r.value.ReturnStatement.rt4"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.ct.ReturnStatement.r.value9"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.ct.ReturnStatement.r.value9"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.ct"},');

        })(Qe);
        function lt() {
                    SRTlib.send(`{ "anonymous": false, "function": "lt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "lt"},');

        }
        N.set("jpeg", ct);
        function dt(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "dt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (!t) {
                        SRTlib.send('], "end": "dt"},');

            return e && e.then ? e.then(lt) : Promise.resolve();
          }
                    SRTlib.send('], "end": "dt"},');

        }
        function pt(e, t) {
                    SRTlib.send(`{ "anonymous": false, "function": "pt", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var n = e();
                    SRTlib.send('], "end": "pt"},');

          return n && n.then ? n.then(t) : t(n);
                    SRTlib.send('], "end": "pt"},');

        }
        var vt = [void 0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 4];
        var yt = (function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.yt", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n() {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "n"},');

            return (t(this, n), l(this, a(n).apply(this, arguments)));
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.yt"},');

          return (s(n, e), r(n, [{
            key: "parse",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value"},');

                return (e.parseHeader(), pt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (e.options.ifd0.enabled) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt"},');

                    return dt(e.parseIfd0Block());
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt2"},');

                  return pt(function () {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    if (e.options.exif.enabled) {
                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt"},');

                      return dt(e.saveParseBlock("parseExifBlock"));
                    }
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt"},');

                  }, function () {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt2"},');

                    return pt(function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                      if (e.options.gps.enabled) {
                                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt"},');

                        return dt(e.saveParseBlock("parseGpsBlock"));
                      }
                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt"},');

                    }, function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2"},');

                      return pt(function () {
                                                SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        if (e.options.interop.enabled) {
                                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt"},');

                          return dt(e.saveParseBlock("parseInteropBlock"));
                        }
                                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt"},');

                      }, function () {
                                                SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2"},');

                        return pt(function () {
                                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                          if (e.options.ifd1.enabled) {
                                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt"},');

                            return dt(e.saveParseBlock("parseThumbnailBlock"));
                          }
                                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt"},');

                        }, function () {
                                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2"},');

                          return e.createOutput();
                                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2"},');

                        });
                                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2"},');

                      });
                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt.ReturnStatement.pt2"},');

                    });
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt2"},');

                  });
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt2"},');

                }));
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value"},');

            }
          }, {
            key: "saveParseBlock",
            value: function (e) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              try {
                var t = this;
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value2"},');

                return (function (e, t) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                  try {
                    var n = e();
                  } catch (e) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement"},');

                    return t(e);
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement"},');

                  return n && n.then ? n.then(void 0, t) : n;
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement"},');

                })(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement2"},');

                  return (n = t[e](), i ? r ? r(n) : n : (n && n.then || (n = Promise.resolve(n)), r ? n.then(r) : n));
                  var n, r, i;
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement2"},');

                }, function (e) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                  t.handleError(e);
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement3"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value2"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value2"},');

            }
          }, {
            key: "findIfd0Offset",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              void 0 === this.ifd0Offset && (this.ifd0Offset = this.chunk.getUint32(4));
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value3"},');

            }
          }, {
            key: "findIfd1Offset",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              if (void 0 === this.ifd1Offset) {
                this.findIfd0Offset();
                var e = this.chunk.getUint16(this.ifd0Offset), t = this.ifd0Offset + 2 + 12 * e;
                this.ifd1Offset = this.chunk.getUint32(t);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value4"},');

            }
          }, {
            key: "parseBlock",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value5", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = O();
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value5"},');

              return (this[t] = n, this.parseTags(e, t, n), n);
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value5"},');

            }
          }, {
            key: "parseIfd0Block",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                if (e.ifd0) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value6"},');

                  return;
                }
                if ((e.findIfd0Offset(), e.ifd0Offset < 8)) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value6"},');

                  throw T("Invalid EXIF data: IFD0 offset should be less than 8");
                }
                if (!e.file.chunked && e.ifd0Offset > e.file.byteLength) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value6"},');

                  throw T(("IFD0 offset points to outside of file.\nthis.ifd0Offset: ").concat(e.ifd0Offset, ", file.byteLength: ").concat(e.file.byteLength));
                }
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value6"},');

                return pt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (e.file.isTiff) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt3"},');

                    return dt(e.file.ensureChunk(e.ifd0Offset, L(e.options)));
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt3"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  var t = e.parseBlock(e.ifd0Offset, "ifd0");
                  if (0 !== t.size) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt4"},');

                    return (e.exifOffset = t.get(34665), e.interopOffset = t.get(40965), e.gpsOffset = t.get(34853), e.xmp = t.get(700), e.iptc = t.get(33723), e.icc = t.get(34675), e.options.sanitize && (t.delete(34665), t.delete(40965), t.delete(34853), t.delete(700), t.delete(33723), t.delete(34675)), t);
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt4"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value6"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value6"},');

            }
          }, {
            key: "ensureBlockChunk",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              try {
                var n = this;
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value7"},');

                return pt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (n.file.isTiff) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt5"},');

                    return dt(n.file.ensureChunk(e, t));
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt5"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  e > n.chunk.byteLength && (n.chunk = E.from(n.file, n.le));
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt6"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value7"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value7"},');

            }
          }, {
            key: "parseExifBlock",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value8", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                if (e.exif) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value8"},');

                  return;
                }
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value8"},');

                return pt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt7", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (!e.ifd0) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt7"},');

                    return dt(e.parseIfd0Block());
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt7"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt8", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (void 0 !== e.exifOffset) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt8"},');

                    return pt(function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                      if (e.file.isTiff) {
                                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt3"},');

                        return dt(e.file.ensureChunk(e.exifOffset, L(e.options)));
                      }
                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt3"},');

                    }, function () {
                                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                      var t = e.parseBlock(e.exifOffset, "exif");
                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt4"},');

                      return (e.interopOffset || (e.interopOffset = t.get(40965)), e.makerNote = t.get(37500), e.userComment = t.get(37510), e.options.sanitize && (t.delete(40965), t.delete(37500), t.delete(37510)), e.unpack(t, 41728), e.unpack(t, 41729), t);
                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt4"},');

                    });
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt8"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value8"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value8"},');

            }
          }, {
            key: "unpack",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value9", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = e.get(t);
              n && 1 === n.length && e.set(t, n[0]);
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value9"},');

            }
          }, {
            key: "parseGpsBlock",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value10", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                if (e.gps) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value10"},');

                  return;
                }
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value10"},');

                return pt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt9", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (!e.ifd0) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt9"},');

                    return dt(e.parseIfd0Block());
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt9"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt10", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (void 0 !== e.gpsOffset) {
                    var t = e.parseBlock(e.gpsOffset, "gps");
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt10"},');

                    return (t && t.has(2) && t.has(4) && (t.set("latitude", gt.apply(void 0, t.get(2).concat([t.get(1)]))), t.set("longitude", gt.apply(void 0, t.get(4).concat([t.get(3)])))), t);
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt10"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value10"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value10"},');

            }
          }, {
            key: "parseInteropBlock",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value11", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                if (e.interop) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value11"},');

                  return;
                }
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value11"},');

                return pt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt11", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (!e.ifd0) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt11"},');

                    return dt(e.parseIfd0Block());
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt11"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt12", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt12"},');

                  return pt(function () {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    if (void 0 === e.interopOffset && !e.exif) {
                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt5"},');

                      return dt(e.parseExifBlock());
                    }
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt5"},');

                  }, function () {
                                        SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    if (void 0 !== e.interopOffset) {
                                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt6"},');

                      return e.parseBlock(e.interopOffset, "interop");
                    }
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt.ReturnStatement.pt6"},');

                  });
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt12"},');

                });
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value11"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value11"},');

            }
          }, {
            key: "parseThumbnailBlock",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value12", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              try {
                var t = this;
                if (t.ifd1 || t.ifd1Parsed) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value12"},');

                  return;
                }
                if (t.options.mergeOutput && !e) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value12"},');

                  return;
                }
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value12"},');

                return (t.findIfd1Offset(), t.ifd1Offset > 0 && (t.parseBlock(t.ifd1Offset, "ifd1"), t.ifd1Parsed = !0), t.ifd1);
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value12"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value12"},');

            }
          }, {
            key: "extractThumbnail",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value13", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              try {
                var e = this;
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value13"},');

                return (e.headerParsed || e.parseHeader(), pt(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt13", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (!e.ifd1Parsed) {
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt13"},');

                    return dt(e.parseThumbnailBlock(!0));
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt13"},');

                }, function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.pt14", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                  if (void 0 !== e.ifd1) {
                    var t = e.ifd1.get(513), n = e.ifd1.get(514);
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt14"},');

                    return e.chunk.getUint8Array(t, n);
                  }
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.pt14"},');

                }));
              } catch (e) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value13"},');

                return Promise.reject(e);
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value13"},');

            }
          }, {
            key: "createOutput",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value14", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e, t, n, r = {}, i = ue;
              Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = k(i));
              for (var s = 0; s < i.length; s++) if (!V(e = this[t = i[s]])) if ((n = this.canTranslate ? this.translateBlock(e, t) : g(e), this.options.mergeOutput)) {
                if ("ifd1" === t) continue;
                y(r, n);
              } else r[t] = n;
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value14"},');

              return (this.makerNote && (r.makerNote = this.makerNote), this.userComment && (r.userComment = this.userComment), r);
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value14"},');

            }
          }, {
            key: "assignToOutput",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value15", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              if (this.globalOptions.mergeOutput) y(e, t); else {
                var n = v(t);
                Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = k(n));
                for (var r = 0; r < n.length; r++) {
                  var i = n[r], s = i[0], a = i[1];
                  this.assignObjectToOutput(e, s, a);
                }
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value15"},');

            }
          }, {
            key: "image",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.get", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.get"},');

              return this.ifd0;
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.get"},');

            }
          }, {
            key: "thumbnail",
            get: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.get2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.get2"},');

              return this.ifd1;
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.get2"},');

            }
          }], [{
            key: "canHandle",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value16", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value16"},');

              return 225 === e.getUint8(t + 1) && 1165519206 === e.getUint32(t + 4) && 0 === e.getUint16(t + 8);
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value16"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.yt"},');

        })((function (e) {
                    SRTlib.send(`{ "anonymous": true, "function": "call.yt2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          function n() {
                        SRTlib.send(`{ "anonymous": false, "function": "n", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "n"},');

            return (t(this, n), l(this, a(n).apply(this, arguments)));
                        SRTlib.send('], "end": "n"},');

          }
                    SRTlib.send('], "end": "call.yt2"},');

          return (s(n, e), r(n, [{
            key: "parseHeader",
            value: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value17", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var e = this.chunk.getUint16();
              if (18761 === e) this.le = !0; else {
                if (19789 !== e) {
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value17"},');

                  throw T("Invalid EXIF data: expected byte order marker (0x4949 or 0x4D4D).");
                }
                this.le = !1;
              }
              if ((this.chunk.le = this.le, 42 !== this.chunk.getUint16(2))) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value17"},');

                throw T("Invalid EXIF data: expected 0x002A.");
              }
              this.headerParsed = !0;
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value17"},');

            }
          }, {
            key: "parseTags",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value18", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : O(), r = this.options[t], i = r.pick, s = r.skip, a = (i = A(i)).size > 0, u = 0 === s.size, o = this.chunk.getUint16(e);
              e += 2;
              for (var f = 0; f < o; f++) {
                var h = this.chunk.getUint16(e);
                if (a) {
                  if (i.has(h) && (n.set(h, this.parseTag(e, h, t)), i.delete(h), 0 === i.size)) break;
                } else !u && s.has(h) || n.set(h, this.parseTag(e, h, t));
                e += 12;
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value18"},');

              return n;
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value18"},');

            }
          }, {
            key: "parseTag",
            value: function (e, t, n) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value19", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

              var r, i = this.chunk.getUint16(e + 2), s = this.chunk.getUint32(e + 4), a = vt[i];
              if ((a * s <= 4 ? e += 8 : e = this.chunk.getUint32(e + 8), i < 1 || i > 13)) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                throw T(("Invalid TIFF value type. block: ").concat(n.toUpperCase(), ", tag: ").concat(t.toString(16), ", type: ").concat(i, ", offset ").concat(e));
              }
              if (e > this.chunk.byteLength) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                throw T(("Invalid TIFF value offset. block: ").concat(n.toUpperCase(), ", tag: ").concat(t.toString(16), ", type: ").concat(i, ", offset ").concat(e, " is outside of chunk size ").concat(this.chunk.byteLength));
              }
              if (1 === i) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                return this.chunk.getUint8Array(e, s);
              }
              if (2 === i) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                return "" === (r = (function (e) {
                                    SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.ReturnStatement.r.trim", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                  for (; e.endsWith("\0"); ) e = e.slice(0, -1);
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.r.trim"},');

                  return e;
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.ReturnStatement.r.trim"},');

                })(r = this.chunk.getString(e, s)).trim()) ? void 0 : r;
              }
              if (7 === i) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                return this.chunk.getUint8Array(e, s);
              }
              if (1 === s) {
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                return this.parseTagValue(i, e);
              }
              for (var u = new ((function (e) {
                                SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value.u", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                switch (e) {
                  case 1:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Uint8Array;
                  case 3:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Uint16Array;
                  case 4:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Uint32Array;
                  case 5:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Array;
                  case 6:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Int8Array;
                  case 8:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Int16Array;
                  case 9:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Int32Array;
                  case 10:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Array;
                  case 11:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Float32Array;
                  case 12:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Float64Array;
                  default:
                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

                                        SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

                    return Array;
                }
                                SRTlib.send('], "end": "call.yt.ReturnStatement.r.value.u"},');

              })(i))(s), o = a, f = 0; f < s; f++) (u[f] = this.parseTagValue(i, e), e += o);
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

              return u;
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value19"},');

            }
          }, {
            key: "parseTagValue",
            value: function (e, t) {
                            SRTlib.send(`{ "anonymous": true, "function": "call.yt.ReturnStatement.r.value20", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              switch (e) {
                case 1:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getUint8(t);
                case 3:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getUint16(t);
                case 4:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getUint32(t);
                case 5:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getUint32(t) / this.chunk.getUint32(t + 4);
                case 6:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getInt8(t);
                case 8:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getInt16(t);
                case 9:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getInt32(t);
                case 10:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getInt32(t) / this.chunk.getInt32(t + 4);
                case 11:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getFloat(t);
                case 12:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getDouble(t);
                case 13:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  return this.chunk.getUint32(t);
                default:
                                    SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

                  throw T(("Invalid tiff type ").concat(e));
              }
                            SRTlib.send('], "end": "call.yt.ReturnStatement.r.value20"},');

            }
          }]), n);
                    SRTlib.send('], "end": "call.yt2"},');

        })(Ze));
        function gt(e, t, n, r) {
                    SRTlib.send(`{ "anonymous": false, "function": "gt", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

          var i = e + t / 60 + n / 3600;
                    SRTlib.send('], "end": "gt"},');

          return ("S" !== r && "W" !== r || (i *= -1), i);
                    SRTlib.send('], "end": "gt"},');

        }
        (i(yt, "type", "tiff"), i(yt, "headerLength", 10), R.set("tiff", yt), e.Exifr = xe, e.Options = ye, e.allFormatters = ce, e.chunkedProps = ie, e.createDictionary = $, e.default = Re, e.disableAllOptions = be, e.extendDictionary = ee, e.fetchUrlAsArrayBuffer = Y, e.fileParsers = N, e.fileReaders = W, e.gps = Ie, e.gpsOnlyOptions = we, e.inheritables = he, e.orientation = _e, e.orientationOnlyOptions = Ae, e.otherSegments = se, e.parse = Le, e.readBlobAsArrayBuffer = H, e.rotation = je, e.rotations = ze, e.segmentParsers = R, e.segments = ae, e.segmentsAndBlocks = oe, e.tagKeys = te, e.tagRevivers = re, e.tagValues = ne, e.thumbnail = Te, e.thumbnailOnlyOptions = Oe, e.thumbnailUrl = Ve, e.tiffBlocks = ue, e.tiffExtractables = fe, Object.defineProperty(e, "__esModule", {
          value: !0
        }));
                SRTlib.send('], "end": "call42"},');

      });
            SRTlib.send('], "end": "call43"},');

    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey336"},');

  }, {
    "_process": 162,
    "buffer": 360
  }],
  304: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey337", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/thumbnail-generator",
      "description": "Uppy plugin that generates small previews of images to show on your upload UI.",
      "version": "1.6.0",
      "license": "MIT",
      "main": "lib/index.js",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "thumbnail", "preview", "resize"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@uppy/utils": "file:../utils",
        "exifr": "^5.0.1",
        "math-log2": "^1.0.1"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey337"},');

  }, {}],
  305: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey338", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends18", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends18"},');

        return target;
                SRTlib.send('], "end": "_extends18"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('./../../core'), Plugin = _require.Plugin;
    var Translator = require('./../../utils/lib/Translator');
    var dataURItoBlob = require('./../../utils/lib/dataURItoBlob');
    var isObjectURL = require('./../../utils/lib/isObjectURL');
    var isPreviewSupported = require('./../../utils/lib/isPreviewSupported');
    var MathLog2 = require('math-log2');
    var exifr = require('exifr/dist/mini.legacy.umd.js');
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(ThumbnailGenerator, _Plugin);
      function ThumbnailGenerator(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "ThumbnailGenerator", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, opts) || this;
        _this.onFileAdded = function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.onFileAdded", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!file.preview && isPreviewSupported(file.type) && !file.isRemote) {
            _this.addToQueue(file.id);
          }
                    SRTlib.send('], "end": "_this.onFileAdded"},');

        };
        _this.onCancelRequest = function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.onCancelRequest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var index = _this.queue.indexOf(file.id);
          if (index !== -1) {
            _this.queue.splice(index, 1);
          }
                    SRTlib.send('], "end": "_this.onCancelRequest"},');

        };
        _this.onFileRemoved = function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.onFileRemoved", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var index = _this.queue.indexOf(file.id);
          if (index !== -1) {
            _this.queue.splice(index, 1);
          }
          if (file.preview && isObjectURL(file.preview)) {
            URL.revokeObjectURL(file.preview);
          }
                    SRTlib.send('], "end": "_this.onFileRemoved"},');

        };
        _this.onRestored = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.onRestored2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this$uppy$getState = _this.uppy.getState(), files = _this$uppy$getState.files;
          var fileIDs = Object.keys(files);
          fileIDs.forEach(function (fileID) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.onRestored", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var file = _this.uppy.getFile(fileID);
            if (!file.isRestored) {
                            SRTlib.send('], "end": "_this.onRestored"},');

              return;
            }
            if (!file.preview || isObjectURL(file.preview)) {
              _this.addToQueue(file.id);
            }
                        SRTlib.send('], "end": "_this.onRestored"},');

          });
                    SRTlib.send('], "end": "_this.onRestored2"},');

        };
        _this.waitUntilAllProcessed = function (fileIDs) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.waitUntilAllProcessed2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          fileIDs.forEach(function (fileID) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.waitUntilAllProcessed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var file = _this.uppy.getFile(fileID);
            _this.uppy.emit('preprocess-progress', file, {
              mode: 'indeterminate',
              message: _this.i18n('generatingThumbnails')
            });
                        SRTlib.send('], "end": "_this.waitUntilAllProcessed"},');

          });
          var emitPreprocessCompleteForAll = function emitPreprocessCompleteForAll() {
                        SRTlib.send(`{ "anonymous": false, "function": "emitPreprocessCompleteForAll", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            fileIDs.forEach(function (fileID) {
                            SRTlib.send(`{ "anonymous": true, "function": "_this.waitUntilAllProcessed.emitPreprocessCompleteForAll.emitPreprocessCompleteForAll", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var file = _this.uppy.getFile(fileID);
              _this.uppy.emit('preprocess-complete', file);
                            SRTlib.send('], "end": "_this.waitUntilAllProcessed.emitPreprocessCompleteForAll.emitPreprocessCompleteForAll"},');

            });
                        SRTlib.send('], "end": "emitPreprocessCompleteForAll"},');

          };
                    SRTlib.send('], "end": "_this.waitUntilAllProcessed2"},');

          return new Promise(function (resolve, reject) {
                        SRTlib.send(`{ "anonymous": true, "function": "_this.waitUntilAllProcessed.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            if (_this.queueProcessing) {
              _this.uppy.once('thumbnail:all-generated', function () {
                                SRTlib.send(`{ "anonymous": true, "function": "_this.waitUntilAllProcessed.ReturnStatement._this.uppy.once", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                emitPreprocessCompleteForAll();
                resolve();
                                SRTlib.send('], "end": "_this.waitUntilAllProcessed.ReturnStatement._this.uppy.once"},');

              });
            } else {
              emitPreprocessCompleteForAll();
              resolve();
            }
                        SRTlib.send('], "end": "_this.waitUntilAllProcessed.ReturnStatement"},');

          });
                    SRTlib.send('], "end": "_this.waitUntilAllProcessed2"},');

        };
        _this.type = 'modifier';
        _this.id = _this.opts.id || 'ThumbnailGenerator';
        _this.title = 'Thumbnail Generator';
        _this.queue = [];
        _this.queueProcessing = false;
        _this.defaultThumbnailDimension = 200;
        _this.defaultLocale = {
          strings: {
            generatingThumbnails: 'Generating thumbnails...'
          }
        };
        var defaultOptions = {
          thumbnailWidth: null,
          thumbnailHeight: null,
          waitForThumbnailsBeforeUpload: false,
          lazy: false
        };
        _this.opts = _extends({}, defaultOptions, {}, opts);
        if (_this.opts.lazy && _this.opts.waitForThumbnailsBeforeUpload) {
                    SRTlib.send('], "end": "ThumbnailGenerator"},');

          throw new Error('ThumbnailGenerator: The `lazy` and `waitForThumbnailsBeforeUpload` options are mutually exclusive. Please ensure at most one of them is set to `true`.');
        }
        _this.i18nInit();
                SRTlib.send('], "end": "ThumbnailGenerator"},');

        return _this;
                SRTlib.send('], "end": "ThumbnailGenerator"},');

      }
      var _proto = ThumbnailGenerator.prototype;
      _proto.setOptions = function setOptions(newOpts) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.setOptions.setOptions2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        _Plugin.prototype.setOptions.call(this, newOpts);
        this.i18nInit();
                SRTlib.send('], "end": "module.exports._temp._class._proto.setOptions.setOptions2"},');

      };
      _proto.i18nInit = function i18nInit() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.i18nInit.i18nInit2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);
        this.i18n = this.translator.translate.bind(this.translator);
        this.setPluginState();
                SRTlib.send('], "end": "module.exports._temp._class._proto.i18nInit.i18nInit2"},');

      };
      _proto.createThumbnail = function createThumbnail(file, targetWidth, targetHeight) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.createThumbnail.createThumbnail", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var _this2 = this;
        var originalUrl = URL.createObjectURL(file.data);
        var onload = new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.createThumbnail.createThumbnail.onload3", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var image = new Image();
          image.src = originalUrl;
          image.addEventListener('load', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.createThumbnail.createThumbnail.onload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            URL.revokeObjectURL(originalUrl);
            resolve(image);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.onload"},');

          });
          image.addEventListener('error', function (event) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.createThumbnail.createThumbnail.onload2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            URL.revokeObjectURL(originalUrl);
            reject(event.error || new Error('Could not create thumbnail'));
                        SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.onload2"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.onload3"},');

        });
        var orientationPromise = exifr.rotation(file.data).catch(function (_err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.createThumbnail.createThumbnail.orientationPromise.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.orientationPromise.catch"},');

          return 1;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.orientationPromise.catch"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail"},');

        return Promise.all([onload, orientationPromise]).then(function (_ref) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.createThumbnail.createThumbnail.ReturnStatement.then.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var image = _ref[0], orientation = _ref[1];
          var dimensions = _this2.getProportionalDimensions(image, targetWidth, targetHeight, orientation.deg);
          var rotatedImage = _this2.rotateImage(image, orientation);
          var resizedImage = _this2.resizeImage(rotatedImage, dimensions.width, dimensions.height);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.ReturnStatement.then.then.then"},');

          return _this2.canvasToBlob(resizedImage, 'image/jpeg', 80);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.ReturnStatement.then.then.then"},');

        }).then(function (blob) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.createThumbnail.createThumbnail.ReturnStatement.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.ReturnStatement.then.then"},');

          return URL.createObjectURL(blob);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail.ReturnStatement.then.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.createThumbnail.createThumbnail"},');

      };
      _proto.getProportionalDimensions = function getProportionalDimensions(img, width, height, rotation) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getProportionalDimensions.getProportionalDimensions", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        var aspect = img.width / img.height;
        if (rotation === 90 || rotation === 270) {
          aspect = img.height / img.width;
        }
        if (width != null) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getProportionalDimensions.getProportionalDimensions"},');

          return {
            width: width,
            height: Math.round(width / aspect)
          };
        }
        if (height != null) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getProportionalDimensions.getProportionalDimensions"},');

          return {
            width: Math.round(height * aspect),
            height: height
          };
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.getProportionalDimensions.getProportionalDimensions"},');

        return {
          width: this.defaultThumbnailDimension,
          height: Math.round(this.defaultThumbnailDimension / aspect)
        };
                SRTlib.send('], "end": "module.exports._temp._class._proto.getProportionalDimensions.getProportionalDimensions"},');

      };
      _proto.protect = function protect(image) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.protect.protect", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var ratio = image.width / image.height;
        var maxSquare = 5000000;
        var maxSize = 4096;
        var maxW = Math.floor(Math.sqrt(maxSquare * ratio));
        var maxH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio));
        if (maxW > maxSize) {
          maxW = maxSize;
          maxH = Math.round(maxW / ratio);
        }
        if (maxH > maxSize) {
          maxH = maxSize;
          maxW = Math.round(ratio * maxH);
        }
        if (image.width > maxW) {
          var canvas = document.createElement('canvas');
          canvas.width = maxW;
          canvas.height = maxH;
          canvas.getContext('2d').drawImage(image, 0, 0, maxW, maxH);
          image = canvas;
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.protect.protect"},');

        return image;
                SRTlib.send('], "end": "module.exports._temp._class._proto.protect.protect"},');

      };
      _proto.resizeImage = function resizeImage(image, targetWidth, targetHeight) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.resizeImage.resizeImage", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        image = this.protect(image);
        var steps = Math.ceil(MathLog2(image.width / targetWidth));
        if (steps < 1) {
          steps = 1;
        }
        var sW = targetWidth * Math.pow(2, steps - 1);
        var sH = targetHeight * Math.pow(2, steps - 1);
        var x = 2;
        while (steps--) {
          var canvas = document.createElement('canvas');
          canvas.width = sW;
          canvas.height = sH;
          canvas.getContext('2d').drawImage(image, 0, 0, sW, sH);
          image = canvas;
          sW = Math.round(sW / x);
          sH = Math.round(sH / x);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.resizeImage.resizeImage"},');

        return image;
                SRTlib.send('], "end": "module.exports._temp._class._proto.resizeImage.resizeImage"},');

      };
      _proto.rotateImage = function rotateImage(image, translate) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.rotateImage.rotateImage", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var w = image.width;
        var h = image.height;
        if (translate.deg === 90 || translate.deg === 270) {
          w = image.height;
          h = image.width;
        }
        var canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        var context = canvas.getContext('2d');
        context.translate(w / 2, h / 2);
        if (translate.canvas) {
          context.rotate(translate.rad);
          context.scale(translate.scaleX, translate.scaleY);
        }
        context.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);
                SRTlib.send('], "end": "module.exports._temp._class._proto.rotateImage.rotateImage"},');

        return canvas;
                SRTlib.send('], "end": "module.exports._temp._class._proto.rotateImage.rotateImage"},');

      };
      _proto.canvasToBlob = function canvasToBlob(canvas, type, quality) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        try {
          canvas.getContext('2d').getImageData(0, 0, 1, 1);
        } catch (err) {
          if (err.code === 18) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob"},');

            return Promise.reject(new Error('cannot read image, probably an svg with external resources'));
          }
        }
        if (canvas.toBlob) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob"},');

          return new Promise(function (resolve) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            canvas.toBlob(resolve, type, quality);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then"},');

          }).then(function (blob) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (blob === null) {
                            SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then2"},');

              throw new Error('cannot read image, probably an svg with external resources');
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then2"},');

            return blob;
                        SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then2"},');

          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob"},');

        return Promise.resolve().then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then.then.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then.then.then"},');

          return dataURItoBlob(canvas.toDataURL(type, quality), {});
                    SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then.then.then"},');

        }).then(function (blob) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (blob === null) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then.then"},');

            throw new Error('could not extract blob, probably an old browser');
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then.then"},');

          return blob;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob.ReturnStatement.then.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.canvasToBlob.canvasToBlob"},');

      };
      _proto.setPreviewURL = function setPreviewURL(fileID, preview) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.setPreviewURL.setPreviewURL", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.uppy.setFileState(fileID, {
          preview: preview
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.setPreviewURL.setPreviewURL"},');

      };
      _proto.addToQueue = function addToQueue(item) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.addToQueue.addToQueue", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.queue.push(item);
        if (this.queueProcessing === false) {
          this.processQueue();
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.addToQueue.addToQueue"},');

      };
      _proto.processQueue = function processQueue() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.processQueue.processQueue", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this3 = this;
        this.queueProcessing = true;
        if (this.queue.length > 0) {
          var current = this.uppy.getFile(this.queue.shift());
          if (!current) {
            this.uppy.log('[ThumbnailGenerator] file was removed before a thumbnail could be generated, but not removed from the queue. This is probably a bug', 'error');
                        SRTlib.send('], "end": "module.exports._temp._class._proto.processQueue.processQueue"},');

            return;
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto.processQueue.processQueue"},');

          return this.requestThumbnail(current).catch(function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.processQueue.processQueue.ReturnStatement.requestThumbnail.catch.then.requestThumbnail.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto.processQueue.processQueue.ReturnStatement.requestThumbnail.catch.then.requestThumbnail.catch"},');

          }).then(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.processQueue.processQueue.ReturnStatement.requestThumbnail.catch.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto.processQueue.processQueue.ReturnStatement.requestThumbnail.catch.then"},');

            return _this3.processQueue();
                        SRTlib.send('], "end": "module.exports._temp._class._proto.processQueue.processQueue.ReturnStatement.requestThumbnail.catch.then"},');

          });
        } else {
          this.queueProcessing = false;
          this.uppy.log('[ThumbnailGenerator] Emptied thumbnail queue');
          this.uppy.emit('thumbnail:all-generated');
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.processQueue.processQueue"},');

      };
      _proto.requestThumbnail = function requestThumbnail(file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.requestThumbnail.requestThumbnail", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this4 = this;
        if (isPreviewSupported(file.type) && !file.isRemote) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.requestThumbnail.requestThumbnail"},');

          return this.createThumbnail(file, this.opts.thumbnailWidth, this.opts.thumbnailHeight).then(function (preview) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.requestThumbnail.requestThumbnail.ReturnStatement.createThumbnail.then.catch.createThumbnail.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this4.setPreviewURL(file.id, preview);
            _this4.uppy.log("[ThumbnailGenerator] Generated thumbnail for " + file.id);
            _this4.uppy.emit('thumbnail:generated', _this4.uppy.getFile(file.id), preview);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.requestThumbnail.requestThumbnail.ReturnStatement.createThumbnail.then.catch.createThumbnail.then"},');

          }).catch(function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.requestThumbnail.requestThumbnail.ReturnStatement.createThumbnail.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this4.uppy.log("[ThumbnailGenerator] Failed thumbnail for " + file.id + ":", 'warning');
            _this4.uppy.log(err, 'warning');
            _this4.uppy.emit('thumbnail:error', _this4.uppy.getFile(file.id), err);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.requestThumbnail.requestThumbnail.ReturnStatement.createThumbnail.then.catch"},');

          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.requestThumbnail.requestThumbnail"},');

        return Promise.resolve();
                SRTlib.send('], "end": "module.exports._temp._class._proto.requestThumbnail.requestThumbnail"},');

      };
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.install.install5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.uppy.on('file-removed', this.onFileRemoved);
        if (this.opts.lazy) {
          this.uppy.on('thumbnail:request', this.onFileAdded);
          this.uppy.on('thumbnail:cancel', this.onCancelRequest);
        } else {
          this.uppy.on('file-added', this.onFileAdded);
          this.uppy.on('restored', this.onRestored);
        }
        if (this.opts.waitForThumbnailsBeforeUpload) {
          this.uppy.addPreProcessor(this.waitUntilAllProcessed);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.install.install5"},');

      };
      _proto.uninstall = function uninstall() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uninstall.uninstall4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.uppy.off('file-removed', this.onFileRemoved);
        if (this.opts.lazy) {
          this.uppy.off('thumbnail:request', this.onFileAdded);
          this.uppy.off('thumbnail:cancel', this.onCancelRequest);
        } else {
          this.uppy.off('file-added', this.onFileAdded);
          this.uppy.off('restored', this.onRestored);
        }
        if (this.opts.waitForThumbnailsBeforeUpload) {
          this.uppy.removePreProcessor(this.waitUntilAllProcessed);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.uninstall.uninstall4"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class8"},');

      return ThumbnailGenerator;
            SRTlib.send('], "end": "module.exports._temp._class8"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey338"},');

  }, {
    "../package.json": 304,
    "./../../core": 248,
    "./../../utils/lib/Translator": 320,
    "./../../utils/lib/dataURItoBlob": 322,
    "./../../utils/lib/isObjectURL": 343,
    "./../../utils/lib/isPreviewSupported": 344,
    "exifr/dist/mini.legacy.umd.js": 303,
    "math-log2": 139
  }],
  306: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey339", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/transloadit",
      "description": "The Transloadit plugin can be used to upload files to Transloadit for all kinds of processing, such as transcoding video, resizing images, zipping/unzipping, and more",
      "version": "1.5.11",
      "license": "MIT",
      "main": "lib/index.js",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "transloadit", "file encoding", "encoding", "file processing", "video encoding", "crop", "resize", "watermark", "uppy", "uppy-plugin"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@uppy/companion-client": "file:../companion-client",
        "@uppy/provider-views": "file:../provider-views",
        "@uppy/tus": "file:../tus",
        "@uppy/utils": "file:../utils",
        "component-emitter": "^1.2.1",
        "socket.io-client": "~2.2.0"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey339"},');

  }, {}],
  307: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey340", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends19", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends19"},');

        return target;
                SRTlib.send('], "end": "_extends19"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var io = requireSocketIo;
    var Emitter = require('component-emitter');
    var has = require('./../../utils/lib/hasProperty');
    var parseUrl = require('./parseUrl');
    var socketIo;
    function requireSocketIo() {
            SRTlib.send(`{ "anonymous": false, "function": "requireSocketIo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!socketIo) {
        socketIo = require('socket.io-client');
      }
            SRTlib.send('], "end": "requireSocketIo"},');

      return socketIo;
            SRTlib.send('], "end": "requireSocketIo"},');

    }
    var ASSEMBLY_UPLOADING = 'ASSEMBLY_UPLOADING';
    var ASSEMBLY_EXECUTING = 'ASSEMBLY_EXECUTING';
    var ASSEMBLY_COMPLETED = 'ASSEMBLY_COMPLETED';
    var statusOrder = [ASSEMBLY_UPLOADING, ASSEMBLY_EXECUTING, ASSEMBLY_COMPLETED];
    function isStatus(status, test) {
            SRTlib.send(`{ "anonymous": false, "function": "isStatus", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "isStatus"},');

      return statusOrder.indexOf(status) >= statusOrder.indexOf(test);
            SRTlib.send('], "end": "isStatus"},');

    }
    var TransloaditAssembly = (function (_Emitter) {
            SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(TransloaditAssembly, _Emitter);
      function TransloaditAssembly(assembly) {
                SRTlib.send(`{ "anonymous": false, "function": "TransloaditAssembly", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this;
        _this = _Emitter.call(this) || this;
        _this.status = assembly;
        _this.socket = null;
        _this.pollInterval = null;
        _this.closed = false;
                SRTlib.send('], "end": "TransloaditAssembly"},');

        return _this;
                SRTlib.send('], "end": "TransloaditAssembly"},');

      }
      var _proto = TransloaditAssembly.prototype;
      _proto.connect = function connect() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto.connect.connect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this._connectSocket();
        this._beginPolling();
                SRTlib.send('], "end": "TransloaditAssembly._proto.connect.connect"},');

      };
      _proto._onFinished = function _onFinished() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._onFinished._onFinished", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.emit('finished');
        this.close();
                SRTlib.send('], "end": "TransloaditAssembly._proto._onFinished._onFinished"},');

      };
      _proto._connectSocket = function _connectSocket() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket9", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this2 = this;
        var parsed = parseUrl(this.status.websocket_url);
        var socket = io().connect(parsed.origin, {
          transports: ['websocket'],
          path: parsed.pathname
        });
        socket.on('connect', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          socket.emit('assembly_connect', {
            id: _this2.status.assembly_id
          });
          _this2.emit('connect');
                    SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket"},');

        });
        socket.on('error', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          socket.disconnect();
          _this2.socket = null;
                    SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket2"},');

        });
        socket.on('assembly_finished', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this2._onFinished();
                    SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket3"},');

        });
        socket.on('assembly_upload_finished', function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this2.emit('upload', file);
          _this2.status.uploads.push(file);
                    SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket4"},');

        });
        socket.on('assembly_uploading_finished', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this2.emit('executing');
                    SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket5"},');

        });
        socket.on('assembly_upload_meta_data_extracted', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this2.emit('metadata');
          _this2._fetchStatus({
            diff: false
          });
                    SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket6"},');

        });
        socket.on('assembly_result_finished', function (stepName, result) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this2.emit('result', stepName, result);
          if (!_this2.status.results[stepName]) {
            _this2.status.results[stepName] = [];
          }
          _this2.status.results[stepName].push(result);
                    SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket7"},');

        });
        socket.on('assembly_error', function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._connectSocket._connectSocket8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this2._onError(err);
          _this2._fetchStatus({
            diff: false
          });
                    SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket8"},');

        });
        this.socket = socket;
                SRTlib.send('], "end": "TransloaditAssembly._proto._connectSocket._connectSocket9"},');

      };
      _proto._onError = function _onError(err) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._onError._onError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this.emit('error', _extends(new Error(err.message), err));
                SRTlib.send('], "end": "TransloaditAssembly._proto._onError._onError"},');

      };
      _proto._beginPolling = function _beginPolling() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._beginPolling._beginPolling", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this3 = this;
        this.pollInterval = setInterval(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._beginPolling._beginPolling.pollInterval.setInterval", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!_this3.socket || !_this3.socket.connected) {
            _this3._fetchStatus();
          }
                    SRTlib.send('], "end": "TransloaditAssembly._proto._beginPolling._beginPolling.pollInterval.setInterval"},');

        }, 2000);
                SRTlib.send('], "end": "TransloaditAssembly._proto._beginPolling._beginPolling"},');

      };
      _proto._fetchStatus = function _fetchStatus(_temp) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._fetchStatus._fetchStatus", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this4 = this;
        var _ref = _temp === void 0 ? {} : _temp, _ref$diff = _ref.diff, diff = _ref$diff === void 0 ? true : _ref$diff;
                SRTlib.send('], "end": "TransloaditAssembly._proto._fetchStatus._fetchStatus"},');

        return fetch(this.status.assembly_ssl_url).then(function (response) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._fetchStatus._fetchStatus.ReturnStatement.then.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "TransloaditAssembly._proto._fetchStatus._fetchStatus.ReturnStatement.then.then.then"},');

          return response.json();
                    SRTlib.send('], "end": "TransloaditAssembly._proto._fetchStatus._fetchStatus.ReturnStatement.then.then.then"},');

        }).then(function (status) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._fetchStatus._fetchStatus.ReturnStatement.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (_this4.closed) {
                        SRTlib.send('], "end": "TransloaditAssembly._proto._fetchStatus._fetchStatus.ReturnStatement.then.then"},');

            return;
          }
          _this4.emit('status', status);
          if (diff) {
            _this4.updateStatus(status);
          } else {
            _this4.status = status;
          }
                    SRTlib.send('], "end": "TransloaditAssembly._proto._fetchStatus._fetchStatus.ReturnStatement.then.then"},');

        });
                SRTlib.send('], "end": "TransloaditAssembly._proto._fetchStatus._fetchStatus"},');

      };
      _proto.update = function update() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto.update.update", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "TransloaditAssembly._proto.update.update"},');

        return this._fetchStatus({
          diff: true
        });
                SRTlib.send('], "end": "TransloaditAssembly._proto.update.update"},');

      };
      _proto.updateStatus = function updateStatus(next) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto.updateStatus.updateStatus", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this._diffStatus(this.status, next);
        this.status = next;
                SRTlib.send('], "end": "TransloaditAssembly._proto.updateStatus.updateStatus"},');

      };
      _proto._diffStatus = function _diffStatus(prev, next) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._diffStatus._diffStatus", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this5 = this;
        var prevStatus = prev.ok;
        var nextStatus = next.ok;
        if (next.error && !prev.error) {
                    SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus"},');

          return this._onError(next);
        }
        var nowExecuting = isStatus(nextStatus, ASSEMBLY_EXECUTING) && !isStatus(prevStatus, ASSEMBLY_EXECUTING);
        if (nowExecuting) {
          this.emit('executing');
        }
        Object.keys(next.uploads).filter(function (upload) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._diffStatus._diffStatus.filter.map.forEach.filter.map.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.filter.map.forEach.filter.map.filter"},');

          return !has(prev.uploads, upload);
                    SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.filter.map.forEach.filter.map.filter"},');

        }).map(function (upload) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._diffStatus._diffStatus.filter.map.forEach.filter.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.filter.map.forEach.filter.map"},');

          return next.uploads[upload];
                    SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.filter.map.forEach.filter.map"},');

        }).forEach(function (upload) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._diffStatus._diffStatus.filter.map.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this5.emit('upload', upload);
                    SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.filter.map.forEach"},');

        });
        if (nowExecuting) {
          this.emit('metadata');
        }
        Object.keys(next.results).forEach(function (stepName) {
                    SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var nextResults = next.results[stepName];
          var prevResults = prev.results[stepName];
          nextResults.filter(function (n) {
                        SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach.forEach"},');

            return !prevResults || !prevResults.some(function (p) {
                            SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach.forEach.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach.forEach.ReturnStatement"},');

              return p.id === n.id;
                            SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach.forEach.ReturnStatement"},');

            });
                        SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach.forEach"},');

          }).forEach(function (result) {
                        SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach.forEach2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this5.emit('result', stepName, result);
                        SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach.forEach2"},');

          });
                    SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus.forEach"},');

        });
        if (isStatus(nextStatus, ASSEMBLY_COMPLETED) && !isStatus(prevStatus, ASSEMBLY_COMPLETED)) {
          this.emit('finished');
        }
                SRTlib.send('], "end": "TransloaditAssembly._proto._diffStatus._diffStatus"},');

      };
      _proto.close = function close() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssembly._proto.close.close", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.closed = true;
        if (this.socket) {
          this.socket.disconnect();
          this.socket = null;
        }
        clearInterval(this.pollInterval);
                SRTlib.send('], "end": "TransloaditAssembly._proto.close.close"},');

      };
            SRTlib.send('], "end": "TransloaditAssembly"},');

      return TransloaditAssembly;
            SRTlib.send('], "end": "TransloaditAssembly"},');

    })(Emitter);
    module.exports = TransloaditAssembly;
        SRTlib.send('], "end": "emptyKey340"},');

  }, {
    "./../../utils/lib/hasProperty": 339,
    "./parseUrl": 312,
    "component-emitter": 55,
    "socket.io-client": 199
  }],
  308: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey341", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function validateParams(params) {
            SRTlib.send(`{ "anonymous": false, "function": "validateParams", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!params) {
                SRTlib.send('], "end": "validateParams"},');

        throw new Error('Transloadit: The `params` option is required.');
      }
      if (typeof params === 'string') {
        try {
          params = JSON.parse(params);
        } catch (err) {
          err.message = 'Transloadit: The `params` option is a malformed JSON string: ' + err.message;
                    SRTlib.send('], "end": "validateParams"},');

          throw err;
        }
      }
      if (!params.auth || !params.auth.key) {
                SRTlib.send('], "end": "validateParams"},');

        throw new Error('Transloadit: The `params.auth.key` option is required. ' + 'You can find your Transloadit API key at https://transloadit.com/account/api-settings.');
      }
            SRTlib.send('], "end": "validateParams"},');

    }
    var AssemblyOptions = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function AssemblyOptions(files, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "AssemblyOptions", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.files = files;
        this.opts = opts;
                SRTlib.send('], "end": "AssemblyOptions"},');

      }
      var _proto = AssemblyOptions.prototype;
      _proto._normalizeAssemblyOptions = function _normalizeAssemblyOptions(file, assemblyOptions) {
                SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._normalizeAssemblyOptions._normalizeAssemblyOptions2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (Array.isArray(assemblyOptions.fields)) {
          var fieldNames = assemblyOptions.fields;
          assemblyOptions.fields = {};
          fieldNames.forEach(function (fieldName) {
                        SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._normalizeAssemblyOptions._normalizeAssemblyOptions", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            assemblyOptions.fields[fieldName] = file.meta[fieldName];
                        SRTlib.send('], "end": "AssemblyOptions._proto._normalizeAssemblyOptions._normalizeAssemblyOptions"},');

          });
        }
        if (!assemblyOptions.fields) {
          assemblyOptions.fields = {};
        }
                SRTlib.send('], "end": "AssemblyOptions._proto._normalizeAssemblyOptions._normalizeAssemblyOptions2"},');

        return assemblyOptions;
                SRTlib.send('], "end": "AssemblyOptions._proto._normalizeAssemblyOptions._normalizeAssemblyOptions2"},');

      };
      _proto._getAssemblyOptions = function _getAssemblyOptions(file) {
                SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this = this;
        var options = this.opts;
                SRTlib.send('], "end": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions"},');

        return Promise.resolve().then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then.then.then.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then.then.then.then"},');

          return options.getAssemblyOptions(file, options);
                    SRTlib.send('], "end": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then.then.then.then"},');

        }).then(function (assemblyOptions) {
                    SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then.then.then"},');

          return _this._normalizeAssemblyOptions(file, assemblyOptions);
                    SRTlib.send('], "end": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then.then.then"},');

        }).then(function (assemblyOptions) {
                    SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          validateParams(assemblyOptions.params);
                    SRTlib.send('], "end": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then"},');

          return {
            fileIDs: [file.id],
            options: assemblyOptions
          };
                    SRTlib.send('], "end": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions.ReturnStatement.then.then.then"},');

        });
                SRTlib.send('], "end": "AssemblyOptions._proto._getAssemblyOptions._getAssemblyOptions"},');

      };
      _proto._dedupe = function _dedupe(list) {
                SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._dedupe._dedupe2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var dedupeMap = Object.create(null);
        list.forEach(function (_ref) {
                    SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._dedupe._dedupe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var fileIDs = _ref.fileIDs, options = _ref.options;
          var id = JSON.stringify(options);
          if (dedupeMap[id]) {
            var _dedupeMap$id$fileIDs;
            (_dedupeMap$id$fileIDs = dedupeMap[id].fileIDs).push.apply(_dedupeMap$id$fileIDs, fileIDs);
          } else {
            dedupeMap[id] = {
              options: options,
              fileIDs: [].concat(fileIDs)
            };
          }
                    SRTlib.send('], "end": "AssemblyOptions._proto._dedupe._dedupe"},');

        });
                SRTlib.send('], "end": "AssemblyOptions._proto._dedupe._dedupe2"},');

        return Object.keys(dedupeMap).map(function (id) {
                    SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto._dedupe._dedupe.ReturnStatement.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "AssemblyOptions._proto._dedupe._dedupe.ReturnStatement.map"},');

          return dedupeMap[id];
                    SRTlib.send('], "end": "AssemblyOptions._proto._dedupe._dedupe.ReturnStatement.map"},');

        });
                SRTlib.send('], "end": "AssemblyOptions._proto._dedupe._dedupe2"},');

      };
      _proto.build = function build() {
                SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto.build.build", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this2 = this;
        var options = this.opts;
        if (this.files.length > 0) {
                    SRTlib.send('], "end": "AssemblyOptions._proto.build.build"},');

          return Promise.all(this.files.map(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto.build.build.ReturnStatement.then.files.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "AssemblyOptions._proto.build.build.ReturnStatement.then.files.map"},');

            return _this2._getAssemblyOptions(file);
                        SRTlib.send('], "end": "AssemblyOptions._proto.build.build.ReturnStatement.then.files.map"},');

          })).then(function (list) {
                        SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto.build.build.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "AssemblyOptions._proto.build.build.ReturnStatement.then"},');

            return _this2._dedupe(list);
                        SRTlib.send('], "end": "AssemblyOptions._proto.build.build.ReturnStatement.then"},');

          });
        }
        if (options.alwaysRunAssembly) {
                    SRTlib.send('], "end": "AssemblyOptions._proto.build.build"},');

          return Promise.resolve(options.getAssemblyOptions(null, options)).then(function (assemblyOptions) {
                        SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto.build.build.ReturnStatement.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            validateParams(assemblyOptions.params);
                        SRTlib.send('], "end": "AssemblyOptions._proto.build.build.ReturnStatement.then2"},');

            return [{
              fileIDs: _this2.files.map(function (file) {
                                SRTlib.send(`{ "anonymous": true, "function": "AssemblyOptions._proto.build.build.ReturnStatement.then.ReturnStatement.fileIDs._this2.files.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "AssemblyOptions._proto.build.build.ReturnStatement.then.ReturnStatement.fileIDs._this2.files.map"},');

                return file.id;
                                SRTlib.send('], "end": "AssemblyOptions._proto.build.build.ReturnStatement.then.ReturnStatement.fileIDs._this2.files.map"},');

              }),
              options: assemblyOptions
            }];
                        SRTlib.send('], "end": "AssemblyOptions._proto.build.build.ReturnStatement.then2"},');

          });
        }
                SRTlib.send('], "end": "AssemblyOptions._proto.build.build"},');

        return Promise.resolve([]);
                SRTlib.send('], "end": "AssemblyOptions._proto.build.build"},');

      };
            SRTlib.send('], "end": "AssemblyOptions"},');

      return AssemblyOptions;
            SRTlib.send('], "end": "AssemblyOptions"},');

    })();
    module.exports = AssemblyOptions;
    module.exports.validateParams = validateParams;
        SRTlib.send('], "end": "emptyKey341"},');

  }, {}],
  309: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey342", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var Emitter = require('component-emitter');
    var TransloaditAssemblyWatcher = (function (_Emitter) {
            SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(TransloaditAssemblyWatcher, _Emitter);
      function TransloaditAssemblyWatcher(uppy, assemblyIDs) {
                SRTlib.send(`{ "anonymous": false, "function": "TransloaditAssemblyWatcher", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Emitter.call(this) || this;
        _this._uppy = uppy;
        _this._assemblyIDs = assemblyIDs;
        _this._remaining = assemblyIDs.length;
        _this.promise = new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.promise", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this._resolve = resolve;
          _this._reject = reject;
                    SRTlib.send('], "end": "_this.promise"},');

        });
        _this._onAssemblyComplete = _this._onAssemblyComplete.bind(_assertThisInitialized(_this));
        _this._onAssemblyCancel = _this._onAssemblyCancel.bind(_assertThisInitialized(_this));
        _this._onAssemblyError = _this._onAssemblyError.bind(_assertThisInitialized(_this));
        _this._onImportError = _this._onImportError.bind(_assertThisInitialized(_this));
        _this._addListeners();
                SRTlib.send('], "end": "TransloaditAssemblyWatcher"},');

        return _this;
                SRTlib.send('], "end": "TransloaditAssemblyWatcher"},');

      }
      var _proto = TransloaditAssemblyWatcher.prototype;
      _proto._watching = function _watching(id) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher._proto._watching._watching", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._watching._watching"},');

        return this._assemblyIDs.indexOf(id) !== -1;
                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._watching._watching"},');

      };
      _proto._onAssemblyComplete = function _onAssemblyComplete(assembly) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher._proto._onAssemblyComplete._onAssemblyComplete", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!this._watching(assembly.assembly_id)) {
                    SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._onAssemblyComplete._onAssemblyComplete"},');

          return;
        }
        this._uppy.log("[Transloadit] AssemblyWatcher: Got Assembly finish " + assembly.assembly_id);
        this.emit('assembly-complete', assembly.assembly_id);
        this._checkAllComplete();
                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._onAssemblyComplete._onAssemblyComplete"},');

      };
      _proto._onAssemblyCancel = function _onAssemblyCancel(assembly) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher._proto._onAssemblyCancel._onAssemblyCancel", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!this._watching(assembly.assembly_id)) {
                    SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._onAssemblyCancel._onAssemblyCancel"},');

          return;
        }
        this._checkAllComplete();
                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._onAssemblyCancel._onAssemblyCancel"},');

      };
      _proto._onAssemblyError = function _onAssemblyError(assembly, error) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher._proto._onAssemblyError._onAssemblyError", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!this._watching(assembly.assembly_id)) {
                    SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._onAssemblyError._onAssemblyError"},');

          return;
        }
        this._uppy.log("[Transloadit] AssemblyWatcher: Got Assembly error " + assembly.assembly_id);
        this._uppy.log(error);
        this.emit('assembly-error', assembly.assembly_id, error);
        this._checkAllComplete();
                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._onAssemblyError._onAssemblyError"},');

      };
      _proto._onImportError = function _onImportError(assembly, fileID, error) {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher._proto._onImportError._onImportError", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (!this._watching(assembly.assembly_id)) {
                    SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._onImportError._onImportError"},');

          return;
        }
        this._onAssemblyError(assembly, error);
                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._onImportError._onImportError"},');

      };
      _proto._checkAllComplete = function _checkAllComplete() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher._proto._checkAllComplete._checkAllComplete", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this._remaining -= 1;
        if (this._remaining === 0) {
          this._removeListeners();
          this._resolve();
        }
                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._checkAllComplete._checkAllComplete"},');

      };
      _proto._removeListeners = function _removeListeners() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher._proto._removeListeners._removeListeners", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this._uppy.off('transloadit:complete', this._onAssemblyComplete);
        this._uppy.off('transloadit:assembly-cancel', this._onAssemblyCancel);
        this._uppy.off('transloadit:assembly-error', this._onAssemblyError);
        this._uppy.off('transloadit:import-error', this._onImportError);
                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._removeListeners._removeListeners"},');

      };
      _proto._addListeners = function _addListeners() {
                SRTlib.send(`{ "anonymous": true, "function": "TransloaditAssemblyWatcher._proto._addListeners._addListeners", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this._uppy.on('transloadit:complete', this._onAssemblyComplete);
        this._uppy.on('transloadit:assembly-cancel', this._onAssemblyCancel);
        this._uppy.on('transloadit:assembly-error', this._onAssemblyError);
        this._uppy.on('transloadit:import-error', this._onImportError);
                SRTlib.send('], "end": "TransloaditAssemblyWatcher._proto._addListeners._addListeners"},');

      };
            SRTlib.send('], "end": "TransloaditAssemblyWatcher"},');

      return TransloaditAssemblyWatcher;
            SRTlib.send('], "end": "TransloaditAssemblyWatcher"},');

    })(Emitter);
    module.exports = TransloaditAssemblyWatcher;
        SRTlib.send('], "end": "emptyKey342"},');

  }, {
    "component-emitter": 55
  }],
  310: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey343", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports33", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function Client(opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Client", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (opts === void 0) {
          opts = {};
        }
        this.opts = opts;
        this._reportError = this._reportError.bind(this);
        this._headers = {
          'Transloadit-Client': this.opts.client
        };
                SRTlib.send('], "end": "Client"},');

      }
      var _proto = Client.prototype;
      _proto.createAssembly = function createAssembly(_ref) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.createAssembly.createAssembly", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this = this;
        var templateId = _ref.templateId, params = _ref.params, fields = _ref.fields, signature = _ref.signature, expectedFiles = _ref.expectedFiles;
        var data = new FormData();
        data.append('params', typeof params === 'string' ? params : JSON.stringify(params));
        if (signature) {
          data.append('signature', signature);
        }
        Object.keys(fields).forEach(function (key) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.createAssembly.createAssembly.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          data.append(key, fields[key]);
                    SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly.forEach"},');

        });
        data.append('num_expected_upload_files', expectedFiles);
        var url = this.opts.service + "/assemblies";
                SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly"},');

        return fetch(url, {
          method: 'post',
          headers: this._headers,
          body: data
        }).then(function (response) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then.then"},');

          return response.json();
                    SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then.then"},');

        }).then(function (assembly) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (assembly.error) {
            var error = new Error(assembly.error);
            error.details = assembly.message;
            error.assembly = assembly;
            if (assembly.assembly_id) {
              error.details += ' ' + ("Assembly ID: " + assembly.assembly_id);
            }
                        SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then"},');

            throw error;
          }
                    SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then"},');

          return assembly;
                    SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch"},');

          return _this._reportError(err, {
            url: url,
            type: 'API_ERROR'
          });
                    SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly.ReturnStatement.then.then.catch"},');

        });
                SRTlib.send('], "end": "module.exports._proto.createAssembly.createAssembly"},');

      };
      _proto.reserveFile = function reserveFile(assembly, file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.reserveFile.reserveFile", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this2 = this;
        var size = encodeURIComponent(file.size);
        var url = assembly.assembly_ssl_url + "/reserve_file?size=" + size;
                SRTlib.send('], "end": "module.exports._proto.reserveFile.reserveFile"},');

        return fetch(url, {
          method: 'post',
          headers: this._headers
        }).then(function (response) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.reserveFile.reserveFile.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.reserveFile.reserveFile.ReturnStatement.then.catch.then"},');

          return response.json();
                    SRTlib.send('], "end": "module.exports._proto.reserveFile.reserveFile.ReturnStatement.then.catch.then"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.reserveFile.reserveFile.ReturnStatement.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.reserveFile.reserveFile.ReturnStatement.then.catch"},');

          return _this2._reportError(err, {
            assembly: assembly,
            file: file,
            url: url,
            type: 'API_ERROR'
          });
                    SRTlib.send('], "end": "module.exports._proto.reserveFile.reserveFile.ReturnStatement.then.catch"},');

        });
                SRTlib.send('], "end": "module.exports._proto.reserveFile.reserveFile"},');

      };
      _proto.addFile = function addFile(assembly, file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.addFile.addFile", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this3 = this;
        if (!file.uploadURL) {
                    SRTlib.send('], "end": "module.exports._proto.addFile.addFile"},');

          return Promise.reject(new Error('File does not have an `uploadURL`.'));
        }
        var size = encodeURIComponent(file.size);
        var uploadUrl = encodeURIComponent(file.uploadURL);
        var filename = encodeURIComponent(file.name);
        var fieldname = 'file';
        var qs = "size=" + size + "&filename=" + filename + "&fieldname=" + fieldname + "&s3Url=" + uploadUrl;
        var url = assembly.assembly_ssl_url + "/add_file?" + qs;
                SRTlib.send('], "end": "module.exports._proto.addFile.addFile"},');

        return fetch(url, {
          method: 'post',
          headers: this._headers
        }).then(function (response) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.addFile.addFile.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.addFile.addFile.ReturnStatement.then.catch.then"},');

          return response.json();
                    SRTlib.send('], "end": "module.exports._proto.addFile.addFile.ReturnStatement.then.catch.then"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.addFile.addFile.ReturnStatement.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.addFile.addFile.ReturnStatement.then.catch"},');

          return _this3._reportError(err, {
            assembly: assembly,
            file: file,
            url: url,
            type: 'API_ERROR'
          });
                    SRTlib.send('], "end": "module.exports._proto.addFile.addFile.ReturnStatement.then.catch"},');

        });
                SRTlib.send('], "end": "module.exports._proto.addFile.addFile"},');

      };
      _proto.cancelAssembly = function cancelAssembly(assembly) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.cancelAssembly.cancelAssembly", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this4 = this;
        var url = assembly.assembly_ssl_url;
                SRTlib.send('], "end": "module.exports._proto.cancelAssembly.cancelAssembly"},');

        return fetch(url, {
          method: 'delete',
          headers: this._headers
        }).then(function (response) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.cancelAssembly.cancelAssembly.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.cancelAssembly.cancelAssembly.ReturnStatement.then.catch.then"},');

          return response.json();
                    SRTlib.send('], "end": "module.exports._proto.cancelAssembly.cancelAssembly.ReturnStatement.then.catch.then"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.cancelAssembly.cancelAssembly.ReturnStatement.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.cancelAssembly.cancelAssembly.ReturnStatement.then.catch"},');

          return _this4._reportError(err, {
            url: url,
            type: 'API_ERROR'
          });
                    SRTlib.send('], "end": "module.exports._proto.cancelAssembly.cancelAssembly.ReturnStatement.then.catch"},');

        });
                SRTlib.send('], "end": "module.exports._proto.cancelAssembly.cancelAssembly"},');

      };
      _proto.getAssemblyStatus = function getAssemblyStatus(url) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.getAssemblyStatus.getAssemblyStatus", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this5 = this;
                SRTlib.send('], "end": "module.exports._proto.getAssemblyStatus.getAssemblyStatus"},');

        return fetch(url, {
          headers: this._headers
        }).then(function (response) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.getAssemblyStatus.getAssemblyStatus.ReturnStatement.then.catch.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.getAssemblyStatus.getAssemblyStatus.ReturnStatement.then.catch.then"},');

          return response.json();
                    SRTlib.send('], "end": "module.exports._proto.getAssemblyStatus.getAssemblyStatus.ReturnStatement.then.catch.then"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.getAssemblyStatus.getAssemblyStatus.ReturnStatement.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.getAssemblyStatus.getAssemblyStatus.ReturnStatement.then.catch"},');

          return _this5._reportError(err, {
            url: url,
            type: 'STATUS_ERROR'
          });
                    SRTlib.send('], "end": "module.exports._proto.getAssemblyStatus.getAssemblyStatus.ReturnStatement.then.catch"},');

        });
                SRTlib.send('], "end": "module.exports._proto.getAssemblyStatus.getAssemblyStatus"},');

      };
      _proto.submitError = function submitError(err, _ref2) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.submitError.submitError", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var endpoint = _ref2.endpoint, instance = _ref2.instance, assembly = _ref2.assembly;
        var message = err.details ? err.message + " (" + err.details + ")" : err.message;
                SRTlib.send('], "end": "module.exports._proto.submitError.submitError"},');

        return fetch('https://status.transloadit.com/client_error', {
          method: 'post',
          body: JSON.stringify({
            endpoint: endpoint,
            instance: instance,
            assembly_id: assembly,
            agent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
            client: this.opts.client,
            error: message
          })
        }).then(function (response) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.submitError.submitError.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto.submitError.submitError.ReturnStatement.then"},');

          return response.json();
                    SRTlib.send('], "end": "module.exports._proto.submitError.submitError.ReturnStatement.then"},');

        });
                SRTlib.send('], "end": "module.exports._proto.submitError.submitError"},');

      };
      _proto._reportError = function _reportError(err, params) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._reportError._reportError", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (this.opts.errorReporting === false) {
                    SRTlib.send('], "end": "module.exports._proto._reportError._reportError"},');

          throw err;
        }
        var opts = {
          type: params.type
        };
        if (params.assembly) {
          opts.assembly = params.assembly.assembly_id;
          opts.instance = params.assembly.instance;
        }
        if (params.url) {
          opts.endpoint = params.url;
        }
        this.submitError(err, opts).catch(function (_) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._reportError._reportError.submitError.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto._reportError._reportError.submitError.catch"},');

        });
                SRTlib.send('], "end": "module.exports._proto._reportError._reportError"},');

        throw err;
                SRTlib.send('], "end": "module.exports._proto._reportError._reportError"},');

      };
            SRTlib.send('], "end": "module.exports33"},');

      return Client;
            SRTlib.send('], "end": "module.exports33"},');

    })();
        SRTlib.send('], "end": "emptyKey343"},');

  }, {}],
  311: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey344", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends20", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends20"},');

        return target;
                SRTlib.send('], "end": "_extends20"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var Translator = require('./../../utils/lib/Translator');
    var hasProperty = require('./../../utils/lib/hasProperty');
    var _require = require('./../../core'), Plugin = _require.Plugin;
    var Tus = require('./../../tus');
    var Assembly = require('./Assembly');
    var Client = require('./Client');
    var AssemblyOptions = require('./AssemblyOptions');
    var AssemblyWatcher = require('./AssemblyWatcher');
    function defaultGetAssemblyOptions(file, options) {
            SRTlib.send(`{ "anonymous": false, "function": "defaultGetAssemblyOptions", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "defaultGetAssemblyOptions"},');

      return {
        params: options.params,
        signature: options.signature,
        fields: options.fields
      };
            SRTlib.send('], "end": "defaultGetAssemblyOptions"},');

    }
    var COMPANION = 'https://api2.transloadit.com/companion';
    var ALLOWED_COMPANION_PATTERN = /\.transloadit\.com$/;
    var TL_COMPANION = /https?:\/\/api2(?:-\w+)?\.transloadit\.com\/companion/;
    var TL_UPPY_SERVER = /https?:\/\/api2(?:-\w+)?\.transloadit\.com\/uppy-server/;
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class9", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Transloadit, _Plugin);
      function Transloadit(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Transloadit", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, opts) || this;
        _this.type = 'uploader';
        _this.id = _this.opts.id || 'Transloadit';
        _this.title = 'Transloadit';
        _this.defaultLocale = {
          strings: {
            creatingAssembly: 'Preparing upload...',
            creatingAssemblyFailed: 'Transloadit: Could not create Assembly',
            encoding: 'Encoding...'
          }
        };
        var defaultOptions = {
          service: 'https://api2.transloadit.com',
          errorReporting: true,
          waitForEncoding: false,
          waitForMetadata: false,
          alwaysRunAssembly: false,
          importFromUploadURLs: false,
          signature: null,
          params: null,
          fields: {},
          getAssemblyOptions: defaultGetAssemblyOptions,
          limit: 0
        };
        _this.opts = _extends({}, defaultOptions, {}, opts);
        _this.i18nInit();
        _this._prepareUpload = _this._prepareUpload.bind(_assertThisInitialized(_this));
        _this._afterUpload = _this._afterUpload.bind(_assertThisInitialized(_this));
        _this._onError = _this._onError.bind(_assertThisInitialized(_this));
        _this._onTusError = _this._onTusError.bind(_assertThisInitialized(_this));
        _this._onCancelAll = _this._onCancelAll.bind(_assertThisInitialized(_this));
        _this._onFileUploadURLAvailable = _this._onFileUploadURLAvailable.bind(_assertThisInitialized(_this));
        _this._onRestored = _this._onRestored.bind(_assertThisInitialized(_this));
        _this._getPersistentData = _this._getPersistentData.bind(_assertThisInitialized(_this));
        var hasCustomAssemblyOptions = _this.opts.getAssemblyOptions !== defaultOptions.getAssemblyOptions;
        if (_this.opts.params) {
          AssemblyOptions.validateParams(_this.opts.params);
        } else if (!hasCustomAssemblyOptions) {
          AssemblyOptions.validateParams(null);
        }
        _this.client = new Client({
          service: _this.opts.service,
          client: _this._getClientVersion(),
          errorReporting: _this.opts.errorReporting
        });
        _this.activeAssemblies = {};
        _this.assemblyWatchers = {};
        _this.completedFiles = Object.create(null);
                SRTlib.send('], "end": "Transloadit"},');

        return _this;
                SRTlib.send('], "end": "Transloadit"},');

      }
      var _proto = Transloadit.prototype;
      _proto.setOptions = function setOptions(newOpts) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.setOptions.setOptions3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        _Plugin.prototype.setOptions.call(this, newOpts);
        this.i18nInit();
                SRTlib.send('], "end": "module.exports._temp._class._proto.setOptions.setOptions3"},');

      };
      _proto.i18nInit = function i18nInit() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.i18nInit.i18nInit3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);
        this.i18n = this.translator.translate.bind(this.translator);
        this.i18nArray = this.translator.translateArray.bind(this.translator);
        this.setPluginState();
                SRTlib.send('], "end": "module.exports._temp._class._proto.i18nInit.i18nInit3"},');

      };
      _proto._getClientVersion = function _getClientVersion() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getClientVersion._getClientVersion", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this2 = this;
        var list = ["uppy-core:" + this.uppy.constructor.VERSION, "uppy-transloadit:" + this.constructor.VERSION, "uppy-tus:" + Tus.VERSION];
        var addPluginVersion = function addPluginVersion(pluginName, versionName) {
                    SRTlib.send(`{ "anonymous": false, "function": "addPluginVersion", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var plugin = _this2.uppy.getPlugin(pluginName);
          if (plugin) {
            list.push(versionName + ":" + plugin.constructor.VERSION);
          }
                    SRTlib.send('], "end": "addPluginVersion"},');

        };
        if (this.opts.importFromUploadURLs) {
          addPluginVersion('XHRUpload', 'uppy-xhr-upload');
          addPluginVersion('AwsS3', 'uppy-aws-s3');
          addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart');
        }
        addPluginVersion('Dropbox', 'uppy-dropbox');
        addPluginVersion('Facebook', 'uppy-facebook');
        addPluginVersion('GoogleDrive', 'uppy-google-drive');
        addPluginVersion('Instagram', 'uppy-instagram');
        addPluginVersion('OneDrive', 'uppy-onedrive');
        addPluginVersion('Url', 'uppy-url');
                SRTlib.send('], "end": "module.exports._temp._class._proto._getClientVersion._getClientVersion"},');

        return list.join(',');
                SRTlib.send('], "end": "module.exports._temp._class._proto._getClientVersion._getClientVersion"},');

      };
      _proto._attachAssemblyMetadata = function _attachAssemblyMetadata(file, status) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._attachAssemblyMetadata._attachAssemblyMetadata", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var meta = _extends({}, file.meta, {
          assembly_url: status.assembly_url,
          filename: file.name,
          fieldname: 'file'
        });
        var tus = _extends({}, file.tus, {
          endpoint: status.tus_url
        });
        var remote = file.remote;
        if (file.remote && TL_UPPY_SERVER.test(file.remote.companionUrl)) {
          var err = new Error('The https://api2.transloadit.com/uppy-server endpoint was renamed to ' + 'https://api2.transloadit.com/companion, please update your `companionUrl` ' + 'options accordingly.');
          this.uppy.log(err);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._attachAssemblyMetadata._attachAssemblyMetadata"},');

          throw err;
        }
        if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {
          var newHost = status.companion_url.replace(/\/$/, '');
          var path = file.remote.url.replace(file.remote.companionUrl, '').replace(/^\//, '');
          remote = _extends({}, file.remote, {
            companionUrl: newHost,
            url: newHost + "/" + path
          });
        }
        var newFile = _extends({}, file, {
          transloadit: {
            assembly: status.assembly_id
          }
        });
        if (!this.opts.importFromUploadURLs) {
          _extends(newFile, {
            meta: meta,
            tus: tus,
            remote: remote
          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto._attachAssemblyMetadata._attachAssemblyMetadata"},');

        return newFile;
                SRTlib.send('], "end": "module.exports._temp._class._proto._attachAssemblyMetadata._attachAssemblyMetadata"},');

      };
      _proto._createAssembly = function _createAssembly(fileIDs, uploadID, options) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssembly._createAssembly", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var _this3 = this;
        this.uppy.log('[Transloadit] Create Assembly');
                SRTlib.send('], "end": "module.exports._temp._class._proto._createAssembly._createAssembly"},');

        return this.client.createAssembly({
          params: options.params,
          fields: options.fields,
          expectedFiles: fileIDs.length,
          signature: options.signature
        }).then(function (newAssembly) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssembly._createAssembly.ReturnStatement.client.createAssembly.then.catch.client.createAssembly.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _extends2, _extends3;
          var assembly = new Assembly(newAssembly);
          var status = assembly.status;
          var assemblyID = status.assembly_id;
          var _this3$getPluginState = _this3.getPluginState(), assemblies = _this3$getPluginState.assemblies, uploadsAssemblies = _this3$getPluginState.uploadsAssemblies;
          _this3.setPluginState({
            assemblies: _extends({}, assemblies, (_extends2 = {}, _extends2[assemblyID] = status, _extends2)),
            uploadsAssemblies: _extends({}, uploadsAssemblies, (_extends3 = {}, _extends3[uploadID] = [].concat(uploadsAssemblies[uploadID], [assemblyID]), _extends3))
          });
          var _this3$uppy$getState = _this3.uppy.getState(), files = _this3$uppy$getState.files;
          var updatedFiles = {};
          fileIDs.forEach(function (id) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssembly._createAssembly.ReturnStatement.client.createAssembly.then.catch.client.createAssembly.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            updatedFiles[id] = _this3._attachAssemblyMetadata(_this3.uppy.getFile(id), status);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._createAssembly._createAssembly.ReturnStatement.client.createAssembly.then.catch.client.createAssembly.then"},');

          });
          _this3.uppy.setState({
            files: _extends({}, files, {}, updatedFiles)
          });
          _this3.uppy.emit('transloadit:assembly-created', status, fileIDs);
          _this3.uppy.log("[Transloadit] Created Assembly " + assemblyID);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._createAssembly._createAssembly.ReturnStatement.client.createAssembly.then.catch.client.createAssembly.then2"},');

          return assembly;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._createAssembly._createAssembly.ReturnStatement.client.createAssembly.then.catch.client.createAssembly.then2"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssembly._createAssembly.ReturnStatement.client.createAssembly.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          err.message = _this3.i18n('creatingAssemblyFailed') + ": " + err.message;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._createAssembly._createAssembly.ReturnStatement.client.createAssembly.then.catch"},');

          throw err;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._createAssembly._createAssembly.ReturnStatement.client.createAssembly.then.catch"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._createAssembly._createAssembly"},');

      };
      _proto._createAssemblyWatcher = function _createAssemblyWatcher(assemblyID, fileIDs, uploadID) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher5", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var _this4 = this;
        var watcher = new AssemblyWatcher(this.uppy, assemblyID);
        watcher.on('assembly-complete', function (id) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var files = _this4.getAssemblyFiles(id);
          files.forEach(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this4.completedFiles[file.id] = true;
            _this4.uppy.emit('postprocess-complete', file);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher2"},');

        });
        watcher.on('assembly-error', function (id, error) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher4", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var files = _this4.getAssemblyFiles(id);
          files.forEach(function (file) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this4.uppy.emit('upload-error', file, error);
            _this4.uppy.emit('postprocess-complete', file);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher3"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher4"},');

        });
        this.assemblyWatchers[uploadID] = watcher;
                SRTlib.send('], "end": "module.exports._temp._class._proto._createAssemblyWatcher._createAssemblyWatcher5"},');

      };
      _proto._shouldWaitAfterUpload = function _shouldWaitAfterUpload() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._shouldWaitAfterUpload._shouldWaitAfterUpload", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._temp._class._proto._shouldWaitAfterUpload._shouldWaitAfterUpload"},');

        return this.opts.waitForEncoding || this.opts.waitForMetadata;
                SRTlib.send('], "end": "module.exports._temp._class._proto._shouldWaitAfterUpload._shouldWaitAfterUpload"},');

      };
      _proto._reserveFiles = function _reserveFiles(assembly, fileIDs) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._reserveFiles._reserveFiles", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this5 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto._reserveFiles._reserveFiles"},');

        return Promise.all(fileIDs.map(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._reserveFiles._reserveFiles.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var file = _this5.uppy.getFile(fileID);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._reserveFiles._reserveFiles.ReturnStatement"},');

          return _this5.client.reserveFile(assembly, file);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._reserveFiles._reserveFiles.ReturnStatement"},');

        }));
                SRTlib.send('], "end": "module.exports._temp._class._proto._reserveFiles._reserveFiles"},');

      };
      _proto._onFileUploadURLAvailable = function _onFileUploadURLAvailable(file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onFileUploadURLAvailable._onFileUploadURLAvailable", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this6 = this;
        if (!file || !file.transloadit || !file.transloadit.assembly) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onFileUploadURLAvailable._onFileUploadURLAvailable"},');

          return;
        }
        var _this$getPluginState = this.getPluginState(), assemblies = _this$getPluginState.assemblies;
        var assembly = assemblies[file.transloadit.assembly];
        this.client.addFile(assembly, file).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onFileUploadURLAvailable._onFileUploadURLAvailable.client.addFile.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this6.uppy.log(err);
          _this6.uppy.emit('transloadit:import-error', assembly, file.id, err);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onFileUploadURLAvailable._onFileUploadURLAvailable.client.addFile.catch"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._onFileUploadURLAvailable._onFileUploadURLAvailable"},');

      };
      _proto._findFile = function _findFile(uploadedFile) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._findFile._findFile", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var files = this.uppy.getFiles();
        for (var i = 0; i < files.length; i++) {
          var file = files[i];
          if (file.uploadURL === uploadedFile.tus_upload_url) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto._findFile._findFile"},');

            return file;
          }
          if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto._findFile._findFile"},');

            return file;
          }
          if (!uploadedFile.is_tus_file) {
            if (file.name === uploadedFile.name && file.size === uploadedFile.size) {
                            SRTlib.send('], "end": "module.exports._temp._class._proto._findFile._findFile"},');

              return file;
            }
          }
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto._findFile._findFile"},');

      };
      _proto._onFileUploadComplete = function _onFileUploadComplete(assemblyId, uploadedFile) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onFileUploadComplete._onFileUploadComplete", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _extends4;
        var state = this.getPluginState();
        var file = this._findFile(uploadedFile);
        if (!file) {
          this.uppy.log('[Transloadit] Couldn’t file the file, it was likely removed in the process');
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onFileUploadComplete._onFileUploadComplete"},');

          return;
        }
        this.setPluginState({
          files: _extends({}, state.files, (_extends4 = {}, _extends4[uploadedFile.id] = {
            assembly: assemblyId,
            id: file.id,
            uploadedFile: uploadedFile
          }, _extends4))
        });
        this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId));
                SRTlib.send('], "end": "module.exports._temp._class._proto._onFileUploadComplete._onFileUploadComplete"},');

      };
      _proto._onResult = function _onResult(assemblyId, stepName, result) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onResult._onResult", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var state = this.getPluginState();
        var file = state.files[result.original_id];
        result.localId = file ? file.id : null;
        var entry = {
          result: result,
          stepName: stepName,
          id: result.id,
          assembly: assemblyId
        };
        this.setPluginState({
          results: [].concat(state.results, [entry])
        });
        this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId));
                SRTlib.send('], "end": "module.exports._temp._class._proto._onResult._onResult"},');

      };
      _proto._onAssemblyFinished = function _onAssemblyFinished(status) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onAssemblyFinished._onAssemblyFinished", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this7 = this;
        var url = status.assembly_ssl_url;
        this.client.getAssemblyStatus(url).then(function (finalStatus) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onAssemblyFinished._onAssemblyFinished.client.getAssemblyStatus.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _extends5;
          var assemblyId = finalStatus.assembly_id;
          var state = _this7.getPluginState();
          _this7.setPluginState({
            assemblies: _extends({}, state.assemblies, (_extends5 = {}, _extends5[assemblyId] = finalStatus, _extends5))
          });
          _this7.uppy.emit('transloadit:complete', finalStatus);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onAssemblyFinished._onAssemblyFinished.client.getAssemblyStatus.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._onAssemblyFinished._onAssemblyFinished"},');

      };
      _proto._cancelAssembly = function _cancelAssembly(assembly) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._cancelAssembly._cancelAssembly", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this8 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto._cancelAssembly._cancelAssembly"},');

        return this.client.cancelAssembly(assembly).then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._cancelAssembly._cancelAssembly.ReturnStatement.client.cancelAssembly.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this8.uppy.emit('transloadit:assembly-cancelled', assembly);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._cancelAssembly._cancelAssembly.ReturnStatement.client.cancelAssembly.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._cancelAssembly._cancelAssembly"},');

      };
      _proto._onCancelAll = function _onCancelAll() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onCancelAll._onCancelAll", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this9 = this;
        var _this$getPluginState2 = this.getPluginState(), uploadsAssemblies = _this$getPluginState2.uploadsAssemblies;
        var assemblyIDs = Object.keys(uploadsAssemblies).reduce(function (acc, uploadID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onCancelAll._onCancelAll.assemblyIDs.reduce", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          acc.push.apply(acc, uploadsAssemblies[uploadID]);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onCancelAll._onCancelAll.assemblyIDs.reduce"},');

          return acc;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onCancelAll._onCancelAll.assemblyIDs.reduce"},');

        }, []);
        var cancelPromises = assemblyIDs.map(function (assemblyID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onCancelAll._onCancelAll.cancelPromises", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var assembly = _this9.getAssembly(assemblyID);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onCancelAll._onCancelAll.cancelPromises"},');

          return _this9._cancelAssembly(assembly);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onCancelAll._onCancelAll.cancelPromises"},');

        });
        Promise.all(cancelPromises).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onCancelAll._onCancelAll.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this9.uppy.log(err);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onCancelAll._onCancelAll.catch"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._onCancelAll._onCancelAll"},');

      };
      _proto._getPersistentData = function _getPersistentData(setData) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getPersistentData._getPersistentData", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _setData;
        var state = this.getPluginState();
        var assemblies = state.assemblies;
        var uploadsAssemblies = state.uploadsAssemblies;
        setData((_setData = {}, _setData[this.id] = {
          assemblies: assemblies,
          uploadsAssemblies: uploadsAssemblies
        }, _setData));
                SRTlib.send('], "end": "module.exports._temp._class._proto._getPersistentData._getPersistentData"},');

      };
      _proto._onRestored = function _onRestored(pluginData) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this10 = this;
        var savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {};
        var previousAssemblies = savedState.assemblies || ({});
        var uploadsAssemblies = savedState.uploadsAssemblies || ({});
        if (Object.keys(uploadsAssemblies).length === 0) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored"},');

          return;
        }
        var restoreState = function restoreState(assemblies) {
                    SRTlib.send(`{ "anonymous": false, "function": "restoreState", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var files = {};
          var results = [];
          Object.keys(assemblies).forEach(function (id) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restoreState.restoreState.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var status = assemblies[id];
            status.uploads.forEach(function (uploadedFile) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restoreState.restoreState.forEach.status.uploads.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var file = _this10._findFile(uploadedFile);
              files[uploadedFile.id] = {
                id: file.id,
                assembly: id,
                uploadedFile: uploadedFile
              };
                            SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreState.restoreState.forEach.status.uploads.forEach"},');

            });
            var state = _this10.getPluginState();
            Object.keys(status.results).forEach(function (stepName) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restoreState.restoreState.forEach.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              status.results[stepName].forEach(function (result) {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restoreState.restoreState.forEach.forEach.status.results.stepName.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                var file = state.files[result.original_id];
                result.localId = file ? file.id : null;
                results.push({
                  id: result.id,
                  result: result,
                  stepName: stepName,
                  assembly: id
                });
                                SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreState.restoreState.forEach.forEach.status.results.stepName.forEach"},');

              });
                            SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreState.restoreState.forEach.forEach"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreState.restoreState.forEach"},');

          });
          _this10.setPluginState({
            assemblies: assemblies,
            files: files,
            results: results,
            uploadsAssemblies: uploadsAssemblies
          });
                    SRTlib.send('], "end": "restoreState"},');

        };
        var restoreAssemblies = function restoreAssemblies() {
                    SRTlib.send(`{ "anonymous": false, "function": "restoreAssemblies", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this10$getPluginStat = _this10.getPluginState(), assemblies = _this10$getPluginStat.assemblies, uploadsAssemblies = _this10$getPluginStat.uploadsAssemblies;
          Object.keys(uploadsAssemblies).forEach(function (uploadID) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var assemblyIDs = uploadsAssemblies[uploadID];
            var fileIDsInUpload = assemblyIDs.reduce(function (acc, assemblyID) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies.forEach.fileIDsInUpload", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

              var fileIDsInAssembly = _this10.getAssemblyFiles(assemblyID).map(function (file) {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies.forEach.fileIDsInUpload.fileIDsInAssembly.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies.forEach.fileIDsInUpload.fileIDsInAssembly.map"},');

                return file.id;
                                SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies.forEach.fileIDsInUpload.fileIDsInAssembly.map"},');

              });
              acc.push.apply(acc, fileIDsInAssembly);
                            SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies.forEach.fileIDsInUpload"},');

              return acc;
                            SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies.forEach.fileIDsInUpload"},');

            }, []);
            _this10._createAssemblyWatcher(assemblyIDs, fileIDsInUpload, uploadID);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies.forEach"},');

          });
          var allAssemblyIDs = Object.keys(assemblies);
          allAssemblyIDs.forEach(function (id) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var assembly = new Assembly(assemblies[id]);
            _this10._connectAssembly(assembly);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restoreAssemblies.restoreAssemblies"},');

          });
                    SRTlib.send('], "end": "restoreAssemblies"},');

        };
        var updateAssemblies = function updateAssemblies() {
                    SRTlib.send(`{ "anonymous": false, "function": "updateAssemblies", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var _this10$getPluginStat2 = _this10.getPluginState(), assemblies = _this10$getPluginStat2.assemblies;
                    SRTlib.send('], "end": "updateAssemblies"},');

          return Promise.all(Object.keys(assemblies).map(function (id) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.updateAssemblies.updateAssemblies.ReturnStatement.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.updateAssemblies.updateAssemblies.ReturnStatement.map"},');

            return _this10.activeAssemblies[id].update();
                        SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.updateAssemblies.updateAssemblies.ReturnStatement.map"},');

          }));
                    SRTlib.send('], "end": "updateAssemblies"},');

        };
        this.restored = Promise.resolve().then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restored.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          restoreState(previousAssemblies);
          restoreAssemblies();
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restored.then"},');

          return updateAssemblies();
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restored.then"},');

        });
        this.restored.then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onRestored._onRestored.restored.then2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this10.restored = null;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored.restored.then2"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._onRestored._onRestored"},');

      };
      _proto._connectAssembly = function _connectAssembly(assembly) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this11 = this;
        var status = assembly.status;
        var id = status.assembly_id;
        this.activeAssemblies[id] = assembly;
        assembly.on('status', function (newStatus) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var _extends6;
          var _this11$getPluginStat = _this11.getPluginState(), assemblies = _this11$getPluginStat.assemblies;
          _this11.setPluginState({
            assemblies: _extends({}, assemblies, (_extends6 = {}, _extends6[id] = newStatus, _extends6))
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly"},');

        });
        assembly.on('upload', function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this11._onFileUploadComplete(id, file);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly2"},');

        });
        assembly.on('error', function (error) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          error.assembly = assembly.status;
          _this11.uppy.emit('transloadit:assembly-error', assembly.status, error);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly3"},');

        });
        assembly.on('executing', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this11.uppy.emit('transloadit:assembly-executing', assembly.status);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly4"},');

        });
        if (this.opts.waitForEncoding) {
          assembly.on('result', function (stepName, result) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly5", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            _this11._onResult(id, stepName, result);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly5"},');

          });
        }
        if (this.opts.waitForEncoding) {
          assembly.on('finished', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            _this11._onAssemblyFinished(assembly.status);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly6"},');

          });
        } else if (this.opts.waitForMetadata) {
          assembly.on('metadata', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly7", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            _this11._onAssemblyFinished(assembly.status);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly7"},');

          });
        }
        if (assembly.ok === 'ASSEMBLY_COMPLETE') {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly8"},');

          return assembly;
        }
        var connected = new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly.connected.then", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          assembly.once('connect', resolve);
          assembly.once('status', resolve);
          assembly.once('error', reject);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly.connected.then"},');

        }).then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._connectAssembly._connectAssembly.connected.then2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this11.uppy.log('[Transloadit] Socket is ready');
                    SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly.connected.then2"},');

        });
        assembly.connect();
                SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly8"},');

        return assembly;
                SRTlib.send('], "end": "module.exports._temp._class._proto._connectAssembly._connectAssembly8"},');

      };
      _proto._prepareUpload = function _prepareUpload(fileIDs, uploadID) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this12 = this, _extends7;
        fileIDs = fileIDs.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.fileIDs", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.fileIDs"},');

          return !file.error;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.fileIDs"},');

        });
        fileIDs.forEach(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var file = _this12.uppy.getFile(fileID);
          _this12.uppy.emit('preprocess-progress', file, {
            mode: 'indeterminate',
            message: _this12.i18n('creatingAssembly')
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload"},');

        });
        var createAssembly = function createAssembly(_ref) {
                    SRTlib.send(`{ "anonymous": false, "function": "createAssembly", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var fileIDs = _ref.fileIDs, options = _ref.options;
          var createdAssembly;
                    SRTlib.send('], "end": "createAssembly"},');

          return _this12._createAssembly(fileIDs, uploadID, options).then(function (assembly) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            createdAssembly = assembly;
            if (_this12.opts.importFromUploadURLs) {
                            SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then.then"},');

              return _this12._reserveFiles(assembly, fileIDs);
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then.then"},');

          }).then(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            fileIDs.forEach(function (fileID) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var file = _this12.uppy.getFile(fileID);
              _this12.uppy.emit('preprocess-complete', file);
                            SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then2"},');

            return createdAssembly;
                        SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch.then.then2"},');

          }).catch(function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            fileIDs.forEach(function (fileID) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              var file = _this12.uppy.getFile(fileID);
              _this12.uppy.emit('preprocess-complete', file);
              _this12.uppy.emit('upload-error', file, err);
                            SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch2"},');

            throw err;
                        SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.createAssembly.createAssembly.ReturnStatement.then.then.catch2"},');

          });
                    SRTlib.send('], "end": "createAssembly"},');

        };
        var _this$getPluginState3 = this.getPluginState(), uploadsAssemblies = _this$getPluginState3.uploadsAssemblies;
        this.setPluginState({
          uploadsAssemblies: _extends({}, uploadsAssemblies, (_extends7 = {}, _extends7[uploadID] = [], _extends7))
        });
        var files = fileIDs.map(function (id) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.files", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.files"},');

          return _this12.uppy.getFile(id);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.files"},');

        });
        var assemblyOptions = new AssemblyOptions(files, this.opts);
                SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload2"},');

        return assemblyOptions.build().then(function (assemblies) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then"},');

          return Promise.all(assemblies.map(createAssembly)).then(function (createdAssemblies) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then.ReturnStatement.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var assemblyIDs = createdAssemblies.map(function (assembly) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then.ReturnStatement.then.assemblyIDs", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then.ReturnStatement.then.assemblyIDs"},');

              return assembly.status.assembly_id;
                            SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then.ReturnStatement.then.assemblyIDs"},');

            });
            _this12._createAssemblyWatcher(assemblyIDs, fileIDs, uploadID);
            createdAssemblies.map(function (assembly) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then.ReturnStatement.then"},');

              return _this12._connectAssembly(assembly);
                            SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then.ReturnStatement.then"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then.ReturnStatement.then2"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then"},');

        }, function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          fileIDs.forEach(function (fileID) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var file = _this12.uppy.getFile(fileID);
            _this12.uppy.emit('preprocess-complete', file);
            _this12.uppy.emit('upload-error', file, err);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then2"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then3"},');

          throw err;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload.ReturnStatement.then3"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._prepareUpload._prepareUpload2"},');

      };
      _proto._afterUpload = function _afterUpload(fileIDs, uploadID) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload3", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this13 = this;
        var files = fileIDs.map(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload.files", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.files"},');

          return _this13.uppy.getFile(fileID);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.files"},');

        });
        fileIDs = files.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload.fileIDs.map", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.fileIDs.map"},');

          return !file.error;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.fileIDs.map"},');

        }).map(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload.fileIDs.map2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.fileIDs.map2"},');

          return file.id;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.fileIDs.map2"},');

        });
        var state = this.getPluginState();
        if (this.restored) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload3"},');

          return this.restored.then(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload.ReturnStatement.restored.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.ReturnStatement.restored.then"},');

            return _this13._afterUpload(fileIDs, uploadID);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.ReturnStatement.restored.then"},');

          });
        }
        var assemblyIDs = state.uploadsAssemblies[uploadID];
        if (!this._shouldWaitAfterUpload()) {
          assemblyIDs.forEach(function (assemblyID) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var assembly = _this13.activeAssemblies[assemblyID];
            assembly.close();
            delete _this13.activeAssemblies[assemblyID];
                        SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload"},');

          });
          var assemblies = assemblyIDs.map(function (id) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload.assemblies", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.assemblies"},');

            return _this13.getAssembly(id);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.assemblies"},');

          });
          this.uppy.addResultData(uploadID, {
            transloadit: assemblies
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload3"},');

          return Promise.resolve();
        }
        if (assemblyIDs.length === 0) {
          this.uppy.addResultData(uploadID, {
            transloadit: []
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload3"},');

          return Promise.resolve();
        }
        var incompleteFiles = files.filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload.incompleteFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.incompleteFiles"},');

          return !hasProperty(_this13.completedFiles, file.id);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.incompleteFiles"},');

        });
        incompleteFiles.forEach(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this13.uppy.emit('postprocess-progress', file, {
            mode: 'indeterminate',
            message: _this13.i18n('encoding')
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload2"},');

        });
        var watcher = this.assemblyWatchers[uploadID];
                SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload3"},');

        return watcher.promise.then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload.ReturnStatement.watcher.promise.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          var assemblies = assemblyIDs.map(function (id) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._afterUpload._afterUpload.ReturnStatement.watcher.promise.then.assemblies", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.ReturnStatement.watcher.promise.then.assemblies"},');

            return _this13.getAssembly(id);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.ReturnStatement.watcher.promise.then.assemblies"},');

          });
          var state = _this13.getPluginState();
          var uploadsAssemblies = _extends({}, state.uploadsAssemblies);
          delete uploadsAssemblies[uploadID];
          _this13.setPluginState({
            uploadsAssemblies: uploadsAssemblies
          });
          _this13.uppy.addResultData(uploadID, {
            transloadit: assemblies
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload.ReturnStatement.watcher.promise.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._afterUpload._afterUpload3"},');

      };
      _proto._onError = function _onError(err, uploadID) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onError._onError2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this14 = this;
        if (err === void 0) {
          err = null;
        }
        var state = this.getPluginState();
        var assemblyIDs = state.uploadsAssemblies[uploadID];
        assemblyIDs.forEach(function (assemblyID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onError._onError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (_this14.activeAssemblies[assemblyID]) {
            _this14.activeAssemblies[assemblyID].close();
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto._onError._onError"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._onError._onError2"},');

      };
      _proto._onTusError = function _onTusError(err) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onTusError._onTusError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (err && (/^tus: /).test(err.message)) {
          var url = err.originalRequest && err.originalRequest.responseURL ? err.originalRequest.responseURL : null;
          this.client.submitError(err, {
            url: url,
            type: 'TUS_ERROR'
          }).then(function (_) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._onTusError._onTusError.client.submitError.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto._onTusError._onTusError.client.submitError.then"},');

          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto._onTusError._onTusError"},');

      };
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.install.install6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.uppy.addPreProcessor(this._prepareUpload);
        this.uppy.addPostProcessor(this._afterUpload);
        this.uppy.on('error', this._onError);
        this.uppy.on('cancel-all', this._onCancelAll);
        this.uppy.on('upload-error', this._onTusError);
        if (this.opts.importFromUploadURLs) {
          this.uppy.on('upload-success', this._onFileUploadURLAvailable);
        } else {
          this.uppy.use(Tus, {
            resume: false,
            useFastRemoteRetry: false,
            metaFields: ['assembly_url', 'filename', 'fieldname'],
            limit: this.opts.limit
          });
        }
        this.uppy.on('restore:get-data', this._getPersistentData);
        this.uppy.on('restored', this._onRestored);
        this.setPluginState({
          assemblies: {},
          uploadsAssemblies: {},
          files: {},
          results: []
        });
        var _this$uppy$getState = this.uppy.getState(), capabilities = _this$uppy$getState.capabilities;
        this.uppy.setState({
          capabilities: _extends({}, capabilities, {
            individualCancellation: false
          })
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.install.install6"},');

      };
      _proto.uninstall = function uninstall() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uninstall.uninstall5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.uppy.removePreProcessor(this._prepareUpload);
        this.uppy.removePostProcessor(this._afterUpload);
        this.uppy.off('error', this._onError);
        if (this.opts.importFromUploadURLs) {
          this.uppy.off('upload-success', this._onFileUploadURLAvailable);
        }
        var _this$uppy$getState2 = this.uppy.getState(), capabilities = _this$uppy$getState2.capabilities;
        this.uppy.setState({
          capabilities: _extends({}, capabilities, {
            individualCancellation: true
          })
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.uninstall.uninstall5"},');

      };
      _proto.getAssembly = function getAssembly(id) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getAssembly.getAssembly", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this$getPluginState4 = this.getPluginState(), assemblies = _this$getPluginState4.assemblies;
                SRTlib.send('], "end": "module.exports._temp._class._proto.getAssembly.getAssembly"},');

        return assemblies[id];
                SRTlib.send('], "end": "module.exports._temp._class._proto.getAssembly.getAssembly"},');

      };
      _proto.getAssemblyFiles = function getAssemblyFiles(assemblyID) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getAssemblyFiles.getAssemblyFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports._temp._class._proto.getAssemblyFiles.getAssemblyFiles"},');

        return this.uppy.getFiles().filter(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getAssemblyFiles.getAssemblyFiles.ReturnStatement.uppy.getFiles.filter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.getAssemblyFiles.getAssemblyFiles.ReturnStatement.uppy.getFiles.filter"},');

          return file && file.transloadit && file.transloadit.assembly === assemblyID;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getAssemblyFiles.getAssemblyFiles.ReturnStatement.uppy.getFiles.filter"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.getAssemblyFiles.getAssemblyFiles"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class9"},');

      return Transloadit;
            SRTlib.send('], "end": "module.exports._temp._class9"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
    module.exports.COMPANION = COMPANION;
    module.exports.UPPY_SERVER = COMPANION;
    module.exports.COMPANION_PATTERN = ALLOWED_COMPANION_PATTERN;
        SRTlib.send('], "end": "emptyKey344"},');

  }, {
    "../package.json": 306,
    "./../../core": 248,
    "./../../tus": 315,
    "./../../utils/lib/Translator": 320,
    "./../../utils/lib/hasProperty": 339,
    "./Assembly": 307,
    "./AssemblyOptions": 308,
    "./AssemblyWatcher": 309,
    "./Client": 310
  }],
  312: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey345", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function parseUrl(url) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.parseUrl", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var scheme = (/^\w+:\/\//).exec(url);
      var i = 0;
      if (scheme) {
        i = scheme[0].length + 1;
      }
      var slashIndex = url.indexOf('/', i);
      if (slashIndex === -1) {
                SRTlib.send('], "end": "module.exports.parseUrl"},');

        return {
          origin: url,
          pathname: '/'
        };
      }
            SRTlib.send('], "end": "module.exports.parseUrl"},');

      return {
        origin: url.slice(0, slashIndex),
        pathname: url.slice(slashIndex)
      };
            SRTlib.send('], "end": "module.exports.parseUrl"},');

    };
        SRTlib.send('], "end": "emptyKey345"},');

  }, {}],
  313: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey346", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/tus",
      "description": "Resumable uploads for Uppy using Tus.io",
      "version": "1.5.13",
      "license": "MIT",
      "main": "lib/index.js",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "upload", "resumable", "tus"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@types/tus-js-client": "^1.8.0",
        "@uppy/companion-client": "file:../companion-client",
        "@uppy/utils": "file:../utils",
        "tus-js-client": "^1.8.0"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey346"},');

  }, {}],
  314: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey347", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var tus = require('tus-js-client');
    function isCordova() {
            SRTlib.send(`{ "anonymous": false, "function": "isCordova", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "isCordova"},');

      return typeof window !== 'undefined' && (typeof window.PhoneGap !== 'undefined' || typeof window.Cordova !== 'undefined' || typeof window.cordova !== 'undefined');
            SRTlib.send('], "end": "isCordova"},');

    }
    function isReactNative() {
            SRTlib.send(`{ "anonymous": false, "function": "isReactNative", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "isReactNative"},');

      return typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative';
            SRTlib.send('], "end": "isReactNative"},');

    }
    module.exports = function getFingerprint(uppyFileObj) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFingerprint", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.getFingerprint"},');

      return function (file, options, callback) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFingerprint.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (isCordova() || isReactNative()) {
                    SRTlib.send('], "end": "module.exports.getFingerprint.ReturnStatement"},');

          return tus.Upload.defaultOptions.fingerprint(file, options, callback);
        }
        var uppyFingerprint = ['tus', uppyFileObj.id, options.endpoint].join('-');
                SRTlib.send('], "end": "module.exports.getFingerprint.ReturnStatement"},');

        return callback(null, uppyFingerprint);
                SRTlib.send('], "end": "module.exports.getFingerprint.ReturnStatement"},');

      };
            SRTlib.send('], "end": "module.exports.getFingerprint"},');

    };
        SRTlib.send('], "end": "emptyKey347"},');

  }, {
    "tus-js-client": 230
  }],
  315: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey348", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends21", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends21"},');

        return target;
                SRTlib.send('], "end": "_extends21"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('./../../core'), Plugin = _require.Plugin;
    var tus = require('tus-js-client');
    var _require2 = require('./../../companion-client'), Provider = _require2.Provider, RequestClient = _require2.RequestClient, Socket = _require2.Socket;
    var emitSocketProgress = require('./../../utils/lib/emitSocketProgress');
    var getSocketHost = require('./../../utils/lib/getSocketHost');
    var settle = require('./../../utils/lib/settle');
    var EventTracker = require('./../../utils/lib/EventTracker');
    var NetworkError = require('./../../utils/lib/NetworkError');
    var isNetworkError = require('./../../utils/lib/isNetworkError');
    var RateLimitedQueue = require('./../../utils/lib/RateLimitedQueue');
    var hasProperty = require('./../../utils/lib/hasProperty');
    var getFingerprint = require('./getFingerprint');
    var tusDefaultOptions = {
      endpoint: '',
      resume: true,
      onProgress: null,
      onChunkComplete: null,
      onSuccess: null,
      onError: null,
      headers: {},
      chunkSize: Infinity,
      withCredentials: false,
      uploadUrl: null,
      uploadSize: null,
      overridePatchMethod: false,
      retryDelays: null
    };
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class10", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Tus, _Plugin);
      function Tus(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Tus", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, opts) || this;
        _this.type = 'uploader';
        _this.id = _this.opts.id || 'Tus';
        _this.title = 'Tus';
        var defaultOptions = {
          resume: true,
          autoRetry: true,
          useFastRemoteRetry: true,
          limit: 0,
          retryDelays: [0, 1000, 3000, 5000]
        };
        _this.opts = _extends({}, defaultOptions, opts);
        _this.requests = new RateLimitedQueue(_this.opts.limit);
        _this.uploaders = Object.create(null);
        _this.uploaderEvents = Object.create(null);
        _this.uploaderSockets = Object.create(null);
        _this.handleResetProgress = _this.handleResetProgress.bind(_assertThisInitialized(_this));
        _this.handleUpload = _this.handleUpload.bind(_assertThisInitialized(_this));
                SRTlib.send('], "end": "Tus"},');

        return _this;
                SRTlib.send('], "end": "Tus"},');

      }
      var _proto = Tus.prototype;
      _proto.handleResetProgress = function handleResetProgress() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.handleResetProgress.handleResetProgress", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var files = _extends({}, this.uppy.getState().files);
        Object.keys(files).forEach(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.handleResetProgress.handleResetProgress.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (files[fileID].tus && files[fileID].tus.uploadUrl) {
            var tusState = _extends({}, files[fileID].tus);
            delete tusState.uploadUrl;
            files[fileID] = _extends({}, files[fileID], {
              tus: tusState
            });
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto.handleResetProgress.handleResetProgress.forEach"},');

        });
        this.uppy.setState({
          files: files
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.handleResetProgress.handleResetProgress"},');

      };
      _proto.resetUploaderReferences = function resetUploaderReferences(fileID, opts) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.resetUploaderReferences.resetUploaderReferences", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (opts === void 0) {
          opts = {};
        }
        if (this.uploaders[fileID]) {
          var uploader = this.uploaders[fileID];
          uploader.abort();
          if (opts.abort) {
            setTimeout(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.resetUploaderReferences.resetUploaderReferences.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto.resetUploaderReferences.resetUploaderReferences.setTimeout"},');

              return uploader.abort(true);
                            SRTlib.send('], "end": "module.exports._temp._class._proto.resetUploaderReferences.resetUploaderReferences.setTimeout"},');

            }, 1000);
          }
          this.uploaders[fileID] = null;
        }
        if (this.uploaderEvents[fileID]) {
          this.uploaderEvents[fileID].remove();
          this.uploaderEvents[fileID] = null;
        }
        if (this.uploaderSockets[fileID]) {
          this.uploaderSockets[fileID].close();
          this.uploaderSockets[fileID] = null;
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.resetUploaderReferences.resetUploaderReferences"},');

      };
      _proto.upload = function upload(file, current, total) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var _this2 = this;
        this.resetUploaderReferences(file.id);
                SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch7", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this2.uppy.emit('upload-started', file);
          var optsTus = _extends({}, tusDefaultOptions, _this2.opts, file.tus || ({}));
          optsTus.fingerprint = getFingerprint(file);
          optsTus.onError = function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.optsTus.onError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this2.uppy.log(err);
            if (isNetworkError(err.originalRequest)) {
              err = new NetworkError(err, err.originalRequest);
            }
            _this2.resetUploaderReferences(file.id);
            queuedRequest.done();
            _this2.uppy.emit('upload-error', file, err);
            reject(err);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.optsTus.onError"},');

          };
          optsTus.onProgress = function (bytesUploaded, bytesTotal) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.optsTus.onProgress", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            _this2.onReceiveUploadUrl(file, upload.url);
            _this2.uppy.emit('upload-progress', file, {
              uploader: _this2,
              bytesUploaded: bytesUploaded,
              bytesTotal: bytesTotal
            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.optsTus.onProgress"},');

          };
          optsTus.onSuccess = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.optsTus.onSuccess", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var uploadResp = {
              uploadURL: upload.url
            };
            _this2.resetUploaderReferences(file.id);
            queuedRequest.done();
            _this2.uppy.emit('upload-success', file, uploadResp);
            if (upload.url) {
              _this2.uppy.log('Download ' + upload.file.name + ' from ' + upload.url);
            }
            resolve(upload);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.optsTus.onSuccess"},');

          };
          var copyProp = function copyProp(obj, srcProp, destProp) {
                        SRTlib.send(`{ "anonymous": false, "function": "copyProp", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

            if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {
              obj[destProp] = obj[srcProp];
            }
                        SRTlib.send('], "end": "copyProp"},');

          };
          var meta = {};
          var metaFields = Array.isArray(optsTus.metaFields) ? optsTus.metaFields : Object.keys(file.meta);
          metaFields.forEach(function (item) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            meta[item] = file.meta[item];
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch"},');

          });
          copyProp(meta, 'type', 'filetype');
          copyProp(meta, 'name', 'filename');
          optsTus.metadata = meta;
          var upload = new tus.Upload(file.data, optsTus);
          _this2.uploaders[file.id] = upload;
          _this2.uploaderEvents[file.id] = new EventTracker(_this2.uppy);
          var queuedRequest = _this2.requests.run(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!file.isPaused) {
              upload.start();
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run"},');

            return function () {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run.ReturnStatement"},');

            };
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run"},');

          });
          _this2.onFileRemove(file.id, function (targetFileID) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            queuedRequest.abort();
            _this2.resetUploaderReferences(file.id, {
              abort: !!upload.url
            });
            resolve("upload " + targetFileID + " was removed");
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch2"},');

          });
          _this2.onPause(file.id, function (isPaused) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (isPaused) {
              queuedRequest.abort();
              upload.abort();
            } else {
              queuedRequest.abort();
              queuedRequest = _this2.requests.run(function () {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                upload.start();
                                SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run2"},');

                return function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run.ReturnStatement2"},');

                };
                                SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run2"},');

              });
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch3"},');

          });
          _this2.onPauseAll(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            queuedRequest.abort();
            upload.abort();
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch4"},');

          });
          _this2.onCancelAll(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            queuedRequest.abort();
            _this2.resetUploaderReferences(file.id, {
              abort: !!upload.url
            });
            resolve("upload " + file.id + " was canceled");
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch5"},');

          });
          _this2.onResumeAll(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            queuedRequest.abort();
            if (file.error) {
              upload.abort();
            }
            queuedRequest = _this2.requests.run(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              upload.start();
                            SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run3"},');

              return function () {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run.ReturnStatement3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run.ReturnStatement3"},');

              };
                            SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch.queuedRequest._this2.requests.run3"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch6"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch7"},');

        }).catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this2.uppy.emit('upload-error', file, err);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch8"},');

          throw err;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload.ReturnStatement.catch8"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.upload.upload"},');

      };
      _proto.uploadRemote = function uploadRemote(file, current, total) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uploadRemote.uploadRemote", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var _this3 = this;
        this.resetUploaderReferences(file.id);
        var opts = _extends({}, this.opts);
        if (file.tus) {
          _extends(opts, file.tus);
        }
        this.uppy.emit('upload-started', file);
        this.uppy.log(file.remote.url);
        if (file.serverToken) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.uploadRemote.uploadRemote"},');

          return this.connectToServerSocket(file);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.uploadRemote.uploadRemote"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var Client = file.remote.providerOptions.provider ? Provider : RequestClient;
          var client = new Client(_this3.uppy, file.remote.providerOptions);
          client.post(file.remote.url, _extends({}, file.remote.body, {
            endpoint: opts.endpoint,
            uploadUrl: opts.uploadUrl,
            protocol: 'tus',
            size: file.data.size,
            metadata: file.meta
          })).then(function (res) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement.then.then.catch.then.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this3.uppy.setFileState(file.id, {
              serverToken: res.token
            });
            file = _this3.uppy.getFile(file.id);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement.then.then.catch.then.then.then"},');

            return _this3.connectToServerSocket(file);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement.then.then.catch.then.then.then"},');

          }).then(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement.then.then.catch.then.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            resolve();
                        SRTlib.send('], "end": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement.then.then.catch.then.then"},');

          }).catch(function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement.then.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this3.uppy.emit('upload-error', file, err);
            reject(err);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement.then.then.catch"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto.uploadRemote.uploadRemote.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.uploadRemote.uploadRemote"},');

      };
      _proto.connectToServerSocket = function connectToServerSocket(file) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this4 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement11", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var token = file.serverToken;
          var host = getSocketHost(file.remote.companionUrl);
          var socket = new Socket({
            target: host + "/api/" + token,
            autoOpen: false
          });
          _this4.uploaderSockets[file.id] = socket;
          _this4.uploaderEvents[file.id] = new EventTracker(_this4.uppy);
          _this4.onFileRemove(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            queuedRequest.abort();
            socket.send('pause', {});
            socket.send('cancel', {});
            _this4.resetUploaderReferences(file.id);
            resolve("upload " + file.id + " was removed");
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement"},');

          });
          _this4.onPause(file.id, function (isPaused) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (isPaused) {
              queuedRequest.abort();
              socket.send('pause', {});
            } else {
              queuedRequest.abort();
              queuedRequest = _this4.requests.run(function () {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                socket.send('resume', {});
                                SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run"},');

                return function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run.ReturnStatement"},');

                };
                                SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run"},');

              });
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement2"},');

          });
          _this4.onPauseAll(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            queuedRequest.abort();
            socket.send('pause', {});
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement3"},');

          });
          _this4.onCancelAll(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            queuedRequest.abort();
            socket.send('pause', {});
            socket.send('cancel', {});
            _this4.resetUploaderReferences(file.id);
            resolve("upload " + file.id + " was canceled");
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement4"},');

          });
          _this4.onResumeAll(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            queuedRequest.abort();
            if (file.error) {
              socket.send('pause', {});
            }
            queuedRequest = _this4.requests.run(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              socket.send('resume', {});
                            SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run2"},');

              return function () {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run.ReturnStatement2"},');

              };
                            SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run2"},');

            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement5"},');

          });
          _this4.onRetry(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (socket.isOpen) {
              socket.send('pause', {});
              socket.send('resume', {});
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement6"},');

          });
          _this4.onRetryAll(file.id, function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement7", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (socket.isOpen) {
              socket.send('pause', {});
              socket.send('resume', {});
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement7"},');

          });
          socket.on('progress', function (progressData) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement8", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement8"},');

            return emitSocketProgress(_this4, progressData, file);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement8"},');

          });
          socket.on('error', function (errData) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement9", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var message = errData.error.message;
            var error = _extends(new Error(message), {
              cause: errData.error
            });
            if (!_this4.opts.useFastRemoteRetry) {
              _this4.resetUploaderReferences(file.id);
              _this4.uppy.setFileState(file.id, {
                serverToken: null
              });
            } else {
              socket.close();
            }
            _this4.uppy.emit('upload-error', file, error);
            queuedRequest.done();
            reject(error);
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement9"},');

          });
          socket.on('success', function (data) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement10", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            var uploadResp = {
              uploadURL: data.url
            };
            _this4.uppy.emit('upload-success', file, uploadResp);
            _this4.resetUploaderReferences(file.id);
            queuedRequest.done();
            resolve();
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement10"},');

          });
          var queuedRequest = _this4.requests.run(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            socket.open();
            if (file.isPaused) {
              socket.send('pause', {});
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run3"},');

            return function () {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run.ReturnStatement3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run.ReturnStatement3"},');

            };
                        SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement.queuedRequest._this4.requests.run3"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket.ReturnStatement11"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.connectToServerSocket.connectToServerSocket"},');

      };
      _proto.onReceiveUploadUrl = function onReceiveUploadUrl(file, uploadURL) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onReceiveUploadUrl.onReceiveUploadUrl", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var currentFile = this.uppy.getFile(file.id);
        if (!currentFile) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.onReceiveUploadUrl.onReceiveUploadUrl"},');

          return;
        }
        if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {
          this.uppy.log('[Tus] Storing upload url');
          this.uppy.setFileState(currentFile.id, {
            tus: _extends({}, currentFile.tus, {
              uploadUrl: uploadURL
            })
          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.onReceiveUploadUrl.onReceiveUploadUrl"},');

      };
      _proto.onFileRemove = function onFileRemove(fileID, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onFileRemove.onFileRemove", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.uploaderEvents[fileID].on('file-removed', function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onFileRemove.onFileRemove.uploaderEvents.fileID.on", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (fileID === file.id) cb(file.id);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.onFileRemove.onFileRemove.uploaderEvents.fileID.on"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.onFileRemove.onFileRemove"},');

      };
      _proto.onPause = function onPause(fileID, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onPause.onPause", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.uploaderEvents[fileID].on('upload-pause', function (targetFileID, isPaused) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onPause.onPause.uploaderEvents.fileID.on", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (fileID === targetFileID) {
            cb(isPaused);
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto.onPause.onPause.uploaderEvents.fileID.on"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.onPause.onPause"},');

      };
      _proto.onRetry = function onRetry(fileID, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onRetry.onRetry", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this.uploaderEvents[fileID].on('upload-retry', function (targetFileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onRetry.onRetry.uploaderEvents.fileID.on", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (fileID === targetFileID) {
            cb();
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto.onRetry.onRetry.uploaderEvents.fileID.on"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.onRetry.onRetry"},');

      };
      _proto.onRetryAll = function onRetryAll(fileID, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onRetryAll.onRetryAll", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this5 = this;
        this.uploaderEvents[fileID].on('retry-all', function (filesToRetry) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onRetryAll.onRetryAll.uploaderEvents.fileID.on", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (!_this5.uppy.getFile(fileID)) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.onRetryAll.onRetryAll.uploaderEvents.fileID.on"},');

            return;
          }
          cb();
                    SRTlib.send('], "end": "module.exports._temp._class._proto.onRetryAll.onRetryAll.uploaderEvents.fileID.on"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.onRetryAll.onRetryAll"},');

      };
      _proto.onPauseAll = function onPauseAll(fileID, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onPauseAll.onPauseAll", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this6 = this;
        this.uploaderEvents[fileID].on('pause-all', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onPauseAll.onPauseAll.uploaderEvents.fileID.on", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!_this6.uppy.getFile(fileID)) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.onPauseAll.onPauseAll.uploaderEvents.fileID.on"},');

            return;
          }
          cb();
                    SRTlib.send('], "end": "module.exports._temp._class._proto.onPauseAll.onPauseAll.uploaderEvents.fileID.on"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.onPauseAll.onPauseAll"},');

      };
      _proto.onCancelAll = function onCancelAll(fileID, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onCancelAll.onCancelAll", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this7 = this;
        this.uploaderEvents[fileID].on('cancel-all', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onCancelAll.onCancelAll.uploaderEvents.fileID.on", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!_this7.uppy.getFile(fileID)) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.onCancelAll.onCancelAll.uploaderEvents.fileID.on"},');

            return;
          }
          cb();
                    SRTlib.send('], "end": "module.exports._temp._class._proto.onCancelAll.onCancelAll.uploaderEvents.fileID.on"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.onCancelAll.onCancelAll"},');

      };
      _proto.onResumeAll = function onResumeAll(fileID, cb) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onResumeAll.onResumeAll", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this8 = this;
        this.uploaderEvents[fileID].on('resume-all', function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.onResumeAll.onResumeAll.uploaderEvents.fileID.on", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!_this8.uppy.getFile(fileID)) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.onResumeAll.onResumeAll.uploaderEvents.fileID.on"},');

            return;
          }
          cb();
                    SRTlib.send('], "end": "module.exports._temp._class._proto.onResumeAll.onResumeAll.uploaderEvents.fileID.on"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.onResumeAll.onResumeAll"},');

      };
      _proto.uploadFiles = function uploadFiles(files) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uploadFiles.uploadFiles", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this9 = this;
        var promises = files.map(function (file, i) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uploadFiles.uploadFiles.promises", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var current = i + 1;
          var total = files.length;
          if (('error' in file) && file.error) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.uploadFiles.uploadFiles.promises"},');

            return Promise.reject(new Error(file.error));
          } else if (file.isRemote) {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.uploadFiles.uploadFiles.promises"},');

            return _this9.uploadRemote(file, current, total);
          } else {
                        SRTlib.send('], "end": "module.exports._temp._class._proto.uploadFiles.uploadFiles.promises"},');

            return _this9.upload(file, current, total);
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto.uploadFiles.uploadFiles.promises"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.uploadFiles.uploadFiles"},');

        return settle(promises);
                SRTlib.send('], "end": "module.exports._temp._class._proto.uploadFiles.uploadFiles"},');

      };
      _proto.handleUpload = function handleUpload(fileIDs) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.handleUpload.handleUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this10 = this;
        if (fileIDs.length === 0) {
          this.uppy.log('[Tus] No files to upload');
                    SRTlib.send('], "end": "module.exports._temp._class._proto.handleUpload.handleUpload"},');

          return Promise.resolve();
        }
        if (this.opts.limit === 0) {
          this.uppy.log('[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0', 'warning');
        }
        this.uppy.log('[Tus] Uploading...');
        var filesToUpload = fileIDs.map(function (fileID) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.handleUpload.handleUpload.filesToUpload", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.handleUpload.handleUpload.filesToUpload"},');

          return _this10.uppy.getFile(fileID);
                    SRTlib.send('], "end": "module.exports._temp._class._proto.handleUpload.handleUpload.filesToUpload"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.handleUpload.handleUpload"},');

        return this.uploadFiles(filesToUpload).then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.handleUpload.handleUpload.ReturnStatement.uploadFiles.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.handleUpload.handleUpload.ReturnStatement.uploadFiles.then"},');

          return null;
                    SRTlib.send('], "end": "module.exports._temp._class._proto.handleUpload.handleUpload.ReturnStatement.uploadFiles.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.handleUpload.handleUpload"},');

      };
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.install.install7", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.uppy.setState({
          capabilities: _extends({}, this.uppy.getState().capabilities, {
            resumableUploads: true
          })
        });
        this.uppy.addUploader(this.handleUpload);
        this.uppy.on('reset-progress', this.handleResetProgress);
        if (this.opts.autoRetry) {
          this.uppy.on('back-online', this.uppy.retryAll);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.install.install7"},');

      };
      _proto.uninstall = function uninstall() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uninstall.uninstall6", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.uppy.setState({
          capabilities: _extends({}, this.uppy.getState().capabilities, {
            resumableUploads: false
          })
        });
        this.uppy.removeUploader(this.handleUpload);
        if (this.opts.autoRetry) {
          this.uppy.off('back-online', this.uppy.retryAll);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.uninstall.uninstall6"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class10"},');

      return Tus;
            SRTlib.send('], "end": "module.exports._temp._class10"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey348"},');

  }, {
    "../package.json": 313,
    "./../../companion-client": 243,
    "./../../core": 248,
    "./../../utils/lib/EventTracker": 316,
    "./../../utils/lib/NetworkError": 318,
    "./../../utils/lib/RateLimitedQueue": 319,
    "./../../utils/lib/emitSocketProgress": 323,
    "./../../utils/lib/getSocketHost": 336,
    "./../../utils/lib/hasProperty": 339,
    "./../../utils/lib/isNetworkError": 342,
    "./../../utils/lib/settle": 348,
    "./getFingerprint": 314,
    "tus-js-client": 230
  }],
  316: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey349", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports34", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function EventTracker(emitter) {
                SRTlib.send(`{ "anonymous": false, "function": "EventTracker", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        this._events = [];
        this._emitter = emitter;
                SRTlib.send('], "end": "EventTracker"},');

      }
      var _proto = EventTracker.prototype;
      _proto.on = function on(event, fn) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.on.on2", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        this._events.push([event, fn]);
                SRTlib.send('], "end": "module.exports._proto.on.on2"},');

        return this._emitter.on(event, fn);
                SRTlib.send('], "end": "module.exports._proto.on.on2"},');

      };
      _proto.remove = function remove() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.remove.remove", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this = this;
        this._events.forEach(function (_ref) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.remove.remove._events.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var event = _ref[0], fn = _ref[1];
          _this._emitter.off(event, fn);
                    SRTlib.send('], "end": "module.exports._proto.remove.remove._events.forEach"},');

        });
                SRTlib.send('], "end": "module.exports._proto.remove.remove"},');

      };
            SRTlib.send('], "end": "module.exports34"},');

      return EventTracker;
            SRTlib.send('], "end": "module.exports34"},');

    })();
        SRTlib.send('], "end": "emptyKey349"},');

  }, {}],
  317: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey350", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = ['a[href]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'area[href]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'input:not([disabled]):not([inert]):not([aria-hidden])', 'select:not([disabled]):not([inert]):not([aria-hidden])', 'textarea:not([disabled]):not([inert]):not([aria-hidden])', 'button:not([disabled]):not([inert]):not([aria-hidden])', 'iframe:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'object:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'embed:not([tabindex^="-"]):not([inert]):not([aria-hidden])', '[contenteditable]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', '[tabindex]:not([tabindex^="-"]):not([inert]):not([aria-hidden])'];
        SRTlib.send('], "end": "emptyKey350"},');

  }, {}],
  318: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey351", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    function _wrapNativeSuper(Class) {
            SRTlib.send(`{ "anonymous": false, "function": "_wrapNativeSuper", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var _cache = typeof Map === "function" ? new Map() : undefined;
      _wrapNativeSuper = function _wrapNativeSuper(Class) {
                SRTlib.send(`{ "anonymous": true, "function": "_wrapNativeSuper._wrapNativeSuper3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (Class === null || !_isNativeFunction(Class)) {
                    SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper3"},');

          return Class;
        }
        if (typeof Class !== "function") {
                    SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper3"},');

          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class)) {
                        SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper3"},');

            return _cache.get(Class);
          }
          _cache.set(Class, Wrapper);
        }
        function Wrapper() {
                    SRTlib.send(`{ "anonymous": false, "function": "Wrapper", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Wrapper"},');

          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                    SRTlib.send('], "end": "Wrapper"},');

        }
        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
                SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper3"},');

        return _setPrototypeOf(Wrapper, Class);
                SRTlib.send('], "end": "_wrapNativeSuper._wrapNativeSuper3"},');

      };
            SRTlib.send('], "end": "_wrapNativeSuper"},');

      return _wrapNativeSuper(Class);
            SRTlib.send('], "end": "_wrapNativeSuper"},');

    }
    function _construct(Parent, args, Class) {
            SRTlib.send(`{ "anonymous": false, "function": "_construct", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct(Parent, args, Class) {
                    SRTlib.send(`{ "anonymous": true, "function": "_construct._construct3", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var a = [null];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class) _setPrototypeOf(instance, Class.prototype);
                    SRTlib.send('], "end": "_construct._construct3"},');

          return instance;
                    SRTlib.send('], "end": "_construct._construct3"},');

        };
      }
            SRTlib.send('], "end": "_construct"},');

      return _construct.apply(null, arguments);
            SRTlib.send('], "end": "_construct"},');

    }
    function _isNativeReflectConstruct() {
            SRTlib.send(`{ "anonymous": false, "function": "_isNativeReflectConstruct", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (typeof Reflect === "undefined" || !Reflect.construct) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
      if (Reflect.construct.sham) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
      if (typeof Proxy === "function") {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return true;
      }
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {
                    SRTlib.send(`{ "anonymous": true, "function": "Date.prototype.toString.call3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "Date.prototype.toString.call3"},');

        }));
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return true;
      } catch (e) {
                SRTlib.send('], "end": "_isNativeReflectConstruct"},');

        return false;
      }
            SRTlib.send('], "end": "_isNativeReflectConstruct"},');

    }
    function _isNativeFunction(fn) {
            SRTlib.send(`{ "anonymous": false, "function": "_isNativeFunction", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "_isNativeFunction"},');

      return Function.toString.call(fn).indexOf("[native code]") !== -1;
            SRTlib.send('], "end": "_isNativeFunction"},');

    }
    function _setPrototypeOf(o, p) {
            SRTlib.send(`{ "anonymous": false, "function": "_setPrototypeOf", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      _setPrototypeOf = Object.setPrototypeOf || (function _setPrototypeOf(o, p) {
                SRTlib.send(`{ "anonymous": true, "function": "_setPrototypeOf._setPrototypeOf3", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        o.__proto__ = p;
                SRTlib.send('], "end": "_setPrototypeOf._setPrototypeOf3"},');

        return o;
                SRTlib.send('], "end": "_setPrototypeOf._setPrototypeOf3"},');

      });
            SRTlib.send('], "end": "_setPrototypeOf"},');

      return _setPrototypeOf(o, p);
            SRTlib.send('], "end": "_setPrototypeOf"},');

    }
    function _getPrototypeOf(o) {
            SRTlib.send(`{ "anonymous": false, "function": "_getPrototypeOf", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                SRTlib.send(`{ "anonymous": true, "function": "_getPrototypeOf._getPrototypeOf3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "_getPrototypeOf._getPrototypeOf3"},');

        return o.__proto__ || Object.getPrototypeOf(o);
                SRTlib.send('], "end": "_getPrototypeOf._getPrototypeOf3"},');

      };
            SRTlib.send('], "end": "_getPrototypeOf"},');

      return _getPrototypeOf(o);
            SRTlib.send('], "end": "_getPrototypeOf"},');

    }
    var NetworkError = (function (_Error) {
            SRTlib.send(`{ "anonymous": true, "function": "NetworkError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(NetworkError, _Error);
      function NetworkError(error, xhr) {
                SRTlib.send(`{ "anonymous": false, "function": "NetworkError", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        if (xhr === void 0) {
          xhr = null;
        }
        _this = _Error.call(this, "This looks like a network error, the endpoint might be blocked by an internet provider or a firewall.\n\nSource error: [" + error + "]") || this;
        _this.isNetworkError = true;
        _this.request = xhr;
                SRTlib.send('], "end": "NetworkError"},');

        return _this;
                SRTlib.send('], "end": "NetworkError"},');

      }
            SRTlib.send('], "end": "NetworkError"},');

      return NetworkError;
            SRTlib.send('], "end": "NetworkError"},');

    })(_wrapNativeSuper(Error));
    module.exports = NetworkError;
        SRTlib.send('], "end": "emptyKey351"},');

  }, {}],
  319: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey352", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function findIndex(array, predicate) {
            SRTlib.send(`{ "anonymous": false, "function": "findIndex", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      for (var i = 0; i < array.length; i++) {
        if (predicate(array[i])) {
                    SRTlib.send('], "end": "findIndex"},');

          return i;
        }
      }
            SRTlib.send('], "end": "findIndex"},');

      return -1;
            SRTlib.send('], "end": "findIndex"},');

    }
    function createCancelError() {
            SRTlib.send(`{ "anonymous": false, "function": "createCancelError", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "createCancelError"},');

      return new Error('Cancelled');
            SRTlib.send('], "end": "createCancelError"},');

    }
    module.exports = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports35", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function RateLimitedQueue(limit) {
                SRTlib.send(`{ "anonymous": false, "function": "RateLimitedQueue", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof limit !== 'number' || limit === 0) {
          this.limit = Infinity;
        } else {
          this.limit = limit;
        }
        this.activeRequests = 0;
        this.queuedHandlers = [];
                SRTlib.send('], "end": "RateLimitedQueue"},');

      }
      var _proto = RateLimitedQueue.prototype;
      _proto._call = function _call(fn) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._call._call", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this = this;
        this.activeRequests += 1;
        var _done = false;
        var cancelActive;
        try {
          cancelActive = fn();
        } catch (err) {
          this.activeRequests -= 1;
                    SRTlib.send('], "end": "module.exports._proto._call._call"},');

          throw err;
        }
                SRTlib.send('], "end": "module.exports._proto._call._call"},');

        return {
          abort: function abort() {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._call._call.ReturnStatement.abort.abort", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (_done) {
                            SRTlib.send('], "end": "module.exports._proto._call._call.ReturnStatement.abort.abort"},');

              return;
            }
            _done = true;
            _this.activeRequests -= 1;
            cancelActive();
            _this._queueNext();
                        SRTlib.send('], "end": "module.exports._proto._call._call.ReturnStatement.abort.abort"},');

          },
          done: function done() {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._call._call.ReturnStatement.done.done", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (_done) {
                            SRTlib.send('], "end": "module.exports._proto._call._call.ReturnStatement.done.done"},');

              return;
            }
            _done = true;
            _this.activeRequests -= 1;
            _this._queueNext();
                        SRTlib.send('], "end": "module.exports._proto._call._call.ReturnStatement.done.done"},');

          }
        };
                SRTlib.send('], "end": "module.exports._proto._call._call"},');

      };
      _proto._queueNext = function _queueNext() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._queueNext._queueNext", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this2 = this;
        Promise.resolve().then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._queueNext._queueNext.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this2._next();
                    SRTlib.send('], "end": "module.exports._proto._queueNext._queueNext.then"},');

        });
                SRTlib.send('], "end": "module.exports._proto._queueNext._queueNext"},');

      };
      _proto._next = function _next() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._next._next", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.activeRequests >= this.limit) {
                    SRTlib.send('], "end": "module.exports._proto._next._next"},');

          return;
        }
        if (this.queuedHandlers.length === 0) {
                    SRTlib.send('], "end": "module.exports._proto._next._next"},');

          return;
        }
        var next = this.queuedHandlers.shift();
        var handler = this._call(next.fn);
        next.abort = handler.abort;
        next.done = handler.done;
                SRTlib.send('], "end": "module.exports._proto._next._next"},');

      };
      _proto._queue = function _queue(fn, options) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._queue._queue", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this3 = this;
        if (options === void 0) {
          options = {};
        }
        var handler = {
          fn: fn,
          priority: options.priority || 0,
          abort: function abort() {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._queue._queue.handler.abort.abort", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            _this3._dequeue(handler);
                        SRTlib.send('], "end": "module.exports._proto._queue._queue.handler.abort.abort"},');

          },
          done: function done() {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._queue._queue.handler.done.done", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._proto._queue._queue.handler.done.done"},');

            throw new Error('Cannot mark a queued request as done: this indicates a bug');
                        SRTlib.send('], "end": "module.exports._proto._queue._queue.handler.done.done"},');

          }
        };
        var index = findIndex(this.queuedHandlers, function (other) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._queue._queue.index.findIndex", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._proto._queue._queue.index.findIndex"},');

          return handler.priority > other.priority;
                    SRTlib.send('], "end": "module.exports._proto._queue._queue.index.findIndex"},');

        });
        if (index === -1) {
          this.queuedHandlers.push(handler);
        } else {
          this.queuedHandlers.splice(index, 0, handler);
        }
                SRTlib.send('], "end": "module.exports._proto._queue._queue"},');

        return handler;
                SRTlib.send('], "end": "module.exports._proto._queue._queue"},');

      };
      _proto._dequeue = function _dequeue(handler) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._dequeue._dequeue", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var index = this.queuedHandlers.indexOf(handler);
        if (index !== -1) {
          this.queuedHandlers.splice(index, 1);
        }
                SRTlib.send('], "end": "module.exports._proto._dequeue._dequeue"},');

      };
      _proto.run = function run(fn, queueOptions) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.run.run", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (this.activeRequests < this.limit) {
                    SRTlib.send('], "end": "module.exports._proto.run.run"},');

          return this._call(fn);
        }
                SRTlib.send('], "end": "module.exports._proto.run.run"},');

        return this._queue(fn, queueOptions);
                SRTlib.send('], "end": "module.exports._proto.run.run"},');

      };
      _proto.wrapPromiseFunction = function wrapPromiseFunction(fn, queueOptions) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this4 = this;
                SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction"},');

        return function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var queuedRequest;
          var outerPromise = new Promise(function (resolve, reject) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            queuedRequest = _this4.run(function () {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

              var cancelError;
              var innerPromise;
              try {
                innerPromise = Promise.resolve(fn.apply(void 0, args));
              } catch (err) {
                innerPromise = Promise.reject(err);
              }
              innerPromise.then(function (result) {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                if (cancelError) {
                  reject(cancelError);
                } else {
                  queuedRequest.done();
                  resolve(result);
                }
                                SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest"},');

              }, function (err) {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                if (cancelError) {
                  reject(cancelError);
                } else {
                  queuedRequest.done();
                  reject(err);
                }
                                SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest2"},');

              });
                            SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest3"},');

              return function () {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                cancelError = createCancelError();
                                SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest.ReturnStatement"},');

              };
                            SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.queuedRequest3"},');

            }, queueOptions);
                        SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise"},');

          });
          outerPromise.abort = function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.abort", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            queuedRequest.abort();
                        SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement.outerPromise.abort"},');

          };
                    SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement"},');

          return outerPromise;
                    SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction.ReturnStatement"},');

        };
                SRTlib.send('], "end": "module.exports._proto.wrapPromiseFunction.wrapPromiseFunction"},');

      };
            SRTlib.send('], "end": "module.exports35"},');

      return RateLimitedQueue;
            SRTlib.send('], "end": "module.exports35"},');

    })();
        SRTlib.send('], "end": "emptyKey352"},');

  }, {}],
  320: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey355", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends22", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends22"},');

        return target;
                SRTlib.send('], "end": "_extends22"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    var has = require('./hasProperty');
    module.exports = (function () {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports36", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      function Translator(locales) {
                SRTlib.send(`{ "anonymous": false, "function": "Translator", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var _this = this;
        this.locale = {
          strings: {},
          pluralize: function pluralize(n) {
                        SRTlib.send(`{ "anonymous": true, "function": "locale.pluralize.pluralize", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (n === 1) {
                            SRTlib.send('], "end": "locale.pluralize.pluralize"},');

              return 0;
            }
                        SRTlib.send('], "end": "locale.pluralize.pluralize"},');

            return 1;
                        SRTlib.send('], "end": "locale.pluralize.pluralize"},');

          }
        };
        if (Array.isArray(locales)) {
          locales.forEach(function (locale) {
                        SRTlib.send(`{ "anonymous": true, "function": "emptyKey353", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "emptyKey353"},');

            return _this._apply(locale);
                        SRTlib.send('], "end": "emptyKey353"},');

          });
        } else {
          this._apply(locales);
        }
                SRTlib.send('], "end": "Translator"},');

      }
      var _proto = Translator.prototype;
      _proto._apply = function _apply(locale) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto._apply._apply", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!locale || !locale.strings) {
                    SRTlib.send('], "end": "module.exports._proto._apply._apply"},');

          return;
        }
        var prevLocale = this.locale;
        this.locale = _extends({}, prevLocale, {
          strings: _extends({}, prevLocale.strings, locale.strings)
        });
        this.locale.pluralize = locale.pluralize || prevLocale.pluralize;
                SRTlib.send('], "end": "module.exports._proto._apply._apply"},');

      };
      _proto.interpolate = function interpolate(phrase, options) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.interpolate.interpolate", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _String$prototype = String.prototype, split = _String$prototype.split, replace = _String$prototype.replace;
        var dollarRegex = /\$/g;
        var dollarBillsYall = '$$$$';
        var interpolated = [phrase];
        for (var arg in options) {
          if (arg !== '_' && has(options, arg)) {
            var replacement = options[arg];
            if (typeof replacement === 'string') {
              replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);
            }
            interpolated = insertReplacement(interpolated, new RegExp('%\\{' + arg + '\\}', 'g'), replacement);
          }
        }
                SRTlib.send('], "end": "module.exports._proto.interpolate.interpolate"},');

        return interpolated;
        function insertReplacement(source, rx, replacement) {
                    SRTlib.send(`{ "anonymous": false, "function": "insertReplacement", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

          var newParts = [];
          source.forEach(function (chunk) {
                        SRTlib.send(`{ "anonymous": true, "function": "emptyKey354", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            if (typeof chunk !== 'string') {
                            SRTlib.send('], "end": "emptyKey354"},');

              return newParts.push(chunk);
            }
            split.call(chunk, rx).forEach(function (raw, i, list) {
                            SRTlib.send(`{ "anonymous": true, "function": "forEach7", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

              if (raw !== '') {
                newParts.push(raw);
              }
              if (i < list.length - 1) {
                newParts.push(replacement);
              }
                            SRTlib.send('], "end": "forEach7"},');

            });
                        SRTlib.send('], "end": "emptyKey354"},');

          });
                    SRTlib.send('], "end": "insertReplacement"},');

          return newParts;
                    SRTlib.send('], "end": "insertReplacement"},');

        }
                SRTlib.send('], "end": "module.exports._proto.interpolate.interpolate"},');

      };
      _proto.translate = function translate(key, options) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.translate.translate", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "module.exports._proto.translate.translate"},');

        return this.translateArray(key, options).join('');
                SRTlib.send('], "end": "module.exports._proto.translate.translate"},');

      };
      _proto.translateArray = function translateArray(key, options) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._proto.translateArray.translateArray", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var string = this.locale.strings[key];
        var hasPluralForms = typeof string === 'object';
        if (hasPluralForms) {
          if (options && typeof options.smart_count !== 'undefined') {
            var plural = this.locale.pluralize(options.smart_count);
                        SRTlib.send('], "end": "module.exports._proto.translateArray.translateArray"},');

            return this.interpolate(string[plural], options);
          } else {
                        SRTlib.send('], "end": "module.exports._proto.translateArray.translateArray"},');

            throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');
          }
        }
                SRTlib.send('], "end": "module.exports._proto.translateArray.translateArray"},');

        return this.interpolate(string, options);
                SRTlib.send('], "end": "module.exports._proto.translateArray.translateArray"},');

      };
            SRTlib.send('], "end": "module.exports36"},');

      return Translator;
            SRTlib.send('], "end": "module.exports36"},');

    })();
        SRTlib.send('], "end": "emptyKey355"},');

  }, {
    "./hasProperty": 339
  }],
  321: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey356", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var dataURItoBlob = require('./dataURItoBlob');
    module.exports = function canvasToBlob(canvas, type, quality) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.canvasToBlob", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (canvas.toBlob) {
                SRTlib.send('], "end": "module.exports.canvasToBlob"},');

        return new Promise(function (resolve) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports.canvasToBlob.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          canvas.toBlob(resolve, type, quality);
                    SRTlib.send('], "end": "module.exports.canvasToBlob.ReturnStatement"},');

        });
      }
            SRTlib.send('], "end": "module.exports.canvasToBlob"},');

      return Promise.resolve().then(function () {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.canvasToBlob.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports.canvasToBlob.ReturnStatement.then"},');

        return dataURItoBlob(canvas.toDataURL(type, quality), {});
                SRTlib.send('], "end": "module.exports.canvasToBlob.ReturnStatement.then"},');

      });
            SRTlib.send('], "end": "module.exports.canvasToBlob"},');

    };
        SRTlib.send('], "end": "emptyKey356"},');

  }, {
    "./dataURItoBlob": 322
  }],
  322: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey357", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function dataURItoBlob(dataURI, opts, toFile) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.dataURItoBlob", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var data = dataURI.split(',')[1];
      var mimeType = opts.mimeType || dataURI.split(',')[0].split(':')[1].split(';')[0];
      if (mimeType == null) {
        mimeType = 'plain/text';
      }
      var binary = atob(data);
      var array = [];
      for (var i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
      }
      var bytes;
      try {
        bytes = new Uint8Array(array);
      } catch (err) {
                SRTlib.send('], "end": "module.exports.dataURItoBlob"},');

        return null;
      }
      if (toFile) {
                SRTlib.send('], "end": "module.exports.dataURItoBlob"},');

        return new File([bytes], opts.name || '', {
          type: mimeType
        });
      }
            SRTlib.send('], "end": "module.exports.dataURItoBlob"},');

      return new Blob([bytes], {
        type: mimeType
      });
            SRTlib.send('], "end": "module.exports.dataURItoBlob"},');

    };
        SRTlib.send('], "end": "emptyKey357"},');

  }, {}],
  323: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey358", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var throttle = require('lodash.throttle');
    function _emitSocketProgress(uploader, progressData, file) {
            SRTlib.send(`{ "anonymous": false, "function": "_emitSocketProgress", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var progress = progressData.progress, bytesUploaded = progressData.bytesUploaded, bytesTotal = progressData.bytesTotal;
      if (progress) {
        uploader.uppy.log("Upload progress: " + progress);
        uploader.uppy.emit('upload-progress', file, {
          uploader: uploader,
          bytesUploaded: bytesUploaded,
          bytesTotal: bytesTotal
        });
      }
            SRTlib.send('], "end": "_emitSocketProgress"},');

    }
    module.exports = throttle(_emitSocketProgress, 300, {
      leading: true,
      trailing: true
    });
        SRTlib.send('], "end": "emptyKey358"},');

  }, {
    "lodash.throttle": 138
  }],
  324: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey359", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var isDOMElement = require('./isDOMElement');
    module.exports = function findAllDOMElements(element) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.findAllDOMElements", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof element === 'string') {
        var elements = [].slice.call(document.querySelectorAll(element));
                SRTlib.send('], "end": "module.exports.findAllDOMElements"},');

        return elements.length > 0 ? elements : null;
      }
      if (typeof element === 'object' && isDOMElement(element)) {
                SRTlib.send('], "end": "module.exports.findAllDOMElements"},');

        return [element];
      }
            SRTlib.send('], "end": "module.exports.findAllDOMElements"},');

    };
        SRTlib.send('], "end": "emptyKey359"},');

  }, {
    "./isDOMElement": 340
  }],
  325: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey360", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var isDOMElement = require('./isDOMElement');
    module.exports = function findDOMElement(element, context) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.findDOMElement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (context === void 0) {
        context = document;
      }
      if (typeof element === 'string') {
                SRTlib.send('], "end": "module.exports.findDOMElement"},');

        return context.querySelector(element);
      }
      if (isDOMElement(element)) {
                SRTlib.send('], "end": "module.exports.findDOMElement"},');

        return element;
      }
            SRTlib.send('], "end": "module.exports.findDOMElement"},');

    };
        SRTlib.send('], "end": "emptyKey360"},');

  }, {
    "./isDOMElement": 340
  }],
  326: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey361", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function generateFileID(file) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.generateFileID", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var id = 'uppy';
      if (typeof file.name === 'string') {
        id += '-' + encodeFilename(file.name.toLowerCase());
      }
      if (file.type !== undefined) {
        id += '-' + file.type;
      }
      if (file.meta && typeof file.meta.relativePath === 'string') {
        id += '-' + encodeFilename(file.meta.relativePath.toLowerCase());
      }
      if (file.data.size !== undefined) {
        id += '-' + file.data.size;
      }
      if (file.data.lastModified !== undefined) {
        id += '-' + file.data.lastModified;
      }
            SRTlib.send('], "end": "module.exports.generateFileID"},');

      return id;
            SRTlib.send('], "end": "module.exports.generateFileID"},');

    };
    function encodeFilename(name) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeFilename", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var suffix = '';
            SRTlib.send('], "end": "encodeFilename"},');

      return name.replace(/[^A-Z0-9]/ig, function (character) {
                SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement18", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        suffix += '-' + encodeCharacter(character);
                SRTlib.send('], "end": "ReturnStatement18"},');

        return '/';
                SRTlib.send('], "end": "ReturnStatement18"},');

      }) + suffix;
            SRTlib.send('], "end": "encodeFilename"},');

    }
    function encodeCharacter(character) {
            SRTlib.send(`{ "anonymous": false, "function": "encodeCharacter", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "encodeCharacter"},');

      return character.charCodeAt(0).toString(32);
            SRTlib.send('], "end": "encodeCharacter"},');

    }
        SRTlib.send('], "end": "emptyKey361"},');

  }, {}],
  327: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey362", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function getBytesRemaining(fileProgress) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getBytesRemaining", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.getBytesRemaining"},');

      return fileProgress.bytesTotal - fileProgress.bytesUploaded;
            SRTlib.send('], "end": "module.exports.getBytesRemaining"},');

    };
        SRTlib.send('], "end": "emptyKey362"},');

  }, {}],
  328: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey363", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var webkitGetAsEntryApi = require('./utils/webkitGetAsEntryApi/index');
    var fallbackApi = require('./utils/fallbackApi');
    module.exports = function getDroppedFiles(dataTransfer, _temp) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getDroppedFiles", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var _ref = _temp === void 0 ? {} : _temp, _ref$logDropError = _ref.logDropError, logDropError = _ref$logDropError === void 0 ? function () {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.getDroppedFiles.logDropError", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports.getDroppedFiles.logDropError"},');

      } : _ref$logDropError;
      if (dataTransfer.items && dataTransfer.items[0] && ('webkitGetAsEntry' in dataTransfer.items[0])) {
                SRTlib.send('], "end": "module.exports.getDroppedFiles"},');

        return webkitGetAsEntryApi(dataTransfer, logDropError);
      } else {
                SRTlib.send('], "end": "module.exports.getDroppedFiles"},');

        return fallbackApi(dataTransfer);
      }
            SRTlib.send('], "end": "module.exports.getDroppedFiles"},');

    };
        SRTlib.send('], "end": "emptyKey363"},');

  }, {
    "./utils/fallbackApi": 329,
    "./utils/webkitGetAsEntryApi/index": 332
  }],
  329: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey364", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var toArray = require('../../toArray');
    module.exports = function fallbackApi(dataTransfer) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.fallbackApi", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var files = toArray(dataTransfer.files);
            SRTlib.send('], "end": "module.exports.fallbackApi"},');

      return Promise.resolve(files);
            SRTlib.send('], "end": "module.exports.fallbackApi"},');

    };
        SRTlib.send('], "end": "emptyKey364"},');

  }, {
    "../../toArray": 349
  }],
  330: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey365", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFilesAndDirectoriesFromDirectory3", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var onSuccess = _ref.onSuccess;
      directoryReader.readEntries(function (entries) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFilesAndDirectoriesFromDirectory", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var newEntries = [].concat(oldEntries, entries);
        if (entries.length) {
          setTimeout(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFilesAndDirectoriesFromDirectory.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {
              onSuccess: onSuccess
            });
                        SRTlib.send('], "end": "module.exports.getFilesAndDirectoriesFromDirectory.setTimeout"},');

          }, 0);
        } else {
          onSuccess(newEntries);
        }
                SRTlib.send('], "end": "module.exports.getFilesAndDirectoriesFromDirectory"},');

      }, function (error) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFilesAndDirectoriesFromDirectory2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        logDropError(error);
        onSuccess(oldEntries);
                SRTlib.send('], "end": "module.exports.getFilesAndDirectoriesFromDirectory2"},');

      });
            SRTlib.send('], "end": "module.exports.getFilesAndDirectoriesFromDirectory3"},');

    };
        SRTlib.send('], "end": "emptyKey365"},');

  }, {}],
  331: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey366", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function getRelativePath(fileEntry) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getRelativePath", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!fileEntry.fullPath || fileEntry.fullPath === '/' + fileEntry.name) {
                SRTlib.send('], "end": "module.exports.getRelativePath"},');

        return null;
      } else {
                SRTlib.send('], "end": "module.exports.getRelativePath"},');

        return fileEntry.fullPath;
      }
            SRTlib.send('], "end": "module.exports.getRelativePath"},');

    };
        SRTlib.send('], "end": "emptyKey366"},');

  }, {}],
  332: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey367", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var toArray = require('../../../toArray');
    var getRelativePath = require('./getRelativePath');
    var getFilesAndDirectoriesFromDirectory = require('./getFilesAndDirectoriesFromDirectory');
    module.exports = function webkitGetAsEntryApi(dataTransfer, logDropError) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var files = [];
      var rootPromises = [];
      var createPromiseToAddFileOrParseDirectory = function createPromiseToAddFileOrParseDirectory(entry) {
                SRTlib.send(`{ "anonymous": false, "function": "createPromiseToAddFileOrParseDirectory", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "createPromiseToAddFileOrParseDirectory"},');

        return new Promise(function (resolve) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement3", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (entry.isFile) {
            entry.file(function (file) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              file.relativePath = getRelativePath(entry);
              files.push(file);
              resolve();
                            SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement"},');

            }, function (error) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

              logDropError(error);
              resolve();
                            SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement2"},');

            });
          } else if (entry.isDirectory) {
            var directoryReader = entry.createReader();
            getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {
              onSuccess: function onSuccess(entries) {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement.getFilesAndDirectoriesFromDirectory.onSuccess.onSuccess", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                var promises = entries.map(function (entry) {
                                    SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement.getFilesAndDirectoriesFromDirectory.onSuccess.onSuccess.promises", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                                    SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement.getFilesAndDirectoriesFromDirectory.onSuccess.onSuccess.promises"},');

                  return createPromiseToAddFileOrParseDirectory(entry);
                                    SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement.getFilesAndDirectoriesFromDirectory.onSuccess.onSuccess.promises"},');

                });
                Promise.all(promises).then(function () {
                                    SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement.getFilesAndDirectoriesFromDirectory.onSuccess.onSuccess.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                    SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement.getFilesAndDirectoriesFromDirectory.onSuccess.onSuccess.then"},');

                  return resolve();
                                    SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement.getFilesAndDirectoriesFromDirectory.onSuccess.onSuccess.then"},');

                });
                                SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement.getFilesAndDirectoriesFromDirectory.onSuccess.onSuccess"},');

              }
            });
          }
                    SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.createPromiseToAddFileOrParseDirectory.createPromiseToAddFileOrParseDirectory.ReturnStatement3"},');

        });
                SRTlib.send('], "end": "createPromiseToAddFileOrParseDirectory"},');

      };
      toArray(dataTransfer.items).forEach(function (item) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var entry = item.webkitGetAsEntry();
        if (entry) {
          rootPromises.push(createPromiseToAddFileOrParseDirectory(entry));
        }
                SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.forEach"},');

      });
            SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi"},');

      return Promise.all(rootPromises).then(function () {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.webkitGetAsEntryApi.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.ReturnStatement.then"},');

        return files;
                SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi.ReturnStatement.then"},');

      });
            SRTlib.send('], "end": "module.exports.webkitGetAsEntryApi"},');

    };
        SRTlib.send('], "end": "emptyKey367"},');

  }, {
    "../../../toArray": 349,
    "./getFilesAndDirectoriesFromDirectory": 330,
    "./getRelativePath": 331
  }],
  333: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey368", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function getFileNameAndExtension(fullFileName) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFileNameAndExtension", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var lastDot = fullFileName.lastIndexOf('.');
      if (lastDot === -1 || lastDot === fullFileName.length - 1) {
                SRTlib.send('], "end": "module.exports.getFileNameAndExtension"},');

        return {
          name: fullFileName,
          extension: undefined
        };
      } else {
                SRTlib.send('], "end": "module.exports.getFileNameAndExtension"},');

        return {
          name: fullFileName.slice(0, lastDot),
          extension: fullFileName.slice(lastDot + 1)
        };
      }
            SRTlib.send('], "end": "module.exports.getFileNameAndExtension"},');

    };
        SRTlib.send('], "end": "emptyKey368"},');

  }, {}],
  334: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey369", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var getFileNameAndExtension = require('./getFileNameAndExtension');
    var mimeTypes = require('./mimeTypes');
    module.exports = function getFileType(file) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFileType", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var fileExtension = file.name ? getFileNameAndExtension(file.name).extension : null;
      fileExtension = fileExtension ? fileExtension.toLowerCase() : null;
      if (file.type) {
                SRTlib.send('], "end": "module.exports.getFileType"},');

        return file.type;
      } else if (fileExtension && mimeTypes[fileExtension]) {
                SRTlib.send('], "end": "module.exports.getFileType"},');

        return mimeTypes[fileExtension];
      } else {
                SRTlib.send('], "end": "module.exports.getFileType"},');

        return 'application/octet-stream';
      }
            SRTlib.send('], "end": "module.exports.getFileType"},');

    };
        SRTlib.send('], "end": "emptyKey369"},');

  }, {
    "./getFileNameAndExtension": 333,
    "./mimeTypes": 345
  }],
  335: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey370", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var mimeToExtensions = {
      'audio/mp3': 'mp3',
      'audio/ogg': 'ogg',
      'audio/webm': 'webm',
      'image/gif': 'gif',
      'image/heic': 'heic',
      'image/heif': 'heif',
      'image/jpeg': 'jpg',
      'image/png': 'png',
      'image/svg+xml': 'svg',
      'video/mp4': 'mp4',
      'video/ogg': 'ogv',
      'video/quicktime': 'mov',
      'video/webm': 'webm',
      'video/x-matroska': 'mkv',
      'video/x-msvideo': 'avi'
    };
    module.exports = function getFileTypeExtension(mimeType) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getFileTypeExtension", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      mimeType = mimeType.replace(/;.*$/, '');
            SRTlib.send('], "end": "module.exports.getFileTypeExtension"},');

      return mimeToExtensions[mimeType] || null;
            SRTlib.send('], "end": "module.exports.getFileTypeExtension"},');

    };
        SRTlib.send('], "end": "emptyKey370"},');

  }, {}],
  336: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey371", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function getSocketHost(url) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getSocketHost", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var regex = /^(?:https?:\/\/|\/\/)?(?:[^@\n]+@)?(?:www\.)?([^\n]+)/i;
      var host = regex.exec(url)[1];
      var socketProtocol = (/^http:\/\//i).test(url) ? 'ws' : 'wss';
            SRTlib.send('], "end": "module.exports.getSocketHost"},');

      return socketProtocol + "://" + host;
            SRTlib.send('], "end": "module.exports.getSocketHost"},');

    };
        SRTlib.send('], "end": "emptyKey371"},');

  }, {}],
  337: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey372", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function getSpeed(fileProgress) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getSpeed", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!fileProgress.bytesUploaded) {
                SRTlib.send('], "end": "module.exports.getSpeed"},');

        return 0;
      }
      var timeElapsed = new Date() - fileProgress.uploadStarted;
      var uploadSpeed = fileProgress.bytesUploaded / (timeElapsed / 1000);
            SRTlib.send('], "end": "module.exports.getSpeed"},');

      return uploadSpeed;
            SRTlib.send('], "end": "module.exports.getSpeed"},');

    };
        SRTlib.send('], "end": "emptyKey372"},');

  }, {}],
  338: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey373", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function getTimeStamp() {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.getTimeStamp", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var date = new Date();
      var hours = pad(date.getHours().toString());
      var minutes = pad(date.getMinutes().toString());
      var seconds = pad(date.getSeconds().toString());
            SRTlib.send('], "end": "module.exports.getTimeStamp"},');

      return hours + ':' + minutes + ':' + seconds;
            SRTlib.send('], "end": "module.exports.getTimeStamp"},');

    };
    function pad(str) {
            SRTlib.send(`{ "anonymous": false, "function": "pad", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "pad"},');

      return str.length !== 2 ? 0 + str : str;
            SRTlib.send('], "end": "pad"},');

    }
        SRTlib.send('], "end": "emptyKey373"},');

  }, {}],
  339: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey374", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function has(object, key) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.has", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "module.exports.has"},');

      return Object.prototype.hasOwnProperty.call(object, key);
            SRTlib.send('], "end": "module.exports.has"},');

    };
        SRTlib.send('], "end": "emptyKey374"},');

  }, {}],
  340: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey375", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function isDOMElement(obj) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.isDOMElement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.isDOMElement"},');

      return obj && typeof obj === 'object' && obj.nodeType === Node.ELEMENT_NODE;
            SRTlib.send('], "end": "module.exports.isDOMElement"},');

    };
        SRTlib.send('], "end": "emptyKey375"},');

  }, {}],
  341: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey376", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function isDragDropSupported() {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.isDragDropSupported", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      var div = document.createElement('div');
      if (!(('draggable' in div)) || !(('ondragstart' in div) && ('ondrop' in div))) {
                SRTlib.send('], "end": "module.exports.isDragDropSupported"},');

        return false;
      }
      if (!(('FormData' in window))) {
                SRTlib.send('], "end": "module.exports.isDragDropSupported"},');

        return false;
      }
      if (!(('FileReader' in window))) {
                SRTlib.send('], "end": "module.exports.isDragDropSupported"},');

        return false;
      }
            SRTlib.send('], "end": "module.exports.isDragDropSupported"},');

      return true;
            SRTlib.send('], "end": "module.exports.isDragDropSupported"},');

    };
        SRTlib.send('], "end": "emptyKey376"},');

  }, {}],
  342: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey377", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function isNetworkError(xhr) {
            SRTlib.send(`{ "anonymous": false, "function": "isNetworkError", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!xhr) {
                SRTlib.send('], "end": "isNetworkError"},');

        return false;
      }
            SRTlib.send('], "end": "isNetworkError"},');

      return xhr.readyState !== 0 && xhr.readyState !== 4 || xhr.status === 0;
            SRTlib.send('], "end": "isNetworkError"},');

    }
    module.exports = isNetworkError;
        SRTlib.send('], "end": "emptyKey377"},');

  }, {}],
  343: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey378", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function isObjectURL(url) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.isObjectURL", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.isObjectURL"},');

      return url.indexOf('blob:') === 0;
            SRTlib.send('], "end": "module.exports.isObjectURL"},');

    };
        SRTlib.send('], "end": "emptyKey378"},');

  }, {}],
  344: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey379", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function isPreviewSupported(fileType) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.isPreviewSupported", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (!fileType) {
                SRTlib.send('], "end": "module.exports.isPreviewSupported"},');

        return false;
      }
      var fileTypeSpecific = fileType.split('/')[1];
      if ((/^(jpe?g|gif|png|svg|svg\+xml|bmp|webp)$/).test(fileTypeSpecific)) {
                SRTlib.send('], "end": "module.exports.isPreviewSupported"},');

        return true;
      }
            SRTlib.send('], "end": "module.exports.isPreviewSupported"},');

      return false;
            SRTlib.send('], "end": "module.exports.isPreviewSupported"},');

    };
        SRTlib.send('], "end": "emptyKey379"},');

  }, {}],
  345: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey380", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      md: 'text/markdown',
      markdown: 'text/markdown',
      mp4: 'video/mp4',
      mp3: 'audio/mp3',
      svg: 'image/svg+xml',
      jpg: 'image/jpeg',
      png: 'image/png',
      gif: 'image/gif',
      heic: 'image/heic',
      heif: 'image/heif',
      yaml: 'text/yaml',
      yml: 'text/yaml',
      csv: 'text/csv',
      tsv: 'text/tab-separated-values',
      tab: 'text/tab-separated-values',
      avi: 'video/x-msvideo',
      mks: 'video/x-matroska',
      mkv: 'video/x-matroska',
      mov: 'video/quicktime',
      doc: 'application/msword',
      docm: 'application/vnd.ms-word.document.macroenabled.12',
      docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      dot: 'application/msword',
      dotm: 'application/vnd.ms-word.template.macroenabled.12',
      dotx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
      xla: 'application/vnd.ms-excel',
      xlam: 'application/vnd.ms-excel.addin.macroenabled.12',
      xlc: 'application/vnd.ms-excel',
      xlf: 'application/x-xliff+xml',
      xlm: 'application/vnd.ms-excel',
      xls: 'application/vnd.ms-excel',
      xlsb: 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
      xlsm: 'application/vnd.ms-excel.sheet.macroenabled.12',
      xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      xlt: 'application/vnd.ms-excel',
      xltm: 'application/vnd.ms-excel.template.macroenabled.12',
      xltx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
      xlw: 'application/vnd.ms-excel',
      txt: 'text/plain',
      text: 'text/plain',
      conf: 'text/plain',
      log: 'text/plain',
      pdf: 'application/pdf'
    };
        SRTlib.send('], "end": "emptyKey380"},');

  }, {}],
  346: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey381", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var secondsToTime = require('./secondsToTime');
    module.exports = function prettyETA(seconds) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.prettyETA", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var time = secondsToTime(seconds);
      var hoursStr = time.hours ? time.hours + 'h ' : '';
      var minutesVal = time.hours ? ('0' + time.minutes).substr(-2) : time.minutes;
      var minutesStr = minutesVal ? minutesVal + 'm' : '';
      var secondsVal = minutesVal ? ('0' + time.seconds).substr(-2) : time.seconds;
      var secondsStr = time.hours ? '' : minutesVal ? ' ' + secondsVal + 's' : secondsVal + 's';
            SRTlib.send('], "end": "module.exports.prettyETA"},');

      return "" + hoursStr + minutesStr + secondsStr;
            SRTlib.send('], "end": "module.exports.prettyETA"},');

    };
        SRTlib.send('], "end": "emptyKey381"},');

  }, {
    "./secondsToTime": 347
  }],
  347: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey382", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function secondsToTime(rawSeconds) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.secondsToTime", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var hours = Math.floor(rawSeconds / 3600) % 24;
      var minutes = Math.floor(rawSeconds / 60) % 60;
      var seconds = Math.floor(rawSeconds % 60);
            SRTlib.send('], "end": "module.exports.secondsToTime"},');

      return {
        hours: hours,
        minutes: minutes,
        seconds: seconds
      };
            SRTlib.send('], "end": "module.exports.secondsToTime"},');

    };
        SRTlib.send('], "end": "emptyKey382"},');

  }, {}],
  348: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey383", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function settle(promises) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.settle", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var resolutions = [];
      var rejections = [];
      function resolved(value) {
                SRTlib.send(`{ "anonymous": false, "function": "resolved", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        resolutions.push(value);
                SRTlib.send('], "end": "resolved"},');

      }
      function rejected(error) {
                SRTlib.send(`{ "anonymous": false, "function": "rejected", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        rejections.push(error);
                SRTlib.send('], "end": "rejected"},');

      }
      var wait = Promise.all(promises.map(function (promise) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.settle.wait", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "module.exports.settle.wait"},');

        return promise.then(resolved, rejected);
                SRTlib.send('], "end": "module.exports.settle.wait"},');

      }));
            SRTlib.send('], "end": "module.exports.settle"},');

      return wait.then(function () {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports.settle.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports.settle.ReturnStatement"},');

        return {
          successful: resolutions,
          failed: rejections
        };
                SRTlib.send('], "end": "module.exports.settle.ReturnStatement"},');

      });
            SRTlib.send('], "end": "module.exports.settle"},');

    };
        SRTlib.send('], "end": "emptyKey383"},');

  }, {}],
  349: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey384", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function toArray(list) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.toArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.toArray"},');

      return Array.prototype.slice.call(list || [], 0);
            SRTlib.send('], "end": "module.exports.toArray"},');

    };
        SRTlib.send('], "end": "emptyKey384"},');

  }, {}],
  350: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey385", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = {
      "name": "@uppy/webcam",
      "description": "Uppy plugin that takes photos or records videos using the device's camera.",
      "version": "1.6.6",
      "license": "MIT",
      "main": "lib/index.js",
      "style": "dist/style.min.css",
      "types": "types/index.d.ts",
      "keywords": ["file uploader", "uppy", "uppy-plugin", "webcam", "picture", "photo", "video", "record", "mediarecorder"],
      "homepage": "https://uppy.io",
      "bugs": {
        "url": "https://github.com/transloadit/uppy/issues"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/transloadit/uppy.git"
      },
      "dependencies": {
        "@uppy/utils": "file:../utils",
        "preact": "8.2.9"
      },
      "peerDependencies": {
        "@uppy/core": "^1.0.0"
      }
    };
        SRTlib.send('], "end": "emptyKey385"},');

  }, {}],
  351: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey386", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports37", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports37"},');

      return h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        fill: "#0097DC",
        width: "66",
        height: "55",
        viewBox: "0 0 66 55"
      }, h("path", {
        d: "M57.3 8.433c4.59 0 8.1 3.51 8.1 8.1v29.7c0 4.59-3.51 8.1-8.1 8.1H8.7c-4.59 0-8.1-3.51-8.1-8.1v-29.7c0-4.59 3.51-8.1 8.1-8.1h9.45l4.59-7.02c.54-.54 1.35-1.08 2.16-1.08h16.2c.81 0 1.62.54 2.16 1.08l4.59 7.02h9.45zM33 14.64c-8.62 0-15.393 6.773-15.393 15.393 0 8.62 6.773 15.393 15.393 15.393 8.62 0 15.393-6.773 15.393-15.393 0-8.62-6.773-15.393-15.393-15.393zM33 40c-5.648 0-9.966-4.319-9.966-9.967 0-5.647 4.318-9.966 9.966-9.966s9.966 4.319 9.966 9.966C42.966 35.681 38.648 40 33 40z",
        "fill-rule": "evenodd"
      }));
            SRTlib.send('], "end": "module.exports37"},');

    };
        SRTlib.send('], "end": "emptyKey386"},');

  }, {
    "preact": 160
  }],
  352: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey387", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('preact'), h = _require.h, Component = _require.Component;
    var SnapshotButton = require('./SnapshotButton');
    var RecordButton = require('./RecordButton');
    var RecordingLength = require('./RecordingLength');
    function isModeAvailable(modes, mode) {
            SRTlib.send(`{ "anonymous": false, "function": "isModeAvailable", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "isModeAvailable"},');

      return modes.indexOf(mode) !== -1;
            SRTlib.send('], "end": "isModeAvailable"},');

    }
    var CameraScreen = (function (_Component) {
            SRTlib.send(`{ "anonymous": true, "function": "CameraScreen", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(CameraScreen, _Component);
      function CameraScreen() {
                SRTlib.send(`{ "anonymous": false, "function": "CameraScreen", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "CameraScreen"},');

        return _Component.apply(this, arguments) || this;
                SRTlib.send('], "end": "CameraScreen"},');

      }
      var _proto = CameraScreen.prototype;
      _proto.componentDidMount = function componentDidMount() {
                SRTlib.send(`{ "anonymous": true, "function": "CameraScreen._proto.componentDidMount.componentDidMount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.props.onFocus();
                SRTlib.send('], "end": "CameraScreen._proto.componentDidMount.componentDidMount"},');

      };
      _proto.componentWillUnmount = function componentWillUnmount() {
                SRTlib.send(`{ "anonymous": true, "function": "CameraScreen._proto.componentWillUnmount.componentWillUnmount", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.props.onStop();
                SRTlib.send('], "end": "CameraScreen._proto.componentWillUnmount.componentWillUnmount"},');

      };
      _proto.render = function render() {
                SRTlib.send(`{ "anonymous": true, "function": "CameraScreen._proto.render.render", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var shouldShowRecordButton = this.props.supportsRecording && (isModeAvailable(this.props.modes, 'video-only') || isModeAvailable(this.props.modes, 'audio-only') || isModeAvailable(this.props.modes, 'video-audio'));
        var shouldShowSnapshotButton = isModeAvailable(this.props.modes, 'picture');
        var shouldShowRecordingLength = this.props.supportsRecording && this.props.showRecordingLength;
                SRTlib.send('], "end": "CameraScreen._proto.render.render"},');

        return h("div", {
          class: "uppy uppy-Webcam-container"
        }, h("div", {
          class: "uppy-Webcam-videoContainer"
        }, h("video", {
          class: "uppy-Webcam-video  " + (this.props.mirror ? 'uppy-Webcam-video--mirrored' : ''),
          autoplay: true,
          muted: true,
          playsinline: true,
          srcObject: this.props.src || ''
        })), h("div", {
          class: "uppy-Webcam-buttonContainer"
        }, shouldShowRecordingLength ? RecordingLength(this.props) : null, ' ', shouldShowSnapshotButton ? SnapshotButton(this.props) : null, ' ', shouldShowRecordButton ? RecordButton(this.props) : null));
                SRTlib.send('], "end": "CameraScreen._proto.render.render"},');

      };
            SRTlib.send('], "end": "CameraScreen"},');

      return CameraScreen;
            SRTlib.send('], "end": "CameraScreen"},');

    })(Component);
    module.exports = CameraScreen;
        SRTlib.send('], "end": "emptyKey387"},');

  }, {
    "./RecordButton": 354,
    "./RecordingLength": 355,
    "./SnapshotButton": 356,
    "preact": 160
  }],
  353: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey388", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    module.exports = function (props) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports38", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports38"},');

      return h("div", {
        class: "uppy-Webcam-permissons"
      }, h("div", {
        class: "uppy-Webcam-permissonsIcon"
      }, props.icon()), h("h1", {
        class: "uppy-Webcam-title"
      }, props.hasCamera ? props.i18n('allowAccessTitle') : props.i18n('noCameraTitle')), h("p", null, props.hasCamera ? props.i18n('allowAccessDescription') : props.i18n('noCameraDescription')));
            SRTlib.send('], "end": "module.exports38"},');

    };
        SRTlib.send('], "end": "emptyKey388"},');

  }, {
    "preact": 160
  }],
  354: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey389", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    module.exports = function RecordButton(_ref) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.RecordButton", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var recording = _ref.recording, onStartRecording = _ref.onStartRecording, onStopRecording = _ref.onStopRecording, i18n = _ref.i18n;
      if (recording) {
                SRTlib.send('], "end": "module.exports.RecordButton"},');

        return h("button", {
          class: "uppy-u-reset uppy-c-btn uppy-Webcam-button uppy-Webcam-button--video",
          type: "button",
          title: i18n('stopRecording'),
          "aria-label": i18n('stopRecording'),
          onclick: onStopRecording,
          "data-uppy-super-focusable": true
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          class: "UppyIcon",
          width: "100",
          height: "100",
          viewBox: "0 0 100 100"
        }, h("rect", {
          x: "15",
          y: "15",
          width: "70",
          height: "70"
        })));
      }
            SRTlib.send('], "end": "module.exports.RecordButton"},');

      return h("button", {
        class: "uppy-u-reset uppy-c-btn uppy-Webcam-button uppy-Webcam-button--video",
        type: "button",
        title: i18n('startRecording'),
        "aria-label": i18n('startRecording'),
        onclick: onStartRecording,
        "data-uppy-super-focusable": true
      }, h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        class: "UppyIcon",
        width: "100",
        height: "100",
        viewBox: "0 0 100 100"
      }, h("circle", {
        cx: "50",
        cy: "50",
        r: "40"
      })));
            SRTlib.send('], "end": "module.exports.RecordButton"},');

    };
        SRTlib.send('], "end": "emptyKey389"},');

  }, {
    "preact": 160
  }],
  355: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey390", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var formatSeconds = require('./formatSeconds');
    module.exports = function RecordingLength(_ref) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.RecordingLength", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var recordingLengthSeconds = _ref.recordingLengthSeconds, i18n = _ref.i18n;
      var formattedRecordingLengthSeconds = formatSeconds(recordingLengthSeconds);
            SRTlib.send('], "end": "module.exports.RecordingLength"},');

      return h("div", {
        class: "uppy-Webcam-recordingLength",
        "aria-label": i18n('recordingLength', {
          recording_length: formattedRecordingLengthSeconds
        })
      }, formattedRecordingLengthSeconds);
            SRTlib.send('], "end": "module.exports.RecordingLength"},');

    };
        SRTlib.send('], "end": "emptyKey390"},');

  }, {
    "./formatSeconds": 357,
    "preact": 160
  }],
  356: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey391", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _require = require('preact'), h = _require.h;
    var CameraIcon = require('./CameraIcon');
    module.exports = function (_ref) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports39", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var onSnapshot = _ref.onSnapshot, i18n = _ref.i18n;
            SRTlib.send('], "end": "module.exports39"},');

      return h("button", {
        class: "uppy-u-reset uppy-c-btn uppy-Webcam-button uppy-Webcam-button--picture",
        type: "button",
        title: i18n('takePicture'),
        "aria-label": i18n('takePicture'),
        onclick: onSnapshot,
        "data-uppy-super-focusable": true
      }, CameraIcon());
            SRTlib.send('], "end": "module.exports39"},');

    };
        SRTlib.send('], "end": "emptyKey391"},');

  }, {
    "./CameraIcon": 351,
    "preact": 160
  }],
  357: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey392", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function formatSeconds(seconds) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.formatSeconds", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "module.exports.formatSeconds"},');

      return Math.floor(seconds / 60) + ":" + String(seconds % 60).padStart(2, 0);
            SRTlib.send('], "end": "module.exports.formatSeconds"},');

    };
        SRTlib.send('], "end": "emptyKey392"},');

  }, {}],
  358: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey393", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var _class, _temp;
    function _extends() {
            SRTlib.send(`{ "anonymous": false, "function": "_extends", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      _extends = Object.assign || (function (target) {
                SRTlib.send(`{ "anonymous": true, "function": "_extends23", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
                SRTlib.send('], "end": "_extends23"},');

        return target;
                SRTlib.send('], "end": "_extends23"},');

      });
            SRTlib.send('], "end": "_extends"},');

      return _extends.apply(this, arguments);
            SRTlib.send('], "end": "_extends"},');

    }
    function _assertThisInitialized(self) {
            SRTlib.send(`{ "anonymous": false, "function": "_assertThisInitialized", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (self === void 0) {
                SRTlib.send('], "end": "_assertThisInitialized"},');

        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
            SRTlib.send('], "end": "_assertThisInitialized"},');

      return self;
            SRTlib.send('], "end": "_assertThisInitialized"},');

    }
    function _inheritsLoose(subClass, superClass) {
            SRTlib.send(`{ "anonymous": false, "function": "_inheritsLoose", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
            SRTlib.send('], "end": "_inheritsLoose"},');

    }
    var _require = require('preact'), h = _require.h;
    var _require2 = require('./../../core'), Plugin = _require2.Plugin;
    var Translator = require('./../../utils/lib/Translator');
    var getFileTypeExtension = require('./../../utils/lib/getFileTypeExtension');
    var mimeTypes = require('./../../utils/lib/mimeTypes');
    var canvasToBlob = require('./../../utils/lib/canvasToBlob');
    var supportsMediaRecorder = require('./supportsMediaRecorder');
    var CameraIcon = require('./CameraIcon');
    var CameraScreen = require('./CameraScreen');
    var PermissionsScreen = require('./PermissionsScreen');
    function toMimeType(fileType) {
            SRTlib.send(`{ "anonymous": false, "function": "toMimeType", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (fileType[0] === '.') {
                SRTlib.send('], "end": "toMimeType"},');

        return mimeTypes[fileType.slice(1)];
      }
            SRTlib.send('], "end": "toMimeType"},');

      return fileType;
            SRTlib.send('], "end": "toMimeType"},');

    }
    function isVideoMimeType(mimeType) {
            SRTlib.send(`{ "anonymous": false, "function": "isVideoMimeType", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "isVideoMimeType"},');

      return (/^video\/[^*]+$/).test(mimeType);
            SRTlib.send('], "end": "isVideoMimeType"},');

    }
    function isImageMimeType(mimeType) {
            SRTlib.send(`{ "anonymous": false, "function": "isImageMimeType", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "isImageMimeType"},');

      return (/^image\/[^*]+$/).test(mimeType);
            SRTlib.send('], "end": "isImageMimeType"},');

    }
    function getMediaDevices() {
            SRTlib.send(`{ "anonymous": false, "function": "getMediaDevices", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                SRTlib.send('], "end": "getMediaDevices"},');

        return navigator.mediaDevices;
      }
      var _getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia;
      if (!_getUserMedia) {
                SRTlib.send('], "end": "getMediaDevices"},');

        return null;
      }
            SRTlib.send('], "end": "getMediaDevices"},');

      return {
        getUserMedia: function getUserMedia(opts) {
                    SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.getUserMedia.getUserMedia", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "ReturnStatement.getUserMedia.getUserMedia"},');

          return new Promise(function (resolve, reject) {
                        SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement.getUserMedia.getUserMedia.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            _getUserMedia.call(navigator, opts, resolve, reject);
                        SRTlib.send('], "end": "ReturnStatement.getUserMedia.getUserMedia.ReturnStatement"},');

          });
                    SRTlib.send('], "end": "ReturnStatement.getUserMedia.getUserMedia"},');

        }
      };
            SRTlib.send('], "end": "getMediaDevices"},');

    }
    module.exports = (_temp = _class = (function (_Plugin) {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class11", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      _inheritsLoose(Webcam, _Plugin);
      function Webcam(uppy, opts) {
                SRTlib.send(`{ "anonymous": false, "function": "Webcam", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var _this;
        _this = _Plugin.call(this, uppy, opts) || this;
        _this.mediaDevices = getMediaDevices();
        _this.supportsUserMedia = !!_this.mediaDevices;
        _this.protocol = location.protocol.match(/https/i) ? 'https' : 'http';
        _this.id = _this.opts.id || 'Webcam';
        _this.title = _this.opts.title || 'Camera';
        _this.type = 'acquirer';
        _this.icon = function () {
                    SRTlib.send(`{ "anonymous": true, "function": "_this.icon3", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "_this.icon3"},');

          return h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            width: "32",
            height: "32",
            viewBox: "0 0 32 32",
            xmlns: "http://www.w3.org/2000/svg"
          }, h("g", {
            fill: "none",
            "fill-rule": "evenodd"
          }, h("rect", {
            fill: "#03BFEF",
            width: "32",
            height: "32",
            rx: "16"
          }), h("path", {
            d: "M22 11c1.133 0 2 .867 2 2v7.333c0 1.134-.867 2-2 2H10c-1.133 0-2-.866-2-2V13c0-1.133.867-2 2-2h2.333l1.134-1.733C13.6 9.133 13.8 9 14 9h4c.2 0 .4.133.533.267L19.667 11H22zm-6 1.533a3.764 3.764 0 0 0-3.8 3.8c0 2.129 1.672 3.801 3.8 3.801s3.8-1.672 3.8-3.8c0-2.13-1.672-3.801-3.8-3.801zm0 6.261c-1.395 0-2.46-1.066-2.46-2.46 0-1.395 1.065-2.461 2.46-2.461s2.46 1.066 2.46 2.46c0 1.395-1.065 2.461-2.46 2.461z",
            fill: "#FFF",
            "fill-rule": "nonzero"
          })));
                    SRTlib.send('], "end": "_this.icon3"},');

        };
        _this.defaultLocale = {
          strings: {
            smile: 'Smile!',
            takePicture: 'Take a picture',
            startRecording: 'Begin video recording',
            stopRecording: 'Stop video recording',
            allowAccessTitle: 'Please allow access to your camera',
            allowAccessDescription: 'In order to take pictures or record video with your camera, please allow camera access for this site.',
            noCameraTitle: 'Camera Not Available',
            noCameraDescription: 'In order to take pictures or record video, please connect a camera device',
            recordingStoppedMaxSize: 'Recording stopped because the file size is about to exceed the limit',
            recordingLength: 'Recording length %{recording_length}'
          }
        };
        var defaultOptions = {
          onBeforeSnapshot: function onBeforeSnapshot() {
                        SRTlib.send(`{ "anonymous": true, "function": "defaultOptions.onBeforeSnapshot.onBeforeSnapshot", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                        SRTlib.send('], "end": "defaultOptions.onBeforeSnapshot.onBeforeSnapshot"},');

            return Promise.resolve();
                        SRTlib.send('], "end": "defaultOptions.onBeforeSnapshot.onBeforeSnapshot"},');

          },
          countdown: false,
          modes: ['video-audio', 'video-only', 'audio-only', 'picture'],
          mirror: true,
          facingMode: 'user',
          preferredImageMimeType: null,
          preferredVideoMimeType: null,
          showRecordingLength: false
        };
        _this.opts = _extends({}, defaultOptions, {}, opts);
        _this.i18nInit();
        _this.install = _this.install.bind(_assertThisInitialized(_this));
        _this.setPluginState = _this.setPluginState.bind(_assertThisInitialized(_this));
        _this.render = _this.render.bind(_assertThisInitialized(_this));
        _this._start = _this._start.bind(_assertThisInitialized(_this));
        _this._stop = _this._stop.bind(_assertThisInitialized(_this));
        _this._takeSnapshot = _this._takeSnapshot.bind(_assertThisInitialized(_this));
        _this._startRecording = _this._startRecording.bind(_assertThisInitialized(_this));
        _this._stopRecording = _this._stopRecording.bind(_assertThisInitialized(_this));
        _this._oneTwoThreeSmile = _this._oneTwoThreeSmile.bind(_assertThisInitialized(_this));
        _this._focus = _this._focus.bind(_assertThisInitialized(_this));
        _this.webcamActive = false;
        if (_this.opts.countdown) {
          _this.opts.onBeforeSnapshot = _this._oneTwoThreeSmile;
        }
                SRTlib.send('], "end": "Webcam"},');

        return _this;
                SRTlib.send('], "end": "Webcam"},');

      }
      var _proto = Webcam.prototype;
      _proto.setOptions = function setOptions(newOpts) {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.setOptions.setOptions4", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        _Plugin.prototype.setOptions.call(this, newOpts);
        this.i18nInit();
                SRTlib.send('], "end": "module.exports._temp._class._proto.setOptions.setOptions4"},');

      };
      _proto.i18nInit = function i18nInit() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.i18nInit.i18nInit4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);
        this.i18n = this.translator.translate.bind(this.translator);
        this.i18nArray = this.translator.translateArray.bind(this.translator);
        this.setPluginState();
                SRTlib.send('], "end": "module.exports._temp._class._proto.i18nInit.i18nInit4"},');

      };
      _proto.hasCameraCheck = function hasCameraCheck() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (!this.mediaDevices) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck"},');

          return Promise.resolve(false);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck"},');

        return this.mediaDevices.enumerateDevices().then(function (devices) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck.ReturnStatement.mediaDevices.enumerateDevices.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck.ReturnStatement.mediaDevices.enumerateDevices.then"},');

          return devices.some(function (device) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck.ReturnStatement.mediaDevices.enumerateDevices.then.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck.ReturnStatement.mediaDevices.enumerateDevices.then.ReturnStatement"},');

            return device.kind === 'videoinput';
                        SRTlib.send('], "end": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck.ReturnStatement.mediaDevices.enumerateDevices.then.ReturnStatement"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck.ReturnStatement.mediaDevices.enumerateDevices.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto.hasCameraCheck.hasCameraCheck"},');

      };
      _proto.getConstraints = function getConstraints() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getConstraints.getConstraints", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var acceptsAudio = this.opts.modes.indexOf('video-audio') !== -1 || this.opts.modes.indexOf('audio-only') !== -1;
        var acceptsVideo = this.opts.modes.indexOf('video-audio') !== -1 || this.opts.modes.indexOf('video-only') !== -1 || this.opts.modes.indexOf('picture') !== -1;
                SRTlib.send('], "end": "module.exports._temp._class._proto.getConstraints.getConstraints"},');

        return {
          audio: acceptsAudio,
          video: acceptsVideo ? {
            facingMode: this.opts.facingMode
          } : false
        };
                SRTlib.send('], "end": "module.exports._temp._class._proto.getConstraints.getConstraints"},');

      };
      _proto._start = function _start() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._start._start", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this2 = this;
        if (!this.supportsUserMedia) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._start._start"},');

          return Promise.reject(new Error('Webcam access not supported'));
        }
        this.webcamActive = true;
        var constraints = this.getConstraints();
        this.hasCameraCheck().then(function (hasCamera) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._start._start.hasCameraCheck.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this2.setPluginState({
            hasCamera: hasCamera
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._start._start.hasCameraCheck.then"},');

          return _this2.mediaDevices.getUserMedia(constraints).then(function (stream) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._start._start.hasCameraCheck.then.ReturnStatement._this2.mediaDevices.getUserMedia.then.catch._this2.mediaDevices.getUserMedia.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this2.stream = stream;
            _this2.setPluginState({
              cameraReady: true
            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto._start._start.hasCameraCheck.then.ReturnStatement._this2.mediaDevices.getUserMedia.then.catch._this2.mediaDevices.getUserMedia.then"},');

          }).catch(function (err) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._start._start.hasCameraCheck.then.ReturnStatement._this2.mediaDevices.getUserMedia.then.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            _this2.setPluginState({
              cameraError: err
            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto._start._start.hasCameraCheck.then.ReturnStatement._this2.mediaDevices.getUserMedia.then.catch"},');

          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._start._start.hasCameraCheck.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._start._start"},');

      };
      _proto._getMediaRecorderOptions = function _getMediaRecorderOptions() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getMediaRecorderOptions._getMediaRecorderOptions", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var options = {};
        if (MediaRecorder.isTypeSupported) {
          var restrictions = this.uppy.opts.restrictions;
          var preferredVideoMimeTypes = [];
          if (this.opts.preferredVideoMimeType) {
            preferredVideoMimeTypes = [this.opts.preferredVideoMimeType];
          } else if (restrictions.allowedFileTypes) {
            preferredVideoMimeTypes = restrictions.allowedFileTypes.map(toMimeType).filter(isVideoMimeType);
          }
          var acceptableMimeTypes = preferredVideoMimeTypes.filter(function (candidateType) {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getMediaRecorderOptions._getMediaRecorderOptions.acceptableMimeTypes", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                        SRTlib.send('], "end": "module.exports._temp._class._proto._getMediaRecorderOptions._getMediaRecorderOptions.acceptableMimeTypes"},');

            return MediaRecorder.isTypeSupported(candidateType) && getFileTypeExtension(candidateType);
                        SRTlib.send('], "end": "module.exports._temp._class._proto._getMediaRecorderOptions._getMediaRecorderOptions.acceptableMimeTypes"},');

          });
          if (acceptableMimeTypes.length > 0) {
            options.mimeType = acceptableMimeTypes[0];
          }
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto._getMediaRecorderOptions._getMediaRecorderOptions"},');

        return options;
                SRTlib.send('], "end": "module.exports._temp._class._proto._getMediaRecorderOptions._getMediaRecorderOptions"},');

      };
      _proto._startRecording = function _startRecording() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._startRecording._startRecording", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this3 = this;
        this.recorder = new MediaRecorder(this.stream, this._getMediaRecorderOptions());
        this.recordingChunks = [];
        var stoppingBecauseOfMaxSize = false;
        this.recorder.addEventListener('dataavailable', function (event) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._startRecording._startRecording.recorder.addEventListener", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this3.recordingChunks.push(event.data);
          var restrictions = _this3.uppy.opts.restrictions;
          if (_this3.recordingChunks.length > 1 && restrictions.maxFileSize != null && !stoppingBecauseOfMaxSize) {
            var totalSize = _this3.recordingChunks.reduce(function (acc, chunk) {
                            SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._startRecording._startRecording.recorder.addEventListener.totalSize._this3.recordingChunks.reduce", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                            SRTlib.send('], "end": "module.exports._temp._class._proto._startRecording._startRecording.recorder.addEventListener.totalSize._this3.recordingChunks.reduce"},');

              return acc + chunk.size;
                            SRTlib.send('], "end": "module.exports._temp._class._proto._startRecording._startRecording.recorder.addEventListener.totalSize._this3.recordingChunks.reduce"},');

            }, 0);
            var averageChunkSize = (totalSize - _this3.recordingChunks[0].size) / (_this3.recordingChunks.length - 1);
            var expectedEndChunkSize = averageChunkSize * 3;
            var maxSize = Math.max(0, restrictions.maxFileSize - expectedEndChunkSize);
            if (totalSize > maxSize) {
              stoppingBecauseOfMaxSize = true;
              _this3.uppy.info(_this3.i18n('recordingStoppedMaxSize'), 'warning', 4000);
              _this3._stopRecording();
            }
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto._startRecording._startRecording.recorder.addEventListener"},');

        });
        this.recorder.start(500);
        if (this.opts.showRecordingLength) {
          this.recordingLengthTimer = setInterval(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._startRecording._startRecording.recordingLengthTimer.setInterval", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            var currentRecordingLength = _this3.getPluginState().recordingLengthSeconds;
            _this3.setPluginState({
              recordingLengthSeconds: currentRecordingLength + 1
            });
                        SRTlib.send('], "end": "module.exports._temp._class._proto._startRecording._startRecording.recordingLengthTimer.setInterval"},');

          }, 1000);
        }
        this.setPluginState({
          isRecording: true
        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._startRecording._startRecording"},');

      };
      _proto._stopRecording = function _stopRecording() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stopRecording._stopRecording", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this4 = this;
        var stopped = new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stopRecording._stopRecording.stopped", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          _this4.recorder.addEventListener('stop', function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stopRecording._stopRecording.stopped._this4.recorder.addEventListener", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            resolve();
                        SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording.stopped._this4.recorder.addEventListener"},');

          });
          _this4.recorder.stop();
          if (_this4.opts.showRecordingLength) {
            clearInterval(_this4.recordingLengthTimer);
            _this4.setPluginState({
              recordingLengthSeconds: 0
            });
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording.stopped"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording"},');

        return stopped.then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this4.setPluginState({
            isRecording: false
          });
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then.then"},');

          return _this4.getVideo();
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then.then"},');

        }).then(function (file) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          try {
            _this4.uppy.addFile(file);
          } catch (err) {
            if (!err.isRestriction) {
              _this4.uppy.log(err);
            }
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then.then2"},');

        }).then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this4.recordingChunks = null;
          _this4.recorder = null;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then"},');

        }, function (error) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this4.recordingChunks = null;
          _this4.recorder = null;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then2"},');

          throw error;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording.ReturnStatement.then.then2"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._stopRecording._stopRecording"},');

      };
      _proto._stop = function _stop() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stop._stop", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.stream.getAudioTracks().forEach(function (track) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stop._stop.stream.getAudioTracks.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          track.stop();
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stop._stop.stream.getAudioTracks.forEach"},');

        });
        this.stream.getVideoTracks().forEach(function (track) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._stop._stop.stream.getVideoTracks.forEach", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          track.stop();
                    SRTlib.send('], "end": "module.exports._temp._class._proto._stop._stop.stream.getVideoTracks.forEach"},');

        });
        this.webcamActive = false;
        this.stream = null;
                SRTlib.send('], "end": "module.exports._temp._class._proto._stop._stop"},');

      };
      _proto._getVideoElement = function _getVideoElement() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getVideoElement._getVideoElement", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "module.exports._temp._class._proto._getVideoElement._getVideoElement"},');

        return this.el.querySelector('.uppy-Webcam-video');
                SRTlib.send('], "end": "module.exports._temp._class._proto._getVideoElement._getVideoElement"},');

      };
      _proto._oneTwoThreeSmile = function _oneTwoThreeSmile() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this5 = this;
                SRTlib.send('], "end": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile"},');

        return new Promise(function (resolve, reject) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile.ReturnStatement", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          var count = _this5.opts.countdown;
          var countDown = setInterval(function () {
                        SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile.ReturnStatement.countDown.setInterval", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            if (!_this5.webcamActive) {
              clearInterval(countDown);
              _this5.captureInProgress = false;
                            SRTlib.send('], "end": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile.ReturnStatement.countDown.setInterval"},');

              return reject(new Error('Webcam is not active'));
            }
            if (count > 0) {
              _this5.uppy.info(count + "...", 'warning', 800);
              count--;
            } else {
              clearInterval(countDown);
              _this5.uppy.info(_this5.i18n('smile'), 'success', 1500);
              setTimeout(function () {
                                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile.ReturnStatement.countDown.setInterval.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                                SRTlib.send('], "end": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile.ReturnStatement.countDown.setInterval.setTimeout"},');

                return resolve();
                                SRTlib.send('], "end": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile.ReturnStatement.countDown.setInterval.setTimeout"},');

              }, 1500);
            }
                        SRTlib.send('], "end": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile.ReturnStatement.countDown.setInterval"},');

          }, 1000);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile.ReturnStatement"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._oneTwoThreeSmile._oneTwoThreeSmile"},');

      };
      _proto._takeSnapshot = function _takeSnapshot() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this6 = this;
        if (this.captureInProgress) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot"},');

          return;
        }
        this.captureInProgress = true;
        this.opts.onBeforeSnapshot().catch(function (err) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then.opts.onBeforeSnapshot.catch.then.opts.onBeforeSnapshot.catch", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          var message = typeof err === 'object' ? err.message : err;
          _this6.uppy.info(message, 'error', 5000);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then.opts.onBeforeSnapshot.catch.then.opts.onBeforeSnapshot.catch"},');

          return Promise.reject(new Error("onBeforeSnapshot: " + message));
                    SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then.opts.onBeforeSnapshot.catch.then.opts.onBeforeSnapshot.catch"},');

        }).then(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then.opts.onBeforeSnapshot.catch.then", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then.opts.onBeforeSnapshot.catch.then"},');

          return _this6._getImage();
                    SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then.opts.onBeforeSnapshot.catch.then"},');

        }).then(function (tagFile) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this6.captureInProgress = false;
          try {
            _this6.uppy.addFile(tagFile);
          } catch (err) {
            if (!err.isRestriction) {
              _this6.uppy.log(err);
            }
          }
                    SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then"},');

        }, function (error) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          _this6.captureInProgress = false;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then2"},');

          throw error;
                    SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot.opts.onBeforeSnapshot.catch.then.then2"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._takeSnapshot._takeSnapshot"},');

      };
      _proto._getImage = function _getImage() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getImage._getImage", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this7 = this;
        var video = this._getVideoElement();
        if (!video) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._getImage._getImage"},');

          return Promise.reject(new Error('No video element found, likely due to the Webcam tab being closed.'));
        }
        var width = video.videoWidth;
        var height = video.videoHeight;
        var canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0);
        var restrictions = this.uppy.opts.restrictions;
        var preferredImageMimeTypes = [];
        if (this.opts.preferredImageMimeType) {
          preferredImageMimeTypes = [this.opts.preferredImageMimeType];
        } else if (restrictions.allowedFileTypes) {
          preferredImageMimeTypes = restrictions.allowedFileTypes.map(toMimeType).filter(isImageMimeType);
        }
        var mimeType = preferredImageMimeTypes[0] || 'image/jpeg';
        var ext = getFileTypeExtension(mimeType) || 'jpg';
        var name = "cam-" + Date.now() + "." + ext;
                SRTlib.send('], "end": "module.exports._temp._class._proto._getImage._getImage"},');

        return canvasToBlob(canvas, mimeType).then(function (blob) {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._getImage._getImage.ReturnStatement.then", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                    SRTlib.send('], "end": "module.exports._temp._class._proto._getImage._getImage.ReturnStatement.then"},');

          return {
            source: _this7.id,
            name: name,
            data: new Blob([blob], {
              type: mimeType
            }),
            type: mimeType
          };
                    SRTlib.send('], "end": "module.exports._temp._class._proto._getImage._getImage.ReturnStatement.then"},');

        });
                SRTlib.send('], "end": "module.exports._temp._class._proto._getImage._getImage"},');

      };
      _proto.getVideo = function getVideo() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.getVideo.getVideo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var mimeType = this.recordingChunks[0].type;
        var fileExtension = getFileTypeExtension(mimeType);
        if (!fileExtension) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.getVideo.getVideo"},');

          return Promise.reject(new Error("Could not retrieve recording: Unsupported media type \"" + mimeType + "\""));
        }
        var name = "webcam-" + Date.now() + "." + fileExtension;
        var blob = new Blob(this.recordingChunks, {
          type: mimeType
        });
        var file = {
          source: this.id,
          name: name,
          data: new Blob([blob], {
            type: mimeType
          }),
          type: mimeType
        };
                SRTlib.send('], "end": "module.exports._temp._class._proto.getVideo.getVideo"},');

        return Promise.resolve(file);
                SRTlib.send('], "end": "module.exports._temp._class._proto.getVideo.getVideo"},');

      };
      _proto._focus = function _focus() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._focus._focus", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var _this8 = this;
        if (!this.opts.countdown) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto._focus._focus"},');

          return;
        }
        setTimeout(function () {
                    SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto._focus._focus.setTimeout", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          _this8.uppy.info(_this8.i18n('smile'), 'success', 1500);
                    SRTlib.send('], "end": "module.exports._temp._class._proto._focus._focus.setTimeout"},');

        }, 1000);
                SRTlib.send('], "end": "module.exports._temp._class._proto._focus._focus"},');

      };
      _proto.render = function render() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.render.render5", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (!this.webcamActive) {
          this._start();
        }
        var webcamState = this.getPluginState();
        if (!webcamState.cameraReady || !webcamState.hasCamera) {
                    SRTlib.send('], "end": "module.exports._temp._class._proto.render.render5"},');

          return h(PermissionsScreen, {
            icon: CameraIcon,
            i18n: this.i18n,
            hasCamera: webcamState.hasCamera
          });
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.render.render5"},');

        return h(CameraScreen, _extends({}, webcamState, {
          onSnapshot: this._takeSnapshot,
          onStartRecording: this._startRecording,
          onStopRecording: this._stopRecording,
          onFocus: this._focus,
          onStop: this._stop,
          i18n: this.i18n,
          modes: this.opts.modes,
          showRecordingLength: this.opts.showRecordingLength,
          supportsRecording: supportsMediaRecorder(),
          recording: webcamState.isRecording,
          mirror: this.opts.mirror,
          src: this.stream
        }));
                SRTlib.send('], "end": "module.exports._temp._class._proto.render.render5"},');

      };
      _proto.install = function install() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.install.install8", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        this.setPluginState({
          cameraReady: false,
          recordingLengthSeconds: 0
        });
        var target = this.opts.target;
        if (target) {
          this.mount(target, this);
        }
                SRTlib.send('], "end": "module.exports._temp._class._proto.install.install8"},');

      };
      _proto.uninstall = function uninstall() {
                SRTlib.send(`{ "anonymous": true, "function": "module.exports._temp._class._proto.uninstall.uninstall7", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        if (this.stream) {
          this._stop();
        }
        this.unmount();
                SRTlib.send('], "end": "module.exports._temp._class._proto.uninstall.uninstall7"},');

      };
            SRTlib.send('], "end": "module.exports._temp._class11"},');

      return Webcam;
            SRTlib.send('], "end": "module.exports._temp._class11"},');

    })(Plugin), _class.VERSION = require('../package.json').version, _temp);
        SRTlib.send('], "end": "emptyKey393"},');

  }, {
    "../package.json": 350,
    "./../../core": 248,
    "./../../utils/lib/Translator": 320,
    "./../../utils/lib/canvasToBlob": 321,
    "./../../utils/lib/getFileTypeExtension": 335,
    "./../../utils/lib/mimeTypes": 345,
    "./CameraIcon": 351,
    "./CameraScreen": 352,
    "./PermissionsScreen": 353,
    "./supportsMediaRecorder": 359,
    "preact": 160
  }],
  359: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey394", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    module.exports = function supportsMediaRecorder() {
            SRTlib.send(`{ "anonymous": true, "function": "module.exports.supportsMediaRecorder", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "module.exports.supportsMediaRecorder"},');

      return typeof MediaRecorder === 'function' && !!MediaRecorder.prototype && typeof MediaRecorder.prototype.start === 'function';
            SRTlib.send('], "end": "module.exports.supportsMediaRecorder"},');

    };
        SRTlib.send('], "end": "emptyKey394"},');

  }, {}],
  360: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey395", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    (function (Buffer) {
            SRTlib.send(`{ "anonymous": true, "function": "call44", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      'use strict';
      var base64 = require('base64-js');
      var ieee754 = require('ieee754');
      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 0x7fffffff;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
        console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
      }
      function typedArraySupport() {
                SRTlib.send(`{ "anonymous": false, "function": "typedArraySupport", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function () {
                            SRTlib.send(`{ "anonymous": true, "function": "arr.__proto__.foo", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                            SRTlib.send('], "end": "arr.__proto__.foo"},');

              return 42;
                            SRTlib.send('], "end": "arr.__proto__.foo"},');

            }
          };
                    SRTlib.send('], "end": "typedArraySupport"},');

          return arr.foo() === 42;
        } catch (e) {
                    SRTlib.send('], "end": "typedArraySupport"},');

          return false;
        }
                SRTlib.send('], "end": "typedArraySupport"},');

      }
      Object.defineProperty(Buffer.prototype, 'parent', {
        enumerable: true,
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.get7", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!Buffer.isBuffer(this)) {
                        SRTlib.send('], "end": "call.get7"},');

            return undefined;
          }
                    SRTlib.send('], "end": "call.get7"},');

          return this.buffer;
                    SRTlib.send('], "end": "call.get7"},');

        }
      });
      Object.defineProperty(Buffer.prototype, 'offset', {
        enumerable: true,
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "call.get8", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

          if (!Buffer.isBuffer(this)) {
                        SRTlib.send('], "end": "call.get8"},');

            return undefined;
          }
                    SRTlib.send('], "end": "call.get8"},');

          return this.byteOffset;
                    SRTlib.send('], "end": "call.get8"},');

        }
      });
      function createBuffer(length) {
                SRTlib.send(`{ "anonymous": false, "function": "createBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (length > K_MAX_LENGTH) {
                    SRTlib.send('], "end": "createBuffer"},');

          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        var buf = new Uint8Array(length);
        buf.__proto__ = Buffer.prototype;
                SRTlib.send('], "end": "createBuffer"},');

        return buf;
                SRTlib.send('], "end": "createBuffer"},');

      }
      function Buffer(arg, encodingOrOffset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "Buffer", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (typeof arg === 'number') {
          if (typeof encodingOrOffset === 'string') {
                        SRTlib.send('], "end": "Buffer"},');

            throw new TypeError('The "string" argument must be of type string. Received type number');
          }
                    SRTlib.send('], "end": "Buffer"},');

          return allocUnsafe(arg);
        }
                SRTlib.send('], "end": "Buffer"},');

        return from(arg, encodingOrOffset, length);
                SRTlib.send('], "end": "Buffer"},');

      }
      if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
        Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true,
          enumerable: false,
          writable: false
        });
      }
      Buffer.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "from", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (typeof value === 'string') {
                    SRTlib.send('], "end": "from"},');

          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
                    SRTlib.send('], "end": "from"},');

          return fromArrayLike(value);
        }
        if (value == null) {
                    SRTlib.send('], "end": "from"},');

          throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                    SRTlib.send('], "end": "from"},');

          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === 'number') {
                    SRTlib.send('], "end": "from"},');

          throw new TypeError('The "value" argument must not be of type number. Received type number');
        }
        var valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
                    SRTlib.send('], "end": "from"},');

          return Buffer.from(valueOf, encodingOrOffset, length);
        }
        var b = fromObject(value);
        if (b) {
                    SRTlib.send('], "end": "from"},');

          return b;
        }
        if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
                    SRTlib.send('], "end": "from"},');

          return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
        }
                SRTlib.send('], "end": "from"},');

        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
                SRTlib.send('], "end": "from"},');

      }
      Buffer.from = function (value, encodingOrOffset, length) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.from", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.from"},');

        return from(value, encodingOrOffset, length);
                SRTlib.send('], "end": "call.Buffer.from"},');

      };
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
      function assertSize(size) {
                SRTlib.send(`{ "anonymous": false, "function": "assertSize", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (typeof size !== 'number') {
                    SRTlib.send('], "end": "assertSize"},');

          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
                    SRTlib.send('], "end": "assertSize"},');

          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
                SRTlib.send('], "end": "assertSize"},');

      }
      function alloc(size, fill, encoding) {
                SRTlib.send(`{ "anonymous": false, "function": "alloc", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        assertSize(size);
        if (size <= 0) {
                    SRTlib.send('], "end": "alloc"},');

          return createBuffer(size);
        }
        if (fill !== undefined) {
                    SRTlib.send('], "end": "alloc"},');

          return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
                SRTlib.send('], "end": "alloc"},');

        return createBuffer(size);
                SRTlib.send('], "end": "alloc"},');

      }
      Buffer.alloc = function (size, fill, encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.alloc", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.alloc"},');

        return alloc(size, fill, encoding);
                SRTlib.send('], "end": "call.Buffer.alloc"},');

      };
      function allocUnsafe(size) {
                SRTlib.send(`{ "anonymous": false, "function": "allocUnsafe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        assertSize(size);
                SRTlib.send('], "end": "allocUnsafe"},');

        return createBuffer(size < 0 ? 0 : checked(size) | 0);
                SRTlib.send('], "end": "allocUnsafe"},');

      }
      Buffer.allocUnsafe = function (size) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.allocUnsafe", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.allocUnsafe"},');

        return allocUnsafe(size);
                SRTlib.send('], "end": "call.Buffer.allocUnsafe"},');

      };
      Buffer.allocUnsafeSlow = function (size) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.allocUnsafeSlow", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.allocUnsafeSlow"},');

        return allocUnsafe(size);
                SRTlib.send('], "end": "call.Buffer.allocUnsafeSlow"},');

      };
      function fromString(string, encoding) {
                SRTlib.send(`{ "anonymous": false, "function": "fromString", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (typeof encoding !== 'string' || encoding === '') {
          encoding = 'utf8';
        }
        if (!Buffer.isEncoding(encoding)) {
                    SRTlib.send('], "end": "fromString"},');

          throw new TypeError('Unknown encoding: ' + encoding);
        }
        var length = byteLength(string, encoding) | 0;
        var buf = createBuffer(length);
        var actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
                SRTlib.send('], "end": "fromString"},');

        return buf;
                SRTlib.send('], "end": "fromString"},');

      }
      function fromArrayLike(array) {
                SRTlib.send(`{ "anonymous": false, "function": "fromArrayLike", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var length = array.length < 0 ? 0 : checked(array.length) | 0;
        var buf = createBuffer(length);
        for (var i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
                SRTlib.send('], "end": "fromArrayLike"},');

        return buf;
                SRTlib.send('], "end": "fromArrayLike"},');

      }
      function fromArrayBuffer(array, byteOffset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "fromArrayBuffer", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (byteOffset < 0 || array.byteLength < byteOffset) {
                    SRTlib.send('], "end": "fromArrayBuffer"},');

          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
                    SRTlib.send('], "end": "fromArrayBuffer"},');

          throw new RangeError('"length" is outside of buffer bounds');
        }
        var buf;
        if (byteOffset === undefined && length === undefined) {
          buf = new Uint8Array(array);
        } else if (length === undefined) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        buf.__proto__ = Buffer.prototype;
                SRTlib.send('], "end": "fromArrayBuffer"},');

        return buf;
                SRTlib.send('], "end": "fromArrayBuffer"},');

      }
      function fromObject(obj) {
                SRTlib.send(`{ "anonymous": false, "function": "fromObject", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (Buffer.isBuffer(obj)) {
          var len = checked(obj.length) | 0;
          var buf = createBuffer(len);
          if (buf.length === 0) {
                        SRTlib.send('], "end": "fromObject"},');

            return buf;
          }
          obj.copy(buf, 0, 0, len);
                    SRTlib.send('], "end": "fromObject"},');

          return buf;
        }
        if (obj.length !== undefined) {
          if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                        SRTlib.send('], "end": "fromObject"},');

            return createBuffer(0);
          }
                    SRTlib.send('], "end": "fromObject"},');

          return fromArrayLike(obj);
        }
        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                    SRTlib.send('], "end": "fromObject"},');

          return fromArrayLike(obj.data);
        }
                SRTlib.send('], "end": "fromObject"},');

      }
      function checked(length) {
                SRTlib.send(`{ "anonymous": false, "function": "checked", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (length >= K_MAX_LENGTH) {
                    SRTlib.send('], "end": "checked"},');

          throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
        }
                SRTlib.send('], "end": "checked"},');

        return length | 0;
                SRTlib.send('], "end": "checked"},');

      }
      function SlowBuffer(length) {
                SRTlib.send(`{ "anonymous": false, "function": "SlowBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (+length != length) {
          length = 0;
        }
                SRTlib.send('], "end": "SlowBuffer"},');

        return Buffer.alloc(+length);
                SRTlib.send('], "end": "SlowBuffer"},');

      }
      Buffer.isBuffer = function isBuffer(b) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.isBuffer.isBuffer", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.isBuffer.isBuffer"},');

        return b != null && b._isBuffer === true && b !== Buffer.prototype;
                SRTlib.send('], "end": "call.Buffer.isBuffer.isBuffer"},');

      };
      Buffer.compare = function compare(a, b) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.compare.compare", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                    SRTlib.send('], "end": "call.Buffer.compare.compare"},');

          throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        }
        if (a === b) {
                    SRTlib.send('], "end": "call.Buffer.compare.compare"},');

          return 0;
        }
        var x = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y) {
                    SRTlib.send('], "end": "call.Buffer.compare.compare"},');

          return -1;
        }
        if (y < x) {
                    SRTlib.send('], "end": "call.Buffer.compare.compare"},');

          return 1;
        }
                SRTlib.send('], "end": "call.Buffer.compare.compare"},');

        return 0;
                SRTlib.send('], "end": "call.Buffer.compare.compare"},');

      };
      Buffer.isEncoding = function isEncoding(encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.isEncoding.isEncoding", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        switch (String(encoding).toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'latin1':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
                        SRTlib.send('], "end": "emptyKey395"},');

                        SRTlib.send('], "end": "call44"},');

                        SRTlib.send('], "end": "call.Buffer.isEncoding.isEncoding"},');

            return true;
          default:
                        SRTlib.send('], "end": "emptyKey395"},');

                        SRTlib.send('], "end": "call44"},');

                        SRTlib.send('], "end": "call.Buffer.isEncoding.isEncoding"},');

            return false;
        }
                SRTlib.send('], "end": "call.Buffer.isEncoding.isEncoding"},');

      };
      Buffer.concat = function concat(list, length) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.concat.concat", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (!Array.isArray(list)) {
                    SRTlib.send('], "end": "call.Buffer.concat.concat"},');

          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
                    SRTlib.send('], "end": "call.Buffer.concat.concat"},');

          return Buffer.alloc(0);
        }
        var i;
        if (length === undefined) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            buf = Buffer.from(buf);
          }
          if (!Buffer.isBuffer(buf)) {
                        SRTlib.send('], "end": "call.Buffer.concat.concat"},');

            throw new TypeError('"list" argument must be an Array of Buffers');
          }
          buf.copy(buffer, pos);
          pos += buf.length;
        }
                SRTlib.send('], "end": "call.Buffer.concat.concat"},');

        return buffer;
                SRTlib.send('], "end": "call.Buffer.concat.concat"},');

      };
      function byteLength(string, encoding) {
                SRTlib.send(`{ "anonymous": false, "function": "byteLength", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        if (Buffer.isBuffer(string)) {
                    SRTlib.send('], "end": "byteLength"},');

          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                    SRTlib.send('], "end": "byteLength"},');

          return string.byteLength;
        }
        if (typeof string !== 'string') {
                    SRTlib.send('], "end": "byteLength"},');

          throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
        }
        var len = string.length;
        var mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0) {
                    SRTlib.send('], "end": "byteLength"},');

          return 0;
        }
        var loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case 'ascii':
            case 'latin1':
            case 'binary':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "byteLength"},');

              return len;
            case 'utf8':
            case 'utf-8':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "byteLength"},');

              return utf8ToBytes(string).length;
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "byteLength"},');

              return len * 2;
            case 'hex':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "byteLength"},');

              return len >>> 1;
            case 'base64':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "byteLength"},');

              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                                SRTlib.send('], "end": "byteLength"},');

                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
                SRTlib.send('], "end": "byteLength"},');

      }
      Buffer.byteLength = byteLength;
      function slowToString(encoding, start, end) {
                SRTlib.send(`{ "anonymous": false, "function": "slowToString", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var loweredCase = false;
        if (start === undefined || start < 0) {
          start = 0;
        }
        if (start > this.length) {
                    SRTlib.send('], "end": "slowToString"},');

          return '';
        }
        if (end === undefined || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
                    SRTlib.send('], "end": "slowToString"},');

          return '';
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
                    SRTlib.send('], "end": "slowToString"},');

          return '';
        }
        if (!encoding) encoding = 'utf8';
        while (true) {
          switch (encoding) {
            case 'hex':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "slowToString"},');

              return hexSlice(this, start, end);
            case 'utf8':
            case 'utf-8':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "slowToString"},');

              return utf8Slice(this, start, end);
            case 'ascii':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "slowToString"},');

              return asciiSlice(this, start, end);
            case 'latin1':
            case 'binary':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "slowToString"},');

              return latin1Slice(this, start, end);
            case 'base64':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "slowToString"},');

              return base64Slice(this, start, end);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "slowToString"},');

              return utf16leSlice(this, start, end);
            default:
              if (loweredCase) {
                                SRTlib.send('], "end": "slowToString"},');

                throw new TypeError('Unknown encoding: ' + encoding);
              }
              encoding = (encoding + '').toLowerCase();
              loweredCase = true;
          }
        }
                SRTlib.send('], "end": "slowToString"},');

      }
      Buffer.prototype._isBuffer = true;
      function swap(b, n, m) {
                SRTlib.send(`{ "anonymous": false, "function": "swap", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var i = b[n];
        b[n] = b[m];
        b[m] = i;
                SRTlib.send('], "end": "swap"},');

      }
      Buffer.prototype.swap16 = function swap16() {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.swap16.swap16", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var len = this.length;
        if (len % 2 !== 0) {
                    SRTlib.send('], "end": "call.Buffer.prototype.swap16.swap16"},');

          throw new RangeError('Buffer size must be a multiple of 16-bits');
        }
        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
                SRTlib.send('], "end": "call.Buffer.prototype.swap16.swap16"},');

        return this;
                SRTlib.send('], "end": "call.Buffer.prototype.swap16.swap16"},');

      };
      Buffer.prototype.swap32 = function swap32() {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.swap32.swap32", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var len = this.length;
        if (len % 4 !== 0) {
                    SRTlib.send('], "end": "call.Buffer.prototype.swap32.swap32"},');

          throw new RangeError('Buffer size must be a multiple of 32-bits');
        }
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
                SRTlib.send('], "end": "call.Buffer.prototype.swap32.swap32"},');

        return this;
                SRTlib.send('], "end": "call.Buffer.prototype.swap32.swap32"},');

      };
      Buffer.prototype.swap64 = function swap64() {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.swap64.swap64", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var len = this.length;
        if (len % 8 !== 0) {
                    SRTlib.send('], "end": "call.Buffer.prototype.swap64.swap64"},');

          throw new RangeError('Buffer size must be a multiple of 64-bits');
        }
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
                SRTlib.send('], "end": "call.Buffer.prototype.swap64.swap64"},');

        return this;
                SRTlib.send('], "end": "call.Buffer.prototype.swap64.swap64"},');

      };
      Buffer.prototype.toString = function toString() {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.toString.toString", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var length = this.length;
        if (length === 0) {
                    SRTlib.send('], "end": "call.Buffer.prototype.toString.toString"},');

          return '';
        }
        if (arguments.length === 0) {
                    SRTlib.send('], "end": "call.Buffer.prototype.toString.toString"},');

          return utf8Slice(this, 0, length);
        }
                SRTlib.send('], "end": "call.Buffer.prototype.toString.toString"},');

        return slowToString.apply(this, arguments);
                SRTlib.send('], "end": "call.Buffer.prototype.toString.toString"},');

      };
      Buffer.prototype.toLocaleString = Buffer.prototype.toString;
      Buffer.prototype.equals = function equals(b) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.equals.equals", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (!Buffer.isBuffer(b)) {
                    SRTlib.send('], "end": "call.Buffer.prototype.equals.equals"},');

          throw new TypeError('Argument must be a Buffer');
        }
        if (this === b) {
                    SRTlib.send('], "end": "call.Buffer.prototype.equals.equals"},');

          return true;
        }
                SRTlib.send('], "end": "call.Buffer.prototype.equals.equals"},');

        return Buffer.compare(this, b) === 0;
                SRTlib.send('], "end": "call.Buffer.prototype.equals.equals"},');

      };
      Buffer.prototype.inspect = function inspect() {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.inspect.inspect", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var str = '';
        var max = exports.INSPECT_MAX_BYTES;
        str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
        if (this.length > max) str += ' ... ';
                SRTlib.send('], "end": "call.Buffer.prototype.inspect.inspect"},');

        return '<Buffer ' + str + '>';
                SRTlib.send('], "end": "call.Buffer.prototype.inspect.inspect"},');

      };
      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.compare.compare", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        if (isInstance(target, Uint8Array)) {
          target = Buffer.from(target, target.offset, target.byteLength);
        }
        if (!Buffer.isBuffer(target)) {
                    SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

          throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
        }
        if (start === undefined) {
          start = 0;
        }
        if (end === undefined) {
          end = target ? target.length : 0;
        }
        if (thisStart === undefined) {
          thisStart = 0;
        }
        if (thisEnd === undefined) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

          throw new RangeError('out of range index');
        }
        if (thisStart >= thisEnd && start >= end) {
                    SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

          return 0;
        }
        if (thisStart >= thisEnd) {
                    SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

          return -1;
        }
        if (start >= end) {
                    SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) {
                    SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

          return 0;
        }
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);
        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y) {
                    SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

          return -1;
        }
        if (y < x) {
                    SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

          return 1;
        }
                SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

        return 0;
                SRTlib.send('], "end": "call.Buffer.prototype.compare.compare"},');

      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                SRTlib.send(`{ "anonymous": false, "function": "bidirectionalIndexOf", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        if (buffer.length === 0) {
                    SRTlib.send('], "end": "bidirectionalIndexOf"},');

          return -1;
        }
        if (typeof byteOffset === 'string') {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 0x7fffffff) {
          byteOffset = 0x7fffffff;
        } else if (byteOffset < -0x80000000) {
          byteOffset = -0x80000000;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir) return -1; else {
                        SRTlib.send('], "end": "emptyKey395"},');

            return -1;
          }
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0; else {
                        SRTlib.send('], "end": "bidirectionalIndexOf"},');

            return -1;
          }
        }
        if (typeof val === 'string') {
          val = Buffer.from(val, encoding);
        }
        if (Buffer.isBuffer(val)) {
          if (val.length === 0) {
                        SRTlib.send('], "end": "bidirectionalIndexOf"},');

            return -1;
          }
                    SRTlib.send('], "end": "bidirectionalIndexOf"},');

          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === 'number') {
          val = val & 0xFF;
          if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
                            SRTlib.send('], "end": "bidirectionalIndexOf"},');

              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
                            SRTlib.send('], "end": "bidirectionalIndexOf"},');

              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
                    SRTlib.send('], "end": "bidirectionalIndexOf"},');

          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
                SRTlib.send('], "end": "bidirectionalIndexOf"},');

        throw new TypeError('val must be string, number or Buffer');
                SRTlib.send('], "end": "bidirectionalIndexOf"},');

      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                SRTlib.send(`{ "anonymous": false, "function": "arrayIndexOf", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;
        if (encoding !== undefined) {
          encoding = String(encoding).toLowerCase();
          if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) {
                            SRTlib.send('], "end": "arrayIndexOf"},');

              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i) {
                    SRTlib.send(`{ "anonymous": false, "function": "read", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

          if (indexSize === 1) {
                        SRTlib.send('], "end": "read"},');

            return buf[i];
          } else {
                        SRTlib.send('], "end": "read"},');

            return buf.readUInt16BE(i * indexSize);
          }
                    SRTlib.send('], "end": "read"},');

        }
        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength) {
                                SRTlib.send('], "end": "arrayIndexOf"},');

                return foundIndex * indexSize;
              }
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found) {
                            SRTlib.send('], "end": "arrayIndexOf"},');

              return i;
            }
          }
        }
                SRTlib.send('], "end": "arrayIndexOf"},');

        return -1;
                SRTlib.send('], "end": "arrayIndexOf"},');

      }
      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.includes.includes", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.prototype.includes.includes"},');

        return this.indexOf(val, byteOffset, encoding) !== -1;
                SRTlib.send('], "end": "call.Buffer.prototype.includes.includes"},');

      };
      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.indexOf.indexOf", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.prototype.indexOf.indexOf"},');

        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
                SRTlib.send('], "end": "call.Buffer.prototype.indexOf.indexOf"},');

      };
      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.lastIndexOf.lastIndexOf", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.prototype.lastIndexOf.lastIndexOf"},');

        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
                SRTlib.send('], "end": "call.Buffer.prototype.lastIndexOf.lastIndexOf"},');

      };
      function hexWrite(buf, string, offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "hexWrite", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        var strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed)) {
                        SRTlib.send('], "end": "hexWrite"},');

            return i;
          }
          buf[offset + i] = parsed;
        }
                SRTlib.send('], "end": "hexWrite"},');

        return i;
                SRTlib.send('], "end": "hexWrite"},');

      }
      function utf8Write(buf, string, offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "utf8Write", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

                SRTlib.send('], "end": "utf8Write"},');

        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                SRTlib.send('], "end": "utf8Write"},');

      }
      function asciiWrite(buf, string, offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "asciiWrite", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

                SRTlib.send('], "end": "asciiWrite"},');

        return blitBuffer(asciiToBytes(string), buf, offset, length);
                SRTlib.send('], "end": "asciiWrite"},');

      }
      function latin1Write(buf, string, offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "latin1Write", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

                SRTlib.send('], "end": "latin1Write"},');

        return asciiWrite(buf, string, offset, length);
                SRTlib.send('], "end": "latin1Write"},');

      }
      function base64Write(buf, string, offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "base64Write", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

                SRTlib.send('], "end": "base64Write"},');

        return blitBuffer(base64ToBytes(string), buf, offset, length);
                SRTlib.send('], "end": "base64Write"},');

      }
      function ucs2Write(buf, string, offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "ucs2Write", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

                SRTlib.send('], "end": "ucs2Write"},');

        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                SRTlib.send('], "end": "ucs2Write"},');

      }
      Buffer.prototype.write = function write(string, offset, length, encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.write.write", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (offset === undefined) {
          encoding = 'utf8';
          length = this.length;
          offset = 0;
        } else if (length === undefined && typeof offset === 'string') {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
          } else {
            encoding = length;
            length = undefined;
          }
        } else {
                    SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

          throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
        }
        var remaining = this.length - offset;
        if (length === undefined || length > remaining) length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                    SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

          throw new RangeError('Attempt to write outside buffer bounds');
        }
        if (!encoding) encoding = 'utf8';
        var loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case 'hex':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

              return hexWrite(this, string, offset, length);
            case 'utf8':
            case 'utf-8':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

              return utf8Write(this, string, offset, length);
            case 'ascii':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

              return asciiWrite(this, string, offset, length);
            case 'latin1':
            case 'binary':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

              return latin1Write(this, string, offset, length);
            case 'base64':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

              return base64Write(this, string, offset, length);
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                            SRTlib.send('], "end": "emptyKey395"},');

                            SRTlib.send('], "end": "call44"},');

                            SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase) {
                                SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

                throw new TypeError('Unknown encoding: ' + encoding);
              }
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
                SRTlib.send('], "end": "call.Buffer.prototype.write.write"},');

      };
      Buffer.prototype.toJSON = function toJSON() {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.toJSON.toJSON", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.prototype.toJSON.toJSON"},');

        return {
          type: 'Buffer',
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
                SRTlib.send('], "end": "call.Buffer.prototype.toJSON.toJSON"},');

      };
      function base64Slice(buf, start, end) {
                SRTlib.send(`{ "anonymous": false, "function": "base64Slice", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (start === 0 && end === buf.length) {
                    SRTlib.send('], "end": "base64Slice"},');

          return base64.fromByteArray(buf);
        } else {
                    SRTlib.send('], "end": "base64Slice"},');

          return base64.fromByteArray(buf.slice(start, end));
        }
                SRTlib.send('], "end": "base64Slice"},');

      }
      function utf8Slice(buf, start, end) {
                SRTlib.send(`{ "anonymous": false, "function": "utf8Slice", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        end = Math.min(buf.length, end);
        var res = [];
        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 0x80) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                  if (tempCodePoint > 0x7F) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                  if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                  if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
          } else if (codePoint > 0xFFFF) {
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
                SRTlib.send('], "end": "utf8Slice"},');

        return decodeCodePointsArray(res);
                SRTlib.send('], "end": "utf8Slice"},');

      }
      var MAX_ARGUMENTS_LENGTH = 0x1000;
      function decodeCodePointsArray(codePoints) {
                SRTlib.send(`{ "anonymous": false, "function": "decodeCodePointsArray", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
                    SRTlib.send('], "end": "decodeCodePointsArray"},');

          return String.fromCharCode.apply(String, codePoints);
        }
        var res = '';
        var i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        }
                SRTlib.send('], "end": "decodeCodePointsArray"},');

        return res;
                SRTlib.send('], "end": "decodeCodePointsArray"},');

      }
      function asciiSlice(buf, start, end) {
                SRTlib.send(`{ "anonymous": false, "function": "asciiSlice", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var ret = '';
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 0x7F);
        }
                SRTlib.send('], "end": "asciiSlice"},');

        return ret;
                SRTlib.send('], "end": "asciiSlice"},');

      }
      function latin1Slice(buf, start, end) {
                SRTlib.send(`{ "anonymous": false, "function": "latin1Slice", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var ret = '';
        end = Math.min(buf.length, end);
        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
                SRTlib.send('], "end": "latin1Slice"},');

        return ret;
                SRTlib.send('], "end": "latin1Slice"},');

      }
      function hexSlice(buf, start, end) {
                SRTlib.send(`{ "anonymous": false, "function": "hexSlice", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        var out = '';
        for (var i = start; i < end; ++i) {
          out += toHex(buf[i]);
        }
                SRTlib.send('], "end": "hexSlice"},');

        return out;
                SRTlib.send('], "end": "hexSlice"},');

      }
      function utf16leSlice(buf, start, end) {
                SRTlib.send(`{ "anonymous": false, "function": "utf16leSlice", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        var bytes = buf.slice(start, end);
        var res = '';
        for (var i = 0; i < bytes.length; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
                SRTlib.send('], "end": "utf16leSlice"},');

        return res;
                SRTlib.send('], "end": "utf16leSlice"},');

      }
      Buffer.prototype.slice = function slice(start, end) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.slice.slice", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var len = this.length;
        start = ~~start;
        end = end === undefined ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start) end = start;
        var newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
                SRTlib.send('], "end": "call.Buffer.prototype.slice.slice"},');

        return newBuf;
                SRTlib.send('], "end": "call.Buffer.prototype.slice.slice"},');

      };
      function checkOffset(offset, ext, length) {
                SRTlib.send(`{ "anonymous": false, "function": "checkOffset", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        if (offset % 1 !== 0 || offset < 0) {
                    SRTlib.send('], "end": "checkOffset"},');

          throw new RangeError('offset is not uint');
        }
        if (offset + ext > length) {
                    SRTlib.send('], "end": "checkOffset"},');

          throw new RangeError('Trying to access beyond buffer length');
        }
                SRTlib.send('], "end": "checkOffset"},');

      }
      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readUIntLE.readUIntLE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }
                SRTlib.send('], "end": "call.Buffer.prototype.readUIntLE.readUIntLE"},');

        return val;
                SRTlib.send('], "end": "call.Buffer.prototype.readUIntLE.readUIntLE"},');

      };
      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readUIntBE.readUIntBE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength, this.length);
        }
        var val = this[offset + --byteLength];
        var mul = 1;
        while (byteLength > 0 && (mul *= 0x100)) {
          val += this[offset + --byteLength] * mul;
        }
                SRTlib.send('], "end": "call.Buffer.prototype.readUIntBE.readUIntBE"},');

        return val;
                SRTlib.send('], "end": "call.Buffer.prototype.readUIntBE.readUIntBE"},');

      };
      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readUInt8.readUInt8", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt8.readUInt8"},');

        return this[offset];
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt8.readUInt8"},');

      };
      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readUInt16LE.readUInt16LE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt16LE.readUInt16LE"},');

        return this[offset] | this[offset + 1] << 8;
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt16LE.readUInt16LE"},');

      };
      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readUInt16BE.readUInt16BE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt16BE.readUInt16BE"},');

        return this[offset] << 8 | this[offset + 1];
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt16BE.readUInt16BE"},');

      };
      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readUInt32LE.readUInt32LE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt32LE.readUInt32LE"},');

        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt32LE.readUInt32LE"},');

      };
      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readUInt32BE.readUInt32BE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt32BE.readUInt32BE"},');

        return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                SRTlib.send('], "end": "call.Buffer.prototype.readUInt32BE.readUInt32BE"},');

      };
      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readIntLE.readIntLE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }
        mul *= 0x80;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                SRTlib.send('], "end": "call.Buffer.prototype.readIntLE.readIntLE"},');

        return val;
                SRTlib.send('], "end": "call.Buffer.prototype.readIntLE.readIntLE"},');

      };
      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readIntBE.readIntBE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 0x100)) {
          val += this[offset + --i] * mul;
        }
        mul *= 0x80;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                SRTlib.send('], "end": "call.Buffer.prototype.readIntBE.readIntBE"},');

        return val;
                SRTlib.send('], "end": "call.Buffer.prototype.readIntBE.readIntBE"},');

      };
      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readInt8.readInt8", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 0x80)) {
                    SRTlib.send('], "end": "call.Buffer.prototype.readInt8.readInt8"},');

          return this[offset];
        }
                SRTlib.send('], "end": "call.Buffer.prototype.readInt8.readInt8"},');

        return (0xff - this[offset] + 1) * -1;
                SRTlib.send('], "end": "call.Buffer.prototype.readInt8.readInt8"},');

      };
      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readInt16LE.readInt16LE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
                SRTlib.send('], "end": "call.Buffer.prototype.readInt16LE.readInt16LE"},');

        return val & 0x8000 ? val | 0xFFFF0000 : val;
                SRTlib.send('], "end": "call.Buffer.prototype.readInt16LE.readInt16LE"},');

      };
      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readInt16BE.readInt16BE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
                SRTlib.send('], "end": "call.Buffer.prototype.readInt16BE.readInt16BE"},');

        return val & 0x8000 ? val | 0xFFFF0000 : val;
                SRTlib.send('], "end": "call.Buffer.prototype.readInt16BE.readInt16BE"},');

      };
      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readInt32LE.readInt32LE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readInt32LE.readInt32LE"},');

        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                SRTlib.send('], "end": "call.Buffer.prototype.readInt32LE.readInt32LE"},');

      };
      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readInt32BE.readInt32BE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readInt32BE.readInt32BE"},');

        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                SRTlib.send('], "end": "call.Buffer.prototype.readInt32BE.readInt32BE"},');

      };
      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readFloatLE.readFloatLE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readFloatLE.readFloatLE"},');

        return ieee754.read(this, offset, true, 23, 4);
                SRTlib.send('], "end": "call.Buffer.prototype.readFloatLE.readFloatLE"},');

      };
      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readFloatBE.readFloatBE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readFloatBE.readFloatBE"},');

        return ieee754.read(this, offset, false, 23, 4);
                SRTlib.send('], "end": "call.Buffer.prototype.readFloatBE.readFloatBE"},');

      };
      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readDoubleLE.readDoubleLE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readDoubleLE.readDoubleLE"},');

        return ieee754.read(this, offset, true, 52, 8);
                SRTlib.send('], "end": "call.Buffer.prototype.readDoubleLE.readDoubleLE"},');

      };
      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.readDoubleBE.readDoubleBE", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
                SRTlib.send('], "end": "call.Buffer.prototype.readDoubleBE.readDoubleBE"},');

        return ieee754.read(this, offset, false, 52, 8);
                SRTlib.send('], "end": "call.Buffer.prototype.readDoubleBE.readDoubleBE"},');

      };
      function checkInt(buf, value, offset, ext, max, min) {
                SRTlib.send(`{ "anonymous": false, "function": "checkInt", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

        if (!Buffer.isBuffer(buf)) {
                    SRTlib.send('], "end": "checkInt"},');

          throw new TypeError('"buffer" argument must be a Buffer instance');
        }
        if (value > max || value < min) {
                    SRTlib.send('], "end": "checkInt"},');

          throw new RangeError('"value" argument is out of bounds');
        }
        if (offset + ext > buf.length) {
                    SRTlib.send('], "end": "checkInt"},');

          throw new RangeError('Index out of range');
        }
                SRTlib.send('], "end": "checkInt"},');

      }
      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeUIntLE.writeUIntLE", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var mul = 1;
        var i = 0;
        this[offset] = value & 0xFF;
        while (++i < byteLength && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }
                SRTlib.send('], "end": "call.Buffer.prototype.writeUIntLE.writeUIntLE"},');

        return offset + byteLength;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUIntLE.writeUIntLE"},');

      };
      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeUIntBE.writeUIntBE", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }
        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = value & 0xFF;
        while (--i >= 0 && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }
                SRTlib.send('], "end": "call.Buffer.prototype.writeUIntBE.writeUIntBE"},');

        return offset + byteLength;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUIntBE.writeUIntBE"},');

      };
      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeUInt8.writeUInt8", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
        this[offset] = value & 0xff;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt8.writeUInt8"},');

        return offset + 1;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt8.writeUInt8"},');

      };
      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeUInt16LE.writeUInt16LE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt16LE.writeUInt16LE"},');

        return offset + 2;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt16LE.writeUInt16LE"},');

      };
      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeUInt16BE.writeUInt16BE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt16BE.writeUInt16BE"},');

        return offset + 2;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt16BE.writeUInt16BE"},');

      };
      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeUInt32LE.writeUInt32LE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 0xff;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt32LE.writeUInt32LE"},');

        return offset + 4;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt32LE.writeUInt32LE"},');

      };
      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeUInt32BE.writeUInt32BE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt32BE.writeUInt32BE"},');

        return offset + 4;
                SRTlib.send('], "end": "call.Buffer.prototype.writeUInt32BE.writeUInt32BE"},');

      };
      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeIntLE.writeIntLE", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 0xFF;
        while (++i < byteLength && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }
                SRTlib.send('], "end": "call.Buffer.prototype.writeIntLE.writeIntLE"},');

        return offset + byteLength;
                SRTlib.send('], "end": "call.Buffer.prototype.writeIntLE.writeIntLE"},');

      };
      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeIntBE.writeIntBE", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }
        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 0xFF;
        while (--i >= 0 && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }
                SRTlib.send('], "end": "call.Buffer.prototype.writeIntBE.writeIntBE"},');

        return offset + byteLength;
                SRTlib.send('], "end": "call.Buffer.prototype.writeIntBE.writeIntBE"},');

      };
      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeInt8.writeInt8", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
        if (value < 0) value = 0xff + value + 1;
        this[offset] = value & 0xff;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt8.writeInt8"},');

        return offset + 1;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt8.writeInt8"},');

      };
      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeInt16LE.writeInt16LE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt16LE.writeInt16LE"},');

        return offset + 2;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt16LE.writeInt16LE"},');

      };
      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeInt16BE.writeInt16BE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt16BE.writeInt16BE"},');

        return offset + 2;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt16BE.writeInt16BE"},');

      };
      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeInt32LE.writeInt32LE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt32LE.writeInt32LE"},');

        return offset + 4;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt32LE.writeInt32LE"},');

      };
      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeInt32BE.writeInt32BE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        if (value < 0) value = 0xffffffff + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt32BE.writeInt32BE"},');

        return offset + 4;
                SRTlib.send('], "end": "call.Buffer.prototype.writeInt32BE.writeInt32BE"},');

      };
      function checkIEEE754(buf, value, offset, ext, max, min) {
                SRTlib.send(`{ "anonymous": false, "function": "checkIEEE754", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

        if (offset + ext > buf.length) {
                    SRTlib.send('], "end": "checkIEEE754"},');

          throw new RangeError('Index out of range');
        }
        if (offset < 0) {
                    SRTlib.send('], "end": "checkIEEE754"},');

          throw new RangeError('Index out of range');
        }
                SRTlib.send('], "end": "checkIEEE754"},');

      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
                SRTlib.send(`{ "anonymous": false, "function": "writeFloat", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
                SRTlib.send('], "end": "writeFloat"},');

        return offset + 4;
                SRTlib.send('], "end": "writeFloat"},');

      }
      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeFloatLE.writeFloatLE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.prototype.writeFloatLE.writeFloatLE"},');

        return writeFloat(this, value, offset, true, noAssert);
                SRTlib.send('], "end": "call.Buffer.prototype.writeFloatLE.writeFloatLE"},');

      };
      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeFloatBE.writeFloatBE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.prototype.writeFloatBE.writeFloatBE"},');

        return writeFloat(this, value, offset, false, noAssert);
                SRTlib.send('], "end": "call.Buffer.prototype.writeFloatBE.writeFloatBE"},');

      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
                SRTlib.send(`{ "anonymous": false, "function": "writeDouble", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
                SRTlib.send('], "end": "writeDouble"},');

        return offset + 8;
                SRTlib.send('], "end": "writeDouble"},');

      }
      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeDoubleLE.writeDoubleLE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.prototype.writeDoubleLE.writeDoubleLE"},');

        return writeDouble(this, value, offset, true, noAssert);
                SRTlib.send('], "end": "call.Buffer.prototype.writeDoubleLE.writeDoubleLE"},');

      };
      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.writeDoubleBE.writeDoubleBE", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

                SRTlib.send('], "end": "call.Buffer.prototype.writeDoubleBE.writeDoubleBE"},');

        return writeDouble(this, value, offset, false, noAssert);
                SRTlib.send('], "end": "call.Buffer.prototype.writeDoubleBE.writeDoubleBE"},');

      };
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.copy.copy", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (!Buffer.isBuffer(target)) {
                    SRTlib.send('], "end": "call.Buffer.prototype.copy.copy"},');

          throw new TypeError('argument should be a Buffer');
        }
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;
        if (end === start) {
                    SRTlib.send('], "end": "call.Buffer.prototype.copy.copy"},');

          return 0;
        }
        if (target.length === 0 || this.length === 0) {
                    SRTlib.send('], "end": "call.Buffer.prototype.copy.copy"},');

          return 0;
        }
        if (targetStart < 0) {
                    SRTlib.send('], "end": "call.Buffer.prototype.copy.copy"},');

          throw new RangeError('targetStart out of bounds');
        }
        if (start < 0 || start >= this.length) {
                    SRTlib.send('], "end": "call.Buffer.prototype.copy.copy"},');

          throw new RangeError('Index out of range');
        }
        if (end < 0) {
                    SRTlib.send('], "end": "call.Buffer.prototype.copy.copy"},');

          throw new RangeError('sourceEnd out of bounds');
        }
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        var len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
          this.copyWithin(targetStart, start, end);
        } else if (this === target && start < targetStart && targetStart < end) {
          for (var i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start];
          }
        } else {
          Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
        }
                SRTlib.send('], "end": "call.Buffer.prototype.copy.copy"},');

        return len;
                SRTlib.send('], "end": "call.Buffer.prototype.copy.copy"},');

      };
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
                SRTlib.send(`{ "anonymous": true, "function": "call.Buffer.prototype.fill.fill", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        if (typeof val === 'string') {
          if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
          }
          if (encoding !== undefined && typeof encoding !== 'string') {
                        SRTlib.send('], "end": "call.Buffer.prototype.fill.fill"},');

            throw new TypeError('encoding must be a string');
          }
          if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                        SRTlib.send('], "end": "call.Buffer.prototype.fill.fill"},');

            throw new TypeError('Unknown encoding: ' + encoding);
          }
          if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
              val = code;
            }
          }
        } else if (typeof val === 'number') {
          val = val & 255;
        }
        if (start < 0 || this.length < start || this.length < end) {
                    SRTlib.send('], "end": "call.Buffer.prototype.fill.fill"},');

          throw new RangeError('Out of range index');
        }
        if (end <= start) {
                    SRTlib.send('], "end": "call.Buffer.prototype.fill.fill"},');

          return this;
        }
        start = start >>> 0;
        end = end === undefined ? this.length : end >>> 0;
        if (!val) val = 0;
        var i;
        if (typeof val === 'number') {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
          var len = bytes.length;
          if (len === 0) {
                        SRTlib.send('], "end": "call.Buffer.prototype.fill.fill"},');

            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
                SRTlib.send('], "end": "call.Buffer.prototype.fill.fill"},');

        return this;
                SRTlib.send('], "end": "call.Buffer.prototype.fill.fill"},');

      };
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
                SRTlib.send(`{ "anonymous": false, "function": "base64clean", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        str = str.split('=')[0];
        str = str.trim().replace(INVALID_BASE64_RE, '');
        if (str.length < 2) {
                    SRTlib.send('], "end": "base64clean"},');

          return '';
        }
        while (str.length % 4 !== 0) {
          str = str + '=';
        }
                SRTlib.send('], "end": "base64clean"},');

        return str;
                SRTlib.send('], "end": "base64clean"},');

      }
      function toHex(n) {
                SRTlib.send(`{ "anonymous": false, "function": "toHex", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        if (n < 16) {
                    SRTlib.send('], "end": "toHex"},');

          return '0' + n.toString(16);
        }
                SRTlib.send('], "end": "toHex"},');

        return n.toString(16);
                SRTlib.send('], "end": "toHex"},');

      }
      function utf8ToBytes(string, units) {
                SRTlib.send(`{ "anonymous": false, "function": "utf8ToBytes", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];
        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 0xD7FF && codePoint < 0xE000) {
            if (!leadSurrogate) {
              if (codePoint > 0xDBFF) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 0xDC00) {
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          }
          leadSurrogate = null;
          if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else {
                        SRTlib.send('], "end": "utf8ToBytes"},');

            throw new Error('Invalid code point');
          }
        }
                SRTlib.send('], "end": "utf8ToBytes"},');

        return bytes;
                SRTlib.send('], "end": "utf8ToBytes"},');

      }
      function asciiToBytes(str) {
                SRTlib.send(`{ "anonymous": false, "function": "asciiToBytes", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 0xFF);
        }
                SRTlib.send('], "end": "asciiToBytes"},');

        return byteArray;
                SRTlib.send('], "end": "asciiToBytes"},');

      }
      function utf16leToBytes(str, units) {
                SRTlib.send(`{ "anonymous": false, "function": "utf16leToBytes", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
                SRTlib.send('], "end": "utf16leToBytes"},');

        return byteArray;
                SRTlib.send('], "end": "utf16leToBytes"},');

      }
      function base64ToBytes(str) {
                SRTlib.send(`{ "anonymous": false, "function": "base64ToBytes", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "base64ToBytes"},');

        return base64.toByteArray(base64clean(str));
                SRTlib.send('], "end": "base64ToBytes"},');

      }
      function blitBuffer(src, dst, offset, length) {
                SRTlib.send(`{ "anonymous": false, "function": "blitBuffer", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
                SRTlib.send('], "end": "blitBuffer"},');

        return i;
                SRTlib.send('], "end": "blitBuffer"},');

      }
      function isInstance(obj, type) {
                SRTlib.send(`{ "anonymous": false, "function": "isInstance", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

                SRTlib.send('], "end": "isInstance"},');

        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
                SRTlib.send('], "end": "isInstance"},');

      }
      function numberIsNaN(obj) {
                SRTlib.send(`{ "anonymous": false, "function": "numberIsNaN", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "numberIsNaN"},');

        return obj !== obj;
                SRTlib.send('], "end": "numberIsNaN"},');

      }
            SRTlib.send('], "end": "call44"},');

    }).call(this, require("buffer").Buffer);
        SRTlib.send('], "end": "emptyKey395"},');

  }, {
    "base64-js": 19,
    "buffer": 360,
    "ieee754": 131
  }],
  361: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey396", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var objectCreate = Object.create || objectCreatePolyfill;
    var objectKeys = Object.keys || objectKeysPolyfill;
    var bind = Function.prototype.bind || functionBindPolyfill;
    function EventEmitter() {
            SRTlib.send(`{ "anonymous": false, "function": "EventEmitter", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
        this._events = objectCreate(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || undefined;
            SRTlib.send('], "end": "EventEmitter"},');

    }
    module.exports = EventEmitter;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;
    var defaultMaxListeners = 10;
    var hasDefineProperty;
    try {
      var o = {};
      if (Object.defineProperty) Object.defineProperty(o, 'x', {
        value: 0
      });
      hasDefineProperty = o.x === 0;
    } catch (err) {
      hasDefineProperty = false;
    }
    if (hasDefineProperty) {
      Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
        enumerable: true,
        get: function () {
                    SRTlib.send(`{ "anonymous": true, "function": "get4", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                    SRTlib.send('], "end": "get4"},');

          return defaultMaxListeners;
                    SRTlib.send('], "end": "get4"},');

        },
        set: function (arg) {
                    SRTlib.send(`{ "anonymous": true, "function": "set2", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

          if (typeof arg !== 'number' || arg < 0 || arg !== arg) {
                        SRTlib.send('], "end": "set2"},');

            throw new TypeError('"defaultMaxListeners" must be a positive number');
          }
          defaultMaxListeners = arg;
                    SRTlib.send('], "end": "set2"},');

        }
      });
    } else {
      EventEmitter.defaultMaxListeners = defaultMaxListeners;
    }
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.setMaxListeners.setMaxListeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (typeof n !== 'number' || n < 0 || isNaN(n)) {
                SRTlib.send('], "end": "EventEmitter.prototype.setMaxListeners.setMaxListeners"},');

        throw new TypeError('"n" argument must be a positive number');
      }
      this._maxListeners = n;
            SRTlib.send('], "end": "EventEmitter.prototype.setMaxListeners.setMaxListeners"},');

      return this;
            SRTlib.send('], "end": "EventEmitter.prototype.setMaxListeners.setMaxListeners"},');

    };
    function $getMaxListeners(that) {
            SRTlib.send(`{ "anonymous": false, "function": "$getMaxListeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (that._maxListeners === undefined) {
                SRTlib.send('], "end": "$getMaxListeners"},');

        return EventEmitter.defaultMaxListeners;
      }
            SRTlib.send('], "end": "$getMaxListeners"},');

      return that._maxListeners;
            SRTlib.send('], "end": "$getMaxListeners"},');

    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.getMaxListeners.getMaxListeners", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "EventEmitter.prototype.getMaxListeners.getMaxListeners"},');

      return $getMaxListeners(this);
            SRTlib.send('], "end": "EventEmitter.prototype.getMaxListeners.getMaxListeners"},');

    };
    function emitNone(handler, isFn, self) {
            SRTlib.send(`{ "anonymous": false, "function": "emitNone", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      if (isFn) handler.call(self); else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i) listeners[i].call(self);
      }
            SRTlib.send('], "end": "emitNone"},');

    }
    function emitOne(handler, isFn, self, arg1) {
            SRTlib.send(`{ "anonymous": false, "function": "emitOne", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (isFn) handler.call(self, arg1); else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i) listeners[i].call(self, arg1);
      }
            SRTlib.send('], "end": "emitOne"},');

    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
            SRTlib.send(`{ "anonymous": false, "function": "emitTwo", "fileName": "${__filename}", "paramsNumber": 5, "calls" : [`);

      if (isFn) handler.call(self, arg1, arg2); else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2);
      }
            SRTlib.send('], "end": "emitTwo"},');

    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
            SRTlib.send(`{ "anonymous": false, "function": "emitThree", "fileName": "${__filename}", "paramsNumber": 6, "calls" : [`);

      if (isFn) handler.call(self, arg1, arg2, arg3); else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2, arg3);
      }
            SRTlib.send('], "end": "emitThree"},');

    }
    function emitMany(handler, isFn, self, args) {
            SRTlib.send(`{ "anonymous": false, "function": "emitMany", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      if (isFn) handler.apply(self, args); else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i) listeners[i].apply(self, args);
      }
            SRTlib.send('], "end": "emitMany"},');

    }
    EventEmitter.prototype.emit = function emit(type) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.emit.emit", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var er, handler, len, args, i, events;
      var doError = type === 'error';
      events = this._events;
      if (events) doError = doError && events.error == null; else if (!doError) {
                SRTlib.send('], "end": "EventEmitter.prototype.emit.emit"},');

        return false;
      }
      if (doError) {
        if (arguments.length > 1) er = arguments[1];
        if (er instanceof Error) {
                    SRTlib.send('], "end": "EventEmitter.prototype.emit.emit"},');

          throw er;
        } else {
          var err = new Error('Unhandled "error" event. (' + er + ')');
          err.context = er;
                    SRTlib.send('], "end": "EventEmitter.prototype.emit.emit"},');

          throw err;
        }
                SRTlib.send('], "end": "EventEmitter.prototype.emit.emit"},');

        return false;
      }
      handler = events[type];
      if (!handler) {
                SRTlib.send('], "end": "EventEmitter.prototype.emit.emit"},');

        return false;
      }
      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++) args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }
            SRTlib.send('], "end": "EventEmitter.prototype.emit.emit"},');

      return true;
            SRTlib.send('], "end": "EventEmitter.prototype.emit.emit"},');

    };
    function _addListener(target, type, listener, prepend) {
            SRTlib.send(`{ "anonymous": false, "function": "_addListener", "fileName": "${__filename}", "paramsNumber": 4, "calls" : [`);

      var m;
      var events;
      var existing;
      if (typeof listener !== 'function') {
                SRTlib.send('], "end": "_addListener"},');

        throw new TypeError('"listener" argument must be a function');
      }
      events = target._events;
      if (!events) {
        events = target._events = objectCreate(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener) {
          target.emit('newListener', type, listener.listener ? listener.listener : listener);
          events = target._events;
        }
        existing = events[type];
      }
      if (!existing) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else {
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' "' + String(type) + '" listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit.');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            if (typeof console === 'object' && console.warn) {
              console.warn('%s: %s', w.name, w.message);
            }
          }
        }
      }
            SRTlib.send('], "end": "_addListener"},');

      return target;
            SRTlib.send('], "end": "_addListener"},');

    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.addListener.addListener", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "EventEmitter.prototype.addListener.addListener"},');

      return _addListener(this, type, listener, false);
            SRTlib.send('], "end": "EventEmitter.prototype.addListener.addListener"},');

    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.prependListener.prependListener", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "EventEmitter.prototype.prependListener.prependListener"},');

      return _addListener(this, type, listener, true);
            SRTlib.send('], "end": "EventEmitter.prototype.prependListener.prependListener"},');

    };
    function onceWrapper() {
            SRTlib.send(`{ "anonymous": false, "function": "onceWrapper", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        switch (arguments.length) {
          case 0:
                        SRTlib.send('], "end": "emptyKey396"},');

                        SRTlib.send('], "end": "onceWrapper"},');

            return this.listener.call(this.target);
          case 1:
                        SRTlib.send('], "end": "emptyKey396"},');

                        SRTlib.send('], "end": "onceWrapper"},');

            return this.listener.call(this.target, arguments[0]);
          case 2:
                        SRTlib.send('], "end": "emptyKey396"},');

                        SRTlib.send('], "end": "onceWrapper"},');

            return this.listener.call(this.target, arguments[0], arguments[1]);
          case 3:
                        SRTlib.send('], "end": "emptyKey396"},');

                        SRTlib.send('], "end": "onceWrapper"},');

            return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);
          default:
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; ++i) args[i] = arguments[i];
            this.listener.apply(this.target, args);
        }
      }
            SRTlib.send('], "end": "onceWrapper"},');

    }
    function _onceWrap(target, type, listener) {
            SRTlib.send(`{ "anonymous": false, "function": "_onceWrap", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
      };
      var wrapped = bind.call(onceWrapper, state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
            SRTlib.send('], "end": "_onceWrap"},');

      return wrapped;
            SRTlib.send('], "end": "_onceWrap"},');

    }
    EventEmitter.prototype.once = function once(type, listener) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.once.once", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof listener !== 'function') {
                SRTlib.send('], "end": "EventEmitter.prototype.once.once"},');

        throw new TypeError('"listener" argument must be a function');
      }
      this.on(type, _onceWrap(this, type, listener));
            SRTlib.send('], "end": "EventEmitter.prototype.once.once"},');

      return this;
            SRTlib.send('], "end": "EventEmitter.prototype.once.once"},');

    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.prependOnceListener.prependOnceListener", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof listener !== 'function') {
                SRTlib.send('], "end": "EventEmitter.prototype.prependOnceListener.prependOnceListener"},');

        throw new TypeError('"listener" argument must be a function');
      }
      this.prependListener(type, _onceWrap(this, type, listener));
            SRTlib.send('], "end": "EventEmitter.prototype.prependOnceListener.prependOnceListener"},');

      return this;
            SRTlib.send('], "end": "EventEmitter.prototype.prependOnceListener.prependOnceListener"},');

    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.removeListener.removeListener", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var list, events, position, i, originalListener;
      if (typeof listener !== 'function') {
                SRTlib.send('], "end": "EventEmitter.prototype.removeListener.removeListener"},');

        throw new TypeError('"listener" argument must be a function');
      }
      events = this._events;
      if (!events) {
                SRTlib.send('], "end": "EventEmitter.prototype.removeListener.removeListener"},');

        return this;
      }
      list = events[type];
      if (!list) {
                SRTlib.send('], "end": "EventEmitter.prototype.removeListener.removeListener"},');

        return this;
      }
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = objectCreate(null); else {
          delete events[type];
          if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0) {
                    SRTlib.send('], "end": "EventEmitter.prototype.removeListener.removeListener"},');

          return this;
        }
        if (position === 0) list.shift(); else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
      }
            SRTlib.send('], "end": "EventEmitter.prototype.removeListener.removeListener"},');

      return this;
            SRTlib.send('], "end": "EventEmitter.prototype.removeListener.removeListener"},');

    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.removeAllListeners.removeAllListeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var listeners, events, i;
      events = this._events;
      if (!events) {
                SRTlib.send('], "end": "EventEmitter.prototype.removeAllListeners.removeAllListeners"},');

        return this;
      }
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0) this._events = objectCreate(null); else delete events[type];
        }
                SRTlib.send('], "end": "EventEmitter.prototype.removeAllListeners.removeAllListeners"},');

        return this;
      }
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
                SRTlib.send('], "end": "EventEmitter.prototype.removeAllListeners.removeAllListeners"},');

        return this;
      }
      listeners = events[type];
      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
            SRTlib.send('], "end": "EventEmitter.prototype.removeAllListeners.removeAllListeners"},');

      return this;
            SRTlib.send('], "end": "EventEmitter.prototype.removeAllListeners.removeAllListeners"},');

    };
    function _listeners(target, type, unwrap) {
            SRTlib.send(`{ "anonymous": false, "function": "_listeners", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

      var events = target._events;
      if (!events) {
                SRTlib.send('], "end": "_listeners"},');

        return [];
      }
      var evlistener = events[type];
      if (!evlistener) {
                SRTlib.send('], "end": "_listeners"},');

        return [];
      }
      if (typeof evlistener === 'function') {
                SRTlib.send('], "end": "_listeners"},');

        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      }
            SRTlib.send('], "end": "_listeners"},');

      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
            SRTlib.send('], "end": "_listeners"},');

    }
    EventEmitter.prototype.listeners = function listeners(type) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.listeners.listeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EventEmitter.prototype.listeners.listeners"},');

      return _listeners(this, type, true);
            SRTlib.send('], "end": "EventEmitter.prototype.listeners.listeners"},');

    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.rawListeners.rawListeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

            SRTlib.send('], "end": "EventEmitter.prototype.rawListeners.rawListeners"},');

      return _listeners(this, type, false);
            SRTlib.send('], "end": "EventEmitter.prototype.rawListeners.rawListeners"},');

    };
    EventEmitter.listenerCount = function (emitter, type) {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.listenerCount", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      if (typeof emitter.listenerCount === 'function') {
                SRTlib.send('], "end": "EventEmitter.listenerCount"},');

        return emitter.listenerCount(type);
      } else {
                SRTlib.send('], "end": "EventEmitter.listenerCount"},');

        return listenerCount.call(emitter, type);
      }
            SRTlib.send('], "end": "EventEmitter.listenerCount"},');

    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
            SRTlib.send(`{ "anonymous": false, "function": "listenerCount", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var events = this._events;
      if (events) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') {
                    SRTlib.send('], "end": "listenerCount"},');

          return 1;
        } else if (evlistener) {
                    SRTlib.send('], "end": "listenerCount"},');

          return evlistener.length;
        }
      }
            SRTlib.send('], "end": "listenerCount"},');

      return 0;
            SRTlib.send('], "end": "listenerCount"},');

    }
    EventEmitter.prototype.eventNames = function eventNames() {
            SRTlib.send(`{ "anonymous": true, "function": "EventEmitter.prototype.eventNames.eventNames", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

            SRTlib.send('], "end": "EventEmitter.prototype.eventNames.eventNames"},');

      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
            SRTlib.send('], "end": "EventEmitter.prototype.eventNames.eventNames"},');

    };
    function spliceOne(list, index) {
            SRTlib.send(`{ "anonymous": false, "function": "spliceOne", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      for (var i = index, k = i + 1, n = list.length; k < n; (i += 1, k += 1)) list[i] = list[k];
      list.pop();
            SRTlib.send('], "end": "spliceOne"},');

    }
    function arrayClone(arr, n) {
            SRTlib.send(`{ "anonymous": false, "function": "arrayClone", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

      var copy = new Array(n);
      for (var i = 0; i < n; ++i) copy[i] = arr[i];
            SRTlib.send('], "end": "arrayClone"},');

      return copy;
            SRTlib.send('], "end": "arrayClone"},');

    }
    function unwrapListeners(arr) {
            SRTlib.send(`{ "anonymous": false, "function": "unwrapListeners", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
            SRTlib.send('], "end": "unwrapListeners"},');

      return ret;
            SRTlib.send('], "end": "unwrapListeners"},');

    }
    function objectCreatePolyfill(proto) {
            SRTlib.send(`{ "anonymous": false, "function": "objectCreatePolyfill", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var F = function () {
                SRTlib.send(`{ "anonymous": false, "function": "F", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "F"},');

      };
      F.prototype = proto;
            SRTlib.send('], "end": "objectCreatePolyfill"},');

      return new F();
            SRTlib.send('], "end": "objectCreatePolyfill"},');

    }
    function objectKeysPolyfill(obj) {
            SRTlib.send(`{ "anonymous": false, "function": "objectKeysPolyfill", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var keys = [];
      for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
        keys.push(k);
      }
            SRTlib.send('], "end": "objectKeysPolyfill"},');

      return k;
            SRTlib.send('], "end": "objectKeysPolyfill"},');

    }
    function functionBindPolyfill(context) {
            SRTlib.send(`{ "anonymous": false, "function": "functionBindPolyfill", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      var fn = this;
            SRTlib.send('], "end": "functionBindPolyfill"},');

      return function () {
                SRTlib.send(`{ "anonymous": true, "function": "ReturnStatement19", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

                SRTlib.send('], "end": "ReturnStatement19"},');

        return fn.apply(context, arguments);
                SRTlib.send('], "end": "ReturnStatement19"},');

      };
            SRTlib.send('], "end": "functionBindPolyfill"},');

    }
        SRTlib.send('], "end": "emptyKey396"},');

  }, {}],
  362: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey397", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    var companionEndpoint = 'http://localhost:3020';
    if (location.hostname === 'uppy.io') {
      companionEndpoint = '//companion.uppy.io';
    }
    var COMPANION = companionEndpoint;
    module.exports = COMPANION;
        SRTlib.send('], "end": "emptyKey397"},');

  }, {}],
  363: [function (require, module, exports) {
        SRTlib.send(`{ "anonymous": true, "function": "emptyKey399", "fileName": "${__filename}", "paramsNumber": 3, "calls" : [`);

    require('es6-promise/auto');
    require('whatwg-fetch');
    var Uppy = require('./../../../../packages/@uppy/core');
    var Dashboard = require('./../../../../packages/@uppy/dashboard');
    var Webcam = require('./../../../../packages/@uppy/webcam');
    var Transloadit = require('./../../../../packages/@uppy/transloadit');
    var Instagram = require('./../../../../packages/@uppy/instagram');
    var Facebook = require('./../../../../packages/@uppy/facebook');
    var _require = require('crypto'), createHmac = _require.createHmac;
    var COMPANION = require('../env');
    function sha1(key, text) {
            SRTlib.send(`{ "anonymous": false, "function": "sha1", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

            SRTlib.send('], "end": "sha1"},');

      return createHmac('sha1', key).update(text).digest('hex');
            SRTlib.send('], "end": "sha1"},');

    }
    function initUppy(opts) {
            SRTlib.send(`{ "anonymous": false, "function": "initUppy", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

      if (opts === void 0) {
        opts = {};
      }
      if (window.uppy) {
        window.uppy.close();
      }
      var uppy = Uppy({
        debug: true,
        autoProceed: false,
        restrictions: {
          maxFileSize: 1024 * 1024 * 1024,
          maxNumberOfFiles: 2,
          minNumberOfFiles: 1,
          allowedFileTypes: ['image/*']
        },
        locale: {
          strings: {
            youCanOnlyUploadFileTypes: 'You can only upload images'
          }
        }
      });
      function getExpiration(future) {
                SRTlib.send(`{ "anonymous": false, "function": "getExpiration", "fileName": "${__filename}", "paramsNumber": 1, "calls" : [`);

                SRTlib.send('], "end": "getExpiration"},');

        return new Date(Date.now() + future).toISOString().replace('T', ' ').replace(/\.\d+Z$/, '+00:00');
                SRTlib.send('], "end": "getExpiration"},');

      }
      function getAssemblyOptions() {
                SRTlib.send(`{ "anonymous": false, "function": "getAssemblyOptions", "fileName": "${__filename}", "paramsNumber": 0, "calls" : [`);

        var hasSecret = opts.secret != null;
        var params = {
          auth: {
            key: window.TRANSLOADIT_API_KEY,
            expires: hasSecret ? getExpiration(5 * 60 * 1000) : undefined
          },
          steps: {
            resize: {
              robot: '/image/resize',
              width: 250,
              height: 250,
              resize_strategy: 'fit',
              text: [{
                text: "\xA9 " + new Date().getFullYear() + " Transloadit.com",
                size: 12,
                font: 'Ubuntu',
                color: '#eeeeee',
                valign: 'bottom',
                align: 'right',
                x_offset: 16,
                y_offset: -10
              }]
            }
          }
        };
        var signature;
        if (opts.secret) {
          params = JSON.stringify(params);
          signature = sha1(opts.secret, params);
        }
                SRTlib.send('], "end": "getAssemblyOptions"},');

        return {
          params: params,
          signature: signature
        };
                SRTlib.send('], "end": "getAssemblyOptions"},');

      }
      var instagramOptions = {
        target: Dashboard,
        companionUrl: 'https://api2.transloadit.com/companion',
        companionAllowedHosts: Transloadit.COMPANION_PATTERN
      };
      if (document.location.hash === '#enable-new-instagram') {
        instagramOptions = {
          target: Dashboard,
          companionUrl: 'https://intense-meadow-61813.herokuapp.com/'
        };
      }
      uppy.use(Transloadit, {
        getAssemblyOptions: getAssemblyOptions,
        waitForEncoding: true
      }).use(Dashboard, {
        inline: true,
        maxHeight: 400,
        target: '#uppy-dashboard-container',
        note: 'Images only, 1–2 files, up to 1 MB'
      }).use(Instagram, instagramOptions).use(Facebook, {
        target: Dashboard,
        companionUrl: COMPANION
      }).use(Webcam, {
        target: Dashboard,
        modes: ['picture']
      });
      uppy.on('transloadit:result', function (stepName, result) {
                SRTlib.send(`{ "anonymous": true, "function": "emptyKey398", "fileName": "${__filename}", "paramsNumber": 2, "calls" : [`);

        var file = uppy.getFile(result.localId);
        var resultContainer = document.createElement('div');
        resultContainer.innerHTML = "\n        <div>\n          <h3>Name: " + file.name + "</h3>\n          <img src=\"" + result.ssl_url + "\" /> <br />\n          <a href=\"" + result.ssl_url + "\" target=\"_blank\">View</a>\n        </div>\n      ";
        document.getElementById('uppy-transloadit-result').appendChild(resultContainer);
                SRTlib.send('], "end": "emptyKey398"},');

      });
            SRTlib.send('], "end": "initUppy"},');

    }
    window.initUppy = initUppy;
        SRTlib.send('], "end": "emptyKey399"},');

  }, {
    "../env": 362,
    "./../../../../packages/@uppy/core": 248,
    "./../../../../packages/@uppy/dashboard": 269,
    "./../../../../packages/@uppy/facebook": 278,
    "./../../../../packages/@uppy/instagram": 282,
    "./../../../../packages/@uppy/transloadit": 311,
    "./../../../../packages/@uppy/webcam": 358,
    "crypto": 63,
    "es6-promise/auto": 110,
    "whatwg-fetch": 235
  }]
}, {}, [363]);
